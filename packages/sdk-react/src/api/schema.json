{
  "openapi": "3.1.0",
  "info": {
    "title": "Monite Partner API",
    "version": "2024-05-25",
    "description": "The Monite REST API, for Monite partners to integrate with our solution.",
    "termsOfService": "https://monite.com/terms",
    "contact": {
      "name": "Monite team",
      "url": "https://monite.com/about/",
      "email": "developers@monite.com"
    }
  },
  "servers": [
    {
      "url": "https://api.dev.monite.com/v1",
      "description": "Development environment"
    },
    {
      "url": "https://api.sandbox.monite.com/v1",
      "description": "Sandbox environment"
    },
    {
      "url": "https://api.monite.com/v1",
      "description": "Production environment (Europe)"
    },
    {
      "url": "https://us.api.monite.com/v1",
      "description": "Production environment (North America)"
    }
  ],
  "paths": {
    "/accounting/payables": {
      "get": {
        "tags": ["Accounting data pull"],
        "summary": "Get payables list from accounting system",
        "description": "Returns a list of accounts payable invoices (bills) that exist in the entity's accounting system. This requires that an accounting connection has been previously established. Refer to the [Accounting integration guide](https://docs.monite.com/accounting/integration/index) for details.\n\nThis endpoint only provides read-only access to the accounting system's data but does not pull those payables into Monite. You can use it to review the data in the accounting system and find out which of those payables already exist or do not exist in Monite.\n\nData is actual as of the date and time of the last accounting synchronization, which is specified by the `last_pull` value in the response from `GET /accounting_connections/{connection_id}`. To make sure you are accessing the most up-to-date accounting data, you can use `POST /accounting_connections/{connection_id}/sync` to trigger on-demand synchronization before getting the list of payables.",
        "operationId": "get_accounting_payables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Number of results per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Number of results to skip before selecting items to return.",
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0, "default": 0 },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingPayableList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting/payables/{payable_id}": {
      "get": {
        "tags": ["Accounting data pull"],
        "summary": "Get payable details from accounting system",
        "description": "Returns information about an individual payable invoice (bill) that exists in the entity's accounting system. This payable may or may not also exist in Monite.",
        "operationId": "get_accounting_payables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "An internal ID of the payable invoice (bill) in the accounting system. You can get these IDs from `GET /accounting/payables`.",
            "required": true,
            "schema": { "type": "string" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccountingPayable" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting/receivables": {
      "get": {
        "tags": ["Accounting data pull"],
        "summary": "Get invoice list from accounting system",
        "description": "Returns a list of invoices that exist in the entity's accounting system. This requires that an accounting connection has been previously established. Refer to the [Accounting integration guide](https://docs.monite.com/accounting/integration/index) for details.\n\nThis endpoint only provides read-only access to the accounting system's data but does not pull those invoices into Monite. You can use it to review the data in the accounting system and find out which of those invoices already exist or do not exist in Monite.\n\nData is actual as of the date and time of the last accounting synchronization, which is specified by the `last_pull` value in the response from `GET /accounting_connections/{connection_id}`. To make sure you are accessing the most up-to-date accounting data, you can use `POST /accounting_connections/{connection_id}/sync` to trigger on-demand synchronization before getting the invoice list.",
        "operationId": "get_accounting_receivables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Number of results per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Number of results to skip before selecting items to return.",
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0, "default": 0 },
            "name": "offset",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingReceivableList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting/receivables/{invoice_id}": {
      "get": {
        "tags": ["Accounting data pull"],
        "summary": "Get invoice details from accounting system",
        "description": "Returns information about an individual invoice that exists in the entity's accounting system. This invoice may or may not also exist in Monite.",
        "operationId": "get_accounting_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "An internal ID of the invoice in the accounting system. You can get these IDs from `GET /accounting/receivables`.",
            "required": true,
            "schema": { "type": "string" },
            "name": "invoice_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingReceivable"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_connections": {
      "get": {
        "tags": ["Accounting connections"],
        "summary": "Get accounting connections",
        "description": "Get all connections",
        "operationId": "get_accounting_connections",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Accounting connections"],
        "summary": "Connect to an accounting system",
        "description": "Create new connection",
        "operationId": "post_accounting_connections",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_connections/{connection_id}": {
      "get": {
        "tags": ["Accounting connections"],
        "summary": "Get an accounting connection by ID",
        "description": "Get connection by id",
        "operationId": "get_accounting_connections_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_connections/{connection_id}/disconnect": {
      "post": {
        "tags": ["Accounting connections"],
        "summary": "Disconnect from an accounting system",
        "description": "Disconnect",
        "operationId": "post_accounting_connections_id_disconnect",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingConnectionResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_connections/{connection_id}/sync": {
      "post": {
        "tags": ["Accounting connections"],
        "summary": "Force Sync",
        "operationId": "post_accounting_connections_id_sync",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingMessageResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_synced_records": {
      "get": {
        "tags": ["Accounting synchronized records"],
        "summary": "Get Synced Records",
        "description": "Get synchronized records",
        "operationId": "get_accounting_synced_records",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/ObjectMatchTypes" },
            "name": "object_type",
            "in": "query"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page. \n\nWhen using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250.0,
              "minimum": 1.0,
              "default": 250
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/SyncRecordCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array",
              "minItems": 1
            },
            "name": "object_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncRecordResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_synced_records/{synced_record_id}": {
      "get": {
        "tags": ["Accounting synchronized records"],
        "summary": "Get Single Synced Record",
        "description": "Get synchronized record by id",
        "operationId": "get_accounting_synced_records_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "synced_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SyncRecordResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_synced_records/{synced_record_id}/push": {
      "post": {
        "tags": ["Accounting synchronized records"],
        "summary": "Push Object",
        "description": "Push object to the accounting system manually",
        "operationId": "post_accounting_synced_records_id_push",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "synced_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SyncRecordResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_tax_rates": {
      "get": {
        "tags": ["Accounting tax rates"],
        "summary": "Get tax rate accounts",
        "description": "Get all tax rate accounts",
        "operationId": "get_accounting_tax_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page. \n\nWhen using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250.0,
              "minimum": 1.0,
              "default": 250
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/TaxRateAccountCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingTaxRateListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/accounting_tax_rates/{tax_rate_id}": {
      "get": {
        "tags": ["Accounting tax rates"],
        "summary": "Get a tax rate account by ID",
        "description": "Get tax rate account by id",
        "operationId": "get_accounting_tax_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tax_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingTaxRateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ai/conversations": {
      "get": {
        "tags": ["Monite AI"],
        "summary": "Get conversations",
        "description": "Retrieve all historical conversations for the authenticated user.\n\n    This endpoint returns a paginated list of conversations sorted by recency.\n    Each conversation includes basic metadata such as ID, title, and creation timestamp.\n\n    You can control the number of results using the `limit` parameter.",
        "operationId": "get_ai_conversations",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 100 }
          },
          {
            "name": "title__icontains",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Monite AI"],
        "summary": "Create conversation",
        "description": "Create a new empty conversation for the authenticated user.\n\n    This endpoint initializes a conversation record that can be used with the chat endpoint.\n    The response includes the new conversation's unique ID which should be used in subsequent\n    chat API calls.",
        "operationId": "post_ai_conversations",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ai/conversations/{conversation_id}": {
      "get": {
        "tags": ["Monite AI"],
        "summary": "Get conversation by ID",
        "description": "Retrieve a specific conversation and its messages by ID.\n\n    This endpoint returns the conversation metadata along with all messages exchanged\n    between the user and the assistant. Messages are ordered chronologically.\n    The conversation is only accessible to the user who created it.",
        "operationId": "get_ai_conversations_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": { "description": "Conversation not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ai/conversations/{conversation_id}/messages": {
      "post": {
        "tags": ["Monite AI"],
        "summary": "Chat with the Argon assistant",
        "description": "Send a message to the Argon assistant to start a new chat or continue an existing conversation.\n\n    This endpoint allows:\n    - Continuing an existing conversation by providing a valid conversation_id\n    - Sending user messages to receive AI-generated responses\n    - Streaming responses back to the client in real-time\n\n    The response is a StreamingResponse that delivers chunks of the assistant's\n    message as they are generated. The stream contains JSON-formatted message parts,\n    token usage statistics, and completion indicators.",
        "operationId": "post_ai_conversations_id_messages",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-entity-name",
            "in": "header",
            "required": false,
            "schema": { "type": "string", "default": "Argon" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ClientMessage" }
            }
          }
        },
        "responses": {
          "201": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ai/message_feedbacks": {
      "post": {
        "tags": ["Monite AI"],
        "summary": "Mark a message as helpful or not",
        "operationId": "post_ai_message_feedbacks",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageFeedbackPayload"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ai/message_feedbacks/commentary": {
      "post": {
        "tags": ["Monite AI"],
        "summary": "Post feedback commentary for a message",
        "operationId": "post_ai_message_feedbacks_commentary",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageFeedbackCommentaryPayload"
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ai/prompts": {
      "get": {
        "tags": ["Monite AI"],
        "summary": "Get user prompts",
        "description": "Retrieve all saved prompts for the authenticated user. This endpoint returns a list of prompts saved by the user. Each prompt includes its ID, content, and creation timestamp.",
        "operationId": "get_ai_prompts",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResourceList" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Monite AI"],
        "summary": "Create a prompt",
        "description": "Save a new prompt to the user's prompt library.\n\n    This endpoint allows users to save frequently used prompts for later reuse.",
        "operationId": "post_ai_prompts",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptCreateRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ai/prompts/{prompt_id}": {
      "get": {
        "tags": ["Monite AI"],
        "summary": "Get prompt by ID",
        "description": "Retrieve a specific prompt of entity user by prompt ID.",
        "operationId": "get_ai_prompts_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": { "description": "Prompt not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Monite AI"],
        "summary": "Delete prompt by ID",
        "description": "Delete a specific prompt of entity user by prompt ID.",
        "operationId": "delete_ai_prompts_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Monite AI"],
        "summary": "Update prompt by ID",
        "description": "Update a specific prompt of entity user by prompt ID.",
        "operationId": "patch_ai_prompts_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptUpdateRequest" }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": { "description": "Prompt not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/analytics/credit_notes": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get credit notes analytics",
        "description": "Retrieve aggregated statistics for payables with different breakdowns.",
        "operationId": "get_analytics_credit_notes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CreditNoteDimensionEnum"
            },
            "name": "dimension",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/CreditNoteMetricEnum" },
            "name": "metric",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AggregationFunctionEnum"
            },
            "name": "aggregation_function",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateDimensionBreakdownEnum"
            },
            "name": "date_dimension_breakdown",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 400) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 400.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_file",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "based_on",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PayableCreditNoteStateEnum"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PayableCreditNoteStateEnum"
              },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PayableCreditNoteStateEnum"
              },
              "type": "array"
            },
            "name": "status__not_in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/OriginEnum" },
            "name": "origin",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableAnalyticsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/analytics/payables": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get payables analytics",
        "description": "Retrieve aggregated statistics for payables with different breakdowns.",
        "operationId": "get_analytics_payables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/PayableDimensionEnum" },
            "name": "dimension",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/PayableMetricEnum" },
            "name": "metric",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AggregationFunctionEnum"
            },
            "name": "aggregation_function",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateDimensionBreakdownEnum"
            },
            "name": "date_dimension_breakdown",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 400) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 400.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm].",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite before the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite on or after the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite before or on the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "Return only payables that have the specified [status](https://docs.monite.com/accounts-payable/payables/index).\n\nTo query multiple statuses at once, use the `status__in` parameter instead.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableStateEnum" }]
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Return only payables that have the specified [statuses](https://docs.monite.com/accounts-payable/payables/index).\n\nTo specify multiple statuses, repeat this parameter for each value: `status__in=draft&status__in=new`",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/PayableStateEnum" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "Return only payables with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.\n\nTo specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "Return only payables with the exact specified total amount. The amount must be specified in the minor units of currency. For example, $12.5 is represented as 1250.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) exceeds the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is less than the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is greater than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is less than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "description": "Return only payables with the specified amount.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) exceeds the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gt",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is less than the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lt",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is greater than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gte",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is less than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lte",
            "in": "query"
          },
          {
            "description": "Return only payables that use the specified currency.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }]
            },
            "name": "currency",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts with the specified name (exact match, case-sensitive).\n\nFor counterparts of `type = individual`, the full name is formatted as `first_name last_name`.",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts whose name contains the specified string (case-sensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts whose name contains the specified string (case-insensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "description": "Apply the `icontains` condition to search for the specified text in the `document_id` and `counterpart_name` fields in the payables.",
            "required": false,
            "schema": { "type": "string" },
            "name": "search_text",
            "in": "query"
          },
          {
            "description": "Return payables that are due on the specified date (YYYY-MM-DD)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date",
            "in": "query"
          },
          {
            "description": "Return payables that are due after the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "description": "Return payables that are due before the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "description": "Return payables that are due on or after the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "description": "Return payables that are due before or on the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "description": "Return payables that are issued at the specified date (YYYY-MM-DD)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at",
            "in": "query"
          },
          {
            "description": "Return payables that are issued after the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "description": "Return payables that are issued before the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "description": "Return payables that are issued on or after the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "description": "Return payables that are issued before or on the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "description": "Return a payable with the exact specified document number (case-sensitive).\n\nThe `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "description": "Return only payables whose document number (`document_id`) contains the specified string (case-sensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "description": "Return only payables whose document number (`document_id`) contains the specified string (case-insensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite by the entity user with the specified ID.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "was_created_by_user_id",
            "in": "query"
          },
          {
            "description": "Return only payables received from the counterpart with the specified ID.\n\nCounterparts that have been deleted but have associated payables will still return results here because the payables contain a frozen copy of the counterpart data.\n\nIf the specified counterpart ID does not exist and never existed, no results are returned.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "description": "Return only payables coming from the specified source.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/SourceOfPayableDataEnum" }
              ]
            },
            "name": "source_of_payable_data",
            "in": "query"
          },
          {
            "description": "Return only payables with specific OCR statuses.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OcrStatusEnum" }]
            },
            "name": "ocr_status",
            "in": "query"
          },
          {
            "description": "Search for a payable by the identifier of the line item associated with it.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "query"
          },
          {
            "description": "Search for a payable by the identifier of the purchase order associated with it.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "query"
          },
          {
            "description": "Return only payables assigned to the project with the specified ID.\n\nValid but nonexistent project IDs do not raise errors but return no results.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "Return only payables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "description": "Return only payables whose `tags` include at least one of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids",
            "in": "query"
          },
          {
            "description": "Return only payables whose `tags` do not include any of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce the results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids__not_in",
            "in": "query"
          },
          {
            "description": "Filter objects based on whether they have tags. If true, only objects with tags are returned. If false, only objects without tags are returned.",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_tags",
            "in": "query"
          },
          {
            "description": "Return only payables from a given origin ['einvoice', 'upload', 'email']",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableOriginEnum" }]
            },
            "name": "origin",
            "in": "query"
          },
          {
            "description": "Return only payables with or without attachments (files)",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_file",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableAnalyticsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/analytics/receivables": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Get receivables analytics",
        "description": "Retrieve aggregated statistics for receivables with different breakdowns.",
        "operationId": "get_analytics_receivables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ReceivableDimensionEnum"
            },
            "name": "dimension",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/ReceivableMetricEnum" },
            "name": "metric",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AggregationFunctionEnum"
            },
            "name": "aggregation_function",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateDimensionBreakdownEnum"
            },
            "name": "date_dimension_breakdown",
            "in": "query"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page. \n\nWhen using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Return only receivables with the specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.\n\nTo specify multiple IDs, repeat this parameter for each value:\n`id__in=<id1>&id__in=<id2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "Return only receivables that have the specified statuses. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).\n\nTo specify multiple statuses, repeat this parameter for each value:\n`status__in=draft&status__in=issued`",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "enum": [
                  "draft",
                  "issuing",
                  "issued",
                  "failed",
                  "accepted",
                  "expired",
                  "declined",
                  "recurring",
                  "partially_paid",
                  "paid",
                  "overdue",
                  "uncollectible",
                  "canceled"
                ]
              },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "Return only receivables created by the entity users with the specified IDs.To specify multiple user IDs, repeat this parameter for each ID:\n`entity_user_id__in=<user1>&entity_user_id__in=<user2>`\n\nIf the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.\n\nIDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "entity_user_id__in",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ReceivableCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Return only receivables whose [tags](https://docs.monite.com/common/tags) include at least one of the tags with the specified IDs.\n\nFor example, given receivables with the following tags:\n1. tagA\n2. tagB\n3. tagA, tagB\n4. tagC\n5. tagB, tagC\n\n\n`tag_ids__in=<tagA>&tag_ids__in=<tagB>` will return receivables 1, 2, 3, and 5.\n\nValid but nonexistent tag IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids__in",
            "in": "query"
          },
          {
            "description": "Return only receivables whose [tags](https://docs.monite.com/common/tags) include all of the tags with the specified IDs and optionally other tags that are not specified.\n\nFor example, given receivables with the following tags:\n1. tagA\n2. tagB\n3. tagA, tagB\n4. tagC\n5. tagA, tagB, tagC\n\n\n`tag_ids=<tagA>&tag_ids=<tagB>` will return receivables 3 and 5.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids",
            "in": "query"
          },
          {
            "description": "Return only receivables whose line items include at least one of the product IDs with the specified IDs. \n\nTo specify multiple product IDs, repeat this parameter for each ID:\n`product_ids__in=<product1>&product_ids__in=<product2>`\n\nFor example, given receivables with the following product IDs:\n1. productA\n2. productB\n3. productA, productB\n4. productC\n5. productB, productC\n\n\n`product_ids__in=<productA>&product_ids__in=<productB>` will return receivables 1, 2, 3, and 5.Valid but nonexistent product IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "product_ids__in",
            "in": "query"
          },
          {
            "description": "Return only receivables whose line items include all of the product IDs with the specified IDs and optionally other products that are not specified. \n\nTo specify multiple product IDs, repeat this parameter for each ID:\n`product_ids=<product1>&product_ids=<product2>`\n\nFor example, given receivables with the following product IDs:\n1. productA\n2. productB\n3. productA, productB\n4. productC\n5. productA, productB, productC\n\n\n`product_ids=<productA>&product_ids=<productB>` will return receivables 3 and 5.\n\n",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "product_ids",
            "in": "query"
          },
          {
            "description": "Return only receivables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ReceivableType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "issuing",
                "issued",
                "failed",
                "accepted",
                "expired",
                "declined",
                "recurring",
                "partially_paid",
                "paid",
                "overdue",
                "uncollectible",
                "canceled"
              ]
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "based_on",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesAnalyticsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get approval policies",
        "description": "Retrieve a list of all approval policies with pagination.",
        "operationId": "get_approval_policies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "query"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApprovalPolicyCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "enum": ["active", "pending"] },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "enum": ["active", "pending"] },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__ncontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Approval policies"],
        "summary": "Create an approval policy",
        "description": "Create a new approval policy.",
        "operationId": "post_approval_policies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ApprovalPolicyCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Possible responses: `Script validation error: {errors}.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get an approval policy by ID",
        "description": "Retrieve a specific approval policy.",
        "operationId": "get_approval_policies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Approval policies"],
        "summary": "Delete an approval policy",
        "description": "Delete an existing approval policy.",
        "operationId": "delete_approval_policies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Approval policies"],
        "summary": "Update an approval policy",
        "description": "Update an existing approval policy.",
        "operationId": "patch_approval_policies_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ApprovalPolicyUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalPolicyResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Possible responses: `Script validation error: {errors}.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get approval processes created from a policy",
        "description": "Retrieve a list of all approval policy processes.",
        "operationId": "get_approval_policies_id_processes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalProcessResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes/{process_id}": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get an approval process by ID",
        "description": "Retrieve a specific approval policy process.",
        "operationId": "get_approval_policies_id_processes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes/{process_id}/cancel": {
      "post": {
        "tags": ["Approval policies"],
        "summary": "Cancel an approval process",
        "description": "Cancel an ongoing approval process for a specific approval policy.",
        "operationId": "post_approval_policies_id_processes_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action is not allowed for approval policy process with id {id} because it is not in one of the following statuses: {possible_statuses}`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_policies/{approval_policy_id}/processes/{process_id}/steps": {
      "get": {
        "tags": ["Approval policies"],
        "summary": "Get the steps of an approval process",
        "description": "Retrieve a list of approval policy process steps.",
        "operationId": "get_approval_policies_id_processes_id_steps",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_policy_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "process_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalProcessStepResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests": {
      "get": {
        "tags": ["Approval requests"],
        "summary": "Get approval requests",
        "operationId": "get_approval_requests",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ApprovalRequestCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "object_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ApprovalRequestStatus" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/ApprovalRequestStatus" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "role_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ObjectType" },
            "name": "object_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/ObjectType" },
              "type": "array"
            },
            "name": "object_type__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Approval requests"],
        "summary": "Create an approval request",
        "operationId": "post_approval_requests",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalRequestCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}": {
      "get": {
        "tags": ["Approval requests"],
        "summary": "Get an approval request by ID",
        "operationId": "get_approval_requests_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}/approve": {
      "post": {
        "tags": ["Approval requests"],
        "summary": "Approve an approval request",
        "operationId": "post_approval_requests_id_approve",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}/cancel": {
      "post": {
        "tags": ["Approval requests"],
        "summary": "Cancel an approval request",
        "operationId": "post_approval_requests_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/approval_requests/{approval_request_id}/reject": {
      "post": {
        "tags": ["Approval requests"],
        "summary": "Reject an approval request",
        "operationId": "post_approval_requests_id_reject",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "approval_request_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/auth/revoke": {
      "post": {
        "tags": ["Access tokens"],
        "summary": "Revoke a token",
        "description": "Revoke an existing token immediately.",
        "operationId": "post_auth_revoke",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RevokeTokenPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/auth/token": {
      "post": {
        "tags": ["Access tokens"],
        "summary": "Create a token",
        "description": "Create a new access token based on client ID and client secret.",
        "operationId": "post_auth_token",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ObtainTokenPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AccessTokenResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/bank_accounts": {
      "get": {
        "tags": ["Entity bank accounts"],
        "summary": "Get an entity's bank accounts",
        "description": "Get all bank accounts of this entity.",
        "operationId": "get_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Entity bank accounts"],
        "summary": "Create an entity bank account",
        "description": "Adds a new bank account for the specified entity.\n\nThe minimum required fields are `currency` and `country`. Other required fields depend on the currency and country.\n\nBank accounts in African countries can use any fields or combinations of fields.\n\nFor other countries:\n* EUR accounts require `iban`.\n* GBP accounts require `account_holder_name`, `account_number`, and `sort_code`.\n* USD accounts require `account_holder_name`, `account_number`, and `routing_number`.\n* Accounts in other currencies require one of:\n  * `iban`\n  * `account_number` and `sort_code`\n  * `account_number` and `routing_number`",
        "operationId": "post_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityBankAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/complete_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Complete entity bank account verification",
        "operationId": "post_bank_accounts_complete_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteVerificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteVerificationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/start_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Start entity bank account verification",
        "description": "Start entity bank account verification. The flow depends on verification type.\nFor airwallex_plaid it generates Plaid Link token to init the Plaid SDK.",
        "operationId": "post_bank_accounts_start_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerificationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}": {
      "get": {
        "tags": ["Entity bank accounts"],
        "summary": "Get an entity's bank account",
        "description": "Retrieve a bank account by its ID.",
        "operationId": "get_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entity bank accounts"],
        "summary": "Delete an entity's bank account",
        "description": "Delete the bank account specified by its ID.",
        "operationId": "delete_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity bank accounts"],
        "summary": "Update an entity's bank account",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityBankAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/complete_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Complete verification of the provided entity bank account",
        "operationId": "post_bank_accounts_id_complete_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteRefreshVerificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRefreshVerificationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/make_default": {
      "post": {
        "tags": ["Entity bank accounts"],
        "summary": "Set an entity's bank account as the default for its currency",
        "description": "Set a bank account as the default for this entity per currency.",
        "operationId": "post_bank_accounts_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/refresh_verification": {
      "post": {
        "tags": ["Entity bank account verifications"],
        "summary": "Refresh verification of the provided entity bank account",
        "operationId": "post_bank_accounts_id_refresh_verification",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerificationRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/bank_accounts/{bank_account_id}/verifications": {
      "get": {
        "tags": ["Entity bank account verifications"],
        "summary": "Get a bank account verifications",
        "operationId": "get_bank_accounts_id_verifications",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountVerifications"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/batch_payments": {
      "post": {
        "tags": ["Batch payments"],
        "summary": "Create a batch payment",
        "operationId": "post_batch_payments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsBatchPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsBatchPaymentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/batch_payments/{batch_payment_id}": {
      "get": {
        "tags": ["Batch payments"],
        "summary": "Get batch payment by ID",
        "operationId": "get_batch_payments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "batch_payment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsBatchPaymentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/comments": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get comments",
        "description": "Get comments",
        "operationId": "get_comments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectTypeAvailableComment"
            },
            "name": "object_type",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CommentCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResourceList" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Comments"],
        "summary": "Create a comment",
        "description": "Create new comment",
        "operationId": "post_comments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentCreateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Could not notify groups: {not_valid_recipients}. Recipients dont exists`, `groups with ids: {','.join(missed_ids)} dont exists`, `Could not notify groups: {missed_groups}. Only {available_groups} are available`, `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/comments/{comment_id}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get a comment by ID",
        "description": "Get comment",
        "operationId": "get_comments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "comment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete a comment",
        "description": "Delete comment",
        "operationId": "delete_comments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "comment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Comments"],
        "summary": "Update a comment",
        "description": "Update comment",
        "operationId": "patch_comments_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "comment_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Get all counterparts",
        "operationId": "get_counterparts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The IBAN of the counterpart's bank account.",
            "required": false,
            "schema": { "type": "string", "maxLength": 34 },
            "name": "iban",
            "in": "query"
          },
          {
            "description": "The bank's sort code.",
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "example": "123456",
            "name": "sort_code",
            "in": "query"
          },
          {
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "account_number",
            "in": "query"
          },
          {
            "description": "The tax ID of the counterpart.",
            "required": false,
            "schema": { "type": "string", "maxLength": 30 },
            "name": "tax_id",
            "in": "query"
          },
          {
            "description": "The VAT ID of the counterpart.",
            "required": false,
            "schema": { "type": "string", "maxLength": 30 },
            "name": "vat_id",
            "in": "query"
          },
          {
            "description": "A list of counterpart IDs to search through.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/CounterpartCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CounterpartType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_vendor",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_customer",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "email__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.country",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.city",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.postal_code",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.state",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.line1",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "address.line2",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterparts"],
        "summary": "Create a counterpart",
        "operationId": "post_counterparts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CounterpartResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Get a counterpart",
        "operationId": "get_counterparts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CounterpartResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterparts"],
        "summary": "Delete a counterpart",
        "operationId": "delete_counterparts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterparts"],
        "summary": "Update a counterpart",
        "operationId": "patch_counterparts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartUpdatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CounterpartResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/addresses": {
      "get": {
        "tags": ["Counterpart addresses"],
        "summary": "Get a counterpart's addresses",
        "operationId": "get_counterparts_id_addresses",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart addresses"],
        "summary": "Create a counterpart address",
        "operationId": "post_counterparts_id_addresses",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CounterpartAddress" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/addresses/{address_id}": {
      "get": {
        "tags": ["Counterpart addresses"],
        "summary": "Get a counterpart's address",
        "operationId": "get_counterparts_id_addresses_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart addresses"],
        "summary": "Delete a counterpart's address",
        "operationId": "delete_counterparts_id_addresses_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart addresses"],
        "summary": "Update a counterpart's address",
        "operationId": "patch_counterparts_id_addresses_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "address_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartUpdateAddress"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/bank_accounts": {
      "get": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Get a counterpart's bank accounts",
        "operationId": "get_counterparts_id_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Create a counterpart bank account",
        "operationId": "post_counterparts_id_bank_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterpartBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}": {
      "get": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Get a counterpart's bank account",
        "operationId": "get_counterparts_id_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Delete a counterpart's bank account",
        "operationId": "delete_counterparts_id_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Update a counterpart's bank account",
        "operationId": "patch_counterparts_id_bank_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCounterpartBankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartBankAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default": {
      "post": {
        "tags": ["Counterpart bank accounts"],
        "summary": "Set a counterpart's bank account as default for its currency",
        "operationId": "post_counterparts_id_bank_accounts_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "bank_account_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/contacts": {
      "get": {
        "tags": ["Counterpart contacts"],
        "summary": "Get a counterpart's contacts",
        "operationId": "get_counterparts_id_contacts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactsResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart contacts"],
        "summary": "Create a counterpart contact",
        "operationId": "post_counterparts_id_contacts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterpartContactPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/contacts/{contact_id}": {
      "get": {
        "tags": ["Counterpart contacts"],
        "summary": "Get a counterpart's contact",
        "operationId": "get_counterparts_id_contacts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart contacts"],
        "summary": "Delete a counterpart's contact",
        "operationId": "delete_counterparts_id_contacts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart contacts"],
        "summary": "Update a counterpart's contact",
        "operationId": "patch_counterparts_id_contacts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCounterpartContactPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/contacts/{contact_id}/make_default": {
      "post": {
        "tags": ["Counterpart contacts"],
        "summary": "Set a counterpart's default contact",
        "operationId": "post_counterparts_id_contacts_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "contact_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartContactResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/einvoicing_credentials": {
      "get": {
        "tags": ["Counterpart e-invoicing credentials"],
        "summary": "Get a list of a counterpart's e-invoicing credentials",
        "operationId": "get_counterparts_id_einvoicing_credentials",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartEinvoicingCredentialResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart e-invoicing credentials"],
        "summary": "Add e-invoicing credentials for a counterpart",
        "operationId": "post_counterparts_id_einvoicing_credentials",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterpartEinvoicingCredentialPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartEinvoicingCredentialResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}": {
      "get": {
        "tags": ["Counterpart e-invoicing credentials"],
        "summary": "Get a counterpart's e-invoicing credentials by ID",
        "operationId": "get_counterparts_id_einvoicing_credentials_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credential_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartEinvoicingCredentialResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart e-invoicing credentials"],
        "summary": "Delete a counterpart's e-invoicing credentials",
        "operationId": "delete_counterparts_id_einvoicing_credentials_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credential_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart e-invoicing credentials"],
        "summary": "Update a counterpart's e-invoicing credentials",
        "operationId": "patch_counterparts_id_einvoicing_credentials_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credential_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCounterpartEinvoicingCredentialSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartEinvoicingCredentialResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/partner_metadata": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Get counterpart metadata",
        "operationId": "get_counterparts_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Counterparts"],
        "summary": "Replace counterpart metadata",
        "operationId": "put_counterparts_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PartnerMetadata" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/vat_ids": {
      "get": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Get a counterpart's VAT IDs",
        "operationId": "get_counterparts_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Create a counterpart VAT ID",
        "operationId": "post_counterparts_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CounterpartVatID" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/counterparts/{counterpart_id}/vat_ids/{vat_id}": {
      "get": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Get a counterpart's VAT ID",
        "operationId": "get_counterparts_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Delete a counterpart's VAT ID",
        "operationId": "delete_counterparts_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Counterpart VAT IDs"],
        "summary": "Update a counterpart's VAT ID",
        "operationId": "patch_counterparts_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterpartUpdateVatID"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartVatIDResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/custom_vat_rates": {
      "get": {
        "tags": ["Custom VAT rates"],
        "summary": "Get custom VAT rates",
        "operationId": "get_custom_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomVatRateResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Custom VAT rates"],
        "summary": "Create a custom VAT rate",
        "operationId": "post_custom_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CustomVatRateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomVatRateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/custom_vat_rates/{custom_vat_rate_id}": {
      "get": {
        "tags": ["Custom VAT rates"],
        "summary": "Get a custom VAT rate by ID",
        "operationId": "get_custom_vat_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "custom_vat_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomVatRateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Custom VAT rates"],
        "summary": "Delete a custom VAT rate",
        "operationId": "delete_custom_vat_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "custom_vat_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Custom VAT rates"],
        "summary": "Update a custom VAT rate",
        "operationId": "patch_custom_vat_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "custom_vat_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomVatRateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomVatRateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports": {
      "get": {
        "tags": ["Data export"],
        "summary": "Get all export jobs",
        "operationId": "get_data_exports",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/DataExportCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllDocumentExportResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Data export"],
        "summary": "Create an export job",
        "description": "Request the export of payable and receivable documents with the specified statuses.",
        "operationId": "post_data_exports",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ExportPayloadSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExportTaskResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Not all statuses are available: {missed_statuses}. Available ones: {object_statuses},`{missed_objects} are not allowed. Available only {objects}`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/extra_data": {
      "get": {
        "tags": ["Data export - extra data"],
        "summary": "Get extra fields included in data export",
        "operationId": "get_data_exports_extra_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ExportSettingCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "field_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "field_value",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtraDataResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Data export - extra data"],
        "summary": "Add a field to be included in data export",
        "operationId": "post_data_exports_extra_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtraDataCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/extra_data/{extra_data_id}": {
      "get": {
        "tags": ["Data export - extra data"],
        "summary": "Get an extra field by ID",
        "operationId": "get_data_exports_extra_data_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "extra_data_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Data export - extra data"],
        "summary": "Delete an extra field",
        "operationId": "delete_data_exports_extra_data_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "extra_data_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Data export - extra data"],
        "summary": "Update the configuration of an extra field",
        "operationId": "patch_data_exports_extra_data_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "extra_data_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtraDataUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExtraDataResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/supported_formats": {
      "get": {
        "tags": ["Data export"],
        "summary": "Get supported export formats",
        "operationId": "get_data_exports_supported_formats",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SupportedFormatSchema"
                  },
                  "type": "array",
                  "title": "Response Get Data Exports Supported Formats"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/data_exports/{document_export_id}": {
      "get": {
        "tags": ["Data export"],
        "summary": "Get the export job status by ID",
        "operationId": "get_data_exports_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_export_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentExportResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/delivery_notes": {
      "get": {
        "tags": ["Delivery notes"],
        "summary": "Get delivery notes",
        "description": "Get all delivery notes with filtering and pagination.",
        "operationId": "get_delivery_notes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/DeliveryNoteCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/DeliveryNoteStatusEnum" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DeliveryNoteStatusEnum"
              },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "based_on",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "based_on_document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "based_on_document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "based_on_document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "delivery_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "delivery_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "delivery_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "delivery_date__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryNoteResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Delivery notes"],
        "summary": "Create a delivery note",
        "operationId": "post_delivery_notes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  { "$ref": "#/components/schemas/DeliveryNoteCreateRequest" },
                  {
                    "$ref": "#/components/schemas/DeliveryNoteCreateBasedOnRequest"
                  }
                ],
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryNoteResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/delivery_notes/{delivery_note_id}": {
      "get": {
        "tags": ["Delivery notes"],
        "summary": "Get a delivery note by ID",
        "operationId": "get_delivery_notes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "delivery_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryNoteResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Delivery notes"],
        "summary": "Delete a delivery note",
        "operationId": "delete_delivery_notes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "delivery_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Delivery notes"],
        "summary": "Update a delivery note",
        "operationId": "patch_delivery_notes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "delivery_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryNoteUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryNoteResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/delivery_notes/{delivery_note_id}/cancel": {
      "post": {
        "tags": ["Delivery notes"],
        "summary": "Cancel a delivery note",
        "operationId": "post_delivery_notes_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "delivery_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryNoteResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/delivery_notes/{delivery_note_id}/mark_as_delivered": {
      "post": {
        "tags": ["Delivery notes"],
        "summary": "Mark a delivery note as delivered",
        "operationId": "post_delivery_notes_id_mark_as_delivered",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "delivery_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryNoteResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Get PDF templates",
        "description": "This API call returns all supported templates with language codes.",
        "operationId": "get_document_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/system": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Get built-in PDF templates",
        "description": "This API call returns all supported system templates with language codes.",
        "operationId": "get_document_templates_system",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/{document_template_id}": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Get a PDF template by ID",
        "operationId": "get_document_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateReceivableResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/{document_template_id}/make_default": {
      "post": {
        "tags": ["PDF templates"],
        "summary": "Set the default PDF template",
        "operationId": "post_document_templates_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateReceivableResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/document_templates/{document_template_id}/preview": {
      "get": {
        "tags": ["PDF templates"],
        "summary": "Preview a PDF template",
        "description": "Returns a sample PDF invoice generated using the specified template.",
        "operationId": "get_document_templates_id_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "document_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/pdf": {} }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/einvoice_search": {
      "get": {
        "tags": ["E-invoicing Search"],
        "summary": "Check if e-invoicing credentials exist in the network.",
        "operationId": "get_einvoice_search",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "maxLength": 255, "minLength": 1 },
            "name": "network_identifier",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/EinvoiceSchemaTypeEnum" },
            "name": "network_schema",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartEinvoicingCredentialExistenceResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/einvoicing_connections": {
      "get": {
        "tags": ["E-invoicing connections"],
        "summary": "Get all e-invoicing connections",
        "operationId": "get_einvoicing_connections",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EInvoicingRetrieveListData"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["E-invoicing connections"],
        "summary": "Create an e-invoicing connection",
        "operationId": "post_einvoicing_connections",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EinvoicingConnectionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EinvoicingConnectionResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/einvoicing_connections/{einvoicing_connection_id}": {
      "get": {
        "tags": ["E-invoicing connections"],
        "summary": "Get an e-invoicing connection by ID",
        "operationId": "get_einvoicing_connections_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "einvoicing_connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EinvoicingConnectionResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["E-invoicing connections"],
        "summary": "Delete an e-invoicing connection",
        "operationId": "delete_einvoicing_connections_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "einvoicing_connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["E-invoicing connections"],
        "summary": "Update an e-invoicing connection",
        "operationId": "patch_einvoicing_connections_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "einvoicing_connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EinvoicingConnectionUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EinvoicingConnectionResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/einvoicing_connections/{einvoicing_connection_id}/network_credentials": {
      "post": {
        "tags": ["E-invoicing connections"],
        "summary": "Create an e-invoicing credential",
        "operationId": "post_einvoicing_connections_id_network_credentials",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "einvoicing_connection_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EinvoicingNetworkCredentialsCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EinvoicingNetworkCredentialsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities": {
      "post": {
        "tags": ["Entities"],
        "summary": "Create an entity",
        "description": "Create a new entity from the specified values.",
        "operationId": "post_entities",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateEntityRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entities"],
        "summary": "Get all entities",
        "description": "Retrieve a list of all entities.",
        "operationId": "get_entities",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderEnum",
              "default": "asc"
            },
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page."
          },
          {
            "name": "pagination_token",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EntityCursorFields" },
                { "type": "null" }
              ]
            },
            "description": "The field to sort the results by. Typically used together with the `order` parameter."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EntityTypeEnum" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "id__in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "id__not_in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "email__in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "email__not_in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "array", "items": { "type": "string" } },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EntityStatusEnum" },
                { "type": "null" }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/me": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get the current entity",
        "description": "Deprecated. Use `GET /entity_users/my_entity` instead.",
        "operationId": "get_entities_me",
        "deprecated": true,
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update the current entity",
        "description": "Deprecated. Use `PATCH /entity_users/my_entity` instead.",
        "operationId": "patch_entities_me",
        "deprecated": true,
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEntityRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get an entity",
        "description": "Retrieve an entity by its ID.",
        "operationId": "get_entities_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update an entity",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_entities_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEntityRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/activate": {
      "post": {
        "tags": ["Entities"],
        "summary": "Activate an entity",
        "description": "Activate an entity to allow it to perform any operations.",
        "operationId": "post_entities_id_activate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/deactivate": {
      "post": {
        "tags": ["Entities"],
        "summary": "Deactivate an entity",
        "description": "Deactivate an entity to stop it from performing any operations.",
        "operationId": "post_entities_id_deactivate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/documents": {
      "post": {
        "tags": ["Onboarding documents"],
        "summary": "Update entity onboarding documents",
        "description": "Deprecated. Use `POST /onboarding_documents` instead. Update the onboarding documents of an entity.",
        "operationId": "post_entities_id_documents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "schema_name": "EntityOnboardingDocuments",
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/logo": {
      "put": {
        "tags": ["Entities"],
        "summary": "Upload an entity logo",
        "description": "Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.",
        "operationId": "put_entities_id_logo",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_put_entities_id_logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileSchema2" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "schema_name": "EntityLogoUploadRequest",
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entities"],
        "summary": "Delete an entity's logo",
        "operationId": "delete_entities_id_logo",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/onboarding_data": {
      "put": {
        "tags": ["Entity onboarding data"],
        "summary": "Update entity onboarding data",
        "description": "Deprecated. Use `PATCH /entities/{entity_id}/onboarding_data` instead. Update entity onboarding data.",
        "operationId": "put_entities_id_onboarding_data",
        "deprecated": true,
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityOnboardingDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityOnboardingDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity onboarding data"],
        "summary": "Patch entity onboarding data",
        "operationId": "patch_entities_id_onboarding_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityOnboardingDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityOnboardingDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entity onboarding data"],
        "summary": "Get entity onboarding data",
        "operationId": "get_entities_id_onboarding_data",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityOnboardingDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/onboarding_requirements": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get onboarding requirements",
        "description": "Deprecated. Use `GET /onboarding_requirements` instead. Check the information required to complete the onboarding process.",
        "operationId": "get_entities_id_onboarding_requirements",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingRequirementsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/partner_metadata": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get entity metadata",
        "description": "Retrieve a metadata object associated with this entity, usually in a JSON format.",
        "operationId": "get_entities_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Entities"],
        "summary": "Replace entity metadata",
        "description": "Fully replace the current metadata object with the specified instance.",
        "operationId": "put_entities_id_partner_metadata",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PartnerMetadata" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerMetadataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/payment_methods": {
      "get": {
        "tags": ["Payment methods"],
        "summary": "Get Enabled Payment Methods",
        "description": "Get all enabled payment methods.",
        "operationId": "get_entities_id_payment_methods",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingPaymentMethodsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Payment methods"],
        "summary": "Enable Payment Methods",
        "description": "Set which payment methods should be enabled.",
        "operationId": "put_entities_id_payment_methods",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EnabledPaymentMethods" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingPaymentMethodsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/settings": {
      "patch": {
        "tags": ["Entities"],
        "summary": "Update entity settings",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_entities_id_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PatchSettingsPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SettingsResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entities"],
        "summary": "Get entity settings",
        "description": "Retrieve all settings for this entity.",
        "operationId": "get_entities_id_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["ea837e28-509b-4b6a-a600-d54b6aa0b1f5"]
            },
            "description": "A unique ID to specify the entity."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SettingsResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/settings/next_document_numbers": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get the next document numbers for an entity",
        "operationId": "get_entities_id_settings_next_document_numbers",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Unique ID of the entity",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NextDocumentNumbers" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/vat_ids": {
      "post": {
        "tags": ["Entity VAT IDs"],
        "summary": "Create an entity VAT ID",
        "operationId": "post_entities_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EntityVatID" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityVatIDResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entity VAT IDs"],
        "summary": "Get an entity's VAT IDs",
        "operationId": "get_entities_id_vat_ids",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityVatIDResourceList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entities/{entity_id}/vat_ids/{id}": {
      "patch": {
        "tags": ["Entity VAT IDs"],
        "summary": "Update an entity's VAT ID",
        "operationId": "patch_entities_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EntityUpdateVatID" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityVatIDResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entity VAT IDs"],
        "summary": "Get an entity's VAT ID",
        "operationId": "get_entities_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityVatIDResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entity VAT IDs"],
        "summary": "Delete an entity's VAT ID",
        "operationId": "delete_entities_id_vat_ids_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users": {
      "post": {
        "tags": ["Entity users"],
        "summary": "Create an entity user",
        "description": "Create a new entity user from the specified values.",
        "operationId": "post_entity_users",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntityUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entity users"],
        "summary": "Get all entity users",
        "description": "Retrieve a list of all entity users.",
        "operationId": "get_entity_users",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderEnum",
              "default": "asc"
            },
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page."
          },
          {
            "name": "pagination_token",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EntityUserCursorFields" },
                { "type": "null" }
              ]
            },
            "description": "The field to sort the results by. Typically used together with the `order` parameter."
          },
          {
            "name": "id__in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "id__not_in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "role_id__in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "login",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "first_name",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "name__istartswith",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUserPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/me": {
      "get": {
        "tags": ["Entity users"],
        "summary": "Get current entity user",
        "description": "Retrieve an entity user by its ID.",
        "operationId": "get_entity_users_me",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity users"],
        "summary": "Update current entity user",
        "description": "Change the specified fields with provided values.",
        "operationId": "patch_entity_users_me",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeEntityUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/my_entity": {
      "get": {
        "tags": ["Entities"],
        "summary": "Get an entity of this user",
        "description": "Retrieves information of an entity, which this entity user belongs to.",
        "operationId": "get_entity_users_my_entity",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entities"],
        "summary": "Update an entity of this user",
        "description": "Update information of an entity, which this entity user belongs to.",
        "operationId": "patch_entity_users_my_entity",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEntityRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/my_role": {
      "get": {
        "tags": ["Entity users"],
        "summary": "Get a role of this entity user",
        "description": "Retrieves information of a role assigned to this entity user.",
        "operationId": "get_entity_users_my_role",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/entity_users/{entity_user_id}": {
      "get": {
        "tags": ["Entity users"],
        "summary": "Get an entity user",
        "description": "Retrieve an entity user by its ID.",
        "operationId": "get_entity_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity users"],
        "summary": "Update an entity user",
        "description": "Change the specified fields with provided values.",
        "operationId": "patch_entity_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntityUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EntityUserResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entity users"],
        "summary": "Delete an entity user",
        "operationId": "delete_entity_users_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Get events",
        "description": "Returns all webhook events that were triggered for the specified entity based on your enabled webhook subscriptions. These are the same events that were sent to your configured webhook listener endpoints, aggregated into a single list. Results can be filtered by the related object type or time period.\n\nYou can use this to get the missed events for the time periods when your webhook listener was temporarily unavailable.\n\nWe guarantee access to event data only from the last three months. Earlier events may be unavailable.",
        "operationId": "get_events",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderEnum",
              "default": "asc"
            },
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page."
          },
          {
            "name": "pagination_token",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/EventCursorFields" },
                { "type": "null" }
              ]
            },
            "description": "The field to sort the results by. Typically used together with the `order` parameter."
          },
          {
            "name": "object_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/WebhookObjectType" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPaginationResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/events/{event_id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Get an event by ID",
        "description": "Get a webhook event by its ID. The data is the same as you might have previously received in a webhook sent by Monite to your server.",
        "operationId": "get_events_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "description": "ID of the webhook event. This is the `id` value you might have received in a webhook or retrieved from `GET /events`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/files": {
      "post": {
        "tags": ["Files"],
        "summary": "Upload a file",
        "operationId": "post_files",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/UploadFile" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Files"],
        "summary": "Get files",
        "operationId": "get_files",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "id__in",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "format": "uuid" },
              "maxItems": 250
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FilesResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/files/{file_id}": {
      "delete": {
        "tags": ["Files"],
        "summary": "Delete a file",
        "operationId": "delete_files_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Files"],
        "summary": "Get a file by ID",
        "operationId": "get_files_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/financing_invoices": {
      "get": {
        "tags": ["Financing"],
        "summary": "Get invoices",
        "description": "Returns a list of invoices requested for financing",
        "operationId": "get_financing_invoices",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/FinancingInvoiceCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "ID of a payable or receivable invoice. ",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "invoice_id",
            "in": "query"
          },
          {
            "description": "List of invoice IDs. ",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "invoice_id__in",
            "in": "query"
          },
          {
            "description": "Status of the invoice. ",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/WCInvoiceStatus" }]
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "List of invoice statuses. ",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/WCInvoiceStatus" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "Type of the invoice. payable or receivable. ",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/FinancingInvoiceType" }]
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "List of invoice types. ",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/FinancingInvoiceType" },
              "type": "array"
            },
            "name": "type__in",
            "in": "query"
          },
          {
            "description": "Document ID of the invoice. ",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "description": "List of document IDs. ",
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "document_id__in",
            "in": "query"
          },
          {
            "description": "Issue date greater than. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gt",
            "in": "query"
          },
          {
            "description": "Issue date less than. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lt",
            "in": "query"
          },
          {
            "description": "Issue date greater than or equal. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gte",
            "in": "query"
          },
          {
            "description": "Issue date less than or equal. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lte",
            "in": "query"
          },
          {
            "description": "Due date greater than. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "description": "Due date less than. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "description": "Due date greater than or equal. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "description": "Due date less than or equal. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "description": "Created date greater than. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Created date less than. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Created date greater than or equal. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "description": "Created date less than or equal. ",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "Total amount of the invoice in minor units. ",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "description": "Total amount greater than. ",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "description": "Total amount less than. ",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "description": "Total amount greater than or equal. ",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "description": "Total amount less than or equal. ",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancingInvoiceListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Financing"],
        "summary": "Request financing for invoices",
        "description": "Returns a session token and a connect token to open Kanmon SDK for confirming invoice details.",
        "operationId": "post_financing_invoices",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FinancingPushInvoicesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancingPushInvoicesResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/financing_offers": {
      "get": {
        "tags": ["Financing"],
        "summary": "Get financing offers and the business status",
        "description": "Returns a list of financing offers and the business's onboarding status",
        "operationId": "get_financing_offers",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancingOffersResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/financing_tokens": {
      "post": {
        "tags": ["Financing"],
        "summary": "Create a token for Kanmon SDK",
        "description": "Returns a token for Kanmon SDK. Creates a business and user on Kanmon if not already exist.",
        "operationId": "post_financing_tokens",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancingTokenResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/frontend/bank_account_masks": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get bank account masks for supported currencies",
        "description": "Get bank account masks for supported currencies",
        "operationId": "get_frontend_bank_account_masks",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/OnboardingBankAccountMask"
                  },
                  "type": "object",
                  "title": "Response Get Frontend Bank Account Masks"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/frontend/bank_accounts_currency_to_supported_countries": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get currency to allowed countries mapping",
        "description": "Get currency to allowed countries mapping",
        "operationId": "get_frontend_bank_accounts_currency_to_supported_countries",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      "$ref": "#/components/schemas/AllowedCountries"
                    },
                    "type": "array"
                  },
                  "type": "object",
                  "title": "Response Get Frontend Bank Accounts Currency To Supported Countries"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/frontend/document_type_descriptions": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get descriptions of allowed verification documents by country",
        "description": "Get descriptions of allowed verification documents by country",
        "operationId": "get_frontend_document_type_descriptions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "$ref": "#/components/schemas/AllowedCountries" },
            "name": "country",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingDocumentsDescriptions"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/frontend/onboarding_requirements": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get onboarding requirements",
        "description": "Get onboarding requirements for the entity",
        "operationId": "get_frontend_onboarding_requirements",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalOnboardingRequirementsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/frontend/person_mask": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get person mask based on relationships",
        "description": "Get person mask based on relationships",
        "operationId": "get_frontend_person_mask",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "items": { "$ref": "#/components/schemas/Relationship" },
              "type": "array"
            },
            "name": "relationships",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/AllowedCountries" },
            "name": "country",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingPersonMask"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/accounting_connections/{connection_id}/sync_status": {
      "get": {
        "tags": ["Internal"],
        "summary": "Get Sync Status",
        "description": "Get all sync statuses\nNot production ready\nFor test purposes only, internal use only\nApi could be changed",
        "operationId": "get_internal_accounting_connections_id_sync_status",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "connection_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page. \n\nWhen using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250.0,
              "minimum": 1.0,
              "default": 250
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/SyncRecordCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/SyncStatus" },
            "name": "sync_status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ObjectMatchTypes" },
            "name": "type",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncStatusResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/counterparts/ai_suggestions": {
      "get": {
        "tags": ["Counterparts"],
        "summary": "Find similar counterparts",
        "operationId": "get_internal_counterparts_ai_suggestions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The address of the counterpart.",
            "required": false,
            "schema": { "type": "string", "maxLength": 512 },
            "name": "address",
            "in": "query"
          },
          {
            "description": "The bank account of the counterpart.",
            "required": false,
            "schema": { "type": "string", "maxLength": 34 },
            "name": "bank_account",
            "in": "query"
          },
          {
            "description": "The name of the counterpart.",
            "required": true,
            "schema": { "type": "string", "maxLength": 255 },
            "name": "name",
            "in": "query"
          },
          {
            "description": "The VAT ID of the counterpart.",
            "required": false,
            "schema": { "type": "string", "maxLength": 32 },
            "name": "vat",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterpartAiSuggestionsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/currencies": {
      "get": {
        "tags": ["Currencies internal", "Internal"],
        "summary": "Get Currencies",
        "operationId": "get_internal_currencies",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CurrencyDetails"
                  },
                  "type": "object",
                  "title": "Response Get Internal Currencies"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/entities/{entity_id}/logo": {
      "get": {
        "tags": ["Entities", "Internal"],
        "summary": "Get entity logo",
        "description": "Retrieve info about entity logo.",
        "operationId": "get_internal_entities_id_logo",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FileResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}": {
      "get": {
        "tags": ["Onboarding links"],
        "summary": "Get Onboarding Link",
        "operationId": "get_internal_onboarding_links_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinkInternalResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/airwallex_component": {
      "get": {
        "tags": ["Onboarding links"],
        "summary": "Get Onboarding Link Airwallex Component Data",
        "operationId": "get_internal_onboarding_links_id_airwallex_component",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Onboarding links"],
        "summary": "Update Onboarding Link Airwallex Component Data",
        "operationId": "patch_internal_onboarding_links_id_airwallex_component",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Generate Authorization Code",
        "operationId": "post_internal_onboarding_links_id_airwallex_component_auth",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentCodeResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/request_otp": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Request Otp",
        "operationId": "post_internal_onboarding_links_id_request_otp",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPhoneNumberPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/stripe": {
      "get": {
        "tags": ["Onboarding links"],
        "summary": "Get Onboarding Link Stripe Data",
        "operationId": "get_internal_onboarding_links_id_stripe",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksStripeDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Onboarding links"],
        "summary": "Update Onboarding Link Stripe Data",
        "operationId": "patch_internal_onboarding_links_id_stripe",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingLinksStripeData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksStripeDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/onboarding_links/{onboarding_link_id}/verify_otp": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Verify Otp",
        "operationId": "post_internal_onboarding_links_id_verify_otp",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "onboarding_link_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberVerificationCheckPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinksAccessTokenResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payables/{payable_id}/revert_payment": {
      "post": {
        "tags": ["Payables internal"],
        "summary": "Reverts all payments made to a payable",
        "description": "This internal endpoint used in reconciliation service to revert payments made to a payable",
        "operationId": "post_internal_payables_id_revert_payment",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RevertPaymentsPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/authorize": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Authorize Payment Link",
        "operationId": "post_internal_payment_intents_id_authorize",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthPaymentIntentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthPaymentIntentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Authorize Payment Link Embedded",
        "operationId": "post_internal_payment_intents_id_authorize_embedded",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmbeddedAuthPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedAuthorizationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}": {
      "get": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Get Consent Data",
        "operationId": "get_internal_payment_intents_id_authorize_embedded_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "consent_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedAuthorizationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Authorize Payment Link Embedded Set Sca Code",
        "operationId": "post_internal_payment_intents_id_authorize_embedded_id_set_sca_code",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "consent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetScaCodePayload" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedAuthorizationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Payment consent rejected. You need to reinitialize session to start again",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Authorize Payment Link Embedded Set Sca Method",
        "operationId": "post_internal_payment_intents_id_authorize_embedded_id_set_sca_method",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "consent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetScaMethodPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedAuthorizationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/banks": {
      "get": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Get Banks For Payment Intent",
        "operationId": "get_internal_payment_intents_id_banks",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SupportedPaymentAuthorizationFlow"
              },
              "type": "array",
              "default": ["redirect"]
            },
            "name": "auth_flow",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BanksResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/confirm_payment": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Confirm Payment",
        "operationId": "post_internal_payment_intents_id_confirm_payment",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "user-agent",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodsConfirmPaymentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsConfirmResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_intents/{payment_intent_id}/payments": {
      "post": {
        "tags": ["Payment intents internal", "Internal"],
        "summary": "Create Yapily Payment",
        "operationId": "post_internal_payment_intents_id_payments",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_links/{payment_link_id}": {
      "get": {
        "tags": ["Payment links", "Internal"],
        "summary": "Get Payment Link",
        "operationId": "get_internal_payment_links_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalPaymentLinkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_links/{payment_link_id}/regenerate": {
      "post": {
        "tags": ["Payment links", "Internal"],
        "summary": "Regenerate Payment Link",
        "operationId": "post_internal_payment_links_id_regenerate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalPaymentLinkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/payment_page_theme": {
      "get": {
        "tags": ["Internal"],
        "summary": "Get partner payment page theme settings for frontend",
        "operationId": "get_internal_payment_page_theme",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "partner_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPageThemeWithFooter"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/quotes/{receivable_id}": {
      "get": {
        "tags": ["Quotes internal"],
        "summary": "Get Quote By Id",
        "operationId": "get_internal_quotes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalQuoteResponsePayload"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/quotes/{receivable_id}/accept": {
      "post": {
        "tags": ["Quotes internal"],
        "summary": "Accept Quote",
        "operationId": "post_internal_quotes_id_accept",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuoteAcceptRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResult" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/quotes/{receivable_id}/decline": {
      "post": {
        "tags": ["Quotes internal"],
        "summary": "Decline Quote",
        "operationId": "post_internal_quotes_id_decline",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableDeclinePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResult" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/settings": {
      "get": {
        "tags": ["Internal"],
        "summary": "Get partner settings for frontend",
        "description": "Retrieve settings necessary for frontend for this partner.",
        "operationId": "get_internal_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "partner_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerProjectSettingsPayload-Output"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/validators/line_items": {
      "post": {
        "tags": ["Internal"],
        "summary": "Validate Line Items",
        "description": "Validate if line items for bill/invoice may be pushed to accounting",
        "operationId": "post_internal_validators_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineItemsValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/vat_rates": {
      "get": {
        "tags": ["VAT rates internal"],
        "summary": "Get All Vat Rates",
        "operationId": "get_internal_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/VatRateStatusEnum" },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "valid_from",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "example": "2023-06-04",
            "name": "valid_until",
            "in": "query"
          },
          {
            "description": "Country code",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }]
            },
            "name": "country",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VatRateListResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["VAT rates internal"],
        "summary": "Create Vat Rates",
        "operationId": "post_internal_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VatRateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VatRateResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/internal/vat_rates/{vat_rate_id}": {
      "delete": {
        "tags": ["VAT rates internal"],
        "summary": "Delete Vat Rates",
        "operationId": "delete_internal_vat_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["VAT rates internal"],
        "summary": "Update Vat Rates",
        "operationId": "patch_internal_vat_rates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "vat_rate_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VatRateUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ledger_accounts": {
      "get": {
        "tags": ["Ledger accounts"],
        "summary": "Get ledger accounts",
        "description": "Get all ledger accounts",
        "operationId": "get_ledger_accounts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page. \n\nWhen using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250.0,
              "minimum": 1.0,
              "default": 250
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/LedgerAccountCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerAccountListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ledger_accounts/{ledger_account_id}": {
      "get": {
        "tags": ["Ledger accounts"],
        "summary": "Get a ledger account by ID",
        "description": "Get ledger account by id",
        "operationId": "get_ledger_accounts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "ledger_account_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerAccountResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get All With Filters",
        "description": "Get all custom templates",
        "operationId": "get_mail_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/CustomTemplatesCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DocumentObjectTypeRequestEnum"
            },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DocumentObjectTypeRequestEnum"
              },
              "type": "array"
            },
            "name": "type__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DocumentObjectTypeRequestEnum"
              },
              "type": "array"
            },
            "name": "type__not_in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_default",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__icontains",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplatesPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Mail templates"],
        "summary": "Create",
        "description": "Create custom template",
        "operationId": "post_mail_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustomTemplateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/preview": {
      "post": {
        "tags": ["Mail templates"],
        "summary": "Preview",
        "description": "Preview rendered template",
        "operationId": "post_mail_templates_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/system": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get All System Templates",
        "description": "Get all system templates",
        "operationId": "get_mail_templates_system",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SystemTemplates" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/{template_id}": {
      "get": {
        "tags": ["Mail templates"],
        "summary": "Get",
        "description": "Get custom template by ID",
        "operationId": "get_mail_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Mail templates"],
        "summary": "Delete",
        "description": "Delete custom template bt ID",
        "operationId": "delete_mail_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Mail templates"],
        "summary": "Update",
        "description": "Update custom template by ID",
        "operationId": "patch_mail_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomTemplateSchemaRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mail_templates/{template_id}/make_default": {
      "post": {
        "tags": ["Mail templates"],
        "summary": "Make Default",
        "description": "Make template default",
        "operationId": "post_mail_templates_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "template_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomTemplateDataSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailbox_domains": {
      "get": {
        "tags": ["Mailbox domains"],
        "summary": "Get mailbox domains",
        "description": "Get all domains owned by partner_id",
        "operationId": "get_mailbox_domains",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DomainListResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Mailbox domains"],
        "summary": "Create a mailbox domain",
        "description": "Create domain for the partner_id",
        "operationId": "post_mailbox_domains",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DomainRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DomainResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailbox_domains/{domain_id}": {
      "delete": {
        "tags": ["Mailbox domains"],
        "summary": "Delete a mailbox domain",
        "description": "Delete domain for the partner_id",
        "operationId": "delete_mailbox_domains_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "domain_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailbox_domains/{domain_id}/verify": {
      "post": {
        "tags": ["Mailbox domains"],
        "summary": "Verify a mailbox domain",
        "description": "Verify domain for the partner_id",
        "operationId": "post_mailbox_domains_id_verify",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "domain_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VerifyResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailboxes": {
      "get": {
        "tags": ["Mailboxes"],
        "summary": "Get mailboxes",
        "description": "Get all mailboxes owned by Entity",
        "operationId": "get_mailboxes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MailboxDataResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Mailboxes"],
        "summary": "Create a mailbox",
        "description": "Create a new mailbox",
        "operationId": "post_mailboxes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MailboxDomainRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MailboxResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailboxes/search": {
      "post": {
        "tags": ["Mailboxes"],
        "summary": "Get mailboxes by IDs",
        "description": "Get all mailboxes owned by Entity",
        "operationId": "post_mailboxes_search",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MailboxMultipleEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MailboxDataResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/mailboxes/{mailbox_id}": {
      "delete": {
        "tags": ["Mailboxes"],
        "summary": "Delete a mailbox",
        "description": "Delete mailbox",
        "operationId": "delete_mailboxes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "mailbox_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/measure_units": {
      "get": {
        "tags": ["Measure units"],
        "summary": "Get measure units",
        "operationId": "get_measure_units",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitListResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Measure units"],
        "summary": "Create a measure unit",
        "operationId": "post_measure_units",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnitRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/measure_units/{unit_id}": {
      "get": {
        "tags": ["Measure units"],
        "summary": "Get a measure unit by ID",
        "operationId": "get_measure_units_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "unit_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Measure units"],
        "summary": "Delete a measure unit",
        "operationId": "delete_measure_units_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "unit_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Measure units"],
        "summary": "Update a measure unit",
        "operationId": "patch_measure_units_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "unit_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnitUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UnitResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ocr_tasks": {
      "get": {
        "tags": ["OCR"],
        "summary": "Get OCR tasks",
        "operationId": "get_ocr_tasks",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Return only ocr tasks created after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm].",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Return only ocr tasks created in Monite before the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Return only ocr tasks created on or after the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "description": "Return only ocr tasks created before or on the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "Return only ocr tasks that have the specified status.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OCRTaskStatus" }]
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Return only OCR tasks related to documents of a specific type.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OCRDocumentTypeEnum" }]
            },
            "name": "document_type",
            "in": "query"
          },
          {
            "description": "Return only ocr tasks with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.\n\nTo specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCRTasksPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": { "description": "OCR request is not found" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["OCR"],
        "summary": "OCR a file from URL",
        "operationId": "post_ocr_tasks",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOCRRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "OCR task has been accepted for execution.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcrTaskResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "OCR previously tried to recognize this file and failed."
          },
          "413": {
            "description": "File size exceeds the limit for OCR processing."
          },
          "415": {
            "description": "Unsupported file format. OCR supports only PNG, JPG, and PDF."
          },
          "421": { "description": "The specified file URL is not reachable." },
          "424": {
            "description": "The specified file URL is reachable but returned an HTTP error status code."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ocr_tasks/upload_from_file": {
      "post": {
        "tags": ["OCR"],
        "summary": "Upload a file for OCR",
        "operationId": "post_ocr_tasks_upload_from_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/OCRDocumentTypeEnum" },
            "name": "document_type",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/OCRFileUpload" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "OCR task has been accepted for execution.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcrTaskResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": { "description": "OCR failed to process the specified file." },
          "413": {
            "description": "File size exceeds the limit for OCR processing."
          },
          "415": {
            "description": "Unsupported file format. OCR supports only PNG, JPG, and PDF."
          },
          "422": { "description": "File name is too long." }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/ocr_tasks/{task_id}": {
      "get": {
        "tags": ["OCR"],
        "summary": "Get an OCR task by ID",
        "operationId": "get_ocr_tasks_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "task_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcrTaskResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "OCR task with the specified ID was not found."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/onboarding_documents": {
      "post": {
        "tags": ["Onboarding documents"],
        "summary": "Provide files for entity onboarding verification",
        "description": "Provide files for entity onboarding verification",
        "operationId": "post_onboarding_documents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityOnboardingDocumentsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/onboarding_links": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Create Onboarding Link",
        "operationId": "post_onboarding_links",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OnboardingLinkRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinkPublicResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/onboarding_requirements": {
      "get": {
        "tags": ["Onboarding requirements"],
        "summary": "Get onboarding requirements",
        "description": "Get onboarding requirements for the entity",
        "operationId": "get_onboarding_requirements",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOnboardingRequirementsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/overdue_reminders": {
      "get": {
        "tags": ["Overdue reminders"],
        "summary": "Get overdue reminder configurations",
        "operationId": "get_overdue_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllOverdueRemindersResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Overdue reminders"],
        "summary": "Create an overdue reminder configuration",
        "operationId": "post_overdue_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OverdueReminderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverdueReminderResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/overdue_reminders/{overdue_reminder_id}": {
      "get": {
        "tags": ["Overdue reminders"],
        "summary": "Get an overdue reminder configuration by ID",
        "operationId": "get_overdue_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "overdue_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverdueReminderResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Overdue reminders"],
        "summary": "Delete an overdue reminder configuration",
        "operationId": "delete_overdue_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "overdue_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Overdue reminders"],
        "summary": "Update an overdue reminder configuration",
        "operationId": "patch_overdue_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "overdue_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OverdueReminderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverdueReminderResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes": {
      "get": {
        "tags": ["Credit notes"],
        "summary": "Get credit notes",
        "operationId": "get_payable_credit_notes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/CreditNoteCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_file",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "based_on",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PayableCreditNoteStateEnum"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PayableCreditNoteStateEnum"
              },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PayableCreditNoteStateEnum"
              },
              "type": "array"
            },
            "name": "status__not_in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/OriginEnum" },
            "name": "origin",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNotePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Credit notes"],
        "summary": "Create a credit note",
        "operationId": "post_payable_credit_notes",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/upload_from_file": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Upload a credit note from a file",
        "description": "Upload an incoming credit note (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.",
        "operationId": "post_payable_credit_notes_upload_from_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/CreditNoteUploadFile" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Error uploading the file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/validations": {
      "get": {
        "tags": ["Credit notes"],
        "summary": "Get credit note validations",
        "description": "Get credit notes validations.",
        "operationId": "get_payable_credit_notes_validations",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteValidationsResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Credit notes"],
        "summary": "Update credit note validations",
        "description": "Update credit notes validations.",
        "operationId": "put_payable_credit_notes_validations",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteValidationsResource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteValidationsResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/validations/reset": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Reset credit note validations",
        "description": "Reset credit notes validations.",
        "operationId": "post_payable_credit_notes_validations_reset",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteValidationsResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}": {
      "get": {
        "tags": ["Credit notes"],
        "summary": "Get a credit note by ID",
        "operationId": "get_payable_credit_notes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Credit notes"],
        "summary": "Delete a credit note",
        "operationId": "delete_payable_credit_notes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Credit notes"],
        "summary": "Update a credit note",
        "operationId": "patch_payable_credit_notes_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/approve": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Approve a credit note",
        "description": "Approve the credit note for appliance.",
        "operationId": "post_payable_credit_notes_id_approve",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/cancel": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Cancel a credit note",
        "description": "Cancel the credit note that was not confirmed during the review.",
        "operationId": "post_payable_credit_notes_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/cancel_ocr": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Cancel OCR of a credit note",
        "description": "Request to cancel the OCR processing of the specified credit note.",
        "operationId": "post_payable_credit_notes_id_cancel_ocr",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Credit Note couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/line_items": {
      "get": {
        "tags": ["Credit notes"],
        "summary": "Get all line items of a credit note",
        "operationId": "get_payable_credit_notes_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreditNoteLineItemCursorFields"
                }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "description",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "description__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "description__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "subtotal__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "unit_price__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "unit_price__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "unit_price__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "unit_price__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "number", "minimum": 0.0 },
            "name": "quantity__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "number", "minimum": 0.0 },
            "name": "quantity__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "number", "minimum": 0.0 },
            "name": "quantity__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "number", "minimum": 0.0 },
            "name": "quantity__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "tax_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "unit",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "unit__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "source",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "source_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteLineItemPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Credit notes"],
        "summary": "Replace all line items of a credit note",
        "operationId": "put_payable_credit_notes_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteLineItemReplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteLineItemPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Credit notes"],
        "summary": "Add a new line item to a credit note",
        "operationId": "post_payable_credit_notes_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteLineItemCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteLineItemResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}": {
      "get": {
        "tags": ["Credit notes"],
        "summary": "Get a single line item of a credit note",
        "operationId": "get_payable_credit_notes_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteLineItemResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Credit notes"],
        "summary": "Delete a line item from a credit note",
        "operationId": "delete_payable_credit_notes_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteLineItemPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Credit notes"],
        "summary": "Update a line item of a credit note",
        "operationId": "patch_payable_credit_notes_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteLineItemUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteLineItemResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/reject": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Reject a credit note",
        "description": "Decline the credit note when an approver finds any mismatch or discrepancies.",
        "operationId": "post_payable_credit_notes_id_reject",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/submit_for_approval": {
      "post": {
        "tags": ["Credit notes"],
        "summary": "Submit a credit note for approval",
        "description": "Start the approval process once the uploaded credit note is validated.",
        "operationId": "post_payable_credit_notes_id_submit_for_approval",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreditNoteResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_credit_notes/{credit_note_id}/validate": {
      "get": {
        "tags": ["Credit notes"],
        "summary": "Validate a credit note",
        "operationId": "get_payable_credit_notes_id_validate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "credit_note_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteValidationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders": {
      "get": {
        "tags": ["Purchase orders"],
        "summary": "Get purchase orders",
        "operationId": "get_payable_purchase_orders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PurchaseOrderCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PurchaseOrderStatusEnum"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "document_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "counterpart_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart.name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/CurrencyEnum" },
              "type": "array"
            },
            "name": "currency__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Purchase orders"],
        "summary": "Create a purchase order",
        "operationId": "post_payable_purchase_orders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderPayloadSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/variables": {
      "get": {
        "tags": ["Purchase orders"],
        "summary": "Get the available variables for purchase orders",
        "description": "Get a list of placeholders allowed to insert into an email template for customization",
        "operationId": "get_payable_purchase_orders_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariablesObjectList" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/{purchase_order_id}": {
      "get": {
        "tags": ["Purchase orders"],
        "summary": "Get a purchase order by ID",
        "operationId": "get_payable_purchase_orders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Purchase orders"],
        "summary": "Delete a purchase order",
        "operationId": "delete_payable_purchase_orders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Purchase orders"],
        "summary": "Update a purchase order",
        "operationId": "patch_payable_purchase_orders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePurchaseOrderPayloadSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/{purchase_order_id}/preview": {
      "post": {
        "tags": ["Purchase orders"],
        "summary": "Preview a purchase order's email message",
        "operationId": "post_payable_purchase_orders_id_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderEmailPreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderEmailPreviewResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payable_purchase_orders/{purchase_order_id}/send": {
      "post": {
        "tags": ["Purchase orders"],
        "summary": "Send a purchase order via email",
        "operationId": "post_payable_purchase_orders_id_send",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPurchaseOrderViaEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderEmailSentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get payables",
        "description": "Lists all payables from the connected entity.\n\nIf you already have the data of the payable (amount in [minor units](\nhttps://docs.monite.com/references/currencies#minor-units), currency, vendor information, and other details)\nstored somewhere as individual attributes, you can create a payable with these attributes by calling [POST\n/payables](https://docs.monite.com/api/payables/post-payables) and providing the [base64-encoded](\nhttps://en.wikipedia.org/wiki/Base64) contents of the original invoice file in the field `base64_encoded_file`.\n\nA payable is a financial document given by an entity`s supplier itemizing the purchase of a good or a service and\ndemanding payment.\n\nThe `file_name` field is optional. If omitted, it defaults to “default_file_name”. If the settings are configured\nto automatically set `suggested_payment_term`, this object can be omitted from the request body.\n\nThe `id` generated for this payable can be used in other API calls to update the data of this payable or trigger [\nstatus transitions](https://docs.monite.com/accounts-payable/approvals/manual-transition), for example. essential data\nfields to move from `draft` to `new`\n\nRelated guide: [Create a payable from data](https://docs.monite.com/accounts-payable/payables/collect#create-a-payable-from-data)\n\nSee also:\n\n\n[Automatic calculation of due date](https://docs.monite.com/accounts-payable/payables/collect#automatic-calculation-of-due-date)\n\n[Suggested payment date](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)\n\n[Attach file](https://docs.monite.com/accounts-payable/payables/collect#attach-file)\n\n[Collect payables by email](https://docs.monite.com/accounts-payable/payables/collect#send-payables-by-email)\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)",
        "operationId": "get_payables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm].",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite before the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite on or after the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite before or on the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "Return only payables that have the specified [status](https://docs.monite.com/accounts-payable/payables/index).\n\nTo query multiple statuses at once, use the `status__in` parameter instead.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableStateEnum" }]
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Return only payables that have the specified [statuses](https://docs.monite.com/accounts-payable/payables/index).\n\nTo specify multiple statuses, repeat this parameter for each value: `status__in=draft&status__in=new`",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/PayableStateEnum" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "Return only payables with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.\n\nTo specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "Return only payables with the exact specified total amount. The amount must be specified in the minor units of currency. For example, $12.5 is represented as 1250.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) exceeds the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is less than the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is greater than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is less than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "description": "Return only payables with the specified amount.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) exceeds the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gt",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is less than the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lt",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is greater than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gte",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is less than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lte",
            "in": "query"
          },
          {
            "description": "Return only payables that use the specified currency.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }]
            },
            "name": "currency",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts with the specified name (exact match, case-sensitive).\n\nFor counterparts of `type = individual`, the full name is formatted as `first_name last_name`.",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts whose name contains the specified string (case-sensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts whose name contains the specified string (case-insensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "description": "Apply the `icontains` condition to search for the specified text in the `document_id` and `counterpart_name` fields in the payables.",
            "required": false,
            "schema": { "type": "string" },
            "name": "search_text",
            "in": "query"
          },
          {
            "description": "Return payables that are due on the specified date (YYYY-MM-DD)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date",
            "in": "query"
          },
          {
            "description": "Return payables that are due after the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "description": "Return payables that are due before the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "description": "Return payables that are due on or after the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "description": "Return payables that are due before or on the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "description": "Return payables that are issued at the specified date (YYYY-MM-DD)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at",
            "in": "query"
          },
          {
            "description": "Return payables that are issued after the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "description": "Return payables that are issued before the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "description": "Return payables that are issued on or after the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "description": "Return payables that are issued before or on the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "description": "Return a payable with the exact specified document number (case-sensitive).\n\nThe `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "description": "Return only payables whose document number (`document_id`) contains the specified string (case-sensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "description": "Return only payables whose document number (`document_id`) contains the specified string (case-insensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite by the entity user with the specified ID.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "was_created_by_user_id",
            "in": "query"
          },
          {
            "description": "Return only payables received from the counterpart with the specified ID.\n\nCounterparts that have been deleted but have associated payables will still return results here because the payables contain a frozen copy of the counterpart data.\n\nIf the specified counterpart ID does not exist and never existed, no results are returned.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "description": "Return only payables coming from the specified source.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/SourceOfPayableDataEnum" }
              ]
            },
            "name": "source_of_payable_data",
            "in": "query"
          },
          {
            "description": "Return only payables with specific OCR statuses.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OcrStatusEnum" }]
            },
            "name": "ocr_status",
            "in": "query"
          },
          {
            "description": "Search for a payable by the identifier of the line item associated with it.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "query"
          },
          {
            "description": "Search for a payable by the identifier of the purchase order associated with it.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "query"
          },
          {
            "description": "Return only payables assigned to the project with the specified ID.\n\nValid but nonexistent project IDs do not raise errors but return no results.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "Return only payables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "description": "Return only payables whose `tags` include at least one of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids",
            "in": "query"
          },
          {
            "description": "Return only payables whose `tags` do not include any of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce the results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids__not_in",
            "in": "query"
          },
          {
            "description": "Filter objects based on whether they have tags. If true, only objects with tags are returned. If false, only objects without tags are returned.",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_tags",
            "in": "query"
          },
          {
            "description": "Return only payables from a given origin ['einvoice', 'upload', 'email']",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableOriginEnum" }]
            },
            "name": "origin",
            "in": "query"
          },
          {
            "description": "Return only payables with or without attachments (files)",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_file",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayablePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payables"],
        "summary": "Create a payable",
        "description": "Add a new payable by providing the amount, currency, vendor name, and other details.\nYou can provide the base64_encoded contents of the original invoice file in the field `base64_encoded_file`.\n\nYou can use this endpoint to bypass the Monite OCR service and provide the data directly\n(for example, if you already have the data in place).\n\nA newly created payable has the the `draft` [status](https://docs.monite.com/accounts-payable/payables/index).",
        "operationId": "post_payables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayableUploadWithDataSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/analytics": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get payables analytics",
        "description": "Retrieve aggregated statistics for payables, including total amount and count, both overall and by status.\n\nFor more flexible configuration and retrieval of other data types, use `GET /analytics/payables`.",
        "operationId": "get_payables_analytics",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Return only payables created in Monite after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm].",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite before the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite on or after the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite before or on the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "Return only payables that have the specified [status](https://docs.monite.com/accounts-payable/payables/index).\n\nTo query multiple statuses at once, use the `status__in` parameter instead.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableStateEnum" }]
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Return only payables that have the specified [statuses](https://docs.monite.com/accounts-payable/payables/index).\n\nTo specify multiple statuses, repeat this parameter for each value: `status__in=draft&status__in=new`",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/PayableStateEnum" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "Return only payables with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.\n\nTo specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "Return only payables with the exact specified total amount. The amount must be specified in the minor units of currency. For example, $12.5 is represented as 1250.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) exceeds the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is less than the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is greater than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "description": "Return only payables whose total amount (in minor units) is less than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "description": "Return only payables with the specified amount.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) exceeds the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gt",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is less than the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lt",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is greater than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gte",
            "in": "query"
          },
          {
            "description": "Return only payables whose amount (in minor units) is less than or equal to the specified value.",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lte",
            "in": "query"
          },
          {
            "description": "Return only payables that use the specified currency.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }]
            },
            "name": "currency",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts with the specified name (exact match, case-sensitive).\n\nFor counterparts of `type = individual`, the full name is formatted as `first_name last_name`.",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts whose name contains the specified string (case-sensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "description": "Return only payables received from counterparts whose name contains the specified string (case-insensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "description": "Apply the `icontains` condition to search for the specified text in the `document_id` and `counterpart_name` fields in the payables.",
            "required": false,
            "schema": { "type": "string" },
            "name": "search_text",
            "in": "query"
          },
          {
            "description": "Return payables that are due on the specified date (YYYY-MM-DD)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date",
            "in": "query"
          },
          {
            "description": "Return payables that are due after the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "description": "Return payables that are due before the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "description": "Return payables that are due on or after the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "description": "Return payables that are due before or on the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "description": "Return payables that are issued at the specified date (YYYY-MM-DD)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at",
            "in": "query"
          },
          {
            "description": "Return payables that are issued after the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gt",
            "in": "query"
          },
          {
            "description": "Return payables that are issued before the specified date (exclusive, YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lt",
            "in": "query"
          },
          {
            "description": "Return payables that are issued on or after the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__gte",
            "in": "query"
          },
          {
            "description": "Return payables that are issued before or on the specified date (YYYY-MM-DD).",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "issued_at__lte",
            "in": "query"
          },
          {
            "description": "Return a payable with the exact specified document number (case-sensitive).\n\nThe `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "description": "Return only payables whose document number (`document_id`) contains the specified string (case-sensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "description": "Return only payables whose document number (`document_id`) contains the specified string (case-insensitive).",
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "description": "Return only payables created in Monite by the entity user with the specified ID.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "was_created_by_user_id",
            "in": "query"
          },
          {
            "description": "Return only payables received from the counterpart with the specified ID.\n\nCounterparts that have been deleted but have associated payables will still return results here because the payables contain a frozen copy of the counterpart data.\n\nIf the specified counterpart ID does not exist and never existed, no results are returned.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "description": "Return only payables coming from the specified source.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/SourceOfPayableDataEnum" }
              ]
            },
            "name": "source_of_payable_data",
            "in": "query"
          },
          {
            "description": "Return only payables with specific OCR statuses.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OcrStatusEnum" }]
            },
            "name": "ocr_status",
            "in": "query"
          },
          {
            "description": "Search for a payable by the identifier of the line item associated with it.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "query"
          },
          {
            "description": "Search for a payable by the identifier of the purchase order associated with it.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "purchase_order_id",
            "in": "query"
          },
          {
            "description": "Return only payables assigned to the project with the specified ID.\n\nValid but nonexistent project IDs do not raise errors but return no results.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "Return only payables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "description": "Return only payables whose `tags` include at least one of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids",
            "in": "query"
          },
          {
            "description": "Return only payables whose `tags` do not include any of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce the results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids__not_in",
            "in": "query"
          },
          {
            "description": "Filter objects based on whether they have tags. If true, only objects with tags are returned. If false, only objects without tags are returned.",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_tags",
            "in": "query"
          },
          {
            "description": "Return only payables from a given origin ['einvoice', 'upload', 'email']",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/PayableOriginEnum" }]
            },
            "name": "origin",
            "in": "query"
          },
          {
            "description": "Return only payables with or without attachments (files)",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_file",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableAggregatedDataResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/storecove": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Webhook to receive e-invoicing events from Storecove for new documents",
        "description": "A webhook endpoint designed to handle e-invoicing events from Storecove. It listens for events about newly received documents and validates them for further processing in a background. More information about Storecove webhooks is [here](https://www.storecove.com/docs#_receiving_documents).",
        "operationId": "post_payables_storecove",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorecoveNewDocumentReceivedEventPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse2"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/upload_from_file": {
      "post": {
        "tags": ["Payables"],
        "summary": "Upload a payable from a file",
        "description": "Upload an incoming invoice (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.",
        "operationId": "post_payables_upload_from_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/PayableUploadFile" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Error uploading the file. You can check the upload\n    [limitations in the documentation](https://docs.monite.com/accounts-payable/payables/collect#about-monite-ocr).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/validations": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get payables validations",
        "description": "Get payable validations.",
        "operationId": "get_payables_validations",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableValidationsResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Payables"],
        "summary": "Update payables validations",
        "description": "Update payable validations.",
        "operationId": "put_payables_validations",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayableValidationsUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableValidationsResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/validations/reset": {
      "post": {
        "tags": ["Payables"],
        "summary": "Reset payables validations",
        "description": "Reset payable validations to default ones.",
        "operationId": "post_payables_validations_reset",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableValidationsResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/variables": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get the available variables for payable email templates",
        "description": "Get a list of placeholders allowed to insert into an email template for customization",
        "operationId": "get_payables_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableTemplatesVariablesObjectList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get a payable by ID",
        "description": "Retrieves information about a specific payable with the given ID.",
        "operationId": "get_payables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payables"],
        "summary": "Delete a payable",
        "description": "Deletes a specific payable.",
        "operationId": "delete_payables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payables"],
        "summary": "Update a payable",
        "description": "Updates the information about a specific payable.",
        "operationId": "patch_payables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PayableUpdateSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/approve_payment_operation": {
      "post": {
        "tags": ["Payables"],
        "summary": "Approve a payable for payment",
        "description": "Confirms that the payable is ready to be paid.",
        "operationId": "post_payables_id_approve_payment_operation",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/attach_file": {
      "post": {
        "tags": ["Payables"],
        "summary": "Attach a file to a payable",
        "description": "Attach file to payable without existing attachment.",
        "operationId": "post_payables_id_attach_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/PayableAttachFile" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/cancel": {
      "post": {
        "tags": ["Payables"],
        "summary": "Cancel a payable",
        "description": "Cancels the payable that was not confirmed during the review.",
        "operationId": "post_payables_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/cancel_ocr": {
      "post": {
        "tags": ["Payables"],
        "summary": "Cancel OCR of a payable",
        "description": "Request to cancel the OCR processing of the specified payable.",
        "operationId": "post_payables_id_cancel_ocr",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/history": {
      "get": {
        "tags": ["Payables"],
        "summary": "Returns the history of the specified accounts payable document.",
        "operationId": "get_payables_id_history",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PayableHistoryCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Return only the specified event types",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/PayableHistoryEventTypeEnum"
              },
              "type": "array"
            },
            "name": "event_type__in",
            "in": "query"
          },
          {
            "description": "Return only events caused by the entity users with the specified IDs. To specify multiple user IDs, repeat this parameter for each ID:\n`entity_user_id__in=<user1>&entity_user_id__in=<user2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "entity_user_id__in",
            "in": "query"
          },
          {
            "description": "Return only events that occurred after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__gt",
            "in": "query"
          },
          {
            "description": "Return only events that occurred before the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__lt",
            "in": "query"
          },
          {
            "description": "Return only events that occurred on or after the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__gte",
            "in": "query"
          },
          {
            "description": "Return only events that occurred before or on the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableHistoryPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/line_items": {
      "get": {
        "tags": ["Payable line items"],
        "summary": "Get the line items of a payable",
        "description": "Get a list of all line items related to a specific payable.\nRelated guide: [List all payable line items](https://docs.monite.com/accounts-payable/payables/line-items#list-all-line-items-of-a-payable)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)\n\n[Collect payables](https://docs.monite.com/accounts-payable/payables/collect)",
        "operationId": "get_payables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/LineItemCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "was_created_by_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "put": {
        "tags": ["Payable line items"],
        "summary": "Replaces the lines items in a payable",
        "description": "Replaces the information of all line items of a specific payable.\n\nRelated guide: [Replace all line items](https://docs.monite.com/accounts-payable/payables/line-items#replace-all-line-items)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)\n\n[Collect payables](https://docs.monite.com/accounts-payable/payables/collect)",
        "operationId": "put_payables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineItemsReplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineItemsReplaceResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payable line items"],
        "summary": "Add a line item to a payable",
        "description": "Add a new line item to a specific payable.\n\nThe `subtotal` and `total` fields of line items are automatically calculated based on the `unit_price`,\n `quantity`, and `tax` fields, therefore, are read-only and appear only in the response schema. The field\n  `ledger_account_id` is required **only** for account integration, otherwise, it is optional.\n\nRelated guide: [Add line items to a payable](https://docs.monite.com/accounts-payable/payables/line-items#add-line-items-to-a-payable)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)\n\n[Collect payables](https://docs.monite.com/accounts-payable/payables/collect)",
        "operationId": "post_payables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LineItemRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/line_items/{line_item_id}": {
      "get": {
        "tags": ["Payable line items"],
        "summary": "Get a single line item of a payable",
        "description": "Get information about a specific line item with a given ID.\n\nRelated guide: [Retrieve a line item](https://docs.monite.com/accounts-payable/payables/line-items#retrieve-a-line-item)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)\n\n[Collect payables](https://docs.monite.com/accounts-payable/payables/collect)",
        "operationId": "get_payables_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payable line items"],
        "summary": "Delete a line item from a payable",
        "description": "Delete the line item with the given ID.\n\nRelated guide: [Remove a line item](https://docs.monite.com/accounts-payable/payables/line-items#remove-a-line-item)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)\n\n[Collect payables](https://docs.monite.com/accounts-payable/payables/collect)",
        "operationId": "delete_payables_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payable line items"],
        "summary": "Update a line item in a payable",
        "description": "Edits the information of a specific line item.\n\nRelated guide: [Update a line item](https://docs.monite.com/accounts-payable/payables/line-items#update-a-line-item)\n\nSee also:\n\n[Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)\n\n[Collect payables](https://docs.monite.com/accounts-payable/payables/collect)",
        "operationId": "patch_payables_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LineItemRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/mark_as_paid": {
      "post": {
        "tags": ["Payables"],
        "summary": "Mark a payable as paid",
        "description": "Mark a payable as paid.\n\nPayables can be paid using the payment channels offered by Monite or through external payment channels. In the latter\n case, the invoice is not automatically marked as paid in the system and needs to be converted to the paid status\n manually.\n\nOptionally, it is possible to pass the `comment` field in the request body, to describe how and when the invoice was\npaid.\n\nNotes:\n- To use this endpoint with an entity user token, this entity user must have a role that includes the `pay` permission\nfor payables.\n- The `amount_to_pay` field is automatically calculated based on the `amount_due` less the percentage described\nin the `payment_terms.discount` value.\n\nRelated guide: [Mark a payable as paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-paid)\n\nSee also:\n\n[Payables lifecycle](https://docs.monite.com/accounts-payable/payables/index)\n\n[Payables status transitions](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)",
        "operationId": "post_payables_id_mark_as_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/mark_as_partially_paid": {
      "post": {
        "tags": ["Payables"],
        "summary": "Mark a payable as partially paid",
        "description": "Mark a payable as partially paid.\n\nIf the payable is partially paid, its status is moved to `partially_paid`. The value of the `amount_paid` field must be\n the sum of all payments made, not only the last one.\n\nNotes:\n- This endpoint can be used for payables in the `waiting_to_be_paid` status.\n- The `amount_paid` must be greater than 0 and less than the total payable amount specified by the `amount` field.\n- You can use this endpoint multiple times for the same payable to reflect multiple partial payments, always setting the\n sum of all payments made.\n- To use this endpoint with an entity user token, this entity user must have a role that includes the `pay`\npermission for payables.\n- The `amount_to_pay` field is automatically calculated based on the `amount_due` less the percentage described\nin the `payment_terms.discount` value.\n\nRelated guide: [Mark a payable as partially paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-partially-paid)\n\nSee also:\n\n[Payables lifecycle](https://docs.monite.com/accounts-payable/payables/index)\n\n[Payables status transitions](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)\n\n[Mark a payable as paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-paid)",
        "operationId": "post_payables_id_mark_as_partially_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PartiallyPaidPayload" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/reject": {
      "post": {
        "tags": ["Payables"],
        "summary": "Reject a payable",
        "description": "Declines the payable when an approver finds any mismatch or discrepancies.",
        "operationId": "post_payables_id_reject",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/reopen": {
      "post": {
        "tags": ["Payables"],
        "summary": "Reopen a rejected payable",
        "description": "Reset payable state from rejected to new.",
        "operationId": "post_payables_id_reopen",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/submit_for_approval": {
      "post": {
        "tags": ["Payables"],
        "summary": "Submit a payable for approval",
        "description": "Starts the approval process once the uploaded payable is validated.",
        "operationId": "post_payables_id_submit_for_approval",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/suggestions": {
      "get": {
        "tags": ["Payables"],
        "summary": "Get suggestions",
        "description": "Get AI suggestions",
        "operationId": "get_payables_id_suggestions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuggestedResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payables"],
        "summary": "Delete suggestions",
        "description": "Remove AI suggestions",
        "operationId": "delete_payables_id_suggestions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payables/{payable_id}/validate": {
      "post": {
        "tags": ["Payables"],
        "summary": "Validate a payable",
        "description": "Check the invoice for compliance with the requirements for movement from draft to new status.",
        "operationId": "post_payables_id_validate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayableValidationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_intents": {
      "get": {
        "tags": ["Payment intents"],
        "summary": "Get payment intents",
        "operationId": "get_payment_intents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PaymentIntentCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "ID of a payable or receivable invoice. If provided, returns only payment intents associated with the specified invoice.",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "description": "A list of payable IDs and/or receivable IDs. If provided, returns only payment intents associated with the specified payable and receivable invoices. Valid but nonexistent IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "object_id__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentsListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_intents/{payment_intent_id}": {
      "get": {
        "tags": ["Payment intents"],
        "summary": "Get payment intent by ID",
        "operationId": "get_payment_intents_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment intents"],
        "summary": "Update the payment intent amount",
        "operationId": "patch_payment_intents_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentIntentPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_intents/{payment_intent_id}/history": {
      "get": {
        "tags": ["Payment intents"],
        "summary": "Get the payment intent history",
        "operationId": "get_payment_intents_id_history",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_intent_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentIntentHistoryResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_links": {
      "post": {
        "tags": ["Payment links"],
        "summary": "Create a payment link",
        "operationId": "post_payment_links",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaymentLinkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_links/{payment_link_id}": {
      "get": {
        "tags": ["Payment links"],
        "summary": "Get payment link by ID",
        "operationId": "get_payment_links_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaymentLinkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_links/{payment_link_id}/expire": {
      "post": {
        "tags": ["Payment links"],
        "summary": "Expire a payment link",
        "operationId": "post_payment_links_id_expire",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_link_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPaymentLinkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_onboarding_links": {
      "post": {
        "tags": ["Onboarding links"],
        "summary": "Create an onboarding link",
        "operationId": "post_payment_onboarding_links",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOnboardingLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingLinkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records": {
      "get": {
        "tags": ["Payment records"],
        "summary": "Get payment records",
        "operationId": "get_payment_records",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PaymentRecordCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Identifies whether payment is from our rails or external system",
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_external",
            "in": "query"
          },
          {
            "description": "ID of the object, that is connected to payment",
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "object_id",
            "in": "query"
          },
          {
            "description": "List of IDs of the objects, that are connected to payments",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "object_id__in",
            "in": "query"
          },
          {
            "description": "Type of an object, which is connected with payment",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ObjectTypeEnum" }]
            },
            "name": "object_type",
            "in": "query"
          },
          {
            "description": "Created after this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Created before this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Updated after this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "description": "Updated before this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "description": "Paid after this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "paid_at__gt",
            "in": "query"
          },
          {
            "description": "Paid before this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "paid_at__lt",
            "in": "query"
          },
          {
            "description": "Optional date of the upcoming payment (equality)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "planned_payment_date",
            "in": "query"
          },
          {
            "description": "Planned after this date (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "planned_payment_date__gt",
            "in": "query"
          },
          {
            "description": "Planned before this date (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "planned_payment_date__lt",
            "in": "query"
          },
          {
            "description": "Planned at or after this date (inclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "planned_payment_date__gte",
            "in": "query"
          },
          {
            "description": "Planned at or before this date (inclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "planned_payment_date__lte",
            "in": "query"
          },
          {
            "description": "One of the payment record statuses",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/PaymentRecordStatusEnum" }
              ]
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Payment intent status as a raw string",
            "required": false,
            "schema": { "type": "string" },
            "name": "payment_intent_status",
            "in": "query"
          },
          {
            "description": "Payment method used for the transaction",
            "required": false,
            "schema": { "type": "string" },
            "name": "payment_method",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payment records"],
        "summary": "Create a payment record",
        "operationId": "post_payment_records",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentRecordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records/{payment_record_id}": {
      "get": {
        "tags": ["Payment records"],
        "summary": "Get a payment record",
        "operationId": "get_payment_records_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment records"],
        "summary": "Update a payment record",
        "operationId": "patch_payment_records_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecordUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records/{payment_record_id}/cancel": {
      "post": {
        "tags": ["Payment records"],
        "summary": "Cancel a payment record",
        "operationId": "post_payment_records_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecordStatusUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records/{payment_record_id}/mark_as_succeeded": {
      "post": {
        "tags": ["Payment records"],
        "summary": "Mark a payment record as succeeded",
        "operationId": "post_payment_records_id_mark_as_succeeded",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecordMarkAsSucceededRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_records/{payment_record_id}/start_processing": {
      "post": {
        "tags": ["Payment records"],
        "summary": "Start processing a payment record",
        "operationId": "post_payment_records_id_start_processing",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_record_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecordStatusUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecordResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_reminders": {
      "get": {
        "tags": ["Payment reminders"],
        "summary": "Get payment reminder configurations",
        "operationId": "get_payment_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPaymentReminders"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payment reminders"],
        "summary": "Create a payment reminder configuration",
        "operationId": "post_payment_reminders",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PaymentReminder" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReminderResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_reminders/{payment_reminder_id}": {
      "get": {
        "tags": ["Payment reminders"],
        "summary": "Get a payment reminder configuration by ID",
        "operationId": "get_payment_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReminderResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payment reminders"],
        "summary": "Delete a payment reminder configuration",
        "operationId": "delete_payment_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment reminders"],
        "summary": "Update a payment reminder configuration",
        "operationId": "patch_payment_reminders_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_reminder_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentReminderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentReminderResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_terms": {
      "get": {
        "tags": ["Payment terms"],
        "summary": "Get payment terms",
        "operationId": "get_payment_terms",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsListResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Payment terms"],
        "summary": "Create a payment term",
        "operationId": "post_payment_terms",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTermsCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/payment_terms/{payment_terms_id}": {
      "get": {
        "tags": ["Payment terms"],
        "summary": "Get a payment term by ID",
        "operationId": "get_payment_terms_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_terms_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Payment terms"],
        "summary": "Delete a payment term",
        "operationId": "delete_payment_terms_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_terms_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Payment terms"],
        "summary": "Update a payment term",
        "operationId": "patch_payment_terms_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "payment_terms_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTermsUpdatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTermsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons": {
      "post": {
        "tags": ["Entity persons"],
        "summary": "Create a person",
        "operationId": "post_persons",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PersonRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Entity persons"],
        "summary": "Get all persons",
        "operationId": "get_persons",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonsResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons/{person_id}": {
      "get": {
        "tags": ["Entity persons"],
        "summary": "Get a person",
        "operationId": "get_persons_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "person_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Entity persons"],
        "summary": "Update a person",
        "operationId": "patch_persons_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "person_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OptionalPersonRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PersonResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Entity persons"],
        "summary": "Delete a person",
        "operationId": "delete_persons_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "person_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons/{person_id}/documents": {
      "post": {
        "tags": ["Onboarding documents"],
        "summary": "Update person onboarding documents",
        "description": "Deprecated. Use `POST /persons/{person_id}/onboarding_documents` instead. Update the onboarding documents of a person.",
        "operationId": "post_persons_id_documents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "schema_name": "PersonOnboardingDocuments",
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/persons/{person_id}/onboarding_documents": {
      "post": {
        "tags": ["Onboarding documents"],
        "summary": "Provide files for person onboarding verification",
        "description": "Provide files for person onboarding verification",
        "operationId": "post_persons_id_onboarding_documents",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonOnboardingDocumentsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/admin/partners/{partner_id}": {
      "delete": {
        "tags": ["admin"],
        "summary": "Delete Partner",
        "operationId": "delete__portal_v1_admin_partners_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/admin/partners/{partner_id}/reactivate": {
      "post": {
        "tags": ["admin"],
        "summary": "Reactivate Partner",
        "operationId": "post__portal_v1_admin_partners_id_reactivate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "partner_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/accept_invitation": {
      "post": {
        "tags": ["Auth"],
        "summary": "Accept Invitation",
        "operationId": "post__portal_v1_auth_accept_invitation",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/activate": {
      "post": {
        "tags": ["Auth"],
        "summary": "Accept Registration",
        "operationId": "post__portal_v1_auth_activate",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/decrypt_token": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get User By Token",
        "operationId": "get__portal_v1_auth_decrypt_token",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecryptTokenResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/forgot_password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Forgot Password",
        "operationId": "post__portal_v1_auth_forgot_password",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/logout": {
      "delete": {
        "tags": ["Auth"],
        "summary": "Get Profile",
        "operationId": "delete__portal_v1_auth_logout",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/auth/resend_invitation_email": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request Resend Invitation Email",
        "operationId": "post__portal_v1_auth_resend_invitation_email",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RequestResendInvite" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/set_password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Set Password",
        "operationId": "post__portal_v1_auth_set_password",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetPasswordPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/auth/token": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get Token",
        "operationId": "post__portal_v1_auth_token",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/companies": {
      "post": {
        "tags": ["Companies"],
        "summary": "Create Company",
        "operationId": "post__portal_v1_companies",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CompanyRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/companies/invitation": {
      "post": {
        "tags": ["Companies"],
        "summary": "Invite Into Company",
        "operationId": "post__portal_v1_companies_invitation",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InviteRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegisterResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/companies/{company_id}": {
      "get": {
        "tags": ["Companies"],
        "summary": "Get Company By Id",
        "operationId": "get__portal_v1_companies_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "company_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Companies"],
        "summary": "Update Company Data",
        "operationId": "patch__portal_v1_companies_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "company_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CompanyUpdateRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Companies"],
        "summary": "Delete Company",
        "operationId": "delete__portal_v1_companies_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "company_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/companies/{company_id}/logo": {
      "patch": {
        "tags": ["Companies"],
        "summary": "Update Company Logo",
        "operationId": "patch__portal_v1_companies_id_logo",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "company_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/portal_v1_companies_id_logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "schema_name": "CompanyLogoUpdate"
      }
    },
    "/portal/v1/dicts/currencies": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Currencies",
        "operationId": "get__portal_v1_dicts_currencies",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DictsResponse" },
                  "title": "Response Get  Portal V1 Dicts Currencies"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/dicts/environments": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Environments",
        "operationId": "get__portal_v1_dicts_environments",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DictsResponse" },
                  "title": "Response Get  Portal V1 Dicts Environments"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/dicts/features": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Features",
        "operationId": "get__portal_v1_dicts_features",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FeaturesResponse" },
                  "title": "Response Get  Portal V1 Dicts Features"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/dicts/regions": {
      "get": {
        "tags": ["Project dictionaries"],
        "summary": "Get Projects Regions",
        "operationId": "get__portal_v1_dicts_regions",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DictsResponse" },
                  "title": "Response Get  Portal V1 Dicts Regions"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/email_exists": {
      "get": {
        "tags": ["Email exists"],
        "summary": "Check Email Exist",
        "operationId": "get__portal_v1_email_exists",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/profile": {
      "get": {
        "tags": ["Profile"],
        "summary": "Get Profile",
        "operationId": "get__portal_v1_profile",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Profile"],
        "summary": "Update Profile Data",
        "operationId": "patch__portal_v1_profile",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfilePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/profile/avatar": {
      "patch": {
        "tags": ["Profile"],
        "summary": "Update Avatar",
        "operationId": "patch__portal_v1_profile_avatar",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/portal_v1_profile_avatar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileAvatarUpdateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "schema_name": "ProfileAvatarUpdate"
      }
    },
    "/portal/v1/projects": {
      "post": {
        "tags": ["Partners Portal Projects"],
        "summary": "Create Project",
        "operationId": "post__portal_v1_projects",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnersPortalProjectsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnersPortalProjectResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Partners Portal Projects"],
        "summary": "Get Projects",
        "operationId": "get__portal_v1_projects",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PartnersPortalProjectResponse"
                  },
                  "title": "Response Get  Portal V1 Projects"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/projects/{project_id}": {
      "patch": {
        "tags": ["Partners Portal Projects"],
        "summary": "Update Project Data",
        "operationId": "patch__portal_v1_projects_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnersPortalProjectUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnersPortalProjectResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Partners Portal Projects"],
        "summary": "Get Project By Id",
        "operationId": "get__portal_v1_projects_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnersPortalProjectResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/projects/{project_id}/settings": {
      "post": {
        "tags": ["Projects settings"],
        "summary": "Create Project Settings",
        "operationId": "post__portal_v1_projects_id_settings",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnersPortalProjectsSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnersPortalProjectsSettingsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Projects settings"],
        "summary": "Get Project Settings",
        "operationId": "get__portal_v1_projects_id_settings",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnersPortalProjectsSettingsResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/register": {
      "post": {
        "tags": ["Register"],
        "summary": "Register User",
        "operationId": "post__portal_v1_register",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPartnerUserPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/register/resend_registration_email": {
      "post": {
        "tags": ["Register"],
        "summary": "Resend Registration Email",
        "operationId": "post__portal_v1_register_resend_registration_email",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RequestResendInvite" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/portal/v1/roles": {
      "post": {
        "tags": ["Roles"],
        "summary": "Post",
        "operationId": "post__portal_v1_roles",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RolesCreatePayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RolesResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Roles"],
        "summary": "Get All",
        "operationId": "get__portal_v1_roles",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RolesResponse" },
                  "title": "Response Get  Portal V1 Roles"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/roles/{role_id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get",
        "operationId": "get__portal_v1_roles_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RolesResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Roles"],
        "summary": "Update",
        "operationId": "patch__portal_v1_roles_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RolesUpdatePayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RolesResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Delete",
        "operationId": "delete__portal_v1_roles_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/secrets": {
      "get": {
        "tags": ["Secrets"],
        "summary": "Get Secret",
        "operationId": "get__portal_v1_secrets",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GetSecretsResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Secrets"],
        "summary": "Obtain Secret",
        "operationId": "post__portal_v1_secrets",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SecretRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObtainSecretResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/secrets/{credential_id}": {
      "delete": {
        "tags": ["Secrets"],
        "summary": "Delete Secret",
        "operationId": "delete__portal_v1_secrets_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "credential_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "delay_in_seconds",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "integer" }, { "type": "null" }] }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Users",
        "operationId": "get__portal_v1_users",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                  },
                  "title": "Response Get  Portal V1 Users"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/users/{user_id}": {
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User",
        "operationId": "delete__portal_v1_users_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "summary": "Get User By Id",
        "operationId": "get__portal_v1_users_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update User Data",
        "operationId": "patch__portal_v1_users_id",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdatePayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/portal/v1/users/{user_id}/avatar": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update Avatar",
        "operationId": "patch__portal_v1_users_id_avatar",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/portal_v1_users_id_avatar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUserProfileResponseWithOptionalRole"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "schema_name": "UserAvatarFileUpload"
      }
    },
    "/portal/v1/users/{user_id}/enable": {
      "put": {
        "tags": ["Users"],
        "summary": "Enable User",
        "operationId": "put__portal_v1_users_id_enable",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get products",
        "operationId": "get_products",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ProductCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "maxLength": 100 },
            "name": "name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ProductServiceTypeEnum" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "price",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "price__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "price__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "price__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "price__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/CurrencyEnum" },
              "type": "array"
            },
            "name": "currency__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "measure_unit_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServicePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Products"],
        "summary": "Create a product",
        "operationId": "post_products",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductServiceRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServiceResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get a product by ID",
        "operationId": "get_products_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServiceResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete a product",
        "operationId": "delete_products_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Products"],
        "summary": "Update a product",
        "operationId": "patch_products_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductServiceUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductServiceResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects for entity",
        "description": "Get all projects for an entity",
        "operationId": "get_projects",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ProjectCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "start_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "start_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "start_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "start_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "end_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "end_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "end_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "end_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "end_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "code",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create a project",
        "description": "Create a new project.",
        "operationId": "post_projects",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProjectCreateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get a project by ID",
        "description": "Get a project with the given ID.",
        "operationId": "get_projects_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete a project",
        "description": "Delete a project.",
        "operationId": "delete_projects_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Projects"],
        "summary": "Update a project",
        "description": "Update a project.",
        "operationId": "patch_projects_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProjectUpdateRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProjectResource" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receipts": {
      "get": {
        "tags": ["Receipts"],
        "summary": "Get receipts",
        "operationId": "get_receipts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ReceiptCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CurrencyEnum" },
            "name": "currency",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_file",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "has_transaction",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "transaction_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "transaction_id__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Receipts"],
        "summary": "Create a receipt",
        "operationId": "post_receipts",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReceiptCreateSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receipts/upload_from_file": {
      "post": {
        "tags": ["Receipts"],
        "summary": "Upload a receipt from a file",
        "description": "Upload an incoming receipt in the PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20 MB.",
        "operationId": "post_receipts_upload_from_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/ReceiptUploadFile" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Error uploading the file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receipts/{receipt_id}": {
      "get": {
        "tags": ["Receipts"],
        "summary": "Get a receipt by ID",
        "operationId": "get_receipts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Receipts"],
        "summary": "Delete a receipt",
        "operationId": "delete_receipts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Receipts"],
        "summary": "Update a receipt",
        "operationId": "patch_receipts_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReceiptUpdateSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receipts/{receipt_id}/attach_file": {
      "post": {
        "tags": ["Receipts"],
        "summary": "Attach a file to a receipt",
        "description": "Attach a file to a receipt without an existing attachment.",
        "operationId": "post_receipts_id_attach_file",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/ReceiptAttachFile" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receipts/{receipt_id}/line_items": {
      "get": {
        "tags": ["Receipts"],
        "summary": "Get all line items of a receipt",
        "operationId": "get_receipts_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ReceiptLineItemCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__iexact",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer", "minimum": 0.0 },
            "name": "total__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_user_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptLineItemsPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Receipts"],
        "summary": "Add a new line item to a receipt",
        "operationId": "post_receipts_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptLineItemCreateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptLineItemResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receipts/{receipt_id}/line_items/{line_item_id}": {
      "delete": {
        "tags": ["Receipts"],
        "summary": "Delete a line item from a receipt",
        "operationId": "delete_receipts_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Receipts"],
        "summary": "Update a line item of a receipt",
        "operationId": "patch_receipts_id_line_items_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receipt_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "line_item_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptLineItemUpdateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptLineItemResponseSchema"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get receivables",
        "description": "Returns a list of [accounts receivable](https://docs.monite.com/accounts-receivable/index) documents - invoices, quotes, and credit notes - of the specified entity.\n\nResults can be filtered by amount, counterpart, due date, and other criteria. Multiple filters are combined using logical AND unless specified otherwise. If no documents matching the search criteria are found, the endpoint returns a successful response with an empty `data` array.\n\nThis endpoint supports [pagination](https://docs.monite.com/api/concepts/pagination-sorting-filtering) and sorting. By default, results are sorted by the creation date in ascending order (from oldest to newest).\n\n#### Examples\n\n##### Invoices\n\n* Get all overdue invoices:\n    ```\n    GET /receivables?type=invoice&status=overdue\n    ```\n\n* Get all invoices created for the counterpart named \"Solarwind\" (case-insensitive):\n\n    ```\n    GET /receivables?type=invoice?counterpart_name__icontains=Solarwind\n    ```\n\n* Get invoices whose total amount starts from 500 EUR:\n\n    ```\n    GET /receivables?type=invoice&total_amount__gte=50000\n    ```\n\n* Get invoices that are due for payment in September 2024:\n\n    ```\n    GET /receivables?type=invoice&due_date__gte=2024-09-01T00:00:00Z&due_date__lt=2024-10-01T00:00:00Z\n    ```\n\n* Get invoices created on or after September 1, 2024:\n\n    ```\n    GET /receivables?type=invoice&created_at__gte=2024-09-01T00:00:00Z\n    ```\n\n* Find an invoice created from a specific quote:\n\n    ```\n    GET /receivables?type=invoice?based_on=QUOTE_ID\n    ```\n\n##### Quotes\n\n* Get the latest created quote:\n\n    ```\n    GET /receivables?type=quote&sort=created_at&order=desc&limit=1\n    ```\n\n* Get the latest issued quote:\n\n    ```\n    GET /receivables?type=quote&sort=issue_date&order=desc&limit=1\n    ```\n\n##### Credit notes\n\n* Find all credit notes created for a specific invoice:\n\n    ```\n    GET /receivables?type=credit_note?based_on=INVOICE_ID\n    ```",
        "operationId": "get_receivables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page. \n\nWhen using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Return only receivables with the specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.\n\nTo specify multiple IDs, repeat this parameter for each value:\n`id__in=<id1>&id__in=<id2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "Return only receivables that have the specified statuses. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).\n\nTo specify multiple statuses, repeat this parameter for each value:\n`status__in=draft&status__in=issued`",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "enum": [
                  "draft",
                  "issuing",
                  "issued",
                  "failed",
                  "accepted",
                  "expired",
                  "declined",
                  "recurring",
                  "partially_paid",
                  "paid",
                  "overdue",
                  "uncollectible",
                  "canceled"
                ]
              },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "Return only receivables created by the entity users with the specified IDs.To specify multiple user IDs, repeat this parameter for each ID:\n`entity_user_id__in=<user1>&entity_user_id__in=<user2>`\n\nIf the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.\n\nIDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "entity_user_id__in",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ReceivableCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Return only receivables whose [tags](https://docs.monite.com/common/tags) include at least one of the tags with the specified IDs.\n\nFor example, given receivables with the following tags:\n1. tagA\n2. tagB\n3. tagA, tagB\n4. tagC\n5. tagB, tagC\n\n\n`tag_ids__in=<tagA>&tag_ids__in=<tagB>` will return receivables 1, 2, 3, and 5.\n\nValid but nonexistent tag IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids__in",
            "in": "query"
          },
          {
            "description": "Return only receivables whose [tags](https://docs.monite.com/common/tags) include all of the tags with the specified IDs and optionally other tags that are not specified.\n\nFor example, given receivables with the following tags:\n1. tagA\n2. tagB\n3. tagA, tagB\n4. tagC\n5. tagA, tagB, tagC\n\n\n`tag_ids=<tagA>&tag_ids=<tagB>` will return receivables 3 and 5.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "tag_ids",
            "in": "query"
          },
          {
            "description": "Return only receivables whose line items include at least one of the product IDs with the specified IDs. \n\nTo specify multiple product IDs, repeat this parameter for each ID:\n`product_ids__in=<product1>&product_ids__in=<product2>`\n\nFor example, given receivables with the following product IDs:\n1. productA\n2. productB\n3. productA, productB\n4. productC\n5. productB, productC\n\n\n`product_ids__in=<productA>&product_ids__in=<productB>` will return receivables 1, 2, 3, and 5.Valid but nonexistent product IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "product_ids__in",
            "in": "query"
          },
          {
            "description": "Return only receivables whose line items include all of the product IDs with the specified IDs and optionally other products that are not specified. \n\nTo specify multiple product IDs, repeat this parameter for each ID:\n`product_ids=<product1>&product_ids=<product2>`\n\nFor example, given receivables with the following product IDs:\n1. productA\n2. productB\n3. productA, productB\n4. productC\n5. productA, productB, productC\n\n\n`product_ids=<productA>&product_ids=<productB>` will return receivables 3 and 5.\n\n",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "product_ids",
            "in": "query"
          },
          {
            "description": "Return only receivables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results.",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "project_id__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ReceivableType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "document_id__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "issue_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__contains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "counterpart_name__icontains",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "total_amount__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "integer" },
            "name": "discounted_subtotal__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "issuing",
                "issued",
                "failed",
                "accepted",
                "expired",
                "declined",
                "recurring",
                "partially_paid",
                "paid",
                "overdue",
                "uncollectible",
                "canceled"
              ]
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "based_on",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date" },
            "name": "due_date__lte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`,`Object type at permissions not found: {object_type}`,`Action {action} for {object_type} not allowed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "schema_name": "ReceivablePaginationResponse",
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Receivables"],
        "summary": "Create a receivable",
        "operationId": "post_receivables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableFacadeCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/required_fields": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get required field names for invoice creation",
        "description": "Get field requirements for invoice creation given the entity and counterpart details.",
        "operationId": "get_receivables_required_fields",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_billing_address_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/AllowedCountries" },
            "name": "counterpart_country",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/CounterpartType" },
            "name": "counterpart_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_vat_id_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_vat_id_id",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableRequiredFields"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/search": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Search receivables",
        "description": "This is a POST version of the `GET /receivables` endpoint. Use it to send search and filter parameters in the request body instead of the URL query string in case the query is too long and exceeds the URL length limit of your HTTP client.",
        "operationId": "post_receivables_search",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivablesSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Possible responses: `Action for {object_type} at permissions not found: {action}`,`Object type at permissions not found: {object_type}`,`Action {action} for {object_type} not allowed`",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/variables": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get email template variables",
        "description": "Get a list of placeholders that can be used in email templates for customization.",
        "operationId": "get_receivables_variables",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableTemplatesVariablesObjectList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a receivable by ID",
        "operationId": "get_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Receivables"],
        "summary": "Delete a receivable",
        "operationId": "delete_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Receivables"],
        "summary": "Update a receivable",
        "operationId": "patch_receivables_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableUpdatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/accept": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Accept a quote",
        "operationId": "post_receivables_id_accept",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuoteAcceptRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResult" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/cancel": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Cancel an invoice",
        "operationId": "post_receivables_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/clone": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Clone a receivable",
        "operationId": "post_receivables_id_clone",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/decline": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Decline a quote",
        "operationId": "post_receivables_id_decline",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableDeclinePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResult" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/history": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a receivable's history",
        "description": "Returns the history of the specified accounts receivable document. The history contains all revisions of the document, status updates, and other events that occurred during the document's lifecycle. For more information, see [Document history](https://docs.monite.com/accounts-receivable/document-history).\n\nYou can filter the history by the date range and event type. Events are sorted from oldest to newest by default.",
        "operationId": "get_receivables_id_history",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "ID of the accounts receivable document whose history you want to get.",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ReceivableHistoryCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Return only the specified [event types](https://docs.monite.com/accounts-receivable/document-history#event-types). To include multiple types, repeat this parameter for each value:\n`event_type__in=receivable_updated&event_type__in=status_changed`",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ReceivableHistoryEventTypeEnum"
              },
              "type": "array"
            },
            "name": "event_type__in",
            "in": "query"
          },
          {
            "description": "Return only events caused by the entity users with the specified IDs. To specify multiple user IDs, repeat this parameter for each ID:\n`entity_user_id__in=<user1>&entity_user_id__in=<user2>`",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "entity_user_id__in",
            "in": "query"
          },
          {
            "description": "Return only events that occurred after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__gt",
            "in": "query"
          },
          {
            "description": "Return only events that occurred before the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__lt",
            "in": "query"
          },
          {
            "description": "Return only events that occurred on or after the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__gte",
            "in": "query"
          },
          {
            "description": "Return only events that occurred before or on the specified date and time.",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "timestamp__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableHistoryPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/history/{receivable_history_id}": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a receivable's history record by ID",
        "description": "Returns a single record from the change history of the specified accounts receivable document.",
        "operationId": "get_receivables_id_history_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "ID of the history record to return. You can get these IDs from `GET /receivables/{receivable_id}/history`.",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_history_id",
            "in": "path"
          },
          {
            "description": "ID of the accounts receivable document whose history you want to get.",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableHistoryResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/issue": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Issue a receivable",
        "operationId": "post_receivables_id_issue",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/line_items": {
      "put": {
        "tags": ["Receivables"],
        "summary": "Update the line items of a receivable",
        "description": "Replace all line items of an existing invoice or quote with a new list of line items.",
        "operationId": "put_receivables_id_line_items",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateLineItems" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LineItemsResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mails": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a list of all mails sent by receivable",
        "operationId": "get_receivables_id_mails",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/ReceivableMailCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ReceivableMailStatusEnum"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ReceivableMailStatusEnum"
              },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gte",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lte",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableMailPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mails/{mail_id}": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a mail sent by receivable",
        "operationId": "get_receivables_id_mails_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "mail_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableMailResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mark_as_paid": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Mark an invoice as paid",
        "operationId": "post_receivables_id_mark_as_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReceivablePaidPayload" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mark_as_partially_paid": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Mark an invoice as partially paid",
        "description": "Deprecated. Use `POST /payment_records` to record an invoice payment.",
        "operationId": "post_receivables_id_mark_as_partially_paid",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivablePartiallyPaidPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/mark_as_uncollectible": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Mark an invoice as uncollectible",
        "operationId": "post_receivables_id_mark_as_uncollectible",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableUncollectiblePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/pdf_link": {
      "get": {
        "tags": ["Receivables"],
        "summary": "Get a link to the PDF version of a receivable",
        "operationId": "get_receivables_id_pdf_link",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReceivableFileUrl" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/preview": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Preview a receivable's email message",
        "operationId": "post_receivables_id_preview",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivablePreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablePreviewResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/send": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Send a receivable via email",
        "operationId": "post_receivables_id_send",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ReceivableSendRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableSendResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/send_test_reminder": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Send a test reminder",
        "operationId": "post_receivables_id_send_test_reminder",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceivableSendTestReminderPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesSendResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/receivables/{receivable_id}/verify": {
      "post": {
        "tags": ["Receivables"],
        "summary": "Verify a receivable",
        "operationId": "post_receivables_id_verify",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "receivable_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesVerifyResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences": {
      "get": {
        "tags": ["Recurrences"],
        "summary": "Get recurrences",
        "operationId": "get_recurrences",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurrenceResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Recurrences"],
        "summary": "Create a recurrence",
        "operationId": "post_recurrences",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecurrencePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RecurrenceResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences/{recurrence_id}": {
      "get": {
        "tags": ["Recurrences"],
        "summary": "Get a recurrence by ID",
        "operationId": "get_recurrences_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RecurrenceResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Recurrences"],
        "summary": "Update a recurrence",
        "operationId": "patch_recurrences_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecurrencePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RecurrenceResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences/{recurrence_id}/cancel": {
      "post": {
        "tags": ["Recurrences"],
        "summary": "Cancel a recurrence",
        "operationId": "post_recurrences_id_cancel",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences/{recurrence_id}/pause": {
      "post": {
        "tags": ["Recurrences"],
        "summary": "Pause a recurrence",
        "operationId": "post_recurrences_id_pause",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/recurrences/{recurrence_id}/resume": {
      "post": {
        "tags": ["Recurrences"],
        "summary": "Resume a recurrence",
        "operationId": "post_recurrences_id_resume",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "recurrence_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/roles": {
      "post": {
        "tags": ["Roles"],
        "summary": "Create a role",
        "description": "Create a new role from the specified values.",
        "operationId": "post_roles",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateRoleRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Roles"],
        "summary": "Search roles",
        "description": "Find all roles that match the search criteria.",
        "operationId": "get_roles",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderEnum",
              "default": "asc"
            },
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page."
          },
          {
            "name": "pagination_token",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/RoleCursorFields" },
                { "type": "null" }
              ]
            },
            "description": "The field to sort the results by. Typically used together with the `order` parameter."
          },
          {
            "name": "id__in",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": { "type": "string", "format": "uuid" }
                },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "created_at",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/roles/{role_id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get a role by ID",
        "operationId": "get_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Roles"],
        "summary": "Update a role",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateRoleRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Delete a role",
        "description": "Delete a role with the specified ID. The role being deleted must not be in use by any entity users, otherwise a 409 error is returned. To check if there are entity users that have this role, call `GET /entity_users?role_id=ROLE_ID`.",
        "operationId": "delete_roles_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/settings": {
      "patch": {
        "tags": ["Partner settings"],
        "summary": "Update partner settings",
        "description": "Change the specified fields with the provided values.",
        "operationId": "patch_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerProjectSettingsPayload-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerProjectSettingsPayload-Output"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "get": {
        "tags": ["Partner settings"],
        "summary": "Get partner settings",
        "description": "Retrieve all settings for this partner.",
        "operationId": "get_settings",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerProjectSettingsPayload-Output"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/tags": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get tags",
        "description": "Get a list of all tags. Tags can be assigned to resources to assist with searching and filtering.\n    Tags can also be used as trigger conditions in payable approval policies.",
        "operationId": "get_tags",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned.",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "The field to sort the results by. Typically used together with the `order` parameter.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/TagCursorFields" }]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "created_by_entity_user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "name__in",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "id__in",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagsPaginationResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Tags"],
        "summary": "Create a tag",
        "description": "Create a new tag. The tag name must be unique.\n    Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.\n\n\nThe response returns an auto-generated ID assigned to this tag.\nTo assign this tag to a resource, send the tag ID in the `tag_ids` list when creating or updating a resource.",
        "operationId": "post_tags",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TagCreateSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagReadSchema" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/tags/{tag_id}": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get a tag by ID",
        "description": "Get information about a tag with the given ID.",
        "operationId": "get_tags_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tag_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagReadSchema" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Delete a tag",
        "description": "Delete a tag with the given ID. This tag will be automatically deleted from all resources where it was used.",
        "operationId": "delete_tags_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tag_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Tags"],
        "summary": "Update a tag",
        "description": "Change the tag name. The new name must be unique among existing tags.\n    Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.",
        "operationId": "patch_tags_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "tag_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TagUpdateSchema" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TagReadSchema" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorSchemaResponse3"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates": {
      "get": {
        "tags": ["Text templates"],
        "summary": "Get text templates",
        "description": "Get text templates",
        "operationId": "get_text_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/TextTemplateType" },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TextTemplateDocumentTypeEnum"
            },
            "name": "document_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "is_default",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Text templates"],
        "summary": "Create a text template",
        "description": "Create a text template",
        "operationId": "post_text_templates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTextTemplatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates/{text_template_id}": {
      "get": {
        "tags": ["Text templates"],
        "summary": "Get a text template by ID",
        "description": "Get all custom contents",
        "operationId": "get_text_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Text templates"],
        "summary": "Delete a text template",
        "description": "Delete custom content by ID",
        "operationId": "delete_text_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "UUID text_template ID",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Text templates"],
        "summary": "Update a text template by ID",
        "description": "Update custom content by ID",
        "operationId": "patch_text_templates_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "UUID text_template ID",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTextTemplatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/text_templates/{text_template_id}/make_default": {
      "post": {
        "tags": ["Text templates"],
        "summary": "Make a text template default",
        "description": "Make text template default",
        "operationId": "post_text_templates_id_make_default",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "UUID text_template ID",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "text_template_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextTemplateResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/transactions": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get transactions",
        "operationId": "get_transactions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "Order by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
              "default": "asc"
            },
            "name": "order",
            "in": "query"
          },
          {
            "description": "Max is 100",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100.0,
              "minimum": 1.0,
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "A token, obtained from previous page. Prior over other filters",
            "required": false,
            "schema": { "type": "string" },
            "name": "pagination_token",
            "in": "query"
          },
          {
            "description": "Allowed sort fields",
            "required": false,
            "schema": {
              "allOf": [
                { "$ref": "#/components/schemas/TransactionCursorFields" }
              ]
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "Created after this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__gt",
            "in": "query"
          },
          {
            "description": "Created before this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "created_at__lt",
            "in": "query"
          },
          {
            "description": "Updated after this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__gt",
            "in": "query"
          },
          {
            "description": "Updated before this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "updated_at__lt",
            "in": "query"
          },
          {
            "description": "Transaction started after this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "started_at__gt",
            "in": "query"
          },
          {
            "description": "Transaction started before this datetime (exclusive)",
            "required": false,
            "schema": { "type": "string", "format": "date-time" },
            "name": "started_at__lt",
            "in": "query"
          },
          {
            "description": "One or multiple of the transaction statuses",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/TransactionStatusEnum" },
              "type": "array"
            },
            "name": "status__in",
            "in": "query"
          },
          {
            "description": "One or multiple of the transaction types",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/TransactionTypeEnum" },
              "type": "array"
            },
            "name": "type__in",
            "in": "query"
          },
          {
            "description": "One or multiple of the entity users",
            "required": false,
            "schema": {
              "items": { "type": "string", "format": "uuid" },
              "type": "array"
            },
            "name": "entity_user_id__in",
            "in": "query"
          },
          {
            "description": "One or multiple of the transaction external ids",
            "required": false,
            "schema": { "items": { "type": "string" }, "type": "array" },
            "name": "external_id__in",
            "in": "query"
          },
          {
            "description": "Amount greater than (exclusive)",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__gt",
            "in": "query"
          },
          {
            "description": "Amount less than (exclusive)",
            "required": false,
            "schema": { "type": "integer" },
            "name": "amount__lt",
            "in": "query"
          },
          {
            "description": "One or multiple of the transaction currencies",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/CurrencyEnum" },
              "type": "array"
            },
            "name": "currency__in",
            "in": "query"
          },
          {
            "description": "Merchant amount greater than (exclusive)",
            "required": false,
            "schema": { "type": "integer" },
            "name": "merchant_amount__gt",
            "in": "query"
          },
          {
            "description": "Merchant amount less than (exclusive)",
            "required": false,
            "schema": { "type": "integer" },
            "name": "merchant_amount__lt",
            "in": "query"
          },
          {
            "description": "One or multiple of the transaction merchant currencies",
            "required": false,
            "schema": {
              "items": { "$ref": "#/components/schemas/CurrencyEnum" },
              "type": "array"
            },
            "name": "merchant_currency__in",
            "in": "query"
          },
          {
            "description": "Partially matched merchant name",
            "required": false,
            "schema": { "type": "string" },
            "name": "merchant_name__icontains",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponseList"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a transaction",
        "operationId": "post_transactions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TransactionRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/transactions/bulk": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create multiple transactions",
        "operationId": "post_transactions_bulk",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionBulkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionBulkResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get a transaction",
        "operationId": "get_transactions_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "transaction_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete a transaction",
        "operationId": "delete_transactions_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "transaction_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Transactions"],
        "summary": "Update a transaction",
        "operationId": "patch_transactions_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "name": "transaction_id",
            "in": "path"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "409": {
            "description": "Business logic error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/vat_rates": {
      "get": {
        "tags": ["VAT rates"],
        "summary": "Get VAT rates",
        "operationId": "get_vat_rates",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_address_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "counterpart_vat_id_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string", "format": "uuid" },
            "name": "entity_vat_id_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/ProductServiceTypeEnum" },
            "name": "product_type",
            "in": "query"
          },
          {
            "description": "The ID of the entity that owns the requested resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "name": "x-monite-entity-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VatRateListResponse" }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_deliveries": {
      "get": {
        "tags": ["Webhook deliveries"],
        "summary": "Get the webhook delivery log",
        "description": "Returns an aggregated log of webhook delivery attempts. The data contains a list of triggered webhook events, how many times Monite tried to send each event to your server, the last HTTP status code returned by your webhook listener endpoint, and whether the final attempt to deliver that event was successful.\n\nWe guarantee access to webhook delivery data only from the last three months. Earlier data may be unavailable.\n\nNote that if the same event type is included in multiple webhook subscriptions, the results will include several entries for each occurrence of this event - one entry per subscription.",
        "operationId": "get_webhook_deliveries",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderEnum",
              "default": "asc"
            },
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page."
          },
          {
            "name": "pagination_token",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/WebhookDeliveryCursorFields" },
                { "type": "null" }
              ]
            },
            "description": "The field to sort the results by. Typically used together with the `order` parameter."
          },
          {
            "name": "event_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "object_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/WebhookObjectType" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "event_action",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "x-monite-entity-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "examples": ["9d2b4c8f-2087-4738-ba91-7359683c49a4"]
            },
            "description": "The ID of the entity that owns the requested resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDeliveryPaginationResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_subscriptions": {
      "get": {
        "tags": ["Webhook subscriptions"],
        "summary": "Get webhook subscriptions",
        "operationId": "get_webhook_subscriptions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderEnum",
              "default": "asc"
            },
            "description": "Sort order (ascending by default). Typically used together with the `sort` parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 100
            },
            "description": "The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page."
          },
          {
            "name": "pagination_token",
            "in": "query",
            "required": false,
            "schema": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
            "description": "A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.\n\nIf not specified, the first page of results will be returned."
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WebhookSubscriptionCursorFields"
                },
                { "type": "null" }
              ]
            },
            "description": "The field to sort the results by. Typically used together with the `order` parameter."
          },
          {
            "name": "object_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/WebhookObjectType" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          },
          {
            "name": "created_at__lte",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date-time" },
                { "type": "null" }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionPaginationResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["Webhook subscriptions"],
        "summary": "Subscribe to a webhook",
        "operationId": "post_webhook_subscriptions",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookSubscriptionRequest"
              }
            }
          }
        },
        "callbacks": {
          "webhook_notification": {
            "{$request.body.url}": {
              "post": {
                "summary": "Webhook Notification",
                "operationId": "webhook_notification__request_body_url__post",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EventResourceForWebhookClient"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Successful Response",
                    "content": { "application/json": { "schema": {} } }
                  },
                  "422": {
                    "description": "Validation Error",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/HTTPValidationError"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResourceWithSecret"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_subscriptions/{webhook_subscription_id}": {
      "get": {
        "tags": ["Webhook subscriptions"],
        "summary": "Get a webhook subscription",
        "operationId": "get_webhook_subscriptions_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "webhook_subscription_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "patch": {
        "tags": ["Webhook subscriptions"],
        "summary": "Update a webhook subscription",
        "operationId": "patch_webhook_subscriptions_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "webhook_subscription_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "delete": {
        "tags": ["Webhook subscriptions"],
        "summary": "Delete a webhook subscription",
        "operationId": "delete_webhook_subscriptions_id",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "webhook_subscription_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_subscriptions/{webhook_subscription_id}/disable": {
      "post": {
        "tags": ["Webhook subscriptions"],
        "summary": "Disable a webhook subscription",
        "operationId": "post_webhook_subscriptions_id_disable",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "webhook_subscription_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_subscriptions/{webhook_subscription_id}/enable": {
      "post": {
        "tags": ["Webhook subscriptions"],
        "summary": "Enable a webhook subscription",
        "operationId": "post_webhook_subscriptions_id_enable",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "webhook_subscription_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResource"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret": {
      "post": {
        "tags": ["Webhook subscriptions"],
        "summary": "Regenerate a webhook secret and return the new webhook subscription",
        "operationId": "post_webhook_subscriptions_id_regenerate_secret",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "format": "date" },
            "example": "2024-05-25",
            "name": "x-monite-version",
            "in": "header"
          },
          {
            "name": "webhook_subscription_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscriptionResourceWithSecret"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorSchemaResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "APIVersion": {
        "type": "string",
        "enum": [
          "2025-06-23",
          "2024-05-25",
          "2024-01-31",
          "2023-09-01",
          "2023-06-04",
          "2023-04-12",
          "2023-03-14",
          "2023-03-01",
          "2023-02-07",
          "2022-11-16"
        ]
      },
      "AcceptInvitationPayload": {
        "properties": {
          "fullname": { "type": "string", "minLength": 1 },
          "invitation_token": { "type": "string" },
          "password": { "type": "string", "minLength": 12 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["fullname", "invitation_token", "password"]
      },
      "AccessTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "examples": ["L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg"]
          },
          "expires_in": { "type": "integer", "examples": [86400] },
          "token_type": { "type": "string", "examples": ["Bearer"] }
        },
        "type": "object",
        "required": ["access_token", "expires_in", "token_type"]
      },
      "AccountDisabledReason": {
        "type": "string",
        "enum": [
          "requirements.past_due",
          "requirements.pending_verification",
          "listed",
          "platform_paused",
          "rejected.fraud",
          "rejected.listed",
          "rejected.terms_of_service",
          "rejected.other",
          "under_review",
          "other"
        ]
      },
      "AccountIdentification": {
        "properties": {
          "type": { "$ref": "#/components/schemas/PaymentIntentAccountType" },
          "value": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "value"]
      },
      "AccountingConnectionList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AccountingConnectionResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "AccountingConnectionResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "business_info": {
            "$ref": "#/components/schemas/BusinessInfoSchema"
          },
          "connection_url": { "type": "string" },
          "errors": {
            "items": { "$ref": "#/components/schemas/ErrorSchema" },
            "type": "array"
          },
          "last_pull": { "type": "string", "format": "date-time" },
          "platform": { "type": "string" },
          "status": { "$ref": "#/components/schemas/ConnectionStatus" }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "connection_url"]
      },
      "AccountingCustomerRefObject": {
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier of the customer in the accounting system.",
            "example": "120"
          },
          "company_name": {
            "type": "string",
            "description": "Customer name in the accounting system.",
            "example": "Acme Inc."
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "AccountingLineItem": {
        "properties": {
          "description": {
            "type": "string",
            "description": "The name or description of the product or service being invoiced.",
            "example": "Logo design"
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount for this line item (if any)."
          },
          "discount_percentage": {
            "type": "number",
            "description": "Discount percentage for this line item (if any)."
          },
          "ledger_account_id": {
            "type": "string",
            "description": "ID of the ledger account associated with this line item. You can use `GET /ledger_accounts/{ledger_account_id}` to get further details about this ledger account."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the product or service."
          },
          "tax_rate_ref": {
            "allOf": [{ "$ref": "#/components/schemas/AccountingRefObject" }],
            "description": "An internal reference to the tax rate in the accounting system that the line item is linked to."
          },
          "unit_amount": {
            "type": "number",
            "description": "The cost per unit of the product or service."
          }
        },
        "type": "object",
        "description": "Contains the details of an invoice line item retrieved from an accounting system."
      },
      "AccountingMessageResponse": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "AccountingPayable": {
        "properties": {
          "id": {
            "type": "string",
            "description": "An internal identifier of the payable in the accounting system."
          },
          "amount_due": {
            "type": "number",
            "description": "Remaining amount to be paid."
          },
          "currency": {
            "type": "string",
            "description": "ISO-4217 currency code of the payable.",
            "example": "EUR"
          },
          "currency_rate": {
            "type": "number",
            "description": "Rate to convert the total amount of the transaction into the entity's base currency at the time of the transaction."
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "string", "format": "date" }
            ],
            "description": "The payable's due date."
          },
          "invoice_number": {
            "type": "string",
            "description": "Invoice number of the payable."
          },
          "lines": {
            "items": { "$ref": "#/components/schemas/AccountingLineItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "Any additional information or business notes about the payable."
          },
          "posted_date": {
            "type": "string",
            "format": "date",
            "description": "Date when the payable was added to the accounting service. This may differ from the payable creation date."
          },
          "purchase_order_refs": {
            "items": {
              "$ref": "#/components/schemas/AccountingPurchaseOrderRef"
            },
            "type": "array",
            "description": "A list of purchase orders linked to the payable, if any."
          },
          "status": {
            "type": "string",
            "description": "The status of the payable in the accounting system. Possible values: `open`, `draft`, `partially_paid`, `paid`, `unknown`, `void`.",
            "example": "paid"
          },
          "subtotal": {
            "type": "number",
            "description": "Amount payable, including discounts but excluding VAT/taxes."
          },
          "tax_amount": {
            "type": "number",
            "description": "Total VAT or tax amount."
          },
          "total_amount": {
            "type": "number",
            "description": "The total amount payable, including discounts and VAT/taxes."
          },
          "vendor_ref": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountingVendorRefObject" }
            ],
            "description": "Information about the vendor from whom the payable was received."
          }
        },
        "type": "object",
        "required": ["id", "status", "total_amount"],
        "description": "Details of an accounts payable invoice (bill) retrieved from an accounting system."
      },
      "AccountingPayableList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/AccountingPayable" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "AccountingPurchaseOrderRef": {
        "properties": {
          "id": {
            "type": "string",
            "description": "An internal ID of the purchase order in the accounting system.",
            "example": "10"
          },
          "name": {
            "type": "string",
            "description": "Reference number of the purchase order.",
            "example": "PO-1234"
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "AccountingReceivable": {
        "properties": {
          "id": {
            "type": "string",
            "description": "An internal identifier of the invoice in the accounting system."
          },
          "currency": {
            "type": "string",
            "description": "ISO-4217 currency code of the invoice.",
            "example": "EUR"
          },
          "currency_rate": {
            "type": "number",
            "description": "Rate to convert the total amount of the transaction into the entity's base currency at the time of the transaction."
          },
          "customer_ref": {
            "allOf": [
              { "$ref": "#/components/schemas/AccountingCustomerRefObject" }
            ],
            "description": "Information about the customer that the invoice was sent to."
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "string", "format": "date" }
            ],
            "description": "Invoice due date."
          },
          "invoice_number": {
            "type": "string",
            "description": "Invoice document number."
          },
          "lines": {
            "items": { "$ref": "#/components/schemas/AccountingLineItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "Any additional information or business notes about the invoice."
          },
          "pass_through": {
            "type": "object",
            "description": "An object containing additional invoice data returned by the accounting system. This sometimes includes custom invoice fields."
          },
          "posted_date": {
            "type": "string",
            "format": "date",
            "description": "Date when the invoice was added to the accounting service. This may differ from the invoice creation date."
          }
        },
        "type": "object",
        "description": "Invoice details retrieved from an accounting system."
      },
      "AccountingReceivableList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/AccountingReceivable" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "AccountingRefObject": {
        "properties": {
          "id": {
            "type": "string",
            "description": "An internal ID of the tax rate in the accounting system."
          }
        },
        "type": "object"
      },
      "AccountingSettings": {
        "properties": {
          "ledger_account_ids": {
            "anyOf": [
              { "$ref": "#/components/schemas/DefaultLedgerAccountIDs" },
              { "type": "null" }
            ],
            "description": "Default ledger accounts that will be used for various objects pushed into an accounting system. Use `GET /ledger_accounts` to get the IDs of these ledger accounts."
          },
          "tax_ids": {
            "anyOf": [
              { "$ref": "#/components/schemas/DefaultAccountingTaxIDs" },
              { "type": "null" }
            ],
            "description": "Default accounting tax IDs that will be used for various objects pushed into an accounting system. Use `GET /accounting_tax_rates` to get the IDs of these taxes."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "AccountingTaxRateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/AccountingTaxRateResponse"
            },
            "type": "array"
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        },
        "type": "object",
        "required": ["data"]
      },
      "AccountingTaxRateResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "code": {
            "type": "string",
            "description": "Code for the tax rate from the accounting platform."
          },
          "components": {
            "items": { "$ref": "#/components/schemas/TaxComponentResponse" },
            "type": "array"
          },
          "effective_tax_rate": {
            "type": "integer",
            "description": "Effective tax rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250."
          },
          "name": { "type": "string" },
          "status": { "type": "string" },
          "total_tax_rate": {
            "type": "integer",
            "description": "Total (not compounded) sum of the components of a tax rate in [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "AccountingVendorRefObject": {
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier of the vendor in the accounting system.",
            "example": "120"
          },
          "name": {
            "type": "string",
            "description": "Vendor name in the accounting system.",
            "example": "Acme Inc."
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "ActionEnum": {
        "type": "string",
        "enum": ["create", "read", "update", "delete"]
      },
      "ActionSchema": {
        "properties": {
          "action_name": {
            "$ref": "#/components/schemas/PortalActionEnum",
            "description": "Action name",
            "default": "read"
          },
          "permission": {
            "$ref": "#/components/schemas/PortalPermissionEnum",
            "description": "Permission type",
            "default": "allowed"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ActionSchema2": {
        "properties": {
          "action_name": {
            "$ref": "#/components/schemas/ActionEnum",
            "description": "Action name",
            "default": "read"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionEnum",
            "description": "Permission type",
            "default": "allowed"
          }
        },
        "type": "object"
      },
      "AddCustomTemplateSchema": {
        "properties": {
          "body_template": {
            "type": "string",
            "minLength": 1,
            "description": "Jinja2 compatible string with email body"
          },
          "is_default": {
            "type": "boolean",
            "description": "Is default template",
            "default": false
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "Lowercase ISO code of language",
            "default": "en"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "description": "Custom template name"
          },
          "subject_template": {
            "type": "string",
            "minLength": 1,
            "description": "Jinja2 compatible string with email subject"
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentObjectTypeRequestEnum" }
            ],
            "description": "Document type of content"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_template", "name", "subject_template", "type"]
      },
      "AggregationFunctionEnum": {
        "type": "string",
        "enum": ["count", "average", "summary", "min", "max"]
      },
      "AirwallexData": {
        "properties": {
          "payment_intent_id": { "type": "string" },
          "secret": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["payment_intent_id", "secret"]
      },
      "AirwallexMandate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "PDF copy of mandate will be sent to the email by Airwallex"
          },
          "signatory": {
            "type": "string",
            "minLength": 1,
            "description": "Name of the person signed the mandate, must be a bank account owner"
          },
          "type": { "$ref": "#/components/schemas/AirwallexMandateType" },
          "version": { "$ref": "#/components/schemas/AirwallexMandateVersion" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "signatory", "type", "version"]
      },
      "AirwallexMandateType": { "type": "string", "enum": ["us_ach_debit"] },
      "AirwallexMandateVersion": { "type": "string", "enum": ["1.0"] },
      "AirwallexPlaidAccount": {
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "Plaid`s unique identifier for the account"
          },
          "mask": {
            "type": "string",
            "minLength": 1,
            "description": "The last 2-4 alphanumeric characters of an account's official account number"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of the account, either assigned by the user or by the financial institution itself"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "mask", "name"]
      },
      "AirwallexPlaidBankAccountVerificationStatus": {
        "type": "string",
        "enum": ["verified", "expired", "suspended"]
      },
      "AirwallexPlaidInstitution": {
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "description": "The institution identifier assigned by Plaid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "The full financial institution name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "name"]
      },
      "AirwallexPlaidVerification": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AirwallexPlaidBankAccountVerificationStatus"
              }
            ],
            "description": "Status of the bank account verification"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["status"]
      },
      "AllDocumentExportResponseSchema": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DocumentExportResponseSchema"
            },
            "type": "array",
            "description": "A set of export objects returned per page."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results. If there is no next page, i.e. you have reached the last page, the value is `null`."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results. If there is no previous page, i.e. you have reached the first page, the value is `null`."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "AllOverdueRemindersResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/OverdueReminderResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "AllowedCountries": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "IC",
          "CV",
          "KY",
          "CF",
          "EA",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "AN",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "MK",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "SH",
          "KN",
          "LC",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "SS",
          "GS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "US",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "BL",
          "BQ",
          "CW",
          "MF",
          "SX"
        ]
      },
      "AllowedCountriesNames": {
        "type": "string",
        "enum": [
          "Afghanistan",
          "Åland Islands",
          "Albania",
          "Algeria",
          "American Samoa",
          "Andorra",
          "Angola",
          "Anguilla",
          "Antarctica",
          "Antigua and Barbuda",
          "Argentina",
          "Armenia",
          "Aruba",
          "Australia",
          "Austria",
          "Azerbaijan",
          "Bahamas",
          "Bahrain",
          "Bangladesh",
          "Barbados",
          "Belarus",
          "Belgium",
          "Belize",
          "Benin",
          "Bermuda",
          "Bhutan",
          "Bolivia",
          "Bosnia and Herzegovina",
          "Botswana",
          "Bouvet Island",
          "Brazil",
          "British Indian Ocean Territory",
          "Brunei Darussalam",
          "Bulgaria",
          "Burkina Faso",
          "Burundi",
          "Cambodia",
          "Cameroon",
          "Canada",
          "Canary Islands",
          "Cabo Verde",
          "Cayman Islands",
          "Central African Republic",
          "Ceuta and Melilla",
          "Chad",
          "Chile",
          "China",
          "Christmas Island",
          "Cocos Islands",
          "Colombia",
          "Comoros",
          "Congo",
          "Democratic Republic of the Congo",
          "Cook Islands",
          "Costa Rica",
          "Côte d'Ivoire",
          "Croatia",
          "Cuba",
          "Cyprus",
          "Czech Republic",
          "Denmark",
          "Djibouti",
          "Dominica",
          "Dominican Republic",
          "Ecuador",
          "Egypt",
          "El Salvador",
          "Equatorial Guinea",
          "Eritrea",
          "Estonia",
          "Eswatini",
          "Ethiopia",
          "Falkland Islands",
          "Faroe Islands",
          "Fiji",
          "Finland",
          "France",
          "French Guiana",
          "French Polynesia",
          "French Southern Territories",
          "Gabon",
          "Gambia",
          "Georgia",
          "Germany",
          "Ghana",
          "Gibraltar",
          "Greece",
          "Greenland",
          "Grenada",
          "Guadeloupe",
          "Guam",
          "Guatemala",
          "Guernsey",
          "Guinea",
          "Guinea-Bissau",
          "Guyana",
          "Haiti",
          "Heard Island and McDonald Islands",
          "Holy See (Vatican City State)",
          "Honduras",
          "Hong Kong",
          "Hungary",
          "Iceland",
          "India",
          "Indonesia",
          "Iran",
          "Iraq",
          "Ireland",
          "Isle of Man",
          "Israel",
          "Italy",
          "Jamaica",
          "Japan",
          "Jersey",
          "Jordan",
          "Kazakhstan",
          "Kenya",
          "Kiribati",
          "North Korea",
          "South Korea",
          "Kuwait",
          "Kyrgyzstan",
          "Laos",
          "Latvia",
          "Lebanon",
          "Lesotho",
          "Liberia",
          "Libya",
          "Liechtenstein",
          "Lithuania",
          "Luxembourg",
          "Macao",
          "Madagascar",
          "Malawi",
          "Malaysia",
          "Maldives",
          "Mali",
          "Malta",
          "Marshall Islands",
          "Martinique",
          "Mauritania",
          "Mauritius",
          "Mayotte",
          "Mexico",
          "Micronesia, Federated States of",
          "Moldova, Republic of",
          "Monaco",
          "Mongolia",
          "Montenegro",
          "Montserrat",
          "Morocco",
          "Mozambique",
          "Myanmar",
          "Namibia",
          "Nauru",
          "Nepal",
          "Netherlands",
          "Netherlands Antilles",
          "New Caledonia",
          "New Zealand",
          "Nicaragua",
          "Niger",
          "Nigeria",
          "Niue",
          "Norfolk Island",
          "Northern Mariana Islands",
          "North Macedonia",
          "Norway",
          "Oman",
          "Pakistan",
          "Palau",
          "Palestine",
          "Panama",
          "Papua New Guinea",
          "Paraguay",
          "Peru",
          "Philippines",
          "Pitcairn",
          "Poland",
          "Portugal",
          "Puerto Rico",
          "Qatar",
          "Réunion",
          "Romania",
          "Russian Federation",
          "Rwanda",
          "Saint Helena",
          "Saint Kitts and Nevis",
          "Saint Lucia",
          "Saint Pierre and Miquelon",
          "Saint Vincent and the Grenadines",
          "Samoa",
          "San Marino",
          "Sao Tome and Principe",
          "Saudi Arabia",
          "Senegal",
          "Serbia",
          "Seychelles",
          "Sierra Leone",
          "Singapore",
          "Slovakia",
          "Slovenia",
          "Solomon Islands",
          "Somalia",
          "South Africa",
          "South Sudan",
          "South Georgia and the South Sandwich Islands",
          "Spain",
          "Sri Lanka",
          "Sudan",
          "Suriname",
          "Svalbard and Jan Mayen",
          "Sweden",
          "Switzerland",
          "Syrian Arab Republic",
          "Taiwan",
          "Tajikistan",
          "Tanzania",
          "Thailand",
          "Timor-Leste",
          "Togo",
          "Tokelau",
          "Tonga",
          "Trinidad and Tobago",
          "Tunisia",
          "Türkiye",
          "Turkmenistan",
          "Turks and Caicos Islands",
          "Tuvalu",
          "Uganda",
          "Ukraine",
          "United Arab Emirates",
          "United Kingdom",
          "United States of America",
          "United States Minor Outlying Islands",
          "Uruguay",
          "Uzbekistan",
          "Vanuatu",
          "Venezuela",
          "Viet Nam",
          "Virgin Islands, British",
          "Virgin Islands, U.S.",
          "Wallis and Futuna",
          "Western Sahara",
          "Yemen",
          "Zambia",
          "Zimbabwe",
          "Saint Barthélemy",
          "Bonaire, Sint Eustatius and Saba",
          "Curaçao",
          "Saint Martin (French part)",
          "Sint Maarten (Dutch part)"
        ]
      },
      "AllowedEinvoicingCountryCodes": {
        "type": "string",
        "enum": ["DE", "NL", "BE"]
      },
      "AllowedFileTypes": {
        "type": "string",
        "enum": [
          "ocr_results",
          "ocr_files",
          "payables",
          "receivables",
          "delivery_notes",
          "receipts",
          "userpics",
          "entity_logo",
          "companies_logo",
          "zip",
          "identity_documents",
          "additional_identity_documents",
          "receivable_signatures",
          "einvoices_xml"
        ]
      },
      "AnalyticsDataPoint": {
        "properties": {
          "dimension_value": { "type": "string" },
          "metric_value": { "type": "number" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["metric_value"]
      },
      "ApprovalPolicyCreate": {
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "A brief description of the approval policy."
          },
          "ends_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time (in the ISO 8601 format) when the approval policy stops being active and stops triggering approval workflows.If `ends_at` is provided in the request, then `starts_at` must also be provided and `ends_at` must be later than `starts_at`. The value will be converted to UTC."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the approval policy."
          },
          "priority": {
            "type": "integer",
            "maximum": 32767.0,
            "minimum": -32768.0,
            "description": "The priority controls which approval policy takes precedence when a payable matches multiple approval policies. A higher value mean higher priority.",
            "default": 0
          },
          "script": {
            "items": {
              "anyOf": [
                { "type": "boolean" },
                { "type": "number", "minimum": 1.0 },
                { "type": "string" },
                { "items": {}, "type": "array" },
                { "type": "object" }
              ]
            },
            "type": "array",
            "description": "A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object."
          },
          "starts_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time (in the ISO 8601 format) when the approval policy becomes active. Only payables submitted for approval during the policy's active period will trigger this policy. If omitted or `null`, the policy is effective immediately. The value will be converted to UTC."
          },
          "trigger": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "items": {}, "type": "array" },
              { "type": "object" }
            ],
            "description": "A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.",
            "example": "{amount >= 1000}"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "script"]
      },
      "ApprovalPolicyCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "ApprovalPolicyResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "string", "format": "uuid" },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "A brief description of the approval policy."
          },
          "ends_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time (in the ISO 8601 format) when the approval policy stops being active and stops triggering approval workflows.If `ends_at` is provided in the request, then `starts_at` must also be provided and `ends_at` must be later than `starts_at`. The value will be converted to UTC."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the approval policy."
          },
          "priority": {
            "type": "integer",
            "maximum": 32767.0,
            "minimum": -32768.0,
            "description": "The priority controls which approval policy takes precedence when a payable matches multiple approval policies. A higher value mean higher priority.",
            "default": 0
          },
          "script": {
            "items": {
              "anyOf": [
                { "type": "boolean" },
                { "type": "number", "minimum": 1.0 },
                { "type": "string" },
                { "items": {}, "type": "array" },
                { "type": "object" }
              ]
            },
            "type": "array",
            "description": "A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object."
          },
          "starts_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time (in the ISO 8601 format) when the approval policy becomes active. Only payables submitted for approval during the policy's active period will trigger this policy. If omitted or `null`, the policy is effective immediately. The value will be converted to UTC."
          },
          "status": {
            "type": "string",
            "enum": ["active", "pending"],
            "description": "The current status of the approval policy.",
            "example": "active"
          },
          "trigger": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "items": {}, "type": "array" },
              { "type": "object" }
            ],
            "description": "A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.",
            "example": "{amount >= 1000}"
          },
          "updated_by": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "created_by",
          "name",
          "script",
          "status"
        ]
      },
      "ApprovalPolicyResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ApprovalPolicyResource" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "ApprovalPolicyStatus": {
        "type": "string",
        "enum": ["active", "deleted", "pending"]
      },
      "ApprovalPolicyUpdate": {
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the approval policy."
          },
          "ends_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time (in the ISO 8601 format) when the approval policy stops being active and stops triggering approval workflows.If `ends_at` is provided in the request, then `starts_at` must also be provided and `ends_at` must be later than `starts_at`. The value will be converted to UTC."
          },
          "name": {
            "type": "string",
            "description": "The name of the approval policy."
          },
          "priority": {
            "type": "integer",
            "maximum": 32767.0,
            "minimum": -32768.0,
            "description": "The priority controls which approval policy takes precedence when a payable matches multiple approval policies. A higher value mean higher priority."
          },
          "script": {
            "items": {
              "anyOf": [
                { "type": "boolean" },
                { "type": "number", "minimum": 1.0 },
                { "type": "string" },
                { "items": {}, "type": "array" },
                { "type": "object" }
              ]
            },
            "type": "array",
            "description": "A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object."
          },
          "starts_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time (in the ISO 8601 format) when the approval policy becomes active. Only payables submitted for approval during the policy's active period will trigger this policy. If omitted or `null`, the policy is effective immediately. The value will be converted to UTC."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ApprovalPolicyStatus" }],
            "description": "A string that represents the current status of the approval policy."
          },
          "trigger": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "items": {}, "type": "array" },
              { "type": "object" }
            ],
            "description": "A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.",
            "example": "{amount >= 1000}"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ApprovalProcessResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ProcessResource" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "ApprovalProcessStepResource": {
        "properties": {
          "approval_request_id": { "type": "string", "format": "uuid" },
          "approved_by": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "object_id": { "type": "string", "format": "uuid" },
          "rejected_by": { "type": "string", "format": "uuid" },
          "required_approval_count": { "type": "integer", "minimum": 1.0 },
          "role_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/ApprovalProcessStepStatus"
          },
          "user_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "approved_by",
          "object_id",
          "required_approval_count",
          "role_ids",
          "status",
          "user_ids"
        ]
      },
      "ApprovalProcessStepResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApprovalProcessStepResource"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "ApprovalProcessStepStatus": {
        "type": "string",
        "enum": [
          "waiting",
          "approved",
          "rejected",
          "canceled",
          "failed",
          "not_started",
          "skipped"
        ]
      },
      "ApprovalRequestCreateByRoleRequest": {
        "properties": {
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "required_approval_count": { "type": "integer", "minimum": 1.0 },
          "role_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "object_id",
          "object_type",
          "required_approval_count",
          "role_ids"
        ]
      },
      "ApprovalRequestCreateByUserRequest": {
        "properties": {
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "required_approval_count": { "type": "integer", "minimum": 1.0 },
          "user_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "object_id",
          "object_type",
          "required_approval_count",
          "user_ids"
        ]
      },
      "ApprovalRequestCreateRequest": {
        "anyOf": [
          { "$ref": "#/components/schemas/ApprovalRequestCreateByRoleRequest" },
          { "$ref": "#/components/schemas/ApprovalRequestCreateByUserRequest" }
        ],
        "additionalProperties": false
      },
      "ApprovalRequestCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "ApprovalRequestResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ApprovalRequestResourceWithMetadata"
            },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "ApprovalRequestResourceWithMetadata": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "approved_by": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the approval request",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "rejected_by": { "type": "string", "format": "uuid" },
          "required_approval_count": { "type": "integer", "minimum": 1.0 },
          "role_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "status": { "$ref": "#/components/schemas/ApprovalRequestStatus" },
          "user_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "approved_by",
          "created_by",
          "object_id",
          "object_type",
          "required_approval_count",
          "role_ids",
          "status",
          "user_ids"
        ]
      },
      "ApprovalRequestStatus": {
        "type": "string",
        "enum": ["waiting", "approved", "rejected", "canceled"]
      },
      "AuthPayload": {
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 12 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "password"]
      },
      "AuthPaymentIntentPayload": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ManuallySpecifiedBankAccountPayload"
          },
          { "$ref": "#/components/schemas/AuthorizedBankAccountPayload" },
          { "$ref": "#/components/schemas/BankAccountPayload" }
        ],
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "manual_input": "#/components/schemas/ManuallySpecifiedBankAccountPayload",
            "authorized_bank_account": "#/components/schemas/AuthorizedBankAccountPayload",
            "bank_account": "#/components/schemas/BankAccountPayload"
          }
        }
      },
      "AuthPaymentIntentResponse": {
        "properties": {
          "authorization_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["authorization_url"]
      },
      "AuthResponse": {
        "properties": {
          "auth": { "$ref": "#/components/schemas/Token" },
          "deactivated_by_default": { "type": "boolean", "default": false }
        },
        "type": "object",
        "required": ["auth"]
      },
      "AuthorizedBankAccount": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "account_number": {
            "type": "string",
            "description": "Masked account number, e.g. ****1234"
          },
          "bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity or counterpart bank account"
          },
          "bank_id": { "type": "string" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "iban": {
            "type": "string",
            "description": "Masked IBAN number, e.g. ****1234"
          },
          "name": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "bank_id", "country"]
      },
      "AuthorizedBankAccountPayload": {
        "properties": {
          "authorized_bank_account_id": { "type": "string", "format": "uuid" },
          "iframe": { "type": "boolean", "default": false },
          "psu_identification": {
            "allOf": [{ "$ref": "#/components/schemas/PsuIdentification" }],
            "description": "PSU identification is required for some banks (e.g. some Germany institutions)."
          },
          "type": {
            "type": "string",
            "enum": ["authorized_bank_account"],
            "default": "authorized_bank_account"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["authorized_bank_account_id"]
      },
      "AutomationLevel": {
        "type": "string",
        "enum": ["draft", "issue", "issue_and_send"],
        "description": "Automation level for recurrence"
      },
      "Bank": {
        "properties": {
          "authorization_methods": {
            "items": {
              "$ref": "#/components/schemas/SupportedPaymentAuthorizationFlow"
            },
            "type": "array"
          },
          "bank_id": { "type": "string" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "media": {
            "items": { "$ref": "#/components/schemas/Media" },
            "type": "array"
          },
          "name": { "type": "string" },
          "payer_required": { "type": "boolean" },
          "psu_identification": {
            "$ref": "#/components/schemas/PsuIdentificationType"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "authorization_methods",
          "bank_id",
          "country",
          "media",
          "name",
          "payer_required"
        ]
      },
      "BankAccount": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the bank account."
          },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Typically used for UK and US bank accounts. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/references/currencies).",
            "example": "EUR"
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'. Used only for entity bank accounts.",
            "example": "Primary account"
          },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "is_default": {
            "type": "boolean",
            "description": "Indicates whether this bank account is the default one for its currency.",
            "default": false
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'. Used only for counterpart bank accounts.",
            "example": "Primary account"
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Typically used for US banks. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code. Typically used for UK banks.",
            "example": "123456"
          },
          "was_created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who added this bank account, or `null` if it was added using a partner access token. Used only for entity bank accounts."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id"]
      },
      "BankAccountPayload": {
        "properties": {
          "bank_account_id": { "type": "string", "format": "uuid" },
          "bank_id": { "type": "string" },
          "iframe": { "type": "boolean", "default": false },
          "psu_identification": {
            "allOf": [{ "$ref": "#/components/schemas/PsuIdentification" }],
            "description": "PSU identification is required for some banks (e.g. some Germany institutions)."
          },
          "save_to_authorized": { "type": "boolean", "default": false },
          "type": {
            "type": "string",
            "enum": ["bank_account"],
            "default": "bank_account"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["bank_account_id", "bank_id"]
      },
      "BankAccountPaymentMethod": {
        "properties": {
          "details": {
            "$ref": "#/components/schemas/BankAccountPaymentMethodDetails"
          },
          "type": { "type": "string", "enum": ["bank_account"] }
        },
        "type": "object",
        "required": ["details", "type"]
      },
      "BankAccountPaymentMethodDetails": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account.",
            "examples": ["Bob Jones"]
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "examples": ["12345678"]
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The SWIFT/BIC code of the bank. Can be either 8 or 11 characters long.",
            "examples": ["DEUTDEFFXXX"]
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code of the bank account."
          },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account, up to 34 characters.",
            "examples": ["DE74500700100100000900"]
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "The name of the bank account, if available. For example, \"Primary account\" or \"Savings account\"."
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "examples": ["123456"]
          }
        },
        "type": "object"
      },
      "BankAccountVerificationType": {
        "type": "string",
        "enum": ["airwallex_plaid", "micro_deposit"]
      },
      "BankAccountVerifications": {
        "properties": {
          "airwallex_plaid": {
            "allOf": [
              { "$ref": "#/components/schemas/AirwallexPlaidVerification" }
            ],
            "description": "Airwallex Plaid verification"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BanksResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/Bank" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "BasedOnReceivableCreatedEventData": {
        "properties": {
          "receivable_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the newly created receivable document.",
            "examples": ["1531cf6e-52f5-4203-acb2-7cc3a37660c6"]
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivableType" }],
            "description": "The type of the receivable document that was created based on the current document."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["receivable_id", "type"],
        "description": "In invoice history, this object contains information about a credit note created for this invoice.\nIn quote history, it contains information about an invoice created from this quote."
      },
      "BasedOnTransitionType": {
        "type": "string",
        "enum": ["invoice", "credit_note"]
      },
      "BizObjectsSchema-Input": {
        "properties": {
          "objects": {
            "items": { "$ref": "#/components/schemas/RootSchema-Input" },
            "type": "array",
            "description": "List of objects"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BizObjectsSchema-Output": {
        "properties": {
          "objects": {
            "items": { "$ref": "#/components/schemas/RootSchema-Output" },
            "type": "array",
            "description": "List of objects"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Body_put_entities_id_logo": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "BusinessInfoSchema": {
        "properties": {
          "base_currency": { "type": "string" },
          "email": { "type": "string" },
          "legal_name": { "type": "string" },
          "name": { "type": "string" },
          "type": { "type": "string" }
        },
        "type": "object"
      },
      "BusinessProfile-Input": {
        "properties": {
          "description_of_goods_or_services": {
            "anyOf": [
              { "type": "string", "maxLength": 500, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Required for US entities. A free-form description of the products the entity sells (whether online or at offline retail stores) or the services it provides to its customers.",
            "examples": [
              "Acme Inc. is an online computer store that offers a wide range of computer products, laptops, smartphones, tablets, accessories, and more."
            ]
          },
          "estimated_monthly_revenue": {
            "anyOf": [
              { "$ref": "#/components/schemas/EstimatedMonthlyRevenue" },
              { "type": "null" }
            ],
            "description": "Required for US entities. The approximate revenue that the business generates per month."
          },
          "mcc": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide.",
            "examples": ["5734"]
          },
          "operating_countries": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AllowedCountries" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Required for US entities. A list of primary countries where the business conducts its operations, such as selling products or providing services. Use two-letter country codes (ISO 3166-2 alpha-2)."
          },
          "url": {
            "anyOf": [
              { "type": "string", "minLength": 1, "format": "uri" },
              { "type": "null" }
            ],
            "description": "The business's publicly available website."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BusinessProfile-Output": {
        "properties": {
          "description_of_goods_or_services": {
            "anyOf": [
              { "type": "string", "maxLength": 500, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Required for US entities. A free-form description of the products the entity sells (whether online or at offline retail stores) or the services it provides to its customers.",
            "examples": [
              "Acme Inc. is an online computer store that offers a wide range of computer products, laptops, smartphones, tablets, accessories, and more."
            ]
          },
          "estimated_monthly_revenue": {
            "anyOf": [
              { "$ref": "#/components/schemas/EstimatedMonthlyRevenue" },
              { "type": "null" }
            ],
            "description": "Required for US entities. The approximate revenue that the business generates per month."
          },
          "mcc": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide.",
            "examples": ["5734"]
          },
          "operating_countries": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/AllowedCountries" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Required for US entities. A list of primary countries where the business conducts its operations, such as selling products or providing services. Use two-letter country codes (ISO 3166-2 alpha-2)."
          },
          "url": {
            "anyOf": [
              { "type": "string", "minLength": 1, "format": "uri" },
              { "type": "null" }
            ],
            "description": "The business's publicly available website."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ButtonTheme": {
        "properties": {
          "primary_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "primary_hover_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "secondary_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "secondary_hover_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          }
        },
        "type": "object"
      },
      "CardPaymentMethod": {
        "properties": {
          "details": {
            "$ref": "#/components/schemas/CardPaymentMethodDetails"
          },
          "type": { "type": "string", "enum": ["card"] }
        },
        "type": "object",
        "required": ["details", "type"]
      },
      "CardPaymentMethodDetails": {
        "properties": {
          "brand": {
            "type": "string",
            "maxLength": 32,
            "description": "The card brand name."
          },
          "card_type": {
            "allOf": [{ "$ref": "#/components/schemas/CardTypeEnum" }],
            "description": "The card type"
          },
          "expiry_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "description": "The card's expiration month (1 - January, 12 - December)."
          },
          "expiry_year": {
            "type": "integer",
            "maximum": 2099.0,
            "exclusiveMinimum": 2001.0,
            "description": "The card's expiration year."
          },
          "last4": {
            "type": "string",
            "maxLength": 4,
            "minLength": 4,
            "description": "The last four digits of the card number.",
            "examples": [1234]
          }
        },
        "type": "object",
        "required": [
          "brand",
          "card_type",
          "expiry_month",
          "expiry_year",
          "last4"
        ]
      },
      "CardTheme": {
        "properties": {
          "background_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          }
        },
        "type": "object"
      },
      "CardTypeEnum": {
        "type": "string",
        "enum": ["credit", "debit", "prepaid", "unknown"]
      },
      "ClientMessage": {
        "properties": {
          "attachments": {
            "anyOf": [
              {
                "items": { "type": "string", "minLength": 1, "format": "uri" },
                "type": "array"
              },
              { "type": "null" }
            ]
          },
          "text_prompt": { "type": "string" }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["text_prompt"]
      },
      "CommentCreateRequest": {
        "properties": {
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string" },
          "reply_to_entity_user_id": { "type": "string", "format": "uuid" },
          "text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_id", "object_type", "text"]
      },
      "CommentCursorFields": { "type": "string", "enum": ["id"] },
      "CommentPayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "An arbitrary comment that describes how and when this payable was paid."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CommentResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by_entity_user_id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string" },
          "reply_to_entity_user_id": { "type": "string", "format": "uuid" },
          "status": { "$ref": "#/components/schemas/StatusEnum" },
          "text": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "created_by_entity_user_id",
          "entity_id",
          "object_id",
          "object_type",
          "status",
          "text"
        ]
      },
      "CommentResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CommentResource" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CommentUpdateRequest": {
        "properties": {
          "reply_to_entity_user_id": { "type": "string", "format": "uuid" },
          "text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CommonSchema-Input": {
        "properties": {
          "actions": {
            "items": { "$ref": "#/components/schemas/ActionSchema2" },
            "type": "array",
            "description": "List of actions"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "person",
              "onboarding",
              "comment",
              "counterpart",
              "entity_user",
              "entity",
              "entity_vat_ids",
              "counterpart_vat_id",
              "entity_bank_account",
              "export",
              "mailbox",
              "payables_purchase_order",
              "payment_reminder",
              "overdue_reminder",
              "product",
              "project",
              "receivable",
              "delivery_note",
              "ocr_task",
              "reconciliation",
              "role",
              "tag",
              "todo_task",
              "todo_task_mute",
              "transaction",
              "workflow",
              "approval_request",
              "approval_policy",
              "payment_record",
              "receipt"
            ],
            "description": "Object type",
            "default": "comment"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CommonSchema-Output": {
        "properties": {
          "actions": {
            "items": { "$ref": "#/components/schemas/ActionSchema2" },
            "type": "array",
            "description": "List of actions"
          },
          "object_type": {
            "type": "string",
            "enum": [
              "person",
              "onboarding",
              "comment",
              "counterpart",
              "entity_user",
              "entity",
              "entity_vat_ids",
              "counterpart_vat_id",
              "entity_bank_account",
              "export",
              "mailbox",
              "payables_purchase_order",
              "payment_reminder",
              "overdue_reminder",
              "product",
              "project",
              "receivable",
              "delivery_note",
              "ocr_task",
              "reconciliation",
              "role",
              "tag",
              "todo_task",
              "todo_task_mute",
              "transaction",
              "workflow",
              "approval_request",
              "approval_policy",
              "payment_record",
              "receipt"
            ],
            "description": "Object type",
            "default": "comment"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CompanyRequest": {
        "properties": {
          "contact_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ]
          },
          "contact_phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "website"]
      },
      "CompanyResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "contact_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ]
          },
          "contact_phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "created_by_user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ]
          },
          "logo": {
            "anyOf": [
              { "$ref": "#/components/schemas/FileSchema3" },
              { "type": "null" }
            ]
          },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 },
          "status": { "$ref": "#/components/schemas/StatusEnum" },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "type": "object",
        "required": ["id", "name", "status", "website"]
      },
      "CompanyUpdateRequest": {
        "properties": {
          "contact_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ]
          },
          "contact_phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ]
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CompleteRefreshVerificationRequest": {
        "properties": {
          "type": { "$ref": "#/components/schemas/BankAccountVerificationType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type"]
      },
      "CompleteRefreshVerificationResponse": {
        "properties": {
          "verifications": {
            "$ref": "#/components/schemas/BankAccountVerifications"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["verifications"]
      },
      "CompleteVerificationAirwallexPlaidRequest": {
        "properties": {
          "account": {
            "allOf": [{ "$ref": "#/components/schemas/AirwallexPlaidAccount" }],
            "description": "The bank account that was selected in the Plaid Modal"
          },
          "institution": {
            "allOf": [
              { "$ref": "#/components/schemas/AirwallexPlaidInstitution" }
            ],
            "description": "The financial institution that was selected in the Plaid Modal"
          },
          "mandate": { "$ref": "#/components/schemas/AirwallexMandate" },
          "public_token": {
            "type": "string",
            "minLength": 1,
            "description": "The Plaid Public Token"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["account", "institution", "mandate", "public_token"]
      },
      "CompleteVerificationRequest": {
        "properties": {
          "airwallex_plaid": {
            "$ref": "#/components/schemas/CompleteVerificationAirwallexPlaidRequest"
          },
          "type": { "$ref": "#/components/schemas/BankAccountVerificationType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["airwallex_plaid", "type"]
      },
      "CompleteVerificationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Deprecated. Use bank_account_id instead.",
            "deprecated": true
          },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder's name"
          },
          "account_number": {
            "type": "string",
            "description": "Account number (required if IBAN is not provided)"
          },
          "bank_account_id": { "type": "string", "format": "uuid" },
          "bank_name": {
            "type": "string",
            "description": "The name of the entity`s bank account."
          },
          "bic": {
            "type": "string",
            "description": "The BIC of the entity`s bank account."
          },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "display_name": { "type": "string" },
          "iban": {
            "type": "string",
            "description": "The IBAN of the entity`s bank account."
          },
          "is_default": {
            "type": "boolean",
            "description": "Marks if a bank account should be used by default for the currency. Only 1 can be True for each currency."
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number (US)"
          },
          "sort_code": { "type": "string", "description": "Sort code (GB)" },
          "verifications": {
            "$ref": "#/components/schemas/BankAccountVerifications"
          },
          "was_created_by_user_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "bank_account_id", "is_default", "verifications"]
      },
      "ConnectionStatus": {
        "type": "string",
        "enum": ["connected", "disconnected", "deauthorized", "pending_auth"]
      },
      "ConsentPayload": {
        "properties": { "consent": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["consent"]
      },
      "ConsentState": {
        "type": "string",
        "enum": [
          "AWAITING_SCA_METHOD",
          "AWAITING_SCA_CODE",
          "AWAITING_DECOUPLED_AUTHORIZATION",
          "AUTHORIZED",
          "FAILED"
        ]
      },
      "ConversationResource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the conversation"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the conversation was created"
          },
          "is_starred": {
            "type": "boolean",
            "description": "Indicates if the conversation is starred by the user"
          },
          "messages": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Message" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "List of messages in the conversation. Filled only when conversation is retrieved individually"
          },
          "title": {
            "type": "string",
            "description": "Title of the conversation generated by LLM"
          }
        },
        "type": "object",
        "required": ["id", "title", "created_at", "is_starred"]
      },
      "ConversationResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ConversationResource" },
            "type": "array",
            "description": "List of conversations"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "Token to retrieve the next page of conversations"
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "Token to retrieve the previous page of conversations"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "CounterpartAddress": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"],
        "description": "Address information."
      },
      "CounterpartAddressResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartAddressResponseWithCounterpartID"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartAddressResponseWithCounterpartID": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the address in the system"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart that owns the address."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "required": [
          "id",
          "city",
          "counterpart_id",
          "country",
          "line1",
          "postal_code"
        ],
        "description": "Address information."
      },
      "CounterpartAiSuggestion": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the counterpart."
          },
          "address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the address of the counterpart."
          },
          "bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the bank account of the counterpart."
          },
          "vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the VAT ID of the counterpart."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id"]
      },
      "CounterpartAiSuggestionsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CounterpartAiSuggestion" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "Payload for AI suggestions."
      },
      "CounterpartBankAccountResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartBankAccountResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "CounterpartBankAccountResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "is_default_for_currency": { "type": "boolean", "default": false },
          "name": { "type": "string", "maxLength": 200 },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs."
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "example": "123456"
          }
        },
        "type": "object",
        "required": ["id", "counterpart_id", "country", "currency"]
      },
      "CounterpartContactResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of a contact person."
          },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of a contact person.",
            "example": "contact@example.org"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of a contact person.",
            "example": "Mary"
          },
          "is_default": { "type": "boolean" },
          "last_name": {
            "type": "string",
            "description": "The last name of a contact person.",
            "example": "O'Brien"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of a contact person",
            "example": "5551235476"
          },
          "title": {
            "type": "string",
            "description": "The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.",
            "example": "Ms."
          }
        },
        "type": "object",
        "required": [
          "id",
          "address",
          "counterpart_id",
          "first_name",
          "is_default",
          "last_name"
        ],
        "description": "The contact person for an organization."
      },
      "CounterpartContactsResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartContactResponse"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartCreatePayload": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CounterpartOrganizationRootCreatePayload"
          },
          {
            "$ref": "#/components/schemas/CounterpartIndividualRootCreatePayload"
          }
        ],
        "additionalProperties": false,
        "description": "This schema is used to create new counterparts (either organizations or individuals).\nThe counterpart type is specified by the `type` property. Depending on the `type`,\nyou need to provide the data for either the `individual` or `organization` property."
      },
      "CounterpartCursorFields": {
        "type": "string",
        "enum": ["counterpart_name"]
      },
      "CounterpartEinvoicingCredentialExistenceResponse": {
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Indicates if the e-invoicing credentials exist in the system"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["exists"]
      },
      "CounterpartEinvoicingCredentialResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "network_identifier": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "network_schema": {
            "$ref": "#/components/schemas/EinvoiceSchemaTypeEnum"
          }
        },
        "type": "object",
        "required": ["id", "network_identifier", "network_schema"]
      },
      "CounterpartEinvoicingCredentialResponseList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartEinvoicingCredentialResponse"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartEinvoicingCredentialSchema": {
        "properties": {
          "network_identifier": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "network_schema": {
            "$ref": "#/components/schemas/EinvoiceSchemaTypeEnum"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["network_identifier", "network_schema"]
      },
      "CounterpartFields": {
        "properties": {
          "tax_id": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `tax_id` of an counterpart",
            "default": {
              "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.",
              "required": false
            }
          },
          "vat_id": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `vat_id` of an counterpart",
            "default": {
              "description": "The counterpart's VAT (Value Added Tax) identification number. This field is required for counterparts that are VAT-registered.",
              "required": false
            }
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartIndividualCreatePayload": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The person's address."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this counterpart."
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "address",
          "first_name",
          "is_customer",
          "is_vendor",
          "last_name"
        ],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/CounterpartTagSchema" },
            "type": "array",
            "description": "The list of tags for this counterpart."
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          }
        },
        "type": "object",
        "required": ["first_name", "is_customer", "is_vendor", "last_name"]
      },
      "CounterpartIndividualRootCreatePayload": {
        "properties": {
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.",
            "examples": ["CR-ABC-12345", "CUS123456"]
          },
          "individual": {
            "$ref": "#/components/schemas/CounterpartIndividualCreatePayload"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate PDF documents for this counterpart.",
            "default": "en"
          },
          "reminders_enabled": { "type": "boolean", "default": true },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered."
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "Must be \"individual\".",
            "example": "individual"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["individual", "type"],
        "description": "This schema is used to create counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualRootResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.",
            "example": "123456789"
          },
          "individual": {
            "$ref": "#/components/schemas/CounterpartIndividualResponse"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate PDF documents for this counterpart."
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "individual", "type"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualRootUpdatePayload": {
        "properties": {
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.",
            "example": "123456789"
          },
          "individual": {
            "$ref": "#/components/schemas/CounterpartIndividualUpdatePayload"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate PDF documents for this counterpart."
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["individual"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartIndividualUpdatePayload": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this counterpart."
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "CounterpartOrganizationCreatePayload": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of the organization."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this counterpart."
          }
        },
        "type": "object",
        "required": ["address", "is_customer", "is_vendor", "legal_name"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/CounterpartTagSchema" },
            "type": "array",
            "description": "The list of tags for this counterpart."
          }
        },
        "type": "object",
        "required": ["is_customer", "is_vendor", "legal_name"]
      },
      "CounterpartOrganizationRootCreatePayload": {
        "properties": {
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.",
            "example": "123456789"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate PDF documents for this counterpart.",
            "default": "en"
          },
          "organization": {
            "$ref": "#/components/schemas/CounterpartOrganizationCreatePayload"
          },
          "reminders_enabled": { "type": "boolean", "default": true },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered."
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "Must be \"organization\".",
            "example": "organization"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["organization", "type"],
        "description": "This schema is used to create counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationRootResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.",
            "example": "123456789"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate PDF documents for this counterpart."
          },
          "organization": {
            "$ref": "#/components/schemas/CounterpartOrganizationResponse"
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "organization", "type"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationRootUpdatePayload": {
        "properties": {
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.",
            "example": "123456789"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate PDF documents for this counterpart.",
            "default": "en"
          },
          "organization": {
            "$ref": "#/components/schemas/CounterpartOrganizationUpdatePayload"
          },
          "reminders_enabled": { "type": "boolean", "default": true },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["organization"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartOrganizationUpdatePayload": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization.",
            "example": "acme@example.com"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization.",
            "example": "5551231234"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this counterpart."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "CounterpartPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CounterpartResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of counterparts"
      },
      "CounterpartRawAddress": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "description": "Address information."
      },
      "CounterpartRawAddressUpdateRequest": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Address information."
      },
      "CounterpartRawBankAccount": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "description": "Vendor's bank account name."
          },
          "account_number": {
            "type": "string",
            "description": "Vendor's bank account number, IBAN, or similar (if specified in the payable document).",
            "example": "123456789012"
          },
          "bic": {
            "type": "string",
            "description": "SWIFT code (BIC) of the vendor's bank.",
            "example": "DEUTDE2HXXX"
          },
          "iban": {
            "type": "string",
            "description": "required for non-GB bank accounts"
          },
          "sort_code": {
            "type": "string",
            "description": "required for GB bank accounts"
          }
        },
        "type": "object"
      },
      "CounterpartRawBankAccountUpdateRequest": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "description": "Vendor's bank account name."
          },
          "account_number": {
            "type": "string",
            "description": "Vendor's bank account number, IBAN, or similar (if specified in the payable document).",
            "example": "123456789012"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "SWIFT code (BIC) of the vendor's bank.",
            "example": "DEUTDE2HXXX"
          },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "required for non-GB bank accounts"
          },
          "sort_code": {
            "type": "string",
            "description": "required for GB bank accounts"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartRawData": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawAddress" }],
            "description": "The address of the vendor or supplier."
          },
          "bank_account": {
            "allOf": [
              { "$ref": "#/components/schemas/CounterpartRawBankAccount" }
            ],
            "description": "Object representing counterpart bank account."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "name": {
            "type": "string",
            "description": "Vendor or supplier name.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "tax_id": {
            "type": "string",
            "description": "The tax id of the counterpart.",
            "example": "DE12345678"
          },
          "vat_id": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawVatID" }],
            "description": "VAT ID of the vendor or supplier which was used in the invoice."
          }
        },
        "type": "object"
      },
      "CounterpartRawDataUpdateRequest": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartRawAddressUpdateRequest"
              }
            ],
            "description": "The address of the vendor or supplier."
          },
          "bank_account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartRawBankAccountUpdateRequest"
              }
            ],
            "description": "Object representing counterpart bank account."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "name": {
            "type": "string",
            "description": "Vendor or supplier name.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The tax id of the counterpart.",
            "example": "DE12345678"
          },
          "vat_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartRawVatIDUpdateRequest"
              }
            ],
            "description": "VAT ID of the vendor or supplier which was used in the invoice."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartRawVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": { "type": "string" },
          "value": { "type": "string" }
        },
        "type": "object"
      },
      "CounterpartRawVatIDUpdateRequest": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": { "type": "string" },
          "value": { "type": "string", "maxLength": 32 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartResponse": {
        "anyOf": [
          { "$ref": "#/components/schemas/CounterpartIndividualRootResponse" },
          { "$ref": "#/components/schemas/CounterpartOrganizationRootResponse" }
        ],
        "description": "A Counterpart object contains information about an organization (juridical person) or\nindividual (natural person) that provides goods and services to or buys them from an\n[SME](https://docs.monite.com/docs/glossary#sme)."
      },
      "CounterpartTagSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.",
            "example": "2022-09-07T16:35:18.484507+00:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.",
            "example": "2022-09-07T16:35:18.484507+00:00"
          },
          "category": {
            "allOf": [{ "$ref": "#/components/schemas/TagCategory" }],
            "description": "The tag category.",
            "example": "department"
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag description.",
            "example": "Tag for the Marketing Department"
          },
          "name": {
            "type": "string",
            "description": "The tag name.",
            "example": "Marketing"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "name"],
        "description": "Represents a user-defined tag that can be assigned to resources to filter them."
      },
      "CounterpartType": {
        "type": "string",
        "enum": ["individual", "organization"]
      },
      "CounterpartUpdateAddress": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartUpdatePayload": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CounterpartIndividualRootUpdatePayload"
          },
          {
            "$ref": "#/components/schemas/CounterpartOrganizationRootUpdatePayload"
          }
        ],
        "additionalProperties": false,
        "description": "This schema is used to update existing counterparts (organizations or individuals)."
      },
      "CounterpartUpdateVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "CounterpartVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32, "example": "123456789" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["value"]
      },
      "CounterpartVatIDResourceList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CounterpartVatIDResponse"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CounterpartVatIDResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32, "example": "123456789" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "counterpart_id", "value"]
      },
      "CreateCounterpartBankAccount": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "is_default_for_currency": { "type": "boolean", "default": false },
          "name": { "type": "string", "maxLength": 200 },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs."
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "example": "123456"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "currency"]
      },
      "CreateCounterpartContactPayload": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of a contact person."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of a contact person.",
            "example": "contact@example.org"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of a contact person.",
            "example": "Mary"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of a contact person.",
            "example": "O'Brien"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of a contact person",
            "example": "5551235476"
          },
          "title": {
            "type": "string",
            "description": "The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.",
            "example": "Ms."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address", "first_name", "last_name"],
        "description": "The contact person for an organization."
      },
      "CreateCounterpartEinvoicingCredentialCounterpartVatId": {
        "properties": {
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of Counterpart VAT ID"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["counterpart_vat_id_id"]
      },
      "CreateCounterpartEinvoicingCredentialPayload": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CreateCounterpartEinvoicingCredentialCounterpartVatId"
          },
          {
            "$ref": "#/components/schemas/CounterpartEinvoicingCredentialSchema"
          }
        ],
        "additionalProperties": false
      },
      "CreateEntityBankAccountRequest": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "description": "The name of the person or business that owns this bank account. Required in the following cases:\n* the account currency is GBP or USD,\n* the account currency is EUR and the entity wishes to receive SEPA Credit transfers to this account.",
            "example": "Cayla Lloyd"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.",
            "example": "12345678"
          },
          "bank_name": {
            "type": "string",
            "description": "The bank name.",
            "example": "Deutsche Bank"
          },
          "bic": {
            "type": "string",
            "description": "The SWIFT/BIC code of the bank. Can be either 8 or 11 characters long. Monite verifies the BIC length, country code, and whether the structure conforms to ISO 9362.\n\nIf `bic` is specified, `iban` must also be specified.",
            "example": "DEUTDEFFXXX"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).",
            "example": "EUR"
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'.",
            "example": "Primary account"
          },
          "iban": {
            "type": "string",
            "description": "The IBAN of the bank account, up to 34 characters. Required if the account currency is EUR. Monite verifies the IBAN length, checksum digits, and country-specific format according to ISO 13616.",
            "example": "DE74500700100100000900"
          },
          "is_default_for_currency": {
            "type": "boolean",
            "description": "If set to `true` or if this is the first bank account added for the given currency, this account becomes the default one for its currency.",
            "default": false
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN) or branch code. Required if the account currency is USD. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code. Required if the account currency is GBP.",
            "example": "123456"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "currency"],
        "description": "Represents a bank account owned by an entity."
      },
      "CreateEntityRequest": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EntityAddressSchema",
            "description": "An address description of the entity"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "An official email address of the entity"
          },
          "individual": {
            "anyOf": [
              { "$ref": "#/components/schemas/IndividualSchema" },
              { "type": "null" }
            ],
            "description": "A set of meta data describing the individual"
          },
          "organization": {
            "anyOf": [
              { "$ref": "#/components/schemas/OrganizationSchema" },
              { "type": "null" }
            ],
            "description": "A set of meta data describing the organization"
          },
          "phone": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "description": "The contact phone number of the entity. Required for US organizations to use payments."
          },
          "registration_authority": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided.",
            "examples": ["Amtsgericht Charlottenburg"]
          },
          "registration_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available.",
            "examples": ["HRB 202324"]
          },
          "tax_id": {
            "anyOf": [
              { "type": "string", "maxLength": 30, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
          },
          "type": {
            "$ref": "#/components/schemas/EntityTypeEnum",
            "description": "A type for an entity"
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "description": "A website of the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address", "email", "type"],
        "description": "A schema for a request to create an entity of different types"
      },
      "CreateEntityUserRequest": {
        "properties": {
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "An entity user business email"
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "description": "First name",
            "examples": ["Casey"]
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Last name",
            "examples": ["Peters"]
          },
          "login": { "type": "string", "maxLength": 255 },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "An entity user phone number in the international format"
          },
          "role_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "description": "UUID of the role assigned to this entity user"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Title",
            "examples": ["Finance Manager"]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "login"]
      },
      "CreateExportTaskResponseSchema": {
        "properties": { "id": { "type": "string", "format": "uuid" } },
        "type": "object",
        "required": ["id"]
      },
      "CreateOCRRequestPayload": {
        "properties": {
          "document_type": {
            "$ref": "#/components/schemas/OCRDocumentTypeEnum"
          },
          "file_url": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["file_url"]
      },
      "CreateOnboardingLinkRequest": {
        "properties": {
          "recipient": { "$ref": "#/components/schemas/Recipient" },
          "refresh_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["recipient", "refresh_url", "return_url"]
      },
      "CreatePaymentLinkRequest": {
        "properties": {
          "amount": {
            "type": "integer",
            "minimum": 1.0,
            "description": "The payment amount in [minor units](https://docs.monite.com/references/currencies#minor-units). Required if `object` is not specified.",
            "example": 120550
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The payment currency. Required if `object` is not specified.",
            "example": "EUR"
          },
          "expires_at": { "type": "string", "format": "date-time" },
          "invoice": {
            "allOf": [{ "$ref": "#/components/schemas/Invoice" }],
            "description": "An object containing information about the invoice being paid. Used only if `object` is not specified."
          },
          "object": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentObject" }],
            "description": "If the invoice being paid is a payable or receivable stored in Monite, provide the `object` object containing the invoice type and ID. Otherwise, use the `amount`, `currency`, `payment_reference`, and (optionally) `invoice` fields to specify the invoice-related data."
          },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true
          },
          "payment_reference": {
            "type": "string",
            "description": "A payment reference number that the recipient can use to identify the payer or purpose of the transaction. Required if `object` is not specified.",
            "example": "011/7057/26072"
          },
          "recipient": { "$ref": "#/components/schemas/PaymentAccountObject" },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "The URL where to redirect the payer after the payment. If `return_url` is specified, then after the payment is completed the payment page will display the \"Return to platform\" link that navigates to this URL.",
            "example": "https://pay.example.com/complete"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["payment_methods", "recipient"]
      },
      "CreateRecurrencePayload": {
        "properties": {
          "automation_level": {
            "allOf": [{ "$ref": "#/components/schemas/AutomationLevel" }],
            "description": "Controls how invoices are processed when generated:\n- \"draft\": Creates invoices in draft status, requiring manual review, issuing, and sending\n- \"issue\": Automatically issues invoices but requires manual sending\n- \"issue_and_send\": Fully automates the process (creates, issues, and sends invoices)\n\nDefault: \"issue\" (or \"issue_and_send\" if subject_text and body_text are provided)\n\nNote: When using \"issue_and_send\", both subject_text and body_text must be provided.\n"
          },
          "body_text": {
            "type": "string",
            "minLength": 1,
            "description": "The body text for the email that will be sent with the recurring invoice."
          },
          "day_of_month": {
            "allOf": [{ "$ref": "#/components/schemas/DayOfMonth" }],
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified."
          },
          "end_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "description": "Deprecated, use `end_date` instead",
            "deprecated": true
          },
          "end_year": {
            "type": "integer",
            "maximum": 2077.0,
            "description": "Deprecated, use `end_date` instead",
            "deprecated": true
          },
          "frequency": {
            "allOf": [{ "$ref": "#/components/schemas/RecurrenceFrequency" }],
            "description": "How often the invoice will be created.",
            "default": "month"
          },
          "interval": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "description": "The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months.",
            "default": 1
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the base invoice that will be used as a template for creating recurring invoices."
          },
          "max_occurrences": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "description": "How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified."
          },
          "recipients": {
            "allOf": [{ "$ref": "#/components/schemas/Recipients" }],
            "description": "An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field."
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`."
          },
          "start_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "start_year": {
            "type": "integer",
            "maximum": 2077.0,
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "subject_text": {
            "type": "string",
            "minLength": 1,
            "description": "The subject for the email that will be sent with the recurring invoice."
          }
        },
        "type": "object",
        "required": ["invoice_id"]
      },
      "CreateRoleRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "Role name"
          },
          "permissions": {
            "$ref": "#/components/schemas/BizObjectsSchema-Input",
            "description": "Access permissions"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "permissions"]
      },
      "CreateTextTemplatePayload": {
        "properties": {
          "document_type": {
            "$ref": "#/components/schemas/TextTemplateDocumentTypeEnum"
          },
          "name": { "type": "string" },
          "template": { "type": "string" },
          "type": { "$ref": "#/components/schemas/TextTemplateType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["document_type", "name", "template", "type"]
      },
      "CreateWebhookSubscriptionRequest": {
        "properties": {
          "event_types": { "items": { "type": "string" }, "type": "array" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_type", "url"]
      },
      "CreditNoteCreateRequest": {
        "properties": {
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the payable this credit note is based on. The credit note will be linked to this payable",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "based_on_document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The document ID of the original payable that this credit note refers to",
            "example": "INV-2287"
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart's address",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart's bank account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart (vendor/supplier)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart's VAT registration",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency code of the credit note",
            "default": "EUR",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "An arbitrary description of this credit note",
            "example": "Credit note for returned items from invoice INV-2287"
          },
          "document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "A unique credit note number assigned by the credit note issuer for tracking purposes",
            "example": "CN-2287"
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the credit note was issued, in the YYYY-MM-DD format",
            "example": "2024-01-15"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the project this credit note belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sender": {
            "type": "string",
            "maxLength": 255,
            "description": "The email address from which the credit note was received",
            "example": "supplier@example.com"
          },
          "subtotal": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The subtotal amount before taxes",
            "example": 1000
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "List of tag IDs associated with this credit note",
            "example": ["123e4567-e89b-12d3-a456-426614174000"]
          },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The tax percentage applied to the subtotal",
            "example": 20
          },
          "tax_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The calculated tax amount",
            "example": 200
          },
          "total_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The total amount including taxes",
            "example": 1200
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["document_id", "issued_at"],
        "description": "Schema for creating a new credit note."
      },
      "CreditNoteCursorFields": {
        "type": "string",
        "enum": ["id", "created_at"]
      },
      "CreditNoteDimensionEnum": {
        "type": "string",
        "enum": [
          "created_at",
          "status",
          "counterpart_id",
          "currency",
          "issued_at",
          "project_id"
        ]
      },
      "CreditNoteFieldsAllowedForValidate": {
        "type": "string",
        "enum": [
          "currency",
          "document_id",
          "issued_at",
          "tax_amount",
          "based_on",
          "total_amount",
          "subtotal",
          "description",
          "tax",
          "file_id",
          "counterpart_id",
          "counterpart_bank_account_id",
          "counterpart_address_id",
          "counterpart_vat_id_id",
          "line_items",
          "line_items.quantity",
          "line_items.unit_price",
          "line_items.tax",
          "line_items.unit",
          "line_items.name",
          "line_items.description",
          "line_items.subtotal",
          "line_items.total",
          "line_items.tax_amount"
        ]
      },
      "CreditNoteLineItemCreateRequest": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Detailed description of the line item",
            "example": "Premium version of Product XYZ with extended warranty"
          },
          "name": {
            "type": "string",
            "description": "Name or title of the line item",
            "example": "Product XYZ"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "description": "Quantity of items",
            "example": 2.0
          },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "description": "VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 1250
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "pieces"
          },
          "unit_price": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Price per unit in smallest currency unit (e.g. cents)",
            "example": 5000
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Schema for creating a new credit note line item."
      },
      "CreditNoteLineItemCursorFields": {
        "type": "string",
        "enum": ["id", "created_at", "name", "total", "quantity", "unit_price"]
      },
      "CreditNoteLineItemPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreditNoteLineItemResponse"
            },
            "type": "array",
            "description": "List of credit note line items for the current page"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "Token to retrieve the next page of results",
            "example": "eyJwYWdlIjoyfQ=="
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "Token to retrieve the previous page of results",
            "example": "eyJwYWdlIjoxfQ=="
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of credit note line items."
      },
      "CreditNoteLineItemReplaceRequest": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreditNoteLineItemCreateRequest"
            },
            "type": "array",
            "description": "List of credit note line items to replace existing ones"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "Schema for replacing all line items of a credit note."
      },
      "CreditNoteLineItemResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the line item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the line item was created",
            "example": "2024-01-15T14:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the line item was last updated",
            "example": "2024-01-15T14:30:00Z"
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the line item",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "credit_note_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the parent credit note",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the line item",
            "example": "Premium version of Product XYZ with extended warranty"
          },
          "name": {
            "type": "string",
            "description": "Name or title of the line item",
            "example": "Product XYZ"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "description": "Quantity of items",
            "example": 2.0
          },
          "subtotal": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Subtotal amount before tax",
            "example": 10000
          },
          "tax": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Tax percentage",
            "example": 20
          },
          "tax_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Tax amount",
            "example": 2000
          },
          "total": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Total amount including tax",
            "example": 12000
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "pieces"
          },
          "unit_price": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Price per unit in smallest currency unit",
            "example": 5000
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "created_at", "updated_at", "credit_note_id"],
        "description": "Schema for credit note line item response. Includes all fields that can be returned from the API."
      },
      "CreditNoteLineItemUpdateRequest": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Detailed description of the line item",
            "example": "Premium version of Product XYZ with extended warranty"
          },
          "name": {
            "type": "string",
            "description": "Name or title of the line item",
            "example": "Product XYZ"
          },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "description": "Quantity of items",
            "example": 2.0
          },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "description": "VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 1250
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "pieces"
          },
          "unit_price": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Price per unit in smallest currency unit",
            "example": 5000
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Schema for updating an existing credit note line item. All fields are optional."
      },
      "CreditNoteMetricEnum": {
        "type": "string",
        "enum": ["id", "total_amount"]
      },
      "CreditNotePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CreditNoteResponse" },
            "type": "array",
            "description": "List of credit notes for the current page"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "Token to retrieve the next page of results",
            "example": "eyJwYWdlIjoyfQ=="
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "Token to retrieve the previous page of results",
            "example": "eyJwYWdlIjoxfQ=="
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of credit notes."
      },
      "CreditNoteRenderingSettings": { "properties": {}, "type": "object" },
      "CreditNoteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the credit note",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the credit note was created in the system",
            "example": "2024-01-15T14:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the last update to the credit note",
            "example": "2024-01-15T14:30:00Z"
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the payable this credit note is based on",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "based_on_document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The document ID of the original payable that this credit note refers to",
            "example": "INV-2287"
          },
          "counterpart": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawData" }],
            "description": "Object representing de-normalized counterpart data"
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's address",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's bank account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_raw": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawData" }],
            "description": "Object representing counterpart data which was extracted by OCR. Used for informational purposes."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's VAT registration",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "created_by_external_user_id": {
            "type": "string",
            "maxLength": 255,
            "description": "External system's user ID for the creator",
            "example": "ext_user_123"
          },
          "created_by_external_user_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Name of the external user who created the credit note",
            "example": "John Doe"
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the credit note",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "type": "string",
            "maxLength": 5,
            "description": "The currency code",
            "example": "EUR"
          },
          "currency_exchange": {
            "$ref": "#/components/schemas/CurrencyExchangeSchema"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description of the credit note",
            "example": "Credit note for returned items from invoice INV-2287"
          },
          "document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The credit note's unique document number",
            "example": "CN-2287"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity to which the credit note belongs",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the credit note file stored in the file saver.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "file_url": {
            "type": "string",
            "description": "The URL of the credit note file stored in the file saver."
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "Date when the credit note was issued",
            "example": "2024-01-15"
          },
          "ocr_request_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the OCR processing request",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "ocr_status": {
            "type": "string",
            "maxLength": 10,
            "description": "Status of OCR processing",
            "example": "completed"
          },
          "origin": {
            "type": "string",
            "maxLength": 128,
            "description": "The origin or source system of the credit note",
            "example": "SAP"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the associated project",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sender": {
            "type": "string",
            "maxLength": 255,
            "description": "Email address of the sender",
            "example": "supplier@example.com"
          },
          "source_of_data": {
            "type": "string",
            "maxLength": 128,
            "description": "How the data was input (ocr/user_specified)",
            "example": "user_specified"
          },
          "status": {
            "type": "string",
            "maxLength": 30,
            "description": "The current status of the credit note in its lifecycle",
            "example": "submitted_for_approval"
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount before taxes",
            "example": 1000
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "List of tags associated with this credit note",
            "example": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "name": "Department A",
                "category": "department"
              }
            ]
          },
          "tax": {
            "type": "integer",
            "description": "The tax percentage",
            "example": 20
          },
          "tax_amount": {
            "type": "integer",
            "description": "The calculated tax amount",
            "example": 200
          },
          "total_amount": {
            "type": "integer",
            "description": "The total amount including taxes",
            "example": 1200
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "entity_id",
          "origin",
          "source_of_data",
          "status"
        ],
        "description": "Schema for credit note response. Includes all fields that can be returned from the API."
      },
      "CreditNoteResponsePayload": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "counterpart_billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact2" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_einvoicing_credentials": {
            "allOf": [{ "$ref": "#/components/schemas/EinvoicingCredentials" }],
            "description": "E-invoicing credentials of the counterpart"
          },
          "counterpart_external_reference": {
            "type": "string",
            "description": "The external reference of the counterpart."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization or first and last name if it is an individual"
          },
          "counterpart_shipping_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/ReceivableCounterpartVatIDResponse"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountResponse2" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "einvoice_error_comment": {
            "type": "string",
            "description": "Error that was returned by E-invoicing"
          },
          "einvoice_file_url": {
            "type": "string",
            "description": "E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`."
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivableEntityIndividual" }
            ]
          },
          "entity_address": {
            "$ref": "#/components/schemas/ReceivableEntityAddressSchema"
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/ReceivablesRepresentationOfEntityBankAccount2"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/ReceivableEntityVatIDResponse"
          },
          "file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated."
          },
          "file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the counterpart's default language."
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "network_credentials": {
            "allOf": [{ "$ref": "#/components/schemas/EinvoicingCredentials" }],
            "description": "E-invoicing credentials of the entity"
          },
          "original_file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated."
          },
          "original_file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the entity's default language."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "purchase_order": {
            "type": "string",
            "maxLength": 100,
            "description": "Contain purchase order number."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/CreditNoteStateEnum" }],
            "description": "The status of the Credit Note inside the receivable workflow."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "subtotal_after_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "The list of tags for this receivable.",
            "default": []
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem2" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "type": {
            "type": "string",
            "enum": ["credit_note"],
            "description": "The type of the receivable"
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "vat_inclusive_discount_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.",
            "default": "exclusive"
          },
          "vat_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Defines whether the prices of products in receivable will already include VAT or not.",
            "default": "exclusive"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "counterpart_id",
          "counterpart_type",
          "currency",
          "entity",
          "entity_address",
          "file_language",
          "line_items",
          "original_file_language",
          "status",
          "total_vat_amount",
          "type"
        ]
      },
      "CreditNoteStateEnum": {
        "type": "string",
        "enum": ["draft", "issuing", "issued", "failed", "deleted"]
      },
      "CreditNoteUpdateRequest": {
        "properties": {
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the payable this credit note is based on. The credit note will be linked to this payable",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "based_on_document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The document ID of the original payable",
            "example": "INV-2287"
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's address",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's bank account",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's VAT registration",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency code of the credit note",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "An arbitrary description of this credit note",
            "example": "Credit note for returned items from invoice INV-2287"
          },
          "document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "A unique credit note number assigned by the credit note issuer for tracking purposes",
            "example": "CN-2287"
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the credit note was issued, in the YYYY-MM-DD format",
            "example": "2024-01-15"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the project this credit note belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sender": {
            "type": "string",
            "maxLength": 255,
            "description": "Email address of the sender",
            "example": "supplier@example.com"
          },
          "subtotal": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The subtotal amount before taxes",
            "example": 1000
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "List of tag IDs associated with this credit note",
            "example": ["123e4567-e89b-12d3-a456-426614174000"]
          },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The tax percentage applied to the subtotal",
            "example": 20
          },
          "tax_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The calculated tax amount",
            "example": 200
          },
          "total_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The total amount including taxes",
            "example": 1200
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Schema for updating an existing credit note. All fields are optional."
      },
      "CreditNoteUploadFile": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "CreditNoteValidationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this credit note."
          },
          "validation_errors": {
            "items": { "type": "object" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "CreditNoteValidationsResource": {
        "properties": {
          "required_fields": {
            "items": {
              "$ref": "#/components/schemas/CreditNoteFieldsAllowedForValidate"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["required_fields"]
      },
      "CurrencyDetails": {
        "properties": {
          "minor_units": { "type": "integer" },
          "name": { "type": "string" },
          "symbol": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["minor_units", "name", "symbol"]
      },
      "CurrencyEnum": {
        "type": "string",
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SEK",
          "SGD",
          "SHP",
          "SLE",
          "SOS",
          "SRD",
          "SSP",
          "SVC",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW"
        ]
      },
      "CurrencyExchangeSchema": {
        "properties": {
          "default_currency_code": { "type": "string" },
          "rate": { "type": "number", "exclusiveMinimum": 0.0 },
          "total": { "type": "number" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["default_currency_code", "rate", "total"]
      },
      "CurrencyExchangeSchema2": {
        "properties": {
          "default_currency_code": { "type": "string" },
          "rate": { "type": "number", "exclusiveMinimum": 0.0 },
          "total": { "type": "number" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["default_currency_code", "rate", "total"]
      },
      "CurrencySettings-Input": {
        "properties": {
          "default": { "$ref": "#/components/schemas/CurrencyEnum" },
          "exchange_rates": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/ExchangeRate" },
                { "type": "null" }
              ]
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["default"]
      },
      "CurrencySettings-Output": {
        "properties": {
          "default": { "$ref": "#/components/schemas/CurrencyEnum" },
          "exchange_rates": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/ExchangeRate" },
                { "type": "null" }
              ]
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["default"]
      },
      "CursorFields": { "type": "string", "enum": ["id", "created_at"] },
      "CustomTemplateDataSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of email template"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Template created date and time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Template updated date and time"
          },
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible email body template"
          },
          "is_default": {
            "type": "boolean",
            "description": "Is default template"
          },
          "language": {
            "type": "string",
            "maxLength": 4,
            "description": "Lowercase ISO code of language"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "description": "Name of the template"
          },
          "subject_template": {
            "type": "string",
            "maxLength": 2048,
            "description": "Jinja2 compatible email subject template"
          },
          "type": {
            "type": "string",
            "description": "Document type of content"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "body_template",
          "is_default",
          "language",
          "name",
          "subject_template",
          "type"
        ]
      },
      "CustomTemplatesCursorFields": {
        "type": "string",
        "enum": ["type", "name"]
      },
      "CustomTemplatesPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CustomTemplateDataSchema"
            },
            "type": "array",
            "description": "All user-defined email templates"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "CustomVatRateRequest": {
        "properties": {
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Sub-taxes included in the Custom VAT."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "Display name of the Custom VAT."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["components", "name"]
      },
      "CustomVatRateResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the Custom VAT rate was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the Custom VAT rate was last updated. Timestamps follow the ISO 8601 standard."
          },
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Sub-taxes included in the Custom VAT."
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user that created the Custom VAT rate"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "Display name of the Custom VAT."
          },
          "value": {
            "type": "number",
            "description": "Total sum of the Custom VAT rate including components. Percent multiplied by a 100. Example: 12.125% is 1212.5."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "components",
          "name",
          "value"
        ]
      },
      "CustomVatRateResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/CustomVatRateResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "CustomVatRateUpdateRequest": {
        "properties": {
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Sub-taxes included in the Custom VAT."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "Display name of the Custom VAT."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "DNSRecord": {
        "properties": {
          "is_active": { "type": "boolean" },
          "name": { "type": "string" },
          "record_purpose": {
            "allOf": [{ "$ref": "#/components/schemas/DNSRecordPurpose" }],
            "description": "Purpose of specific entry to distinguish between various TXT entries."
          },
          "record_type": { "$ref": "#/components/schemas/DNSRecordType" },
          "valid": {
            "type": "string",
            "description": "Field reflecting validation status by Mailgun."
          },
          "value": { "type": "string" }
        },
        "type": "object",
        "required": ["is_active", "record_type", "valid", "value"]
      },
      "DNSRecordPurpose": { "type": "string", "enum": ["DKIM", "SPF"] },
      "DNSRecordType": { "type": "string", "enum": ["TXT", "MX", "CNAME"] },
      "DNSRecords": {
        "properties": {
          "receiving_dns_records": {
            "items": { "$ref": "#/components/schemas/DNSRecord" },
            "type": "array",
            "description": "Set of DNS settings required by Mailgun for domain verification before emails receiving is possible."
          },
          "sending_dns_records": {
            "items": { "$ref": "#/components/schemas/DNSRecord" },
            "type": "array",
            "description": "Set of DNS settings required by Mailgun for domain verification before emails sending is possible."
          }
        },
        "type": "object",
        "required": ["receiving_dns_records", "sending_dns_records"]
      },
      "DataExportCursorFields": { "type": "string", "enum": ["created_at"] },
      "DateDimensionBreakdownEnum": {
        "type": "string",
        "enum": ["daily", "weekly", "monthly", "quarterly", "yearly"]
      },
      "DayOfMonth": { "type": "string", "enum": ["first_day", "last_day"] },
      "DecryptTokenResponse": {
        "properties": {
          "company_name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "expired": { "type": "boolean" },
          "token_type": {
            "$ref": "#/components/schemas/TokenSerializerTypeEnum"
          }
        },
        "type": "object",
        "required": ["company_name", "email", "expired", "token_type"]
      },
      "DefaultAccountingTaxIDs": {
        "properties": {
          "deductions": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "description": "ID of the accounting tax ID with which all deductions will be pushed."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "DefaultLedgerAccountIDs": {
        "properties": {
          "payments": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "description": "ID of the ledger account to which all payment records will be pushed. Changing this value affects only future data pushes and does not affect payment records that already exist in the accounting system."
          },
          "products": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "description": "ID of the ledger account to which products without a `ledger_account_id` specified will be pushed. Changing this value affects only future data pushes and does not affect products that already exist in the accounting system."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "DeliveryNoteCounterpartResource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart"
          },
          "individual": {
            "allOf": [
              { "$ref": "#/components/schemas/CounterpartIndividualResponse" }
            ],
            "description": "Individual counterpart"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate pdf documents for this counterpart."
          },
          "organization": {
            "allOf": [
              { "$ref": "#/components/schemas/CounterpartOrganizationResponse" }
            ],
            "description": "Organization counterpart"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id"]
      },
      "DeliveryNoteCreateBasedOnRequest": {
        "properties": {
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["based_on"]
      },
      "DeliveryNoteCreateLineItem": {
        "properties": {
          "product": {
            "allOf": [
              { "$ref": "#/components/schemas/DeliveryNoteLineItemProduct" }
            ],
            "description": "Object of product. Can be used instead of product_id, created in product's catalog"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the product."
          },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quantity"]
      },
      "DeliveryNoteCreateRequest": {
        "properties": {
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart address selected for the delivery note"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart"
          },
          "delivery_date": {
            "type": "string",
            "format": "date",
            "description": "Date of delivery"
          },
          "delivery_number": {
            "type": "string",
            "minLength": 1,
            "description": "Delivery number"
          },
          "display_signature_placeholder": {
            "type": "boolean",
            "description": "Whether to display a signature placeholder in the generated PDF",
            "default": false
          },
          "document_id": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "Document ID of the delivery note"
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/DeliveryNoteCreateLineItem"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "description": "List of line items in the delivery note"
          },
          "memo": {
            "type": "string",
            "minLength": 1,
            "description": "Additional information regarding the delivery note"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["counterpart_address_id", "counterpart_id", "line_items"],
        "description": "Delivery Note creation request schema",
        "examples": [
          {
            "counterpart_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
            "counterpart_address_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
            "line_items": [
              {
                "quantity": 10,
                "product_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"
              },
              {
                "quantity": 20,
                "product": {
                  "name": "Product 2",
                  "description": "Description of product 2",
                  "measure_unit": { "name": "pcs", "description": "pieces" }
                }
              }
            ],
            "delivery_date": "2025-01-01",
            "delivery_number": "102-2025-0987",
            "memo": "This is a memo",
            "display_signature_placeholder": true
          }
        ]
      },
      "DeliveryNoteCursorFields": {
        "type": "string",
        "enum": ["status", "document_id", "delivery_date", "created_at"]
      },
      "DeliveryNoteLineItemProduct": {
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 2000,
            "description": "Description of the product."
          },
          "measure_unit": { "$ref": "#/components/schemas/UnitRequest" },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "Name of the product."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "DeliveryNoteLineItemResource": {
        "properties": {
          "product": {
            "$ref": "#/components/schemas/DeliveryNoteLineItemProduct"
          },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          }
        },
        "type": "object",
        "required": ["product", "quantity"]
      },
      "DeliveryNoteResource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the delivery note"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the delivery note was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the delivery note was last updated. Timestamps follow the ISO 8601 standard."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the delivery note if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the delivery note if applicable."
          },
          "counterpart": {
            "allOf": [
              { "$ref": "#/components/schemas/DeliveryNoteCounterpartResource" }
            ],
            "description": "Counterpart of the delivery note"
          },
          "counterpart_address": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivablesCounterpartAddress" }
            ],
            "description": "Address of the counterpart"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart"
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user that created the delivery note"
          },
          "delivery_date": {
            "type": "string",
            "format": "date",
            "description": "Date of delivery"
          },
          "delivery_number": {
            "type": "string",
            "description": "Delivery number"
          },
          "display_signature_placeholder": {
            "type": "boolean",
            "description": "Whether to display a signature placeholder in the generated PDF"
          },
          "document_id": {
            "type": "string",
            "description": "Document ID of the delivery note"
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivableEntityIndividual" }
            ],
            "description": "Entity that created the delivery note"
          },
          "entity_address": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableEntityAddressSchema" }
            ],
            "description": "Address of the entity that created the delivery note"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity that created the delivery note"
          },
          "file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated."
          },
          "file_url": {
            "type": "string",
            "description": "The delivery note's PDF URL in the customer-facing language."
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/DeliveryNoteLineItemResource"
            },
            "type": "array",
            "minItems": 1,
            "description": "List of line items in the delivery note"
          },
          "memo": {
            "type": "string",
            "description": "Additional information regarding the delivery note"
          },
          "original_file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated."
          },
          "original_file_url": {
            "type": "string",
            "description": "The delivery note's PDF URL in the entity's language."
          },
          "status": {
            "allOf": [
              { "$ref": "#/components/schemas/DeliveryNoteStatusEnum" }
            ],
            "description": "Status of the delivery note"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "counterpart",
          "counterpart_address",
          "counterpart_id",
          "display_signature_placeholder",
          "document_id",
          "entity",
          "entity_address",
          "entity_id",
          "file_language",
          "line_items",
          "original_file_language",
          "status"
        ],
        "example": {
          "id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
          "status": "created",
          "created_at": "2022-01-01T00:00:00Z",
          "updated_at": "2022-01-01T00:00:00Z",
          "entity_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
          "entity": { "name": "Entity Name" },
          "entity_address": {
            "line1": "Entity Street",
            "city": "Entity City",
            "postal_code": "123009",
            "country": "DE"
          },
          "created_by_entity_user_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
          "counterpart_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
          "counterpart": { "name": "Counterpart Name" },
          "counterpart_address": {
            "line1": "Counterpart Street",
            "city": "Counterpart City",
            "postal_code": "123009",
            "country": "DE"
          },
          "line_items": [
            {
              "quantity": 20,
              "product": {
                "name": "Product Name",
                "description": "Description of product",
                "measure_unit": { "name": "pcs", "description": "Pieces" }
              }
            }
          ],
          "document_id": "DN-2022-01-01-0001",
          "delivery_date": "2022-01-01",
          "delivery_number": "102-2022-0987",
          "memo": "This is a memo",
          "display_signature_placeholder": true,
          "file_url": "https://example.com/delivery_note.pdf",
          "original_file_url": "https://example.com/delivery_note_original.pdf",
          "file_language": "en",
          "original_file_language": "de",
          "based_on": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
          "based_on_document_id": "IN-2022-01-01-0001"
        }
      },
      "DeliveryNoteResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DeliveryNoteResource" },
            "type": "array",
            "description": "List of delivery notes"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "DeliveryNoteStatusEnum": {
        "type": "string",
        "enum": ["created", "canceled", "delivered"]
      },
      "DeliveryNoteUpdateRequest": {
        "properties": {
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart address selected for the delivery note"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart"
          },
          "delivery_date": {
            "type": "string",
            "format": "date",
            "description": "Date of delivery"
          },
          "delivery_number": {
            "type": "string",
            "description": "Delivery number"
          },
          "display_signature_placeholder": {
            "type": "boolean",
            "description": "Whether to display a signature placeholder in the generated PDF"
          },
          "line_items": {
            "items": {
              "$ref": "#/components/schemas/DeliveryNoteCreateLineItem"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "description": "List of line items in the delivery note"
          },
          "memo": {
            "type": "string",
            "description": "Additional information regarding the delivery note"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Delivery Note update request schema"
      },
      "DictsResponse": {
        "properties": { "name": { "type": "string" } },
        "type": "object",
        "required": ["name"]
      },
      "Discount": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "description": "The field specifies whether to use product currency or %."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount", "type"]
      },
      "Discount2": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "description": "The field specifies whether to use product currency or %."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount", "type"]
      },
      "DiscountResponse": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "description": "The field specifies whether to use product currency or %."
          },
          "value": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The monetary amount of the discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). If the discount `type` is `amount`, this value is the same as the `amount` value. If `type` is `percentage`, the value is the calculated discount amount."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount", "type"]
      },
      "DiscountResponse2": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "description": "The field specifies whether to use product currency or %."
          },
          "value": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The monetary amount of the discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). If the discount `type` is `amount`, this value is the same as the `amount` value. If `type` is `percentage`, the value is the calculated discount amount."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount", "type"]
      },
      "DiscountType": { "type": "string", "enum": ["amount", "percentage"] },
      "DocumentExportResponseSchema": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "count": { "type": "integer" },
          "created_by_entity_user_id": { "type": "string", "format": "uuid" },
          "end_datetime": { "type": "string", "format": "date-time" },
          "entity_id": { "type": "string", "format": "uuid" },
          "format": { "type": "string" },
          "language": { "type": "string" },
          "source_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "start_datetime": { "type": "string", "format": "date-time" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "count", "entity_id", "format", "language", "status"]
      },
      "DocumentIDSeparators": {
        "type": "string",
        "enum": ["/", "-", "|", ".", ""]
      },
      "DocumentIDsSettings": {
        "properties": {
          "document_type_prefix": {
            "$ref": "#/components/schemas/DocumentTypePrefix",
            "description": "Prefixes for each document_type.",
            "default": {
              "credit_note": "CN",
              "delivery_note": "DN",
              "invoice": "INV",
              "purchase_order": "PO",
              "quote": "Q"
            }
          },
          "include_date": {
            "type": "boolean",
            "description": "Optionally add 4-digit of the current year.",
            "default": false
          },
          "min_digits": {
            "type": "integer",
            "maximum": 25.0,
            "minimum": 1.0,
            "description": "Minimal size of number in document ID Number will be left padded with zeros if less.",
            "default": 5
          },
          "prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 25, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Optional prefix. Does not substitute document_type prefix."
          },
          "separator": {
            "$ref": "#/components/schemas/DocumentIDSeparators",
            "description": "Which character should separate each part of the document_id.",
            "default": "-"
          }
        },
        "type": "object"
      },
      "DocumentIDsSettingsNextNumber": {
        "properties": {
          "credit_note": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 9.223372036854776e18,
                "minimum": 1.0
              },
              { "type": "null" }
            ]
          },
          "delivery_note": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 9.223372036854776e18,
                "minimum": 1.0
              },
              { "type": "null" }
            ]
          },
          "invoice": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 9.223372036854776e18,
                "minimum": 1.0
              },
              { "type": "null" }
            ]
          },
          "purchase_order": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 9.223372036854776e18,
                "minimum": 1.0
              },
              { "type": "null" }
            ]
          },
          "quote": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 9.223372036854776e18,
                "minimum": 1.0
              },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "DocumentIDsSettingsRequest": {
        "properties": {
          "document_type_prefix": {
            "$ref": "#/components/schemas/DocumentTypePrefix",
            "description": "Prefixes for each document_type.",
            "default": {
              "credit_note": "CN",
              "delivery_note": "DN",
              "invoice": "INV",
              "purchase_order": "PO",
              "quote": "Q"
            }
          },
          "include_date": {
            "type": "boolean",
            "description": "Optionally add 4-digit of the current year.",
            "default": false
          },
          "min_digits": {
            "type": "integer",
            "maximum": 25.0,
            "minimum": 1.0,
            "description": "Minimal size of number in document ID Number will be left padded with zeros if less.",
            "default": 5
          },
          "next_number": {
            "anyOf": [
              { "$ref": "#/components/schemas/DocumentIDsSettingsNextNumber" },
              { "type": "null" }
            ],
            "description": "Write-only field. Changes which number will be issued next. Can't be less than the last issued document number."
          },
          "prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 25, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Optional prefix. Does not substitute document_type prefix."
          },
          "separator": {
            "$ref": "#/components/schemas/DocumentIDSeparators",
            "description": "Which character should separate each part of the document_id.",
            "default": "-"
          }
        },
        "type": "object"
      },
      "DocumentObjectTypeRequestEnum": {
        "type": "string",
        "enum": [
          "receivables_quote",
          "receivables_invoice",
          "receivables_paid_invoice",
          "receivables_credit_note",
          "receivables_discount_reminder",
          "receivables_final_reminder",
          "payables_purchase_order",
          "payables_notify_approver",
          "payables_notify_payer"
        ]
      },
      "DocumentRenderingSettings": {
        "properties": {
          "credit_note": {
            "allOf": [
              { "$ref": "#/components/schemas/CreditNoteRenderingSettings" }
            ],
            "description": "Credit note-specific rendering settings for PDF documents."
          },
          "display_entity_bank_account": {
            "type": "boolean",
            "description": "If set to `true`, the entity's bank account details will be displayed on the PDF documents. Defaults to `true`.",
            "default": true
          },
          "display_line_items": {
            "type": "boolean",
            "description": "If set to `true`, the line items table will be displayed on the quote PDF. Defaults to `true`.",
            "default": true
          },
          "invoice": {
            "allOf": [
              { "$ref": "#/components/schemas/InvoiceRenderingSettings" }
            ],
            "description": "Invoice-specific rendering settings for PDF documents."
          },
          "line_items": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemsRenderingSettings" }
            ],
            "description": "Settings for rendering line items in PDF documents. "
          },
          "quote": {
            "allOf": [
              { "$ref": "#/components/schemas/QuoteRenderingSettings" }
            ],
            "description": "Quote-specific rendering settings for PDF documents."
          }
        },
        "type": "object",
        "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
      },
      "DocumentRenderingSettings-Input": {
        "properties": {
          "credit_note": {
            "$ref": "#/components/schemas/CreditNoteRenderingSettings",
            "description": "Credit note-specific rendering settings for PDF documents."
          },
          "display_entity_bank_account": {
            "type": "boolean",
            "description": "If set to `true`, the entity's bank account details will be displayed on the PDF documents. Defaults to `true`.",
            "default": true
          },
          "display_line_items": {
            "type": "boolean",
            "description": "If set to `true`, the line items table will be displayed on the quote PDF. Defaults to `true`.",
            "default": true
          },
          "invoice": {
            "$ref": "#/components/schemas/InvoiceRenderingSettings",
            "description": "Invoice-specific rendering settings for PDF documents."
          },
          "line_items": {
            "$ref": "#/components/schemas/LineItemsRenderingSettings",
            "description": "Settings for rendering line items in PDF documents. "
          },
          "quote": {
            "$ref": "#/components/schemas/QuoteRenderingSettings",
            "description": "Quote-specific rendering settings for PDF documents."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Rendering settings that control how different parts of the PDF documents are displayed.\nIncludes common settings for all document types such as quotes, invoices, and credit notes and document\ntype-specific settings that are defined in their respective objects."
      },
      "DocumentRenderingSettings-Output": {
        "properties": {
          "credit_note": {
            "$ref": "#/components/schemas/CreditNoteRenderingSettings",
            "description": "Credit note-specific rendering settings for PDF documents."
          },
          "display_entity_bank_account": {
            "type": "boolean",
            "description": "If set to `true`, the entity's bank account details will be displayed on the PDF documents. Defaults to `true`.",
            "default": true
          },
          "display_line_items": {
            "type": "boolean",
            "description": "If set to `true`, the line items table will be displayed on the quote PDF. Defaults to `true`.",
            "default": true
          },
          "invoice": {
            "$ref": "#/components/schemas/InvoiceRenderingSettings",
            "description": "Invoice-specific rendering settings for PDF documents."
          },
          "line_items": {
            "$ref": "#/components/schemas/LineItemsRenderingSettings",
            "description": "Settings for rendering line items in PDF documents. "
          },
          "quote": {
            "$ref": "#/components/schemas/QuoteRenderingSettings",
            "description": "Quote-specific rendering settings for PDF documents."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Rendering settings that control how different parts of the PDF documents are displayed.\nIncludes common settings for all document types such as quotes, invoices, and credit notes and document\ntype-specific settings that are defined in their respective objects."
      },
      "DocumentType": { "type": "string", "enum": ["receivable", "payable"] },
      "DocumentTypeEnum": {
        "type": "string",
        "enum": ["receivable", "delivery_note", "purchase_order", "payable"]
      },
      "DocumentTypePrefix": {
        "properties": {
          "credit_note": {
            "type": "string",
            "maxLength": 25,
            "minLength": 1,
            "default": "CN"
          },
          "delivery_note": {
            "type": "string",
            "maxLength": 25,
            "minLength": 1,
            "default": "DN"
          },
          "invoice": {
            "type": "string",
            "maxLength": 25,
            "minLength": 1,
            "default": "INV"
          },
          "purchase_order": {
            "type": "string",
            "maxLength": 25,
            "minLength": 1,
            "default": "PO"
          },
          "quote": {
            "type": "string",
            "maxLength": 25,
            "minLength": 1,
            "default": "Q"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "DomainListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/DomainResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "DomainRequest": {
        "properties": {
          "domain": {
            "type": "string",
            "format": "hostname",
            "description": "The domain name, such as `mail.mycompany.com`. Can contain only alphanumeric characters (A..Z a..z 0..9), dots (.), and hyphens (-). Each segment of the domain name must start and end with either a letter or a digit."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["domain"]
      },
      "DomainResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Entry UUID"
          },
          "dedicated_ip": {
            "type": "string",
            "description": "A dedicated IP address assigned to this mailbox and used to send outgoing email."
          },
          "dns_records": {
            "anyOf": [
              { "$ref": "#/components/schemas/DNSRecords" },
              { "type": "object" }
            ]
          },
          "domain": {
            "type": "string",
            "format": "hostname",
            "description": "The domain name."
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the domain was updated for the last time"
          },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "dns_records", "domain", "status"]
      },
      "EInvoicingRetrieveListData": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EinvoicingConnectionResponse"
            },
            "type": "array",
            "description": "List of connections for the current page"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "EinvoiceSchemaTypeEnum": {
        "type": "string",
        "enum": ["DE:VAT", "NL:KVK", "NL:VAT", "BE:VAT", "BE:EN"]
      },
      "EinvoicingAddress": {
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Street address line 1"
          },
          "address_line2": {
            "type": "string",
            "description": "Street address line 2"
          },
          "city": { "type": "string", "description": "City name" },
          "country": {
            "allOf": [
              { "$ref": "#/components/schemas/AllowedEinvoicingCountryCodes" }
            ],
            "description": "Country name"
          },
          "postal_code": { "type": "string", "description": "Postal/ZIP code" },
          "state": { "type": "string", "description": "State/Province/County" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address_line1", "city", "country", "postal_code"]
      },
      "EinvoicingConnectionCreateRequest": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/EinvoicingAddress" }],
            "description": "Integration Address"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID identifier for the integration"
          },
          "is_receiver": {
            "type": "boolean",
            "description": "Set to `true` if the entity needs to receive e-invoices.",
            "default": true
          },
          "is_sender": {
            "type": "boolean",
            "description": "Set to `true` if the entity needs to send e-invoices. Either `is_sender` or `is_receiver` or both must be `true`.",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address"]
      },
      "EinvoicingConnectionResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of Integration"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update of Integration"
          },
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/EinvoicingAddress" }],
            "description": "Integration Address"
          },
          "credentials": {
            "items": {
              "$ref": "#/components/schemas/EinvoicingNetworkCredentialsResponse"
            },
            "type": "array",
            "description": "List of credentials"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "is_receiver": {
            "type": "boolean",
            "description": "Set to `true` if the entity needs to receive e-invoices.",
            "default": true
          },
          "is_sender": {
            "type": "boolean",
            "description": "Set to `true` if the entity needs to send e-invoices. Either `is_sender` or `is_receiver` or both must be `true`.",
            "default": true
          },
          "legal_name": {
            "type": "string",
            "description": "Legal name of the Entity"
          },
          "provider_id": {
            "type": "string",
            "description": "ID assigned by integration partner",
            "example": "12345"
          },
          "status": {
            "type": "string",
            "description": "Current status of the integration",
            "example": "active"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "credentials",
          "entity_id",
          "legal_name",
          "status"
        ]
      },
      "EinvoicingConnectionUpdateRequest": {
        "properties": {
          "address": {
            "allOf": [
              { "$ref": "#/components/schemas/UpdateEinvoicingAddress" }
            ],
            "description": "Integration Address"
          },
          "is_receiver": {
            "type": "boolean",
            "description": "Set to `true` if the entity needs to receive e-invoices."
          },
          "is_sender": {
            "type": "boolean",
            "description": "Set to `true` if the entity needs to send e-invoices. Either `is_sender` or `is_receiver` or both must be `true`."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EinvoicingCredentials": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "network_identifier": { "type": "string" },
          "network_schema": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "network_identifier", "network_schema"]
      },
      "EinvoicingNetworkCredentialsCreateRequest": {
        "properties": {
          "network_credentials_identifier": {
            "type": "string",
            "description": "Network participant identifier",
            "example": "12345678"
          },
          "network_credentials_schema": {
            "allOf": [
              { "$ref": "#/components/schemas/EinvoiceSchemaTypeEnum" }
            ],
            "description": "Network scheme identifier",
            "example": "NL:KVK"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "network_credentials_identifier",
          "network_credentials_schema"
        ]
      },
      "EinvoicingNetworkCredentialsResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the credentials"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of credential"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update of credential"
          },
          "einvoicing_connection_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the Einvoicing connection"
          },
          "network_credentials_identifier": {
            "type": "string",
            "description": "Network participant identifier",
            "example": "12345678"
          },
          "network_credentials_schema": {
            "allOf": [
              { "$ref": "#/components/schemas/EinvoiceSchemaTypeEnum" }
            ],
            "description": "Network scheme identifier",
            "example": "NL:KVK"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "einvoicing_connection_id",
          "network_credentials_identifier",
          "network_credentials_schema"
        ]
      },
      "EmbeddedAuthPayload": {
        "oneOf": [
          { "$ref": "#/components/schemas/EmbeddedManuallySpecifiedPayload" },
          {
            "$ref": "#/components/schemas/EmbeddedAuthorizedBankAccountPayload"
          },
          { "$ref": "#/components/schemas/EmbeddedBankAccountPayload" }
        ],
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "manual_input": "#/components/schemas/EmbeddedManuallySpecifiedPayload",
            "authorized_bank_account": "#/components/schemas/EmbeddedAuthorizedBankAccountPayload",
            "bank_account": "#/components/schemas/EmbeddedBankAccountPayload"
          }
        }
      },
      "EmbeddedAuthorizationResponse": {
        "properties": {
          "application_user_id": { "type": "string" },
          "consent_id": { "type": "string" },
          "consent_token": { "type": "string" },
          "sca_methods": {
            "items": { "$ref": "#/components/schemas/SCAMethod" },
            "type": "array"
          },
          "selected_sca_method": { "$ref": "#/components/schemas/SCAMethod" },
          "state": { "$ref": "#/components/schemas/ConsentState" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["application_user_id", "consent_id", "state"]
      },
      "EmbeddedAuthorizedBankAccountPayload": {
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "User's password in the bank system."
          },
          "auth_user": {
            "type": "string",
            "description": "User login in the bank system."
          },
          "authorized_bank_account_id": { "type": "string", "format": "uuid" },
          "iframe": { "type": "boolean", "default": false },
          "psu_identification": {
            "allOf": [{ "$ref": "#/components/schemas/PsuIdentification" }],
            "description": "PSU identification is required for some banks (e.g. some Germany institutions)."
          },
          "type": {
            "type": "string",
            "enum": ["authorized_bank_account"],
            "default": "authorized_bank_account"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["auth_password", "auth_user", "authorized_bank_account_id"]
      },
      "EmbeddedBankAccountPayload": {
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "User's password in the bank system."
          },
          "auth_user": {
            "type": "string",
            "description": "User login in the bank system."
          },
          "bank_account_id": { "type": "string", "format": "uuid" },
          "bank_id": { "type": "string" },
          "iframe": { "type": "boolean", "default": false },
          "psu_identification": {
            "allOf": [{ "$ref": "#/components/schemas/PsuIdentification" }],
            "description": "PSU identification is required for some banks (e.g. some Germany institutions)."
          },
          "save_to_authorized": { "type": "boolean", "default": false },
          "type": {
            "type": "string",
            "enum": ["bank_account"],
            "default": "bank_account"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["auth_password", "auth_user", "bank_account_id", "bank_id"]
      },
      "EmbeddedManuallySpecifiedPayload": {
        "properties": {
          "auth_password": {
            "type": "string",
            "description": "User's password in the bank system."
          },
          "auth_user": {
            "type": "string",
            "description": "User login in the bank system."
          },
          "bank_id": { "type": "string" },
          "iframe": { "type": "boolean", "default": false },
          "payer_account_country": {
            "$ref": "#/components/schemas/YapilyCountriesCoverageCodes"
          },
          "payer_account_holder_name": { "type": "string" },
          "payer_account_identification": {
            "$ref": "#/components/schemas/AccountIdentification"
          },
          "psu_identification": {
            "allOf": [{ "$ref": "#/components/schemas/PsuIdentification" }],
            "description": "PSU identification is required for some banks (e.g. some Germany institutions)."
          },
          "save_to_authorized": { "type": "boolean", "default": false },
          "type": {
            "type": "string",
            "enum": ["manual_input"],
            "default": "manual_input"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "auth_password",
          "auth_user",
          "bank_id",
          "payer_account_country",
          "payer_account_identification"
        ]
      },
      "EnabledPaymentMethods": {
        "properties": {
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "description": "Deprecated. Use payment_methods_receive instead.",
            "deprecated": true
          },
          "payment_methods_receive": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "description": "Enable payment methods to receive money."
          },
          "payment_methods_send": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "description": "Enable payment methods to send money."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityAddressResponseSchema": {
        "properties": {
          "city": {
            "type": "string",
            "maxLength": 255,
            "description": "A city (a full name) where the entity is registered"
          },
          "country": {
            "$ref": "#/components/schemas/AllowedCountries",
            "description": "A country name (as ISO code) where the entity is registered ",
            "examples": ["DE"]
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "description": "An alternative street used by the entity"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A state in a country where the entity is registered"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"],
        "description": "A schema represents address info of the entity"
      },
      "EntityAddressSchema": {
        "properties": {
          "city": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "A city (a full name) where the entity is registered"
          },
          "country": {
            "$ref": "#/components/schemas/AllowedCountries",
            "description": "A country name (as ISO code) where the entity is registered ",
            "examples": ["DE"]
          },
          "line1": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "An alternative street used by the entity"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "minLength": 1,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "State, county, province, prefecture, region, or similar component of the entity's address. For US entities, `state` is required and must be a two-letter [USPS state abbreviation](https://pe.usps.com/text/pub28/28apb.htm), for example, NY or CA."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"],
        "description": "A schema represents address info of the entity"
      },
      "EntityBankAccountPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EntityBankAccountResponse"
            },
            "type": "array",
            "description": "A list of an entity's bank accounts."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of an entity's bank accounts."
      },
      "EntityBankAccountResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the bank account."
          },
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required in the following cases:\n* the account currency is GBP or USD,\n* the account currency is EUR and the entity wishes to receive SEPA Credit transfers to this account.",
            "example": "Cayla Lloyd"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.",
            "example": "12345678"
          },
          "bank_name": {
            "type": "string",
            "description": "The bank name.",
            "example": "Deutsche Bank"
          },
          "bic": {
            "type": "string",
            "description": "The SWIFT/BIC code of the bank. Can be either 8 or 11 characters long. Monite verifies the BIC length, country code, and whether the structure conforms to ISO 9362.\n\nIf `bic` is specified, `iban` must also be specified.",
            "example": "DEUTDEFFXXX"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).",
            "example": "EUR"
          },
          "display_name": {
            "type": "string",
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'.",
            "example": "Primary account"
          },
          "iban": {
            "type": "string",
            "description": "The IBAN of the bank account, up to 34 characters. Required if the account currency is EUR. Monite verifies the IBAN length, checksum digits, and country-specific format according to ISO 13616.",
            "example": "DE74500700100100000900"
          },
          "is_default_for_currency": {
            "type": "boolean",
            "description": "Indicates whether this bank account is the default one for its currency.",
            "default": false
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN) or branch code. Required if the account currency is USD. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code. Required if the account currency is GBP.",
            "example": "123456"
          },
          "was_created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who added this bank account, or `null` if it was added using a partner access token."
          }
        },
        "type": "object",
        "required": ["id"],
        "description": "Represents a bank account owned by an entity."
      },
      "EntityBusinessStructure": {
        "type": "string",
        "enum": [
          "incorporated_partnership",
          "unincorporated_partnership",
          "public_corporation",
          "private_corporation",
          "sole_proprietorship",
          "single_member_llc",
          "multi_member_llc",
          "private_partnership",
          "unincorporated_association",
          "public_partnership"
        ]
      },
      "EntityCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "EntityFields": {
        "properties": {
          "tax_id": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `tax_id` of an entity",
            "default": {
              "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.",
              "required": false
            }
          },
          "vat_id": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `vat_id` of an entity",
            "default": {
              "description": "The entity's VAT (Value Added Tax) identification number. This field is required for entities that are VAT-registered.",
              "required": false
            }
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityIndividualResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "$ref": "#/components/schemas/EntityAddressResponseSchema",
            "description": "An address description of the entity"
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "An official email address of the entity"
          },
          "individual": {
            "$ref": "#/components/schemas/IndividualResponseSchema",
            "description": "A set of metadata describing an individual"
          },
          "logo": {
            "anyOf": [
              { "$ref": "#/components/schemas/FileSchema2" },
              { "type": "null" }
            ],
            "description": "A logo image of the entity"
          },
          "phone": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided.",
            "examples": ["Amtsgericht Charlottenburg"]
          },
          "registration_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available.",
            "examples": ["HRB 202324"]
          },
          "status": {
            "$ref": "#/components/schemas/EntityStatusEnum",
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "anyOf": [
              { "type": "string", "maxLength": 30 },
              { "type": "null" }
            ],
            "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
          },
          "type": {
            "type": "string",
            "const": "individual",
            "description": "A type for an individual"
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "individual",
          "status",
          "type"
        ]
      },
      "EntityOnboardingDataRequest": {
        "properties": {
          "business_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/BusinessProfile-Input" },
              { "type": "null" }
            ],
            "description": "Business information about the entity."
          },
          "ownership_declaration": {
            "anyOf": [
              { "$ref": "#/components/schemas/OwnershipDeclaration-Input" },
              { "type": "null" }
            ],
            "description": "Used to attest that the beneficial owner information provided is both current and correct."
          },
          "tos_acceptance": {
            "anyOf": [
              { "$ref": "#/components/schemas/TermsOfServiceAcceptance-Input" },
              { "type": "null" }
            ],
            "description": "Details on the entity's acceptance of the service agreement."
          },
          "treasury_tos_acceptance": {
            "anyOf": [
              { "$ref": "#/components/schemas/TermsOfServiceAcceptance-Input" },
              { "type": "null" }
            ],
            "description": "Details on the entity's acceptance of the Stripe Treasury service agreement."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityOnboardingDataResponse": {
        "properties": {
          "business_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/BusinessProfile-Output" },
              { "type": "null" }
            ],
            "description": "Business information about the entity."
          },
          "ownership_declaration": {
            "anyOf": [
              { "$ref": "#/components/schemas/OwnershipDeclaration-Output" },
              { "type": "null" }
            ],
            "description": "Used to attest that the beneficial owner information provided is both current and correct."
          },
          "tos_acceptance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TermsOfServiceAcceptance-Output"
              },
              { "type": "null" }
            ],
            "description": "Details on the entity's acceptance of the service agreement."
          },
          "treasury_tos_acceptance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TermsOfServiceAcceptance-Output"
              },
              { "type": "null" }
            ],
            "description": "Details on the entity's acceptance of the Stripe Treasury service agreement."
          }
        },
        "type": "object"
      },
      "EntityOnboardingDocumentsPayload": {
        "properties": {
          "additional_verification_document_back": {
            "type": "string",
            "format": "uuid"
          },
          "additional_verification_document_front": {
            "type": "string",
            "format": "uuid"
          },
          "bank_account_ownership_verification": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "company_license": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "company_memorandum_of_association": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "company_ministerial_decree": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "company_registration_verification": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "company_tax_id_verification": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "proof_of_registration": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1
          },
          "verification_document_back": { "type": "string", "format": "uuid" },
          "verification_document_front": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityOrganizationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "$ref": "#/components/schemas/EntityAddressResponseSchema",
            "description": "An address description of the entity"
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "An official email address of the entity"
          },
          "logo": {
            "anyOf": [
              { "$ref": "#/components/schemas/FileSchema2" },
              { "type": "null" }
            ],
            "description": "A logo image of the entity"
          },
          "organization": {
            "$ref": "#/components/schemas/OrganizationResponseSchema",
            "description": "A set of metadata describing an organization"
          },
          "phone": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided.",
            "examples": ["Amtsgericht Charlottenburg"]
          },
          "registration_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available.",
            "examples": ["HRB 202324"]
          },
          "status": {
            "$ref": "#/components/schemas/EntityStatusEnum",
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "anyOf": [
              { "type": "string", "maxLength": 30 },
              { "type": "null" }
            ],
            "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
          },
          "type": {
            "type": "string",
            "const": "organization",
            "description": "A type for an organization"
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "organization",
          "status",
          "type"
        ]
      },
      "EntityPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntityResponse" },
            "type": "array",
            "description": "A set of entities of different types returned per page"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "EntityResponse": {
        "oneOf": [
          { "$ref": "#/components/schemas/EntityOrganizationResponse" },
          { "$ref": "#/components/schemas/EntityIndividualResponse" }
        ],
        "description": "A schema for a response after creation of an entity of different types",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "individual": "#/components/schemas/EntityIndividualResponse",
            "organization": "#/components/schemas/EntityOrganizationResponse"
          }
        }
      },
      "EntityStatusEnum": {
        "type": "string",
        "enum": ["active", "inactive", "deleted"]
      },
      "EntityTypeEnum": {
        "type": "string",
        "enum": ["individual", "organization"]
      },
      "EntityUpdateVatID": {
        "properties": {
          "country": {
            "anyOf": [
              { "$ref": "#/components/schemas/AllowedCountries" },
              { "type": "null" }
            ]
          },
          "type": {
            "anyOf": [
              { "$ref": "#/components/schemas/VatIDTypeEnum" },
              { "type": "null" }
            ],
            "examples": ["eu_vat"]
          },
          "value": {
            "anyOf": [{ "type": "string", "maxLength": 32 }, { "type": "null" }]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "EntityUserCursorFields": { "type": "string", "enum": ["updated_at"] },
      "EntityUserPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntityUserResponse" },
            "type": "array",
            "description": "array of records"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "EntityUserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity user ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "An entity user business email"
          },
          "first_name": { "type": "string", "description": "First name" },
          "last_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "Last name"
          },
          "login": {
            "type": "string",
            "description": "Login",
            "examples": ["caseyp"]
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "An entity user phone number in the international format"
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID role ID"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "record status, 'active' by default"
          },
          "userpic_file_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "login",
          "role_id",
          "status"
        ]
      },
      "EntityVatID": {
        "properties": {
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "$ref": "#/components/schemas/VatIDTypeEnum",
            "default": "unknown",
            "examples": ["eu_vat"]
          },
          "value": {
            "type": "string",
            "maxLength": 32,
            "examples": ["123456789"]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country", "value"]
      },
      "EntityVatIDResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EntityVatIDResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "EntityVatIDResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "entity_id": { "type": "string", "format": "uuid" },
          "type": {
            "$ref": "#/components/schemas/VatIDTypeEnum",
            "default": "unknown",
            "examples": ["eu_vat"]
          },
          "value": {
            "type": "string",
            "maxLength": 32,
            "examples": ["123456789"]
          }
        },
        "type": "object",
        "required": ["id", "country", "entity_id", "value"]
      },
      "EnvironmentEnum": { "type": "string", "enum": ["EU sandbox"] },
      "ErrorSchema": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "ErrorSchema2": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "ErrorSchema3": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "ErrorSchemaResponse": {
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorSchema" }
        },
        "type": "object",
        "required": ["error"]
      },
      "ErrorSchemaResponse2": {
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorSchema2" }
        },
        "type": "object",
        "required": ["error"]
      },
      "ErrorSchemaResponse3": {
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorSchema3" }
        },
        "type": "object",
        "required": ["error"]
      },
      "EstimatedMonthlyRevenue": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 9.223372036854776e18,
                "minimum": 1.0
              },
              { "type": "null" }
            ],
            "description": "The amount of the monthly revenue, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "examples": [250]
          },
          "currency": {
            "anyOf": [
              { "$ref": "#/components/schemas/CurrencyEnum" },
              { "type": "null" }
            ],
            "description": "[Currency code](https://docs.monite.com/references/currencies) of the revenue.",
            "examples": ["USD"]
          }
        },
        "type": "object"
      },
      "EventCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "EventPaginationResource": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/EventResource" },
            "type": "array",
            "description": "A set of events returned per page"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "EventResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "description": "The timestamp that was generated at the time of making the database transaction that has initially caused the event"
          },
          "action": { "type": "string" },
          "api_version": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "description": { "type": "string" },
          "entity_id": { "type": "string", "format": "uuid" },
          "object": { "anyOf": [{}, { "type": "null" }] },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" }
        },
        "type": "object",
        "required": [
          "id",
          "action",
          "api_version",
          "description",
          "entity_id",
          "object_type"
        ]
      },
      "EventResourceForWebhookClient": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "description": "The timestamp that was generated at the time of making the database transaction that has initially caused the event"
          },
          "action": { "type": "string" },
          "api_version": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "description": { "type": "string" },
          "entity_id": { "type": "string", "format": "uuid" },
          "object": { "anyOf": [{}, { "type": "null" }] },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "webhook_subscription_id": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": [
          "id",
          "action",
          "api_version",
          "description",
          "entity_id",
          "object_type",
          "webhook_subscription_id"
        ]
      },
      "ExchangeRate": {
        "properties": {
          "base": {
            "$ref": "#/components/schemas/CurrencyEnum",
            "examples": ["USD"]
          },
          "rate": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "examples": [0.98]
          },
          "to": {
            "$ref": "#/components/schemas/CurrencyEnum",
            "examples": ["EUR"]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["base", "to", "rate"]
      },
      "ExportFormat": { "type": "string", "enum": ["csv", "pdf", "csv_xero"] },
      "ExportObjectSchema": {
        "oneOf": [
          { "$ref": "#/components/schemas/ExportPayableSchema" },
          { "$ref": "#/components/schemas/ExportReceivableSchema" }
        ],
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "payable": "#/components/schemas/ExportPayableSchema",
            "receivable": "#/components/schemas/ExportReceivableSchema"
          }
        }
      },
      "ExportPayableSchema": {
        "properties": {
          "name": { "type": "string", "enum": ["payable"] },
          "statuses": {
            "items": { "$ref": "#/components/schemas/PayableStateEnum" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "statuses"]
      },
      "ExportPayloadSchema": {
        "properties": {
          "date_from": { "type": "string", "format": "date" },
          "date_to": { "type": "string", "format": "date" },
          "format": { "$ref": "#/components/schemas/ExportFormat" },
          "objects": {
            "items": { "$ref": "#/components/schemas/ExportObjectSchema" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["date_from", "date_to", "format", "objects"]
      },
      "ExportReceivableSchema": {
        "properties": {
          "name": { "type": "string", "enum": ["receivable"] },
          "statuses": {
            "items": { "$ref": "#/components/schemas/ReceivablesStatusEnum" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "statuses"]
      },
      "ExportSettingCursorFields": {
        "type": "string",
        "enum": ["id", "created_at"]
      },
      "ExtraDataCreateRequest": {
        "properties": {
          "field_name": { "$ref": "#/components/schemas/SupportedFieldNames" },
          "field_value": { "type": "string" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string", "enum": ["counterpart"] }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["field_name", "field_value", "object_id", "object_type"]
      },
      "ExtraDataResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "string", "format": "uuid" },
          "field_name": { "$ref": "#/components/schemas/SupportedFieldNames" },
          "field_value": { "type": "string" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string", "enum": ["counterpart"] }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "field_name",
          "field_value",
          "object_id",
          "object_type"
        ]
      },
      "ExtraDataResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ExtraDataResource" },
            "type": "array"
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        },
        "type": "object",
        "required": ["data"]
      },
      "ExtraDataUpdateRequest": {
        "properties": {
          "field_name": { "$ref": "#/components/schemas/SupportedFieldNames" },
          "field_value": { "type": "string" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "type": "string", "enum": ["counterpart"] }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "FeaturesResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "name": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "name"]
      },
      "FieldSchema": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["description", "required"]
      },
      "FileAttachedEventData": {
        "properties": {
          "file_name": { "type": "string" },
          "file_size": { "type": "integer" },
          "url": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["file_name", "file_size", "url"]
      },
      "FileResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "file_type": { "type": "string" },
          "md5": { "type": "string" },
          "mimetype": { "type": "string" },
          "name": { "type": "string" },
          "region": { "type": "string" },
          "s3_bucket": { "type": "string" },
          "s3_file_path": { "type": "string" },
          "size": { "type": "integer" },
          "url": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "file_type",
          "md5",
          "mimetype",
          "name",
          "region",
          "s3_bucket",
          "s3_file_path",
          "size",
          "url"
        ]
      },
      "FileSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this file was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "example": "payables"
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "example": "31d1a2dd1ad3dfc39be849d70a68dac0"
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).",
            "example": "application/pdf"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "example": "invoice.pdf"
          },
          "pages": {
            "items": { "$ref": "#/components/schemas/PageSchema2" },
            "type": "array",
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          },
          "previews": {
            "items": { "$ref": "#/components/schemas/PreviewSchema2" },
            "type": "array",
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "example": "eu-central-1"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "example": 24381
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "example": "https://bucketname.s3.amazonaws.com/12345/67890.pdf"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "name",
          "region",
          "md5",
          "mimetype",
          "url",
          "size"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "FileSchema2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this file was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "examples": ["payables"]
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "examples": ["31d1a2dd1ad3dfc39be849d70a68dac0"]
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types).",
            "examples": ["application/pdf"]
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "examples": ["invoice.pdf"]
          },
          "pages": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/PageSchema" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          },
          "previews": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/PreviewSchema" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "examples": ["eu-central-1"]
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "examples": [24381]
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "examples": ["https://bucketname.s3.amazonaws.com/12345/67890.pdf"]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "md5",
          "mimetype",
          "name",
          "region",
          "size",
          "url"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "FileSchema3": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "examples": ["payables"]
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "examples": ["31d1a2dd1ad3dfc39be849d70a68dac0"]
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types).",
            "examples": ["application/pdf"]
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "examples": ["invoice.pdf"]
          },
          "pages": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/PageSchema" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          },
          "previews": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/PreviewSchema" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "examples": ["eu-central-1"]
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "examples": [24381]
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "examples": ["https://bucketname.s3.amazonaws.com/12345/67890.pdf"]
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "md5",
          "mimetype",
          "name",
          "region",
          "size",
          "url"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "FileSchema4": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this file."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "file_type": {
            "type": "string",
            "description": "The type of the business object associated with this file.",
            "example": "payables"
          },
          "md5": {
            "type": "string",
            "description": "The MD5 hash of the file.",
            "example": "31d1a2dd1ad3dfc39be849d70a68dac0"
          },
          "mimetype": {
            "type": "string",
            "description": "The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types).",
            "example": "application/pdf"
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name (if available).",
            "example": "invoice.pdf"
          },
          "pages": {
            "items": { "$ref": "#/components/schemas/PageSchema3" },
            "type": "array",
            "description": "If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.",
            "default": []
          },
          "previews": {
            "items": { "$ref": "#/components/schemas/PreviewSchema3" },
            "type": "array",
            "description": "Preview images generated for this file. There can be multiple images with different sizes.",
            "default": []
          },
          "region": {
            "type": "string",
            "description": "Geographical region of the data center where the file is stored.",
            "example": "eu-central-1"
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The file size in bytes.",
            "example": 24381
          },
          "url": {
            "type": "string",
            "description": "The URL to download the file.",
            "example": "https://bucketname.s3.amazonaws.com/12345/67890.pdf"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_type",
          "md5",
          "mimetype",
          "name",
          "region",
          "size",
          "url"
        ],
        "description": "Represents a file (such as a PDF invoice) that was uploaded to Monite."
      },
      "FilesResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FileResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "FinancingInvoice": {
        "properties": {
          "advance_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Amount after fees the business will receive in minor units."
          },
          "advance_rate_percentage": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Advance rate percentage. 10000 means 100%"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code."
          },
          "description": {
            "type": "string",
            "description": "Description of the invoice."
          },
          "document_id": {
            "type": "string",
            "description": "Monite document ID."
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Monite invoice due date."
          },
          "fee_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Fee amount in minor units."
          },
          "fee_percentage": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Fee percentage. 300 means 3%"
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "description": "Monite invoice ID."
          },
          "issue_date": {
            "type": "string",
            "format": "date",
            "description": "Monite invoice issue date."
          },
          "payer_business_name": {
            "type": "string",
            "description": "Payer business name. Only applicable for BUSINESS payer type."
          },
          "payer_first_name": {
            "type": "string",
            "description": "Payer first name. Only applicable for INDIVIDUAL payer type."
          },
          "payer_last_name": {
            "type": "string",
            "description": "Payer last name. Only applicable for INDIVIDUAL payer type."
          },
          "payer_type": {
            "type": "string",
            "description": "Payer type. BUSINESS or INDIVIDUAL"
          },
          "principal_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Principal amount of the loan in minor units."
          },
          "repayment_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Amount the business will repay in minor units."
          },
          "repayment_schedule": {
            "allOf": [{ "$ref": "#/components/schemas/RepaymentSchedule" }],
            "description": "Repayment schedule of the invoice.",
            "example": {
              "repayment_date": "2025-03-01",
              "repayment_amount": 100000,
              "repayment_fee_amount": 3000,
              "repayment_principal_amount": 97000
            }
          },
          "requested_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Amount the business requests to be financed in minor units."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/WCInvoiceStatus" }],
            "description": "Status of the invoice."
          },
          "total_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Total amount of the invoice in minor units."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/FinancingInvoiceType" }],
            "description": "The type of the invoice i.e. receivable or payable."
          }
        },
        "type": "object",
        "required": [
          "type",
          "status",
          "invoice_id",
          "document_id",
          "due_date",
          "issue_date",
          "total_amount",
          "currency",
          "payer_type"
        ]
      },
      "FinancingInvoiceCursorFields": {
        "type": "string",
        "enum": ["id", "created_at"]
      },
      "FinancingInvoiceListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/FinancingInvoice" },
            "type": "array",
            "description": "A list of invoices requested for financing."
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "FinancingInvoiceType": {
        "type": "string",
        "enum": ["payable", "receivable"]
      },
      "FinancingOffer": {
        "properties": {
          "available_amount": {
            "type": "integer",
            "description": "The available credit limit in minor units.",
            "example": 500000
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency code.",
            "example": "USD"
          },
          "pricing_plans": {
            "items": { "$ref": "#/components/schemas/PricingPlan" },
            "type": "array",
            "minItems": 1,
            "description": "A list of pricing plans for the offer."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/WCOfferStatus" }],
            "description": "The status of the financing offer.",
            "example": "CURRENT"
          },
          "total_amount": {
            "type": "integer",
            "description": "The total credit limit in minor units.",
            "example": 1000000
          }
        },
        "type": "object",
        "required": ["status", "total_amount", "currency", "pricing_plans"]
      },
      "FinancingOffersResponse": {
        "properties": {
          "business_status": {
            "allOf": [{ "$ref": "#/components/schemas/WCBusinessStatus" }],
            "description": "The business's onboarding status.",
            "example": "ONBOARDED"
          },
          "offers": {
            "items": { "$ref": "#/components/schemas/FinancingOffer" },
            "type": "array",
            "description": "A list of financing offers extended to the business."
          }
        },
        "type": "object",
        "required": ["offers", "business_status"]
      },
      "FinancingPushInvoicesRequest": {
        "properties": {
          "invoices": {
            "items": {
              "$ref": "#/components/schemas/FinancingPushInvoicesRequestInvoice"
            },
            "type": "array",
            "maxItems": 10,
            "minItems": 1,
            "description": "A list of invoices to request financing for."
          }
        },
        "type": "object",
        "required": ["invoices"]
      },
      "FinancingPushInvoicesRequestInvoice": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The invoice ID."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/FinancingInvoiceType" }],
            "description": "The invoice type."
          }
        },
        "type": "object",
        "required": ["id", "type"]
      },
      "FinancingPushInvoicesResponse": {
        "properties": {
          "connect_token": {
            "type": "string",
            "description": "A connect token for Kanmon SDK."
          },
          "session_token": {
            "type": "string",
            "description": "An embedded session token for Kanmon SDK."
          }
        },
        "type": "object",
        "required": ["connect_token", "session_token"]
      },
      "FinancingTokenResponse": {
        "properties": {
          "connect_token": {
            "type": "string",
            "description": "A connect token for Kanmon SDK."
          }
        },
        "type": "object",
        "required": ["connect_token"]
      },
      "GetAllPaymentReminders": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentReminderResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "GetOnboardingRequirementsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SingleOnboardingRequirementsResponse"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "GetSecretsResponse": {
        "properties": {
          "secrets": {
            "items": {
              "$ref": "#/components/schemas/GetSecretsResponseSecret"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["secrets"]
      },
      "GetSecretsResponseSecret": {
        "properties": {
          "id": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" },
          "client_id": { "type": "string" },
          "client_secret_mask": { "type": "string" },
          "last_used_at": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ]
          },
          "name": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
          "revoke_datetime": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ]
          },
          "status": { "$ref": "#/components/schemas/SecretStatusEnum" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "client_id",
          "client_secret_mask",
          "status"
        ]
      },
      "GrantType": {
        "type": "string",
        "enum": ["client_credentials", "entity_user"]
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IndividualResponseSchema": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ]
          },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A first name of an individual"
          },
          "id_number": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A last name of an individual"
          },
          "ssn_last_4": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The last four digits of the individual's Social Security number"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 10 },
              { "type": "null" }
            ],
            "description": "A title of an individual"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name"],
        "description": "Contains data specific to entities of the `individual` type."
      },
      "IndividualSchema": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ]
          },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "A first name of an individual"
          },
          "id_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ]
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "A last name of an individual"
          },
          "ssn_last_4": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The last four digits of the individual's Social Security number"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 10, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A title of an individual"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name"],
        "description": "A schema contains metadata for an individual"
      },
      "InlinePaymentTermsRequestPayload": {
        "properties": {
          "term_1": {
            "allOf": [{ "$ref": "#/components/schemas/InlineTermDiscount" }],
            "description": "The first tier of the payment term. Represents the terms of the first early discount."
          },
          "term_2": {
            "allOf": [{ "$ref": "#/components/schemas/InlineTermDiscount" }],
            "description": "The second tier of the payment term. Defines the terms of the second early discount."
          },
          "term_final": {
            "allOf": [{ "$ref": "#/components/schemas/InlineTermFinal" }],
            "description": "The final tier of the payment term. Defines the invoice due date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["term_final"]
      },
      "InlineTermDiscount": {
        "properties": {
          "discount": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%."
          },
          "end_date": { "type": "string", "format": "date" },
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["discount"]
      },
      "InlineTermFinal": {
        "properties": {
          "end_date": { "type": "string", "format": "date" },
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "InternalLineItemProduct": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the product."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was last updated. Timestamps follow the ISO 8601 standard."
          },
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the accounting tax rate object."
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "entity_id": { "type": "string", "format": "uuid" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog.",
            "examples": ["HT-1234-S-BL", "SERVICE-67890"]
          },
          "is_inline": {
            "type": "boolean",
            "description": "Indicates whether the product is inline",
            "default": false
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "measure_unit": {
            "$ref": "#/components/schemas/LineItemProductMeasureUnit"
          },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "name": { "type": "string", "description": "Name of the product." },
          "price": { "$ref": "#/components/schemas/Price" },
          "price_after_vat": { "$ref": "#/components/schemas/Price" },
          "price_after_vat_precise": {
            "$ref": "#/components/schemas/PriceFloat"
          },
          "price_precise": { "$ref": "#/components/schemas/PriceFloat" },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          },
          "vat_rate": { "$ref": "#/components/schemas/LineItemProductVatRate" }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "price",
          "price_after_vat",
          "price_after_vat_precise",
          "price_precise",
          "vat_rate"
        ]
      },
      "InternalOnboardingRequirementsResponse": {
        "properties": {
          "data": { "$ref": "#/components/schemas/OnboardingData" },
          "requirements": {
            "items": { "$ref": "#/components/schemas/OnboardingRequirement" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["requirements"]
      },
      "InternalPaymentLinkResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "confirm_on_backend": { "type": "boolean", "default": true },
          "entity_id": { "type": "string", "format": "uuid" },
          "expires_at": { "type": "string", "format": "date-time" },
          "partner_id": { "type": "string", "format": "uuid" },
          "payment_intent": {
            "$ref": "#/components/schemas/PaymentIntentWithSecrets"
          },
          "payment_intent_id": { "type": "string", "format": "uuid" },
          "payment_page_url": { "type": "string" },
          "project_id": { "type": "string", "format": "uuid" },
          "return_url": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "entity_id",
          "expires_at",
          "partner_id",
          "payment_intent",
          "payment_intent_id",
          "payment_page_url",
          "project_id",
          "status"
        ]
      },
      "InternalQuoteResponsePayload": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "comment": {
            "type": "string",
            "description": "Field with a comment on why the client declined this Quote"
          },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "counterpart_billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress"
              }
            ],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_external_reference": {
            "type": "string",
            "description": "The external reference of the counterpart."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization or first and last name if it is an individual"
          },
          "counterpart_shipping_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress"
              }
            ],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_universal_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress"
              }
            ],
            "description": "Address of the counterpart, if we need to only one address"
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/ReceivableCounterpartVatIDResponse"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "deduction_title": {
            "type": "string",
            "description": "Partner level customizable deduction title"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountResponse" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "einvoice_file_url": {
            "type": "string",
            "description": "E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`."
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivableEntityIndividual" }
            ]
          },
          "entity_address": {
            "$ref": "#/components/schemas/ReceivableEntityAddressSchema"
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/ReceivablesRepresentationOfEntityBankAccount"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/ReceivableEntityVatIDResponse"
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "external_qr_code_link": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "External link redirecting user from qr code"
          },
          "file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated."
          },
          "file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the counterpart's default language."
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/InternalResponseItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "original_file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated."
          },
          "original_file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the entity's default language."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "signature": {
            "allOf": [{ "$ref": "#/components/schemas/SignatureResponse" }],
            "description": "Quote's digital signature"
          },
          "signature_required": {
            "type": "boolean",
            "description": "Whether acceptance a quote requires a signature."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/QuoteStateEnum" }],
            "description": "The status of the Quote inside the receivable workflow."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "subtotal_after_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "The list of tags for this receivable.",
            "default": []
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "type": {
            "type": "string",
            "enum": ["quote"],
            "description": "The type of the document uploaded."
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "vat_inclusive_discount_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.",
            "default": "exclusive"
          },
          "vat_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Defines whether the prices of products in receivable will already include VAT or not.",
            "default": "exclusive"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "counterpart_id",
          "counterpart_type",
          "counterpart_universal_address",
          "currency",
          "entity",
          "entity_address",
          "file_language",
          "line_items",
          "original_file_language",
          "status",
          "total_vat_amount",
          "type"
        ]
      },
      "InternalResponseItem": {
        "properties": {
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount" }],
            "description": "The discount for a product."
          },
          "product": { "$ref": "#/components/schemas/InternalLineItemProduct" },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "total_after_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item after VAT with applied line item discount in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_after_vat_precise": {
            "type": "number",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item after VAT in float"
          },
          "total_before_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item before VAT in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_before_vat_precise": {
            "type": "number",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item before VAT in float"
          }
        },
        "type": "object",
        "required": [
          "product",
          "quantity",
          "total_after_vat",
          "total_after_vat_precise",
          "total_before_vat",
          "total_before_vat_precise"
        ]
      },
      "InviteRequest": {
        "properties": {
          "users": {
            "items": { "$ref": "#/components/schemas/UsersInviteRequest" },
            "type": "array",
            "minItems": 1
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["users"]
      },
      "Invoice": {
        "properties": {
          "due_date": { "type": "string", "format": "date" },
          "file": { "$ref": "#/components/schemas/InvoiceFile" },
          "issue_date": { "type": "string", "format": "date" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "InvoiceFile": {
        "properties": {
          "mimetype": { "type": "string", "minLength": 1 },
          "name": { "type": "string", "minLength": 1 },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["mimetype", "name", "url"]
      },
      "InvoiceRenderingSettings": { "properties": {}, "type": "object" },
      "InvoiceResponsePayload": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "amount_due": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "How much is left to be paid in [minor units](https://docs.monite.com/references/currencies#minor-units). Equal 0 if the Invoice is fully paid."
          },
          "amount_paid": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "How much has been paid [minor units](https://docs.monite.com/references/currencies#minor-units)"
          },
          "amount_to_pay": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "How much is left to be paid in in [minor units](https://docs.monite.com/references/currencies#minor-units), including payment_term discounts."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "comment": {
            "type": "string",
            "description": "Field with a comment for pay/partially/uncollectible info on this Invoice"
          },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "counterpart_billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact2" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_einvoicing_credentials": {
            "allOf": [{ "$ref": "#/components/schemas/EinvoicingCredentials" }],
            "description": "E-invoicing credentials of the counterpart"
          },
          "counterpart_external_reference": {
            "type": "string",
            "description": "The external reference of the counterpart."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization or first and last name if it is an individual"
          },
          "counterpart_shipping_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/ReceivableCounterpartVatIDResponse"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountResponse2" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "einvoice_error_comment": {
            "type": "string",
            "description": "Error that was returned by E-invoicing"
          },
          "einvoice_file_url": {
            "type": "string",
            "description": "E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`."
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivableEntityIndividual" }
            ]
          },
          "entity_address": {
            "$ref": "#/components/schemas/ReceivableEntityAddressSchema"
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/ReceivablesRepresentationOfEntityBankAccount2"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/ReceivableEntityVatIDResponse"
          },
          "file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated."
          },
          "file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the counterpart's default language."
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided. Can be a current, past, or future date.\n\nSome countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.\n\nIn countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user."
          },
          "is_einvoice": {
            "type": "boolean",
            "description": "Is this Invoice will be sent through E-invoice system",
            "default": false
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "network_credentials": {
            "allOf": [{ "$ref": "#/components/schemas/EinvoicingCredentials" }],
            "description": "E-invoicing credentials of the entity"
          },
          "original_file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated."
          },
          "original_file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the entity's default language."
          },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the invoice was paid."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "Link to the invoice's payment page. Either Monite's payment links or your custom payment links."
          },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "payment_terms": { "$ref": "#/components/schemas/PaymentTerms" },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "purchase_order": {
            "type": "string",
            "maxLength": 100,
            "description": "Contain purchase order number."
          },
          "recurrence_id": {
            "type": "string",
            "format": "uuid",
            "description": "Stores an unique ID of a recurrence if the receivable is in a recurring status"
          },
          "related_documents": {
            "allOf": [{ "$ref": "#/components/schemas/RelatedDocuments" }],
            "description": "Ids of documents that relate to invoice. I.e credit notes, proforma invoices, etc."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivablesStatusEnum" }],
            "description": "The status of the receivable inside the receivable workflow."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "subtotal_after_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "The list of tags for this receivable.",
            "default": []
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_amount_with_credit_notes": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units), including VAT and excluding all issued credit notes."
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem2" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "type": {
            "type": "string",
            "enum": ["invoice"],
            "description": "The type of the document uploaded."
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "vat_inclusive_discount_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.",
            "default": "exclusive"
          },
          "vat_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Defines whether the prices of products in receivable will already include VAT or not.",
            "default": "exclusive"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "amount_due",
          "amount_paid",
          "counterpart_id",
          "counterpart_type",
          "currency",
          "entity",
          "entity_address",
          "file_language",
          "line_items",
          "original_file_language",
          "related_documents",
          "status",
          "total_amount_with_credit_notes",
          "total_vat_amount",
          "type"
        ]
      },
      "Item": {
        "properties": {
          "confidence": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "description": "OCR confidence score - the estimated accuracy percentage of character recognition of the extracted text, from 0 to 100%.",
            "example": 96.238
          },
          "processed_text": {
            "description": "If the `text` value is identified as a currency amount or a date, `processed_text` contains this value converted to a common format:\n\n* Currency amounts (such as the total, subtotal, tax/VAT, line item prices) are converted to numbers with the currency character removed. For example, \"€1,125.00\" becomes 1125.0.* Dates are converted to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, `YYYY-MM-DDThh:mm:ss`. For example, \"26/3/2021\" becomes \"2021-03-26T00:00:00\".\n\nIf `text` is not a currency amount or a date, `processed_text` is `null`.",
            "example": 1125
          },
          "text": {
            "type": "string",
            "description": "The text as recognized by OCR.",
            "example": "€1,125.00"
          }
        },
        "type": "object",
        "required": ["confidence", "text"],
        "description": "Contains information about a text block or line extracted from an uploaded document by OCR."
      },
      "IterationStatus": {
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "canceled",
          "skipped",
          "issue_failed",
          "send_failed"
        ]
      },
      "LabelNValue": {
        "properties": {
          "label": {
            "allOf": [{ "$ref": "#/components/schemas/Item" }],
            "description": "Text label.",
            "example": { "text": "total", "confidence": 99.799 }
          },
          "value": {
            "allOf": [{ "$ref": "#/components/schemas/Item" }],
            "description": "The value (if any)."
          }
        },
        "type": "object",
        "required": ["label", "value"],
        "description": "A label-value pair extracted from an uploaded document by OCR.\nFor example, the label could be \"Total\" and the value could be a currency amount."
      },
      "LanguageCodeEnum": {
        "type": "string",
        "enum": [
          "ab",
          "aa",
          "af",
          "ak",
          "sq",
          "am",
          "ar",
          "an",
          "hy",
          "av",
          "ae",
          "ay",
          "az",
          "bm",
          "ba",
          "eu",
          "be",
          "bn",
          "bi",
          "bs",
          "br",
          "bg",
          "my",
          "ca",
          "ch",
          "ce",
          "ny",
          "zh",
          "cu",
          "cv",
          "kw",
          "co",
          "cr",
          "hr",
          "cs",
          "da",
          "dv",
          "nl",
          "dz",
          "en",
          "eo",
          "et",
          "ee",
          "fo",
          "fj",
          "fi",
          "fr",
          "fy",
          "ff",
          "gd",
          "gl",
          "lg",
          "ka",
          "de",
          "el",
          "kl",
          "gn",
          "gu",
          "ht",
          "ha",
          "he",
          "hz",
          "hi",
          "ho",
          "hu",
          "io",
          "ig",
          "id",
          "ia",
          "ie",
          "iu",
          "ik",
          "ga",
          "it",
          "ja",
          "jv",
          "kn",
          "kr",
          "ks",
          "kk",
          "km",
          "ki",
          "rw",
          "ky",
          "kv",
          "kg",
          "ko",
          "kj",
          "ku",
          "lo",
          "la",
          "lv",
          "li",
          "ln",
          "lt",
          "lu",
          "lb",
          "mk",
          "mg",
          "ms",
          "ml",
          "mt",
          "gv",
          "mi",
          "mr",
          "mh",
          "mn",
          "na",
          "nv",
          "nd",
          "nr",
          "ng",
          "ne",
          "no",
          "nb",
          "nn",
          "ii",
          "oc",
          "oj",
          "om",
          "os",
          "pi",
          "ps",
          "fa",
          "pl",
          "pt",
          "pa",
          "qu",
          "ro",
          "rm",
          "rn",
          "ru",
          "se",
          "sm",
          "sg",
          "sa",
          "sc",
          "sr",
          "sn",
          "sd",
          "si",
          "sk",
          "sl",
          "so",
          "st",
          "es",
          "su",
          "sw",
          "ss",
          "sv",
          "tl",
          "ty",
          "tg",
          "ta",
          "tt",
          "te",
          "th",
          "bo",
          "ti",
          "to",
          "ts",
          "tn",
          "tr",
          "tk",
          "tw",
          "ug",
          "uk",
          "ur",
          "uz",
          "ve",
          "vi",
          "vo",
          "wa",
          "cy",
          "wo",
          "xh",
          "yi",
          "yo",
          "za",
          "zu"
        ]
      },
      "LedgerAccountCursorFields": { "type": "string", "enum": ["name"] },
      "LedgerAccountListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LedgerAccountResponse" },
            "type": "array"
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of ledger accounts."
      },
      "LedgerAccountResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier of the ledger account."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency of the ledger account, specified as a three-letter [currency code](https://docs.monite.com/references/currencies) (ISO 4217).",
            "example": "EUR"
          },
          "current_balance": {
            "type": "integer",
            "description": "The current balance in the account."
          },
          "description": {
            "type": "string",
            "description": "User-defined description of the ledger account."
          },
          "is_bank_account": {
            "type": "boolean",
            "description": "Indicates whether this ledger account represents a bank account."
          },
          "name": {
            "type": "string",
            "description": "A user-defined name of the ledger account. Examples: Accounts Receivable, Office Equipment, Advertising, Salaries.",
            "example": "Accounts Receivable"
          },
          "nominal_code": {
            "type": "string",
            "description": "The account code in the accounting system.",
            "example": "610"
          },
          "status": {
            "type": "string",
            "description": "The status of the ledger account. Possible values: Active, Archived, Pending, Unknown.",
            "example": "Active"
          },
          "subtype": {
            "type": "string",
            "description": "The subtype or category of the ledger account. Possible values vary based on the accounting system used. Examples: Current, Fixed, Expense, Inventory, Equity.",
            "example": "Current"
          },
          "type": {
            "type": "string",
            "description": "The type of the ledger account. It determines whether the account is a credit account or a debit account and where it appears in financial reports within the accounting system. Possible values: Asset, Equity, Expense, Income, Liability, Unknown.",
            "example": "Asset"
          }
        },
        "type": "object",
        "required": ["id", "is_bank_account", "name", "status", "type"],
        "description": "Represents a general ledger account retrieved from an accounting system."
      },
      "LineItem": {
        "properties": {
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the tax rate in the connected accounting system, to be used when pushing the invoice to that accounting system. Use `GET /accounting_tax_rates` to get these IDs. If omitted, Monite will attempt to match the tax rates based on their numeric value."
          },
          "custom_vat_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the user-defined vat rate object."
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a product."
          },
          "product": {
            "allOf": [{ "$ref": "#/components/schemas/LineItemProductCreate" }],
            "description": "Object of product. Can be used instead of product_id, created in product's catalog"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the product."
          },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "tax_rate_name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "description": "Specifies the display name of the tax rate. This field is applicable only when tax_rate_value is also provided."
          },
          "tax_rate_value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries."
          },
          "vat_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quantity"]
      },
      "LineItemColumnSettings": {
        "properties": {
          "display": { "type": "boolean", "default": true },
          "label": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "description": "Line item table column header to override Monite's default. If not set, the Monite's default will be used."
          }
        },
        "type": "object"
      },
      "LineItemCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "LineItemFields": {
        "properties": {
          "measure_unit": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `measure_unit` of a line item's product",
            "default": {
              "description": "Unit used to measure the quantity of the product (e.g. items, meters, kilograms)",
              "required": false
            }
          },
          "tax_rate_value": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `tax_rate_value` of a line item",
            "default": {
              "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries.",
              "required": false
            }
          },
          "vat_rate_id": {
            "allOf": [{ "$ref": "#/components/schemas/FieldSchema" }],
            "description": "Object describing the required field `vat_rate_id` of a line item",
            "default": {
              "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.",
              "required": false
            }
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "LineItemForValidation": {
        "properties": {
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "monite_tax_rate": {
            "anyOf": [{ "type": "integer" }, { "type": "number" }],
            "description": "Line item tax rate in minor units."
          }
        },
        "type": "object"
      },
      "LineItemInternalRequest": {
        "properties": {
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.",
            "example": "dd13735f-ef3a-4312-8c37-835d70341375"
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "ledger_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.",
            "example": "7df884fd-8be8-4eba-b6ff-417b66efe033"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the payable.",
            "example": 1.22
          },
          "subtotal": { "type": "integer" },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 1250
          },
          "total": { "type": "integer" },
          "unit": {
            "type": "string",
            "description": "The unit of the product",
            "example": "meter"
          },
          "unit_price": {
            "type": "integer",
            "description": "The unit price of the product, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1200
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "LineItemNumericColumnSettings": {
        "properties": {
          "display": { "type": "boolean", "default": true },
          "label": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "description": "Line item table column header to override Monite's default. If not set, the Monite's default will be used."
          },
          "precision": {
            "type": "integer",
            "maximum": 4.0,
            "minimum": 0.0,
            "description": "Number of decimal places to display for numeric values in this column. Defaults to 2, which is common for currency values.",
            "default": 2
          }
        },
        "type": "object",
        "description": "Extended settings for numeric columns in line items."
      },
      "LineItemPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LineItemResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "LineItemProduct": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the product."
          },
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the accounting tax rate object."
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog.",
            "examples": ["HT-1234-S-BL", "SERVICE-67890"]
          },
          "is_inline": {
            "type": "boolean",
            "description": "Indicates whether the product is inline",
            "default": false
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "measure_unit": {
            "$ref": "#/components/schemas/LineItemProductMeasureUnit2"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "price": { "$ref": "#/components/schemas/Price2" },
          "price_after_vat": { "$ref": "#/components/schemas/Price2" },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          },
          "vat_rate": { "$ref": "#/components/schemas/LineItemProductVatRate2" }
        },
        "type": "object",
        "required": ["id", "name", "price", "price_after_vat", "vat_rate"]
      },
      "LineItemProductCreate": {
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 2000,
            "description": "Description of the product."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog.",
            "examples": ["HT-1234-S-BL", "SERVICE-67890"]
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "measure_unit": { "$ref": "#/components/schemas/UnitRequest" },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "Name of the product."
          },
          "price": { "$ref": "#/components/schemas/Price2" },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          }
        },
        "type": "object",
        "required": ["name", "price"]
      },
      "LineItemProductMeasureUnit": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "description": { "type": "string", "maxLength": 200 },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 }
        },
        "type": "object",
        "required": ["name"]
      },
      "LineItemProductMeasureUnit2": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "description": { "type": "string", "maxLength": 200 },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 }
        },
        "type": "object",
        "required": ["name"]
      },
      "LineItemProductVatRate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the vat rate object."
          },
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent" },
            "type": "array",
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "is_custom": {
            "type": "boolean",
            "description": "Indicates whether this vat rate is defined by user.",
            "default": false
          },
          "name": {
            "type": "string",
            "description": "Display name of the vat rate."
          },
          "value": {
            "type": "number",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["country", "value"]
      },
      "LineItemProductVatRate2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the vat rate object."
          },
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "is_custom": {
            "type": "boolean",
            "description": "Indicates whether this vat rate is defined by user.",
            "default": false
          },
          "name": {
            "type": "string",
            "description": "Display name of the vat rate."
          },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["country", "value"]
      },
      "LineItemRequest": {
        "properties": {
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.",
            "example": "dd13735f-ef3a-4312-8c37-835d70341375"
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "ledger_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.",
            "example": "7df884fd-8be8-4eba-b6ff-417b66efe033"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "quantity": {
            "type": "number",
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the payable.",
            "example": 1.22
          },
          "tax": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 1250
          },
          "unit": {
            "type": "string",
            "description": "The unit of the product",
            "example": "meter"
          },
          "unit_price": {
            "type": "integer",
            "description": "The unit price of the product, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1200
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "LineItemResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the tax rate reference used for accounting integartion. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.",
            "example": "dd13735f-ef3a-4312-8c37-835d70341375"
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "ledger_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.",
            "example": "7df884fd-8be8-4eba-b6ff-417b66efe033"
          },
          "name": { "type": "string", "description": "Name of the product." },
          "ocr_set_quantity_to_one": {
            "type": "boolean",
            "description": "Indicates whether the item's `unit_price` and `quantity` were adjusted by OCR.",
            "default": false,
            "example": false
          },
          "payable_id": { "type": "string", "format": "uuid" },
          "quantity": {
            "type": "number",
            "description": "The quantity of each of the goods, materials, or services listed in the payable.",
            "example": 1.22
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units).",
            "example": 1250
          },
          "tax": {
            "type": "integer",
            "description": "VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.",
            "example": 2000
          },
          "tax_amount": {
            "type": "integer",
            "description": "Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 250
          },
          "total": {
            "type": "integer",
            "description": "The actual price of the product.",
            "example": 1200
          },
          "unit": {
            "type": "string",
            "description": "The unit of the product",
            "example": "meter"
          },
          "unit_price": {
            "type": "integer",
            "description": "The unit price of the product, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "was_created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          }
        },
        "type": "object",
        "required": ["id", "payable_id"]
      },
      "LineItemUpdate": {
        "properties": {
          "custom_vat_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the user-defined vat rate object."
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a product."
          },
          "price": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual price of the product in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "tax_rate_name": {
            "type": "string",
            "maxLength": 64,
            "description": "Specifies the display name of the tax rate. This field is applicable only when tax_rate_value is also provided."
          },
          "tax_rate_value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries."
          },
          "vat_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "LineItemsRenderingSettings": {
        "properties": {
          "discount": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemColumnSettings" }
            ],
            "description": "Settings for the discount column in the line items table."
          },
          "measure_unit": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemColumnSettings" }
            ],
            "description": "Settings for the measure unit column in the line items table."
          },
          "name": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemColumnSettings" }
            ],
            "description": "Settings for the name column in the line items table."
          },
          "price": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemNumericColumnSettings" }
            ],
            "description": "Settings for the price column in the line items table."
          },
          "price_after_vat": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemNumericColumnSettings" }
            ],
            "description": "Settings for the price after VAT column in the line items table."
          },
          "quantity": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemColumnSettings" }
            ],
            "description": "Settings for the quantity column in the line items table."
          },
          "total_price": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemNumericColumnSettings" }
            ],
            "description": "Settings for the total price column in the line items table."
          },
          "total_price_after_vat": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemNumericColumnSettings" }
            ],
            "description": "Settings for the total price after VAT column in the line items table."
          },
          "vat_amount": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemNumericColumnSettings" }
            ],
            "description": "Settings for the VAT amount column in the line items table."
          },
          "vat_rate": {
            "allOf": [
              { "$ref": "#/components/schemas/LineItemColumnSettings" }
            ],
            "description": "Settings for the VAT rate column in the line items table."
          }
        },
        "type": "object"
      },
      "LineItemsReplaceRequest": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LineItemInternalRequest" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "LineItemsReplaceResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LineItemResponse" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "LineItemsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "LineItemsValidationRequest": {
        "properties": {
          "document_type": { "$ref": "#/components/schemas/DocumentType" },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItemForValidation" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["document_type", "line_items"]
      },
      "MailSentEventData": {
        "properties": {
          "mail_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the email sending operation. Can be used to get the email sending status from `GET /receivables/{receivable_id}/mails/{mail_id}`.",
            "examples": ["d6185c8d-527c-4586-84c9-95881e7ba19f"]
          },
          "mail_status": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableMailStatusEnum" }
            ],
            "description": "The overall email sending status across all recipients."
          },
          "recipients": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableMailRecipients" }
            ],
            "description": "Contains a list of email recipients (To, CC, BCC) and the email sending status for each recipient."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["mail_id", "mail_status", "recipients"],
        "description": "Contains information about a sent email."
      },
      "MailSettings": {
        "properties": {
          "attach_documents_as_pdf": { "type": "boolean" },
          "from_email_username": {
            "anyOf": [
              { "type": "string", "maxLength": 64, "minLength": 1 },
              { "type": "null" }
            ]
          },
          "from_name": {
            "anyOf": [
              { "type": "string", "maxLength": 30, "minLength": 1 },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["attach_documents_as_pdf"]
      },
      "MailboxDataResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MailboxResponse" },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MailboxDomainRequest": {
        "properties": {
          "mailbox_domain_id": { "type": "string", "format": "uuid" },
          "mailbox_name": { "type": "string" },
          "related_object_type": {
            "allOf": [{ "$ref": "#/components/schemas/MailboxObjectTypeEnum" }],
            "description": "Related object type: payable and so on"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["mailbox_domain_id", "mailbox_name", "related_object_type"]
      },
      "MailboxMultipleEntitiesRequest": {
        "properties": {
          "entity_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["entity_ids"]
      },
      "MailboxObjectTypeEnum": {
        "type": "string",
        "enum": ["payable", "receipt"]
      },
      "MailboxResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Mailbox UUID"
          },
          "mailbox_domain_id": { "type": "string", "format": "uuid" },
          "mailbox_full_address": { "type": "string" },
          "mailbox_name": { "type": "string" },
          "related_object_type": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "mailbox_full_address",
          "mailbox_name",
          "related_object_type",
          "status"
        ]
      },
      "ManuallySpecifiedBankAccountPayload": {
        "properties": {
          "bank_id": { "type": "string" },
          "iframe": { "type": "boolean", "default": false },
          "payer_account_country": {
            "$ref": "#/components/schemas/YapilyCountriesCoverageCodes"
          },
          "payer_account_holder_name": { "type": "string" },
          "payer_account_identification": {
            "$ref": "#/components/schemas/AccountIdentification"
          },
          "psu_identification": {
            "allOf": [{ "$ref": "#/components/schemas/PsuIdentification" }],
            "description": "PSU identification is required for some banks (e.g. some Germany institutions)."
          },
          "save_to_authorized": { "type": "boolean", "default": false },
          "type": {
            "type": "string",
            "enum": ["manual_input"],
            "default": "manual_input"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "bank_id",
          "payer_account_country",
          "payer_account_identification"
        ]
      },
      "Media": {
        "properties": {
          "source": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "type": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["source", "type"]
      },
      "Message": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the message"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the message was created"
          },
          "content": {
            "type": "string",
            "description": "Text content of the message, including charts and any other data attached with html tags"
          },
          "role": {
            "type": "string",
            "enum": ["user", "assistant"],
            "description": "Role of the message sender"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "role", "content"]
      },
      "MessageFeedbackCommentaryPayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Commentary for the message"
          },
          "message_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the message"
          }
        },
        "type": "object",
        "required": ["message_id", "comment"]
      },
      "MessageFeedbackPayload": {
        "properties": {
          "action": {
            "type": "string",
            "enum": ["like", "dislike"],
            "description": "Action to mark the message as helpful or not"
          },
          "message_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the message"
          }
        },
        "type": "object",
        "required": ["message_id", "action"]
      },
      "MessageResponse": {
        "properties": { "message": { "type": "string" } },
        "type": "object",
        "required": ["message"]
      },
      "MissingFields": {
        "properties": {
          "counterpart": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of counterpart."
          },
          "entity": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of entity."
          },
          "products": {
            "items": { "$ref": "#/components/schemas/MissingLineItemFields" },
            "type": "array",
            "description": "Missing fields of line items."
          },
          "receivable": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of receivable."
          },
          "vat_rates": {
            "items": { "type": "string" },
            "type": "array",
            "description": "List of invalid vat rates."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "MissingLineItemFields": {
        "properties": {
          "line_item_number": {
            "type": "integer",
            "description": "Order number of line item."
          },
          "missing_fields": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Missing fields of line item."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["line_item_number", "missing_fields"]
      },
      "MoniteAllPaymentMethods": {
        "type": "string",
        "enum": [
          "SEPA Payments",
          "US ACH Payments",
          "BLIK",
          "Card payments",
          "Bacs Direct Debit",
          "Bancontact",
          "Electronic Payment Standard",
          "Giropay",
          "iDEAL",
          "Przelewy24",
          "SEPA Direct Debit",
          "SOFORT",
          "Apple Pay",
          "Google Pay",
          "Affirm",
          "Klarna"
        ]
      },
      "MoniteAllPaymentMethodsTypes": {
        "type": "string",
        "enum": [
          "sepa_credit",
          "us_ach",
          "blik",
          "card",
          "bacs_direct_debit",
          "bancontact",
          "eps",
          "giropay",
          "ideal",
          "p24",
          "sepa_debit",
          "sofort",
          "applepay",
          "googlepay",
          "affirm",
          "klarna"
        ]
      },
      "NextDocumentNumbers": {
        "properties": {
          "credit_note": {
            "type": "integer",
            "description": "Next credit note number",
            "default": 1
          },
          "delivery_note": {
            "type": "integer",
            "description": "Next delivery note number",
            "default": 1
          },
          "invoice": {
            "type": "integer",
            "description": "Next invoice number",
            "default": 1
          },
          "purchase_order": {
            "type": "integer",
            "description": "Next purchase order number",
            "default": 1
          },
          "quote": {
            "type": "integer",
            "description": "Next quote number",
            "default": 1
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OCRAddress": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "type": "string",
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "original_country_name": {
            "type": "string",
            "description": "Country name as it is stated in the document.",
            "example": "Berlin"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "description": "In general it's compatible with CounterpartAddress model but\n* All fields are optional\n* There is an additional field original_country_name"
      },
      "OCRAddressDetails": {
        "properties": {
          "city": { "type": "string" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "postal_code": { "type": "string" },
          "state": { "type": "string" },
          "street_and_number": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OCRBankDetails": {
        "properties": {
          "bank_account_number": { "type": "string" },
          "iban": { "type": "string" },
          "swift_bic": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OCRCounterpartDetails": {
        "properties": {
          "address": { "$ref": "#/components/schemas/OCRAddressDetails" },
          "bank_account": { "$ref": "#/components/schemas/OCRBankDetails" },
          "email": { "type": "string" },
          "name": { "type": "string" },
          "tax_number": { "type": "string" },
          "vat_number": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address", "bank_account"]
      },
      "OCRCreditNote": {
        "properties": {
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "document_number": { "type": "string" },
          "issue_date": { "type": "string", "format": "date" },
          "line_items": {
            "items": { "$ref": "#/components/schemas/OCRLineItem" },
            "type": "array"
          },
          "original_invoice_number": { "type": "string" },
          "recipient": { "$ref": "#/components/schemas/OCRCounterpartDetails" },
          "sender": { "$ref": "#/components/schemas/OCRCounterpartDetails" },
          "subtotal": { "type": "number" },
          "tax_amount": { "type": "number" },
          "tax_rate": { "type": "number" },
          "total_amount": { "type": "number" },
          "type": {
            "type": "string",
            "enum": ["credit_note"],
            "default": "credit_note"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["sender", "recipient", "line_items"]
      },
      "OCRDocumentTypeEnum": {
        "type": "string",
        "enum": ["invoice", "credit_note", "receipt"]
      },
      "OCRFileUpload": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "OCRInvoice": {
        "properties": {
          "amount_paid": { "type": "number" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "document_number": { "type": "string" },
          "due_date": { "type": "string", "format": "date" },
          "issue_date": { "type": "string", "format": "date" },
          "line_items": {
            "items": { "$ref": "#/components/schemas/OCRLineItem" },
            "type": "array"
          },
          "payment_terms": { "type": "string" },
          "recipient": { "$ref": "#/components/schemas/OCRCounterpartDetails" },
          "sender": { "$ref": "#/components/schemas/OCRCounterpartDetails" },
          "subtotal": { "type": "number" },
          "tax_amount": { "type": "number" },
          "tax_rate": { "type": "number" },
          "total_amount": { "type": "number" },
          "type": {
            "type": "string",
            "enum": ["invoice"],
            "default": "invoice"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["sender", "recipient"]
      },
      "OCRLineItem": {
        "properties": {
          "description": { "type": "string" },
          "line_reference": { "type": "string" },
          "name": { "type": "string" },
          "quantity": { "type": "number" },
          "subtotal": { "type": "number" },
          "tax_amount": { "type": "number" },
          "tax_rate": { "type": "number" },
          "total_amount": { "type": "number" },
          "unit": { "type": "string" },
          "unit_price": { "type": "number" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OCRReceipt": {
        "properties": {
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "discount": { "type": "number" },
          "document_number": { "type": "string" },
          "issued_at": { "type": "string", "format": "date-time" },
          "line_items": {
            "items": { "$ref": "#/components/schemas/OCRReceiptLineItem" },
            "type": "array"
          },
          "sender": { "$ref": "#/components/schemas/OCRCounterpartDetails" },
          "subtotal": { "type": "number" },
          "tax_amount": { "type": "number" },
          "tax_rate": { "type": "number" },
          "tax_type": { "type": "string" },
          "total_amount": { "type": "number" },
          "type": {
            "type": "string",
            "enum": ["receipt"],
            "default": "receipt"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["line_items", "sender"]
      },
      "OCRReceiptLineItem": {
        "properties": {
          "description": { "type": "string" },
          "discount_amount": { "type": "number" },
          "line_reference": { "type": "string" },
          "name": { "type": "string" },
          "quantity": { "type": "number" },
          "subtotal": { "type": "number" },
          "tax_amount": { "type": "number" },
          "tax_rate": { "type": "number" },
          "total_amount": { "type": "number" },
          "unit": { "type": "string" },
          "unit_price": { "type": "number" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OCRResponseInvoiceReceiptData": {
        "properties": {
          "counterpart_account_id": {
            "type": "string",
            "description": "Counterpart bank ID",
            "example": "DEUTDEFF"
          },
          "counterpart_account_number": {
            "type": "string",
            "description": "The bank account number"
          },
          "counterpart_address": {
            "type": "string",
            "description": "Counterpart address"
          },
          "counterpart_address_object": {
            "allOf": [{ "$ref": "#/components/schemas/OCRAddress" }],
            "description": "Counterpart address as a json object compatible with counterparts service"
          },
          "counterpart_email": {
            "type": "string",
            "description": "Email address of the counterpart"
          },
          "counterpart_name": {
            "type": "string",
            "description": "Counterpart name",
            "example": "Monite GMbH"
          },
          "counterpart_routing_number": {
            "type": "string",
            "description": "The bank routing number"
          },
          "counterpart_vat_id": {
            "type": "string",
            "description": "Counterpart VAT ID",
            "example": "DE88939004"
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 currency code",
            "example": "EUR"
          },
          "discount_raw": {
            "type": "number",
            "description": "Discount Raw amount"
          },
          "document_due_date": {
            "type": "string",
            "description": "Document due date in ISO format"
          },
          "document_id": {
            "type": "string",
            "description": "Invoice/receipt ID",
            "example": "CST-13341"
          },
          "document_issued_at_date": {
            "type": "string",
            "description": "Document issuance date in ISO format"
          },
          "line_items_raw": {
            "items": {
              "$ref": "#/components/schemas/OCRResponseInvoiceReceiptLineItemRaw"
            },
            "type": "array",
            "description": "List of line items from document raw, without minor units conversion."
          },
          "payment_terms_raw": {
            "items": { "type": "string" },
            "type": "array",
            "description": "Raw payment terms parsed but not calculated."
          },
          "purchase_order_number": {
            "type": "string",
            "description": "Purchase Order Number",
            "example": "1234"
          },
          "tax_payer_id": {
            "type": "string",
            "description": "Tax payer ID",
            "example": "12345678901"
          },
          "total_excl_vat_raw": {
            "type": "number",
            "description": "Subtotal, without minor units",
            "example": 77
          },
          "total_paid_amount_raw": {
            "type": "number",
            "description": "Total paid amount",
            "default": 0,
            "example": 50
          },
          "total_raw": {
            "type": "number",
            "description": "Total, without minor units",
            "example": 70
          },
          "total_vat_amount_raw": {
            "type": "number",
            "description": "VAT amount, without minor units",
            "example": 7
          },
          "total_vat_rate_raw": {
            "type": "number",
            "description": "VAT Percent raw, without minor units.",
            "example": 12.5
          },
          "type": {
            "type": "string",
            "enum": ["invoice"],
            "default": "invoice"
          }
        },
        "type": "object"
      },
      "OCRResponseInvoiceReceiptLineItemRaw": {
        "properties": {
          "description": {
            "type": "string",
            "description": "Human-readable line item description",
            "example": "Impact Players : How to Take the Lead , Play Bigger , and Multiply Your"
          },
          "item_adjusted": {
            "type": "boolean",
            "description": "Item Quantity/Unit Price adjusted",
            "default": false
          },
          "line_item_ocr_id": {
            "type": "string",
            "description": "OCR Id of line item"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "example": 1.2
          },
          "total_excl_vat": {
            "type": "number",
            "description": "Total excluded VAT as parsed.",
            "example": 120
          },
          "total_incl_vat": {
            "type": "number",
            "description": "Total included VAT as parsed.",
            "example": 135
          },
          "unit": {
            "type": "string",
            "description": "Unit",
            "example": "meters"
          },
          "unit_price": {
            "type": "number",
            "description": "Price as parsed",
            "example": 100
          },
          "vat_amount": {
            "type": "number",
            "description": "VAT Amount as parsed.",
            "example": 15
          },
          "vat_percentage": {
            "type": "number",
            "description": "VAT Percent as parsed.",
            "example": 12.5
          }
        },
        "type": "object"
      },
      "OCRTaskStatus": {
        "type": "string",
        "enum": ["processing", "success", "error"]
      },
      "OCRTasksPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/OcrTaskResponseSchema" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of ocr requests."
      },
      "ObjectMatchTypes": {
        "type": "string",
        "enum": [
          "product",
          "customer",
          "vendor",
          "receivable",
          "bill",
          "payment_record"
        ]
      },
      "ObjectType": {
        "type": "string",
        "enum": [
          "account",
          "approval",
          "approval_request",
          "approval_policy",
          "approval_policy_process",
          "audit_trail",
          "comment",
          "counterpart",
          "counterpart_address",
          "counterpart_bank_account",
          "counterpart_contact_person",
          "counterpart_partner_metadata",
          "counterpart_tax_id",
          "counterpart_vat_id",
          "delivery_note",
          "einvoicing",
          "entity",
          "entity_bank_account",
          "entity_settings",
          "entity_token",
          "entity_user",
          "entity_user_token",
          "entity_vat_ids",
          "export",
          "mailbox",
          "monitescript_process",
          "ocr_task",
          "onboarding",
          "overdue_reminder",
          "partner",
          "partner_internal_config",
          "partner_settings",
          "partner_token",
          "payable",
          "payable_line_item",
          "payables_credit_note",
          "payables_purchase_order",
          "payment",
          "payment_intent",
          "payment_link",
          "payment_record",
          "payment_reminder",
          "person",
          "product",
          "project",
          "receivable",
          "reconciliation",
          "recurrence",
          "role",
          "tag",
          "todo_task",
          "todo_task_mute",
          "transaction",
          "webhook",
          "workflow",
          "workflow_pipeline"
        ]
      },
      "ObjectTypeAvailableComment": { "enum": ["payable"] },
      "ObjectTypeEnum": { "type": "string", "enum": ["receivable", "payable"] },
      "ObtainSecretResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "client_id": { "type": "string" },
          "client_secret": { "type": "string" },
          "client_secret_mask": { "type": "string" },
          "name": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "client_id",
          "client_secret",
          "client_secret_mask"
        ]
      },
      "ObtainTokenPayload": {
        "properties": {
          "client_id": { "type": "string", "format": "uuid" },
          "client_secret": { "type": "string" },
          "entity_user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ]
          },
          "grant_type": { "$ref": "#/components/schemas/GrantType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_id", "client_secret", "grant_type"]
      },
      "OcrAutoTaggingSettingsRequest": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "A switch to temporarily disable a keyword without removing it from the list."
          },
          "keywords": {
            "items": { "type": "string" },
            "type": "array",
            "maxItems": 50,
            "minItems": 1,
            "description": "A list of words that will be searched for assigning a tag in the recognized fields of the document after OCR processing. If at least one match is found, the tag will be assigned. Each keyword must be between 2 and 25 characters long."
          },
          "tag_id": {
            "type": "string",
            "format": "uuid",
            "description": "Tag identifier that will be assigned to the payable document if one of the words listed in keywords is found during OCR."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["enabled", "keywords", "tag_id"]
      },
      "OcrRecognitionResponse": {
        "properties": {
          "line_items": {
            "items": { "$ref": "#/components/schemas/LabelNValue" },
            "type": "array",
            "description": "Text content of the invoice line items as recognized by OCR."
          },
          "summary": {
            "items": { "$ref": "#/components/schemas/LabelNValue" },
            "type": "array",
            "description": "Invoice text content other than the line items. Such as the invoice issue and due dates, vendor name and address, and other general information."
          }
        },
        "type": "object",
        "description": "Contains information about all text blocks extracted from an uploaded invoice by OCR.\nThe text blocks are grouped into `line_items` (invoice line items) and `summary` (all other information).\nLegacy schema used for AWS textract recognition."
      },
      "OcrStatusEnum": {
        "type": "string",
        "enum": ["processing", "error", "success", "canceled"]
      },
      "OcrTaskResponseSchema": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "document_type": {
            "$ref": "#/components/schemas/OCRDocumentTypeEnum"
          },
          "recognized_data": {
            "anyOf": [
              { "$ref": "#/components/schemas/OCRInvoice" },
              { "$ref": "#/components/schemas/OCRCreditNote" },
              { "$ref": "#/components/schemas/OCRReceipt" }
            ]
          },
          "status": { "$ref": "#/components/schemas/OCRTaskStatus" }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "status"]
      },
      "OnboardingAddress": {
        "properties": {
          "city": { "$ref": "#/components/schemas/OnboardingStringField" },
          "country": { "$ref": "#/components/schemas/OnboardingCountryField" },
          "line1": { "$ref": "#/components/schemas/OnboardingStringField" },
          "line2": { "$ref": "#/components/schemas/OnboardingStringField" },
          "postal_code": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "state": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingBankAccount": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "account_holder_name": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "account_number": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "country": { "$ref": "#/components/schemas/OnboardingCountryField" },
          "currency": {
            "$ref": "#/components/schemas/OnboardingCurrencyField"
          },
          "iban": { "$ref": "#/components/schemas/OnboardingStringField" },
          "routing_number": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "sort_code": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "country", "currency"]
      },
      "OnboardingBankAccountMask": {
        "properties": {
          "account_holder_name": { "type": "boolean" },
          "account_number": { "type": "boolean" },
          "country": { "type": "boolean" },
          "currency": { "type": "boolean" },
          "iban": { "type": "boolean" },
          "routing_number": { "type": "boolean" },
          "sort_code": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingBusinessProfile": {
        "properties": {
          "description_of_goods_or_services": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "estimated_monthly_revenue": {
            "$ref": "#/components/schemas/OnboardingEstimatedMonthlyRevenue"
          },
          "mcc": { "$ref": "#/components/schemas/OnboardingStringField" },
          "operating_countries": {
            "$ref": "#/components/schemas/OnboardingListOfCountriesField"
          },
          "url": { "$ref": "#/components/schemas/OnboardingUrlField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingCountryField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingCurrencyField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingData": {
        "properties": {
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/OnboardingBankAccount" },
            "type": "array"
          },
          "business_profile": {
            "$ref": "#/components/schemas/OnboardingBusinessProfile"
          },
          "entity": { "$ref": "#/components/schemas/OnboardingEntity" },
          "entity_documents": {
            "$ref": "#/components/schemas/OnboardingEntityDocuments"
          },
          "ownership_declaration": {
            "$ref": "#/components/schemas/OnboardingOwnershipDeclaration"
          },
          "persons": {
            "items": { "$ref": "#/components/schemas/OnboardingPerson" },
            "type": "array"
          },
          "persons_documents": {
            "items": {
              "$ref": "#/components/schemas/OnboardingPersonDocuments"
            },
            "type": "array"
          },
          "tos_acceptance": {
            "$ref": "#/components/schemas/OnboardingTosAcceptance"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingDateField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": { "type": "string", "format": "date", "nullable": true }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingDocumentsDescriptions": {
        "properties": {
          "additional_verification": {
            "items": { "type": "string" },
            "type": "array"
          },
          "entity_verification": {
            "items": { "type": "string" },
            "type": "array"
          },
          "verification": { "items": { "type": "string" }, "type": "array" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "additional_verification",
          "entity_verification",
          "verification"
        ]
      },
      "OnboardingEmailField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": { "type": "string", "format": "email", "nullable": true }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingEntity": {
        "properties": {
          "address": { "$ref": "#/components/schemas/OnboardingAddress" },
          "email": { "$ref": "#/components/schemas/OnboardingEmailField" },
          "individual": {
            "$ref": "#/components/schemas/OnboardingEntityIndividual"
          },
          "organization": {
            "$ref": "#/components/schemas/OnboardingEntityOrganization"
          },
          "phone": { "$ref": "#/components/schemas/OnboardingStringField" },
          "tax_id": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingEntityDocuments": {
        "properties": {
          "additional_verification_document_back": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "additional_verification_document_front": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "verification_document_back": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "verification_document_front": {
            "$ref": "#/components/schemas/OnboardingStringField"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingEntityIndividual": {
        "properties": {
          "date_of_birth": {
            "$ref": "#/components/schemas/OnboardingDateField"
          },
          "first_name": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "id_number": { "$ref": "#/components/schemas/OnboardingStringField" },
          "last_name": { "$ref": "#/components/schemas/OnboardingStringField" },
          "ssn_last_4": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "title": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingEntityOrganization": {
        "properties": {
          "legal_name": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingError": {
        "properties": { "message": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["message"]
      },
      "OnboardingEstimatedMonthlyRevenue": {
        "properties": {
          "amount": { "$ref": "#/components/schemas/OnboardingIntField" },
          "currency": { "$ref": "#/components/schemas/OnboardingCurrencyField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingFloatField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": { "type": "number", "nullable": true }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingIntField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": { "type": "integer", "nullable": true }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingLinkInternalResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "expires_at": { "type": "string", "format": "date-time" },
          "is_exhausted": { "type": "boolean" },
          "kyb_rfi_required": {
            "type": "boolean",
            "description": "Indicates if KYB RFI component need to be loaded. Applies only for Airwallex."
          },
          "kyc_rfi_required": {
            "type": "boolean",
            "description": "Indicates if KYC RFI component need to be loaded. Applies only for Airwallex."
          },
          "partner_id": { "type": "string", "format": "uuid" },
          "phone": { "type": "string" },
          "project_id": { "type": "string", "format": "uuid" },
          "provider": { "$ref": "#/components/schemas/Provider" },
          "refresh_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "entity_id",
          "expires_at",
          "is_exhausted",
          "kyb_rfi_required",
          "kyc_rfi_required",
          "partner_id",
          "project_id",
          "provider",
          "refresh_url",
          "return_url",
          "url"
        ]
      },
      "OnboardingLinkPublicResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "entity_id": { "type": "string", "format": "uuid" },
          "expires_at": { "type": "string", "format": "date-time" },
          "refresh_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "entity_id",
          "expires_at",
          "refresh_url",
          "return_url",
          "url"
        ]
      },
      "OnboardingLinkRequest": {
        "properties": {
          "expires_at": { "type": "string", "format": "date-time" },
          "refresh_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["expires_at", "refresh_url", "return_url"]
      },
      "OnboardingLinkResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "expires_at": { "type": "string", "format": "date-time" },
          "recipient": { "$ref": "#/components/schemas/Recipient" },
          "refresh_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "expires_at",
          "recipient",
          "refresh_url",
          "return_url",
          "url"
        ]
      },
      "OnboardingLinksAccessTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "example": "L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg"
          },
          "expires_in": { "type": "integer", "example": 86400 },
          "token_type": { "type": "string", "example": "Bearer" }
        },
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"]
      },
      "OnboardingLinksAddress": {
        "properties": {
          "city": { "type": "string", "minLength": 1 },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "line1": { "type": "string", "minLength": 1 },
          "line2": { "type": "string", "minLength": 1 },
          "postal_code": { "type": "string", "minLength": 1 },
          "state": { "type": "string", "minLength": 1 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksAirwallexComponentCodeRequest": {
        "properties": {
          "code_challenge": {
            "type": "string",
            "minLength": 1,
            "description": "A challenge token generated together with the code_verifier with the S256 generation method"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code_challenge"]
      },
      "OnboardingLinksAirwallexComponentCodeResponse": {
        "properties": {
          "authorization_code": {
            "type": "string",
            "description": "Code that should be used to init Airwallex onboarding SDK"
          },
          "client_id": {
            "type": "string",
            "description": "client ID that should be used to init Airwallex onboarding SDK"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["authorization_code", "client_id"]
      },
      "OnboardingLinksAirwallexComponentData": {
        "properties": {
          "tos_acceptance_date": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksAirwallexComponentDataResponse": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OnboardingLinksAirwallexComponentData"
          },
          "requirements": {
            "items": {
              "$ref": "#/components/schemas/OnboardingLinksRequirement"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data", "requirements"]
      },
      "OnboardingLinksBankAccount": {
        "properties": {
          "account_number": {
            "type": "string",
            "maxLength": 8,
            "minLength": 8
          },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "iban": { "type": "string", "minLength": 1 },
          "sort_code": { "type": "string", "maxLength": 6, "minLength": 6 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksBusinessProfile": {
        "properties": {
          "mcc": { "type": "string", "maxLength": 4, "minLength": 4 },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksBusinessType": {
        "type": "string",
        "enum": ["organization", "individual"]
      },
      "OnboardingLinksCompany": {
        "properties": {
          "address": { "$ref": "#/components/schemas/OnboardingLinksAddress" },
          "directors_provided": { "type": "boolean" },
          "email": { "type": "string", "format": "email" },
          "executives_provided": { "type": "boolean" },
          "name": { "type": "string", "minLength": 1 },
          "owners_provided": { "type": "boolean" },
          "phone": { "type": "string", "minLength": 1 },
          "representative_provided": { "type": "boolean" },
          "tax_id": { "type": "string", "minLength": 1 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksIndividual": {
        "properties": {
          "address": { "$ref": "#/components/schemas/OnboardingLinksAddress" },
          "date_of_birth": { "type": "string", "format": "date" },
          "email": { "type": "string", "format": "email" },
          "first_name": { "type": "string", "minLength": 1 },
          "id_number": { "type": "string", "minLength": 1 },
          "last_name": { "type": "string", "minLength": 1 },
          "phone": { "type": "string", "minLength": 1 },
          "ssn_last_4": { "type": "string", "maxLength": 4, "minLength": 4 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksPerson": {
        "properties": {
          "address": { "$ref": "#/components/schemas/OnboardingLinksAddress" },
          "date_of_birth": { "type": "string", "format": "date" },
          "email": { "type": "string", "format": "email" },
          "first_name": { "type": "string", "minLength": 1 },
          "id_number": { "type": "string", "minLength": 1 },
          "last_name": { "type": "string", "minLength": 1 },
          "phone": { "type": "string", "minLength": 1 },
          "relationship": {
            "$ref": "#/components/schemas/OnboardingLinksRelationship"
          },
          "ssn_last_4": { "type": "string", "maxLength": 4, "minLength": 4 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksRelationship": {
        "properties": {
          "director": { "type": "boolean" },
          "executive": { "type": "boolean" },
          "owner": { "type": "boolean" },
          "percent_ownership": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0
          },
          "representative": { "type": "boolean" },
          "title": { "type": "string", "minLength": 1 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksRequirement": {
        "type": "string",
        "enum": [
          "tos_acceptance_date",
          "ownership_declaration_date",
          "individual",
          "company",
          "business_profile",
          "bank_account",
          "representative",
          "owners",
          "executives",
          "directors"
        ]
      },
      "OnboardingLinksStripeData": {
        "properties": {
          "bank_account": {
            "$ref": "#/components/schemas/OnboardingLinksBankAccount"
          },
          "business_profile": {
            "$ref": "#/components/schemas/OnboardingLinksBusinessProfile"
          },
          "company": { "$ref": "#/components/schemas/OnboardingLinksCompany" },
          "individual": {
            "$ref": "#/components/schemas/OnboardingLinksIndividual"
          },
          "persons": {
            "items": { "$ref": "#/components/schemas/OnboardingLinksPerson" },
            "type": "array"
          },
          "tos_acceptance_date": { "type": "string", "format": "date-time" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingLinksStripeDataResponse": {
        "properties": {
          "business_type": {
            "$ref": "#/components/schemas/OnboardingLinksBusinessType"
          },
          "data": { "$ref": "#/components/schemas/OnboardingLinksStripeData" },
          "masks": {
            "additionalProperties": {
              "$ref": "#/components/schemas/OnboardingLinksPerson"
            },
            "type": "object"
          },
          "requirements": {
            "items": {
              "$ref": "#/components/schemas/OnboardingLinksRequirement"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["business_type", "data", "masks", "requirements"]
      },
      "OnboardingListOfCountriesField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": {
            "items": { "$ref": "#/components/schemas/AllowedCountries" },
            "type": "array",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingOwnershipDeclaration": {
        "properties": {
          "date": { "$ref": "#/components/schemas/OnboardingDateField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingPaymentMethodsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentMethod" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "OnboardingPerson": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "address": { "$ref": "#/components/schemas/OnboardingAddress" },
          "date_of_birth": {
            "$ref": "#/components/schemas/OnboardingDateField"
          },
          "email": { "$ref": "#/components/schemas/OnboardingEmailField" },
          "first_name": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "id_number": { "$ref": "#/components/schemas/OnboardingStringField" },
          "last_name": { "$ref": "#/components/schemas/OnboardingStringField" },
          "phone": { "$ref": "#/components/schemas/OnboardingStringField" },
          "relationship": {
            "$ref": "#/components/schemas/OnboardingPersonRelationship"
          },
          "ssn_last_4": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "email", "first_name", "last_name", "relationship"]
      },
      "OnboardingPersonAddressMask": {
        "properties": {
          "city": { "type": "boolean" },
          "country": { "type": "boolean" },
          "line1": { "type": "boolean" },
          "line2": { "type": "boolean" },
          "postal_code": { "type": "boolean" },
          "state": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingPersonDocuments": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "additional_verification_document_back": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "additional_verification_document_front": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "verification_document_back": {
            "$ref": "#/components/schemas/OnboardingStringField"
          },
          "verification_document_front": {
            "$ref": "#/components/schemas/OnboardingStringField"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id"]
      },
      "OnboardingPersonMask": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/OnboardingPersonAddressMask"
          },
          "date_of_birth": { "type": "boolean" },
          "email": { "type": "boolean" },
          "first_name": { "type": "boolean" },
          "id_number": { "type": "boolean" },
          "last_name": { "type": "boolean" },
          "phone": { "type": "boolean" },
          "relationship": {
            "$ref": "#/components/schemas/OnboardingPersonRelationshipMask"
          },
          "ssn_last_4": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["relationship"]
      },
      "OnboardingPersonRelationship": {
        "properties": {
          "director": { "type": "boolean" },
          "executive": { "type": "boolean" },
          "owner": { "type": "boolean" },
          "percent_ownership": {
            "$ref": "#/components/schemas/OnboardingFloatField"
          },
          "representative": { "type": "boolean" },
          "title": { "$ref": "#/components/schemas/OnboardingStringField" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["director", "executive", "owner", "representative"]
      },
      "OnboardingPersonRelationshipMask": {
        "properties": {
          "director": { "type": "boolean" },
          "executive": { "type": "boolean" },
          "owner": { "type": "boolean" },
          "percent_ownership": { "type": "boolean" },
          "representative": { "type": "boolean" },
          "title": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingRequirement": {
        "type": "string",
        "enum": [
          "entity",
          "business_profile",
          "tos_acceptance",
          "ownership_declaration",
          "bank_accounts",
          "representative",
          "owners",
          "executives",
          "directors",
          "persons",
          "entity_documents",
          "persons_documents"
        ]
      },
      "OnboardingRequirementsError": {
        "properties": {
          "code": { "type": "string" },
          "reason": { "type": "string" },
          "requirement": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code", "reason", "requirement"]
      },
      "OnboardingRequirementsResponse": {
        "properties": {
          "disabled_reason": {
            "$ref": "#/components/schemas/AccountDisabledReason"
          },
          "requirements": {
            "$ref": "#/components/schemas/PaymentRequirements"
          },
          "requirements_errors": {
            "items": { "$ref": "#/components/schemas/RequirementsError" },
            "type": "array"
          },
          "verification_errors": {
            "items": { "$ref": "#/components/schemas/VerificationError" },
            "type": "array"
          },
          "verification_status": {
            "$ref": "#/components/schemas/VerificationStatusEnum"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "requirements",
          "requirements_errors",
          "verification_errors",
          "verification_status"
        ]
      },
      "OnboardingStringField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": { "type": "string", "nullable": true }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingTosAcceptance": {
        "properties": {
          "date": { "$ref": "#/components/schemas/OnboardingDateField" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OnboardingUrlField": {
        "properties": {
          "error": {
            "allOf": [{ "$ref": "#/components/schemas/OnboardingError" }],
            "nullable": true
          },
          "required": { "type": "boolean" },
          "value": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required"]
      },
      "OnboardingVerificationError": {
        "properties": {
          "code": { "type": "string" },
          "details": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code", "details"]
      },
      "OnboardingVerificationStatusEnum": {
        "type": "string",
        "enum": ["enabled", "disabled", "pending"]
      },
      "OptionalIndividualSchema": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ]
          },
          "first_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A first name of an individual"
          },
          "id_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ]
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A last name of an individual"
          },
          "ssn_last_4": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The last four digits of the individual's Social Security number"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 10, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A title of an individual"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema for metadata for updating an individual"
      },
      "OptionalOrganizationSchema": {
        "properties": {
          "business_structure": {
            "anyOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" },
              { "type": "null" }
            ],
            "description": "Business structure of the company"
          },
          "directors_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "executives_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "legal_entity_id": {
            "anyOf": [
              { "type": "string", "maxLength": 20, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "legal_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A legal name of an organization"
          },
          "owners_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "representative_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema contains metadata for updating an organization"
      },
      "OptionalPersonAddressRequest": {
        "properties": {
          "city": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "City, district, suburb, town, or village"
          },
          "country": {
            "anyOf": [
              { "$ref": "#/components/schemas/AllowedCountries" },
              { "type": "null" }
            ],
            "description": "Two-letter country code (ISO 3166-1 alpha-2)",
            "examples": ["DE"]
          },
          "line1": {
            "anyOf": [
              { "type": "string", "maxLength": 200, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Address line 1 (e.g., street, PO Box, or company name)"
          },
          "line2": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)"
          },
          "postal_code": {
            "anyOf": [
              { "type": "string", "maxLength": 10, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "ZIP or postal code"
          },
          "state": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "State, county, province, or region"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OptionalPersonRelationship": {
        "properties": {
          "director": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "description": "Whether the person is a director of the account's legal entity"
          },
          "executive": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "description": "Whether the person has significant responsibility to control, manage, or direct the organization"
          },
          "owner": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "description": "Whether the person is an owner of the account's legal entity"
          },
          "percent_ownership": {
            "anyOf": [
              { "type": "number", "maximum": 100.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "description": "The percent owned by the person of the account's legal entity"
          },
          "representative": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "description": "Whether the person is authorized as the primary representative of the account"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The person's title (e.g., CEO, Support Engineer)"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OptionalPersonRequest": {
        "properties": {
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/OptionalPersonAddressRequest" },
              { "type": "null" }
            ],
            "description": "The person's address"
          },
          "citizenship": {
            "anyOf": [
              { "$ref": "#/components/schemas/AllowedCountries" },
              { "type": "null" }
            ],
            "description": "Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any.",
            "examples": ["DE"]
          },
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "description": "The person's date of birth"
          },
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "The person's email address"
          },
          "first_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The person's first name"
          },
          "id_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The person's ID number, as appropriate for their country"
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The person's last name"
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The person's phone number"
          },
          "relationship": {
            "anyOf": [
              { "$ref": "#/components/schemas/OptionalPersonRelationship" },
              { "type": "null" }
            ],
            "description": "Describes the person's relationship to the entity"
          },
          "ssn_last_4": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The last four digits of the person's Social Security number"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OrderEnum": { "type": "string", "enum": ["asc", "desc"] },
      "OrganizationResponseSchema": {
        "properties": {
          "business_structure": {
            "anyOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" },
              { "type": "null" }
            ],
            "description": "Business structure of the company"
          },
          "directors_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "executives_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "legal_entity_id": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The legal name of the organization."
          },
          "owners_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "representative_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          }
        },
        "type": "object",
        "required": ["legal_name"],
        "description": "Contains data specific to entities of the `organization` type."
      },
      "OrganizationSchema": {
        "properties": {
          "business_structure": {
            "anyOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" },
              { "type": "null" }
            ],
            "description": "Business structure of the company"
          },
          "directors_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "executives_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "legal_entity_id": {
            "anyOf": [
              { "type": "string", "maxLength": 20, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The legal name of the organization. If this organization will use Monite payment rails, this name must be up to 100 characters long, otherwise it can be up to 255 characters long."
          },
          "owners_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          },
          "representative_provided": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          }
        },
        "type": "object",
        "required": ["legal_name"],
        "description": "A schema contains metadata for an organization"
      },
      "OriginEnum": { "type": "string", "enum": ["upload", "einvoicing"] },
      "OverdueReminderRequest": {
        "properties": {
          "name": { "type": "string", "maxLength": 255, "minLength": 1 },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "terms": {
            "items": { "$ref": "#/components/schemas/OverdueReminderTerm" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Overdue reminder terms to send for payment"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "OverdueReminderResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the OverdueReminder was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the OverdueReminder was last updated. Timestamps follow the ISO 8601 standard."
          },
          "name": { "type": "string" },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "terms": {
            "items": { "$ref": "#/components/schemas/OverdueReminderTerm" },
            "type": "array",
            "minItems": 1,
            "description": "Overdue reminder terms to send for payment"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "name"]
      },
      "OverdueReminderTerm": {
        "properties": {
          "body": { "type": "string" },
          "days_after": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "subject": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body", "days_after", "subject"]
      },
      "OverdueReminderUpdateRequest": {
        "properties": {
          "name": { "type": "string", "maxLength": 255, "minLength": 1 },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "terms": {
            "items": { "$ref": "#/components/schemas/OverdueReminderTerm" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Overdue reminder terms to send for payment"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OwnershipDeclaration-Input": {
        "properties": {
          "date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "description": "The date and time (in the ISO 8601 format) when the beneficial owner attestation was made."
          },
          "ip": {
            "anyOf": [
              { "type": "string", "format": "ipvanyaddress" },
              { "type": "null" }
            ],
            "description": "The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.",
            "examples": ["203.0.113.24"]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "OwnershipDeclaration-Output": {
        "properties": {
          "date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "description": "The date and time (in the ISO 8601 format) when the beneficial owner attestation was made."
          },
          "ip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.",
            "examples": ["203.0.113.24"]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PageSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types) of the image.",
            "examples": ["image/png"]
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "examples": [0]
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "examples": [21972]
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "examples": ["https://bucket.s3.amazonaws.com/123/456.png"]
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "number", "size", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "PageSchema2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.",
            "example": "image/png"
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "example": 0
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "example": 21972
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "example": "https://bucket.s3.amazonaws.com/123/456.png"
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "size", "number", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "PageSchema3": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the image."
          },
          "mimetype": {
            "type": "string",
            "description": "The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types) of the image.",
            "example": "image/png"
          },
          "number": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The page number in the PDF document, from 0.",
            "example": 0
          },
          "size": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Image file size, in bytes.",
            "example": 21972
          },
          "url": {
            "type": "string",
            "description": "The URL to download the image.",
            "example": "https://bucket.s3.amazonaws.com/123/456.png"
          }
        },
        "type": "object",
        "required": ["id", "mimetype", "number", "size", "url"],
        "description": "When a PDF document is uploaded to Monite, it extracts individual pages from the document\nand saves them as PNG images. This object contains the image and metadata of a single page."
      },
      "PartiallyPaidPayload": {
        "properties": {
          "amount_paid": {
            "type": "integer",
            "minimum": 0.0,
            "description": "How much was paid on the invoice (in minor units)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount_paid"]
      },
      "PartnerMetadata": {
        "properties": {
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "description": "Metadata for partner needs"
          }
        },
        "type": "object",
        "required": ["metadata"]
      },
      "PartnerMetadataResponse": {
        "properties": {
          "metadata": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "description": "Metadata for partner needs"
          }
        },
        "type": "object"
      },
      "PartnerProjectSettingsPayload-Input": {
        "properties": {
          "api_version": {
            "anyOf": [
              { "$ref": "#/components/schemas/APIVersion" },
              { "type": "null" }
            ],
            "description": "Default API version for partner."
          },
          "commercial_conditions": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "description": "Commercial conditions for receivables."
          },
          "currency": {
            "anyOf": [
              { "$ref": "#/components/schemas/CurrencySettings-Input" },
              { "type": "null" }
            ],
            "description": "Custom currency exchange rates."
          },
          "default_role": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "description": "A default role to provision upon new entity creation."
          },
          "mail": {
            "anyOf": [
              { "$ref": "#/components/schemas/MailSettings" },
              { "type": "null" }
            ],
            "description": "Settings for email and mailboxes."
          },
          "payable": {
            "anyOf": [
              { "$ref": "#/components/schemas/PayableSettings" },
              { "type": "null" }
            ],
            "description": "Settings for the payables module."
          },
          "payments": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentsSettings-Input" },
              { "type": "null" }
            ],
            "description": "Settings for the payments module."
          },
          "receivable": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableSettings" },
              { "type": "null" }
            ],
            "description": "Settings for the receivables module."
          },
          "units": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Unit" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Measurement units."
          },
          "website": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
        },
        "type": "object"
      },
      "PartnerProjectSettingsPayload-Output": {
        "properties": {
          "api_version": {
            "anyOf": [
              { "$ref": "#/components/schemas/APIVersion" },
              { "type": "null" }
            ],
            "description": "Default API version for partner."
          },
          "commercial_conditions": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "description": "Commercial conditions for receivables."
          },
          "currency": {
            "anyOf": [
              { "$ref": "#/components/schemas/CurrencySettings-Output" },
              { "type": "null" }
            ],
            "description": "Custom currency exchange rates."
          },
          "default_role": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "description": "A default role to provision upon new entity creation."
          },
          "mail": {
            "anyOf": [
              { "$ref": "#/components/schemas/MailSettings" },
              { "type": "null" }
            ],
            "description": "Settings for email and mailboxes."
          },
          "payable": {
            "anyOf": [
              { "$ref": "#/components/schemas/PayableSettings" },
              { "type": "null" }
            ],
            "description": "Settings for the payables module."
          },
          "payments": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentsSettings-Output" },
              { "type": "null" }
            ],
            "description": "Settings for the payments module."
          },
          "receivable": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableSettings" },
              { "type": "null" }
            ],
            "description": "Settings for the receivables module."
          },
          "units": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Unit" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Measurement units."
          },
          "website": { "anyOf": [{ "type": "string" }, { "type": "null" }] }
        },
        "type": "object"
      },
      "PartnersPortalProjectResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "company": { "$ref": "#/components/schemas/CompanyResponse" },
          "created_by_user_id": { "type": "string", "format": "uuid" },
          "description": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentEnum",
            "default": "EU sandbox"
          },
          "features": {
            "items": { "$ref": "#/components/schemas/FeaturesResponse" },
            "type": "array"
          },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 },
          "region": {
            "$ref": "#/components/schemas/AllowedCountriesNames",
            "default": "Germany"
          }
        },
        "type": "object",
        "required": ["id", "company", "created_by_user_id", "features", "name"]
      },
      "PartnersPortalProjectUpdateRequest": {
        "properties": {
          "description": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "environment": {
            "anyOf": [
              { "$ref": "#/components/schemas/EnvironmentEnum" },
              { "type": "null" }
            ]
          },
          "features": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ]
          },
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ]
          },
          "project_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PartnersPortalProjectsSettingsRequest"
              },
              { "type": "null" }
            ]
          },
          "region": {
            "anyOf": [
              { "$ref": "#/components/schemas/AllowedCountriesNames" },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PartnersPortalProjectsRequest": {
        "properties": {
          "description": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentEnum",
            "default": "EU sandbox"
          },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 },
          "region": {
            "$ref": "#/components/schemas/AllowedCountriesNames",
            "default": "Germany"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "PartnersPortalProjectsSettingsRequest": {
        "properties": {
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "units": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Unit" },
                "type": "array"
              },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency"]
      },
      "PartnersPortalProjectsSettingsResponse": {
        "properties": {
          "currency": {
            "anyOf": [
              { "$ref": "#/components/schemas/CurrencyEnum" },
              { "type": "null" }
            ]
          },
          "project_id": { "type": "string", "format": "uuid" },
          "units": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Unit" },
                "type": "array"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["project_id"]
      },
      "PatchSettingsPayload": {
        "properties": {
          "accounting": {
            "anyOf": [
              { "$ref": "#/components/schemas/AccountingSettings" },
              { "type": "null" }
            ]
          },
          "allow_purchase_order_autolinking": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "description": "Automatically attempt to find a corresponding purchase order for all incoming payables.",
            "default": true
          },
          "currency": {
            "anyOf": [
              { "$ref": "#/components/schemas/CurrencySettings-Input" },
              { "type": "null" }
            ]
          },
          "document_ids": {
            "anyOf": [
              { "$ref": "#/components/schemas/DocumentIDsSettingsRequest" },
              { "type": "null" }
            ]
          },
          "document_rendering": {
            "$ref": "#/components/schemas/DocumentRenderingSettings-Input",
            "description": "Settings for rendering documents in PDF format."
          },
          "generate_paid_invoice_pdf": {
            "type": "boolean",
            "description": "This setting affects how PDF is generated for paid accounts receivable invoices. If set to `true`, once an invoice is fully paid its PDF version is updated to display the amount paid and the payment-related features are removed.\n\nThe PDF file gets regenerated at the moment when an invoice becomes paid. It is not issued as a separate document, and the original PDF invoice is no longer available.\n\nThis field is deprecated and will be replaced by `document_rendering.invoice.generate_paid_invoice_pdf`.",
            "default": false
          },
          "language": {
            "anyOf": [
              { "$ref": "#/components/schemas/LanguageCodeEnum" },
              { "type": "null" }
            ]
          },
          "payables_ocr_auto_tagging": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OcrAutoTaggingSettingsRequest"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Auto tagging settings for all incoming OCR payable documents."
          },
          "payables_skip_approval_flow": {
            "type": "boolean",
            "description": "If enabled, the approval policy will be skipped and the payable will be moved to `waiting_to_be_paid` status.",
            "default": false
          },
          "payment_priority": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentPriorityEnum" },
              { "type": "null" }
            ],
            "description": "Payment preferences for entity to automate calculating suggested payment date based on payment terms and entity preferences.",
            "default": "working_capital"
          },
          "quote_signature_required": {
            "type": "boolean",
            "description": "Sets the default behavior of whether a signature is required to accept quotes.",
            "default": false
          },
          "receivable_edit_flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEditFlow" },
              { "type": "null" }
            ],
            "default": "compliant"
          },
          "reminder": {
            "anyOf": [
              { "$ref": "#/components/schemas/RemindersSettings" },
              { "type": "null" }
            ]
          },
          "vat_inclusive_discount_mode": {
            "$ref": "#/components/schemas/VatModeEnum",
            "description": "Defines whether the amount discounts (for percentage discounts it does not matter) on VAT inclusive invoices will be applied on amounts including VAT or excluding VAT.",
            "default": "exclusive"
          },
          "vat_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/VatModeEnum" },
              { "type": "null" }
            ],
            "description": "Defines whether the prices of products in receivables will already include VAT or not.",
            "default": "exclusive"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableActionEnum": {
        "type": "string",
        "enum": [
          "create",
          "read",
          "update",
          "delete",
          "pay",
          "approve",
          "cancel",
          "submit",
          "create_from_mail",
          "reopen"
        ]
      },
      "PayableActionSchema": {
        "properties": {
          "action_name": {
            "$ref": "#/components/schemas/PayableActionEnum",
            "description": "Action name",
            "default": "read"
          },
          "permission": {
            "$ref": "#/components/schemas/PermissionEnum",
            "description": "Permission type",
            "default": "allowed"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableAggregatedDataResponse": {
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total count of payables across all statuses."
          },
          "data": {
            "items": { "$ref": "#/components/schemas/PayableAggregatedItem" },
            "type": "array",
            "description": "A list of aggregated items, each representing a status with its associated sum of the amount field and count."
          },
          "sum_total_amount": {
            "type": "integer",
            "description": "The total sum of the amount field for all payables across all statuses."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["count", "data", "sum_total_amount"]
      },
      "PayableAggregatedItem": {
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total count of payables with this specific status."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/PayableStateEnum" }],
            "description": "The status of the payable (e.g., paid, draft, etc.)."
          },
          "sum_total_amount": {
            "type": "integer",
            "description": "The total sum of the amount field for all payables with this specific status."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["count", "status", "sum_total_amount"]
      },
      "PayableAnalyticsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/AnalyticsDataPoint" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "PayableAttachFile": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "PayableCreatedEventData": {
        "properties": {
          "payable_source": { "$ref": "#/components/schemas/PayableOriginEnum" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["payable_source"]
      },
      "PayableCreditNoteData": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier of the credit note.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "document_id": {
            "type": "string",
            "description": "The credit note's unique document number.",
            "example": "CN-123456"
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the credit note was issued, in the YYYY-MM-DD format",
            "example": "2024-01-15"
          },
          "status": {
            "type": "string",
            "maxLength": 30,
            "description": "The current status of the credit note in its lifecycle",
            "example": "submitted_for_approval"
          },
          "total_amount": {
            "type": "integer",
            "description": "Credit note total amount.",
            "example": 1000
          }
        },
        "type": "object",
        "required": ["id", "status"]
      },
      "PayableCreditNoteLinkedEventData": {
        "properties": {
          "credit_note_document_id": { "type": "string" },
          "credit_note_id": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["credit_note_id"]
      },
      "PayableCreditNoteStateEnum": {
        "type": "string",
        "enum": [
          "new",
          "draft",
          "applied",
          "approved",
          "rejected",
          "canceled",
          "submitted_for_approval"
        ]
      },
      "PayableCreditNoteUnlinkedEventData": {
        "properties": {
          "credit_note_document_id": { "type": "string" },
          "credit_note_id": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["credit_note_id"]
      },
      "PayableCursorFields": {
        "type": "string",
        "enum": ["id", "created_at", "issued_at"]
      },
      "PayableDimensionEnum": {
        "type": "string",
        "enum": [
          "created_at",
          "status",
          "counterpart_id",
          "currency",
          "issued_at",
          "due_date",
          "project_id"
        ]
      },
      "PayableEntityAddressSchema": {
        "properties": {
          "city": {
            "type": "string",
            "maxLength": 255,
            "description": "A city (a full name) where the entity is registered"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "A country name (as ISO code) where the entity is registered ",
            "default": "DE",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "type": "string",
            "maxLength": 100,
            "description": "An alternative street used by the entity"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "type": "string",
            "maxLength": 255,
            "description": "A state in a country where the entity is registered"
          }
        },
        "type": "object",
        "required": ["city", "line1", "postal_code"],
        "description": "A schema represents address info of the entity"
      },
      "PayableEntityIndividualResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "$ref": "#/components/schemas/PayableEntityAddressSchema"
          },
          "email": {
            "type": "string",
            "description": "An official email address of the entity"
          },
          "individual": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableIndividualSchema" }
            ],
            "description": "A set of metadata describing an individual"
          },
          "logo": {
            "allOf": [{ "$ref": "#/components/schemas/FileSchema4" }],
            "description": "A logo image of the entity"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "description": "A phone number of the entity"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "individual",
          "status"
        ],
        "description": "A base for an entity response schema"
      },
      "PayableEntityOrganizationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID entity ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "address": {
            "$ref": "#/components/schemas/PayableEntityAddressSchema"
          },
          "email": {
            "type": "string",
            "description": "An official email address of the entity"
          },
          "logo": {
            "allOf": [{ "$ref": "#/components/schemas/FileSchema4" }],
            "description": "A logo image of the entity"
          },
          "organization": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableOrganizationSchema" }
            ],
            "description": "A set of metadata describing an organization"
          },
          "phone": {
            "type": "string",
            "maxLength": 100,
            "description": "A phone number of the entity"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusEnum" }],
            "description": "record status, 'active' by default"
          },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "address",
          "organization",
          "status"
        ],
        "description": "A base for an entity response schema"
      },
      "PayableHistoryCursorFields": { "type": "string", "enum": ["timestamp"] },
      "PayableHistoryEventTypeEnum": {
        "type": "string",
        "enum": [
          "status_changed",
          "payable_created",
          "payable_updated",
          "credit_note_linked",
          "credit_note_unlinked",
          "file_attached"
        ]
      },
      "PayableHistoryPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PayableHistoryResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of change history records."
      },
      "PayableHistoryResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the history record.",
            "examples": ["cd58435b-1c79-4b17-9f79-f898c93e5f97"]
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who made the change or trigger the event, or `null` if it was done by using a partner access token.",
            "examples": ["d5a577b0-01c0-4566-ac5c-44f41935e8c4"]
          },
          "event_data": {
            "anyOf": [
              { "$ref": "#/components/schemas/PayableStatusChangedEventData" },
              { "$ref": "#/components/schemas/PayableUpdatedEventData" },
              { "$ref": "#/components/schemas/PayableCreatedEventData" },
              {
                "$ref": "#/components/schemas/PayableCreditNoteLinkedEventData"
              },
              {
                "$ref": "#/components/schemas/PayableCreditNoteUnlinkedEventData"
              },
              { "$ref": "#/components/schemas/FileAttachedEventData" }
            ],
            "description": "An object containing additional information about the event or change. The object structure varies based on the `event_type`. "
          },
          "event_type": {
            "allOf": [
              { "$ref": "#/components/schemas/PayableHistoryEventTypeEnum" }
            ],
            "description": "The type of the event or change."
          },
          "payable_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the payable document that was changed or triggered an event.",
            "examples": ["f669a8a4-0563-4ab9-b54f-e9d700d282c5"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when the event or change occurred."
          }
        },
        "type": "object",
        "required": [
          "id",
          "event_data",
          "event_type",
          "payable_id",
          "timestamp"
        ]
      },
      "PayableIndividualSchema": {
        "properties": {
          "date_of_birth": { "type": "string", "format": "date" },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A first name of an individual"
          },
          "id_number": { "type": "string" },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "description": "A last name of an individual"
          },
          "ssn_last_4": {
            "type": "string",
            "description": "The last four digits of the individual's Social Security number"
          },
          "title": {
            "type": "string",
            "maxLength": 10,
            "description": "A title of an individual"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name"],
        "description": "A schema contains metadata for an individual"
      },
      "PayableMetricEnum": { "type": "string", "enum": ["id", "total_amount"] },
      "PayableOrganizationSchema": {
        "properties": {
          "business_structure": {
            "allOf": [
              { "$ref": "#/components/schemas/EntityBusinessStructure" }
            ],
            "description": "Business structure of the company"
          },
          "directors_provided": { "type": "boolean" },
          "executives_provided": { "type": "boolean" },
          "legal_entity_id": {
            "type": "string",
            "maxLength": 20,
            "description": "A code which identifies uniquely a party of a transaction worldwide"
          },
          "legal_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A legal name of an organization"
          },
          "owners_provided": { "type": "boolean" },
          "representative_provided": { "type": "boolean" }
        },
        "type": "object",
        "required": ["legal_name"],
        "description": "A schema contains metadata for an organization"
      },
      "PayableOriginEnum": {
        "type": "string",
        "enum": ["upload", "email", "einvoicing"]
      },
      "PayablePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PayableResponseSchema" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of payables."
      },
      "PayablePaymentTermDiscount": {
        "properties": {
          "discount": {
            "type": "integer",
            "description": "The discount percentage in minor units. E.g., 200 means 2%, 1050 means 10.5%."
          },
          "number_of_days": {
            "type": "integer",
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["discount", "number_of_days"]
      },
      "PayablePaymentTermFinal": {
        "properties": {
          "number_of_days": {
            "type": "integer",
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["number_of_days"]
      },
      "PayablePaymentTermsCreatePayload": {
        "properties": {
          "description": { "type": "string" },
          "name": { "type": "string" },
          "term_1": {
            "$ref": "#/components/schemas/PayablePaymentTermDiscount"
          },
          "term_2": {
            "$ref": "#/components/schemas/PayablePaymentTermDiscount"
          },
          "term_final": {
            "$ref": "#/components/schemas/PayablePaymentTermFinal"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "term_final"]
      },
      "PayableResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this payable."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this payable was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when this payable was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."
          },
          "amount_due": {
            "type": "integer",
            "description": "How much is left to be paid on the invoice (in minor units).",
            "example": 1000
          },
          "amount_paid": {
            "type": "integer",
            "description": "How much was paid on the invoice (in minor units).",
            "example": 1000
          },
          "amount_to_pay": {
            "type": "integer",
            "description": "How much is left to be paid on the invoice (in minor units) with discounts from payment terms.",
            "example": 1000
          },
          "approval_policy_id": {
            "type": "string",
            "format": "uuid",
            "description": "Id of existing approval policy that applies to this payable, if any. A policy is applied if the payable matches the policy trigger conditions."
          },
          "counterpart": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawData" }],
            "description": "Object representing de-normalized counterpart data. Filled at the moment of invoice submitting for approval or payment."
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart bank account object stored in counterparts service"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart object that represents the vendor or supplier."
          },
          "counterpart_raw_data": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartRawData" }],
            "description": "Object representing counterpart data which was extracted by OCR. Used for informational purposes."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart VAT ID object stored in counterparts service"
          },
          "created_by_role_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the role that the entity user who created this payable had at that time. If the payable was created using a partner access token, the value is `null`."
          },
          "credit_notes": {
            "items": { "$ref": "#/components/schemas/PayableCreditNoteData" },
            "type": "array",
            "description": "The list of linked credit notes of the payable."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The [currency code](https://docs.monite.com/references/currencies) of the currency used in the payable.",
            "example": "EUR"
          },
          "currency_exchange": {
            "$ref": "#/components/schemas/CurrencyExchangeSchema2"
          },
          "description": {
            "type": "string",
            "description": "An arbitrary description of this payable."
          },
          "discount": {
            "type": "integer",
            "description": "The value of the additional discount that will be applied to the total amount. in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 500
          },
          "document_id": {
            "type": "string",
            "description": "A unique invoice number assigned by the invoice issuer for payment tracking purposes. This is different from `id` which is an internal ID created automatically by Monite.",
            "example": "DE2287"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date."
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity to which the payable was issued."
          },
          "file": {
            "allOf": [{ "$ref": "#/components/schemas/FileSchema" }],
            "description": "The original file from which this payable was created."
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "description": "File id to retrieve file info from file saver."
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the payable was issued, in the YYYY-MM-DD format."
          },
          "marked_as_paid_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity user who marked this document as paid.",
            "example": "71e8875a-43b3-434f-b12a-54c84c176ef3"
          },
          "marked_as_paid_with_comment": {
            "type": "string",
            "description": "An arbitrary comment that describes how and when this payable was paid.",
            "example": "Was paid partly in the end of the month."
          },
          "ocr_request_id": {
            "type": "string",
            "format": "uuid",
            "description": "Id of OCR request to match asynchronous result of processing payable."
          },
          "ocr_status": {
            "allOf": [{ "$ref": "#/components/schemas/OcrStatusEnum" }],
            "description": "The status of the data recognition process using OCR. The 'processing' status means that the data recognition is in progress and the user needs to wait for the data enrichment. The 'error' status indicates that some error occurred on the OCR side and the user can fill in the data manually. The 'success' status means the data recognition has been successfully completed, after which the user can check the data if desired and enrich or correct it."
          },
          "other_extracted_data": {
            "anyOf": [
              { "$ref": "#/components/schemas/OCRResponseInvoiceReceiptData" },
              { "$ref": "#/components/schemas/OcrRecognitionResponse" }
            ],
            "description": "Data extracted from the uploaded payable by OCR."
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date by which the payable was paid"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payable_origin": {
            "allOf": [{ "$ref": "#/components/schemas/PayableOriginEnum" }],
            "description": "Specifies how this payable was created in Monite: `upload` - created via an API call, `email` - sent via email to the entity's mailbox."
          },
          "payment_terms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayablePaymentTermsCreatePayload"
              }
            ],
            "description": "The number of days to pay with potential discount for options shorter than due_date"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "Project id of a payable."
          },
          "purchase_order_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the purchase order to which this payable belongs."
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "source_of_payable_data": {
            "allOf": [
              { "$ref": "#/components/schemas/SourceOfPayableDataEnum" }
            ],
            "description": "Specifies how the property values of this payable were provided: `ocr` - Monite OCR service extracted the values from the provided PDF or image file, `user_specified` - values were added or updated via an API call."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/PayableStateEnum" }],
            "description": "The [status](https://docs.monite.com/accounts-payable/payables/index) of the payable."
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1250
          },
          "suggested_payment_term": {
            "allOf": [{ "$ref": "#/components/schemas/SuggestedPaymentTerm" }],
            "description": "The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0."
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "A list of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable."
          },
          "tax": {
            "type": "integer",
            "description": "Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.",
            "example": 2000
          },
          "tax_amount": {
            "type": "integer",
            "description": "Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 250
          },
          "total_amount": {
            "type": "integer",
            "description": "The total amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1500
          },
          "total_amount_with_credit_notes": {
            "type": "integer",
            "description": "The total price of the payable in [minor units](https://docs.monite.com/references/currencies#minor-units), excluding all issued credit notes."
          },
          "was_created_by_user_id": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "credit_notes",
          "entity_id",
          "payable_origin",
          "source_of_payable_data",
          "status"
        ],
        "description": "Represents an Accounts Payable document received from a vendor or supplier."
      },
      "PayableSchema-Input": {
        "properties": {
          "actions": {
            "items": { "$ref": "#/components/schemas/PayableActionSchema" },
            "type": "array",
            "description": "List of actions"
          },
          "object_type": {
            "type": "string",
            "const": "payable",
            "description": "Object type",
            "default": "payable"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableSchema-Output": {
        "properties": {
          "actions": {
            "items": { "$ref": "#/components/schemas/PayableActionSchema" },
            "type": "array",
            "description": "List of actions"
          },
          "object_type": {
            "type": "string",
            "const": "payable",
            "description": "Object type",
            "default": "payable"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PayableSettings": {
        "properties": {
          "allow_cancel_duplicates_automatically": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "default": false
          },
          "allow_counterpart_autocreation": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "default": false
          },
          "allow_counterpart_autolinking": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "default": false
          },
          "allow_credit_note_autolinking": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "default": false
          },
          "approve_page_url": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "examples": ["https://monite.com"]
          },
          "default_state": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A state each new payable will have upon creation",
            "examples": ["new"]
          },
          "enable_line_items": {
            "type": "boolean",
            "description": "Starting from version 2024-05-25 by default is always set to True.",
            "default": true,
            "deprecated": true
          },
          "skip_approval_for_paid_invoice": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "default": false
          }
        },
        "type": "object",
        "required": ["approve_page_url"]
      },
      "PayableStateEnum": {
        "type": "string",
        "enum": [
          "draft",
          "new",
          "approve_in_progress",
          "waiting_to_be_paid",
          "partially_paid",
          "paid",
          "canceled",
          "rejected"
        ]
      },
      "PayableStatusChangedEventData": {
        "properties": {
          "new_status": { "$ref": "#/components/schemas/PayableStateEnum" },
          "old_status": { "$ref": "#/components/schemas/PayableStateEnum" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["new_status", "old_status"]
      },
      "PayableTemplatesVariable": {
        "properties": {
          "description": { "type": "string" },
          "name": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["description", "name"]
      },
      "PayableTemplatesVariablesObject": {
        "properties": {
          "object_subtype": {
            "$ref": "#/components/schemas/PayablesVariableType"
          },
          "object_type": { "$ref": "#/components/schemas/ObjectType" },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/PayableTemplatesVariable"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_subtype", "object_type", "variables"]
      },
      "PayableTemplatesVariablesObjectList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PayableTemplatesVariablesObject"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PayableUpdateSchema": {
        "properties": {
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart bank account object stored in counterparts service"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart object that represents the vendor or supplier."
          },
          "counterpart_raw_data": {
            "allOf": [
              { "$ref": "#/components/schemas/CounterpartRawDataUpdateRequest" }
            ],
            "description": "Allows to fix some data in counterpart recognised fields to correct them in order to make autolinking happen."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart VAT ID object stored in counterparts service"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The [currency code](https://docs.monite.com/references/currencies) of the currency used in the payable.",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "An arbitrary description of this payable."
          },
          "discount": {
            "type": "integer",
            "description": "The value of the additional discount that will be applied to the total amount. in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 500
          },
          "document_id": {
            "type": "string",
            "description": "A unique invoice number assigned by the invoice issuer for payment tracking purposes.",
            "example": "DE2287"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date."
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the payable was issued, in the YYYY-MM-DD format."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_terms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayablePaymentTermsCreatePayload"
              }
            ],
            "description": "The number of days to pay with potential discount for options shorter than due_date"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "The project ID of the payable."
          },
          "purchase_order_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the purchase order to which this payable belongs."
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1250
          },
          "suggested_payment_term": {
            "allOf": [{ "$ref": "#/components/schemas/SuggestedPaymentTerm" }],
            "description": "The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable."
          },
          "tax": {
            "type": "integer",
            "description": "Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.",
            "example": 2000
          },
          "tax_amount": {
            "type": "integer",
            "description": "Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 250
          },
          "total_amount": {
            "type": "integer",
            "description": "The total amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 15000
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "This schema is used to update the data of an existing payable."
      },
      "PayableUpdatedEventData": {
        "properties": {},
        "additionalProperties": false,
        "type": "object"
      },
      "PayableUploadFile": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "PayableUploadWithDataSchema": {
        "properties": {
          "base64_encoded_file": {
            "type": "string",
            "description": "Base64-encoded contents of the original issued payable. The file is provided for reference purposes as the original source of the data.\n\n Any file formats are allowed. The most common formats are PDF, PNG, JPEG, TIFF."
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service"
          },
          "counterpart_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart bank account object stored in counterparts service"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the counterpart object that represents the vendor or supplier."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart VAT ID object stored in counterparts service"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The [currency code](https://docs.monite.com/references/currencies) of the currency used in the payable.",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "An arbitrary description of this payable."
          },
          "discount": {
            "type": "integer",
            "description": "The value of the additional discount that will be applied to the total amount. in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 500
          },
          "document_id": {
            "type": "string",
            "description": "A unique invoice number assigned by the invoice issuer for payment tracking purposes.",
            "example": "DE2287"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date."
          },
          "file_name": {
            "type": "string",
            "maxLength": 512,
            "description": "The original file name.",
            "example": "invoice.pdf"
          },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "The date when the payable was issued, in the YYYY-MM-DD format."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_terms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayablePaymentTermsCreatePayload"
              }
            ],
            "description": "The number of days to pay with potential discount for options shorter than due_date"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of a project"
          },
          "purchase_order_id": {
            "type": "string",
            "format": "uuid",
            "description": "The identifier of the purchase order to which this payable belongs."
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "subtotal": {
            "type": "integer",
            "description": "The subtotal amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 1250
          },
          "suggested_payment_term": {
            "allOf": [{ "$ref": "#/components/schemas/SuggestedPaymentTerm" }],
            "description": "The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable."
          },
          "tax": {
            "type": "integer",
            "description": "Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%. 1050 means 10.5%.",
            "example": 2000
          },
          "tax_amount": {
            "type": "integer",
            "description": "Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 250
          },
          "total_amount": {
            "type": "integer",
            "description": "The total amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.",
            "example": 15000
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "This schema is used to create a new payable by providing its data along with the original file."
      },
      "PayableValidationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this payable."
          },
          "validation_errors": {
            "items": { "type": "object" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["id"]
      },
      "PayableValidationsResource": {
        "properties": {
          "required_fields": {
            "items": {
              "$ref": "#/components/schemas/PayablesFieldsAllowedForValidate"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["required_fields"]
      },
      "PayableValidationsUpdateRequest": {
        "properties": {
          "required_fields": {
            "items": {
              "$ref": "#/components/schemas/PayablesFieldsAllowedForValidate"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["required_fields"]
      },
      "PayablesFieldsAllowedForValidate": {
        "type": "string",
        "enum": [
          "currency",
          "document_id",
          "due_date",
          "issued_at",
          "tax_amount",
          "total_amount",
          "subtotal",
          "description",
          "suggested_payment_term",
          "payment_terms",
          "tax",
          "sender",
          "file_id",
          "counterpart_id",
          "counterpart_bank_account_id",
          "counterpart_address_id",
          "counterpart_vat_id_id",
          "line_items",
          "line_items.quantity",
          "line_items.unit_price",
          "line_items.tax",
          "line_items.ledger_account_id",
          "line_items.accounting_tax_rate_id",
          "line_items.unit",
          "line_items.name",
          "line_items.description",
          "line_items.subtotal",
          "line_items.total",
          "line_items.tax_amount"
        ]
      },
      "PayablesVariableType": {
        "type": "string",
        "enum": ["payables_purchase_order", "payables_notify_approver"]
      },
      "PayerAccountResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of a payment account"
          },
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "type": "array",
            "description": "List of bank accounts"
          },
          "name": {
            "type": "string",
            "description": "Display name of a payment account"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentAccountType" }],
            "description": "Type of a payment account. Can be `entity` or `counterpart`"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PayerAccountResponse2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of a payment account"
          },
          "authorized_bank_accounts": {
            "items": { "$ref": "#/components/schemas/AuthorizedBankAccount" },
            "type": "array",
            "description": "List of authorized bank accounts"
          },
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "type": "array",
            "description": "List of bank accounts"
          },
          "name": {
            "type": "string",
            "description": "Display name of a payment account"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentAccountType" }],
            "description": "Type of a payment account. Can be `entity` or `counterpart`"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentAccountObject": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of a payment account"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentAccountType" }],
            "description": "Type of a payment account. Can be `entity` or `counterpart`"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentAccountType": {
        "type": "string",
        "enum": ["entity", "counterpart"]
      },
      "PaymentIntent": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "updated_at": { "type": "string", "format": "date-time" },
          "application_fee_amount": { "type": "integer" },
          "object": { "$ref": "#/components/schemas/PaymentObject" },
          "provider": { "type": "string" },
          "selected_payment_method": { "type": "string" },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "updated_at", "status"]
      },
      "PaymentIntentAccountType": { "type": "string", "enum": ["IBAN"] },
      "PaymentIntentCursorFields": {
        "type": "string",
        "enum": ["id", "created_at"]
      },
      "PaymentIntentHistory": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "payment_intent_id": { "type": "string", "format": "uuid" },
          "status": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "payment_intent_id",
          "status"
        ]
      },
      "PaymentIntentHistoryResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentIntentHistory" },
            "type": "array",
            "description": "Payment intent history"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PaymentIntentPayoutMethod": {
        "type": "string",
        "enum": ["bank_account", "paper_check"]
      },
      "PaymentIntentResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "updated_at": { "type": "string", "format": "date-time" },
          "amount": { "type": "integer" },
          "application_fee_amount": { "type": "integer" },
          "batch_payment_id": { "type": "string", "format": "uuid" },
          "currency": { "type": "string" },
          "invoice": { "$ref": "#/components/schemas/Invoice" },
          "object": { "$ref": "#/components/schemas/PaymentObject" },
          "payer": { "$ref": "#/components/schemas/PayerAccountResponse" },
          "payment_link_id": { "type": "string", "format": "uuid" },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array"
          },
          "payment_reference": { "type": "string" },
          "provider": { "type": "string" },
          "recipient": {
            "$ref": "#/components/schemas/RecipientAccountResponse"
          },
          "selected_payment_method": {
            "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
          },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "updated_at",
          "amount",
          "currency",
          "payment_methods",
          "recipient",
          "status"
        ]
      },
      "PaymentIntentWithSecrets": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "updated_at": { "type": "string", "format": "date-time" },
          "airwallex_data": { "$ref": "#/components/schemas/AirwallexData" },
          "amount": { "type": "integer" },
          "application_fee_amount": { "type": "integer" },
          "batch_payment_id": { "type": "string", "format": "uuid" },
          "confirm_on_backend": { "type": "boolean", "default": true },
          "currency": { "type": "string" },
          "invoice": { "$ref": "#/components/schemas/Invoice" },
          "key": { "$ref": "#/components/schemas/StripeData" },
          "object": { "$ref": "#/components/schemas/PaymentObject" },
          "payer": { "$ref": "#/components/schemas/PayerAccountResponse2" },
          "payment_link_id": { "type": "string", "format": "uuid" },
          "payment_methods": {
            "items": {
              "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
            },
            "type": "array"
          },
          "payment_reference": { "type": "string" },
          "provider": { "type": "string" },
          "recipient": {
            "$ref": "#/components/schemas/RecipientAccountResponse2"
          },
          "selected_payment_method": {
            "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
          },
          "status": { "type": "string" },
          "stripe_data": { "$ref": "#/components/schemas/StripeData" }
        },
        "type": "object",
        "required": [
          "id",
          "updated_at",
          "amount",
          "currency",
          "payment_methods",
          "recipient",
          "status"
        ]
      },
      "PaymentIntentsListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentIntentResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PaymentIntentsRecipient": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "bank_account_id": { "type": "string", "format": "uuid" },
          "payout_method": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentIntentPayoutMethod" }
            ],
            "default": "bank_account"
          },
          "type": { "type": "string", "enum": ["counterpart"] }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentMethod": {
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/PaymentMethodDirection"
          },
          "name": { "$ref": "#/components/schemas/MoniteAllPaymentMethods" },
          "status": { "$ref": "#/components/schemas/PaymentMethodStatus" },
          "type": {
            "$ref": "#/components/schemas/MoniteAllPaymentMethodsTypes"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["direction", "name", "status", "type"]
      },
      "PaymentMethodDirection": {
        "type": "string",
        "enum": ["receive", "send"]
      },
      "PaymentMethodRequirements": {
        "properties": {
          "current_deadline": { "type": "string", "format": "date-time" },
          "currently_due": { "items": { "type": "string" }, "type": "array" },
          "eventually_due": { "items": { "type": "string" }, "type": "array" },
          "past_due": { "items": { "type": "string" }, "type": "array" },
          "pending_verification": {
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "currently_due",
          "eventually_due",
          "past_due",
          "pending_verification"
        ]
      },
      "PaymentMethodStatus": {
        "type": "string",
        "enum": ["active", "inactive"]
      },
      "PaymentMethodsConfirmPaymentPayload": {
        "properties": { "payment_method_id": { "type": "string" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["payment_method_id"]
      },
      "PaymentMethodsConfirmResponse": {
        "properties": {
          "client_secret": { "type": "string" },
          "is_next_action_needed": { "type": "boolean" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_secret", "is_next_action_needed"]
      },
      "PaymentObject": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "$ref": "#/components/schemas/PaymentObjectType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentObjectPayable": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "type": "string", "enum": ["payable"] }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentObjectType": {
        "type": "string",
        "enum": ["payable", "receivable"]
      },
      "PaymentPageFooter": {
        "properties": {
          "logo_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "description": "Url to partner logo image file. If missing, then monite logo will be used."
          },
          "website_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "description": "Url to partner website.",
            "examples": ["https://monite.com"]
          }
        },
        "type": "object",
        "required": ["logo_url"]
      },
      "PaymentPageTheme": {
        "properties": {
          "background_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "border_radius": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "button": {
            "anyOf": [
              { "$ref": "#/components/schemas/ButtonTheme" },
              { "type": "null" }
            ]
          },
          "card": {
            "anyOf": [
              { "$ref": "#/components/schemas/CardTheme" },
              { "type": "null" }
            ]
          },
          "font_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "font_family": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "font_link_href": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ]
          },
          "logo_src": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object"
      },
      "PaymentPageThemeWithFooter": {
        "properties": {
          "background_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "border_radius": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "button": {
            "anyOf": [
              { "$ref": "#/components/schemas/ButtonTheme" },
              { "type": "null" }
            ]
          },
          "card": {
            "anyOf": [
              { "$ref": "#/components/schemas/CardTheme" },
              { "type": "null" }
            ]
          },
          "font_color": {
            "anyOf": [
              { "type": "string", "format": "color" },
              { "type": "null" }
            ]
          },
          "font_family": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "font_link_href": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ]
          },
          "footer": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentPageFooter" },
              { "type": "null" }
            ]
          },
          "logo_src": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ]
          }
        },
        "type": "object"
      },
      "PaymentPriorityEnum": {
        "type": "string",
        "enum": ["working_capital", "balanced", "bottom_line"]
      },
      "PaymentReceivedEventData": {
        "properties": {
          "amount_due": {
            "type": "integer",
            "description": "The remaining amount due of the invoice, in [minor units](https://docs.monite.com/references/currencies#minor-units) of the currency. For example, $12.5 is represented as 1250.",
            "examples": [0]
          },
          "amount_paid": {
            "type": "integer",
            "description": "The payment amount, in minor units of the currency.",
            "examples": [1250]
          },
          "comment": {
            "type": "string",
            "description": "A user-defined comment about this payment, or `null` if no comment was provided. Comments are available only for payments recorded via `POST /receivables/{receivable_id}/mark_as_paid` and `POST /receivables/{receivable_id}/mark_as_partially_paid`."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount_due", "amount_paid"],
        "description": "Contains information about a payment received for an invoice."
      },
      "PaymentRecordCursorFields": {
        "type": "string",
        "enum": ["paid_at", "amount", "overpaid_amount"]
      },
      "PaymentRecordHistoryResponse": {
        "properties": {
          "entity_user_id": { "type": "string", "format": "uuid" },
          "status": { "$ref": "#/components/schemas/PaymentRecordStatusEnum" },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the change in a history"
          }
        },
        "type": "object",
        "required": ["status", "timestamp"]
      },
      "PaymentRecordMarkAsSucceededRequest": {
        "properties": {
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp marking when the payment was executed."
          },
          "payment_intent_status": {
            "type": "string",
            "description": "Raw status string of the external payment intent."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["paid_at"]
      },
      "PaymentRecordObjectRequest": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the invoice"
          },
          "type": { "$ref": "#/components/schemas/ObjectTypeEnum" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "PaymentRecordObjectResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the invoice"
          },
          "new_status": {
            "type": "string",
            "description": "Status, in which object has been moved"
          },
          "old_status": {
            "type": "string",
            "description": "Status, in which object was before payment"
          },
          "type": { "$ref": "#/components/schemas/ObjectTypeEnum" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "new_status", "old_status", "type"]
      },
      "PaymentRecordRequest": {
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Positive amount in case of successful payment, negative amount in case of payment failure or refund, represented in minor currency units (e.g., cents)."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code (ISO 4217) indicating the currency in which the payment was made."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user associated with the payment, if applicable."
          },
          "object": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentRecordObjectRequest" }
            ],
            "description": "Reference object linked to this payment record, indicating the type (receivable or payable) and its identifier."
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp marking when the payment was executed. Null if payment hasn't occurred yet."
          },
          "payment_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier for an payment intent."
          },
          "payment_intent_status": {
            "type": "string",
            "description": "Raw status string of the external payment intent."
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method used or planned for the transaction."
          },
          "planned_payment_date": {
            "type": "string",
            "format": "date",
            "description": "Scheduled date for future payments, required when the payment is planned but not yet executed."
          },
          "status": {
            "type": "string",
            "enum": ["created", "processing", "succeeded"],
            "description": "Status of the payment record indicating its current stage (e.g., created, processing, succeeded).",
            "default": "succeeded"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount", "currency", "object", "payment_intent_id"]
      },
      "PaymentRecordResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "amount": {
            "type": "integer",
            "description": "Positive amount in case of successful payment, negative amount in case of payment failure or refund, represented in minor currency units (e.g., cents)."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code (ISO 4217) indicating the currency in which the payment was made."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user associated with the payment, if applicable."
          },
          "history": {
            "items": {
              "$ref": "#/components/schemas/PaymentRecordHistoryResponse"
            },
            "type": "array",
            "description": "History of the payment record."
          },
          "is_external": { "type": "boolean" },
          "object": {
            "$ref": "#/components/schemas/PaymentRecordObjectResponse"
          },
          "overpaid_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Filled in a case, if payment amount is more, than total_amount",
            "default": 0
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp marking when the payment was executed. Null if payment hasn't occurred yet."
          },
          "payment_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier for an payment intent."
          },
          "payment_intent_status": {
            "type": "string",
            "description": "Raw status string of the external payment intent."
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method used or planned for the transaction."
          },
          "planned_payment_date": {
            "type": "string",
            "format": "date",
            "description": "Scheduled date for future payments, required when the payment is planned but not yet executed."
          },
          "status": {
            "type": "string",
            "description": "The current status of the payment record. Possible values: `created`, `processing`, `succeeded`, `canceled`.",
            "default": "succeeded"
          }
        },
        "type": "object",
        "required": [
          "id",
          "amount",
          "currency",
          "history",
          "is_external",
          "object",
          "payment_intent_id"
        ]
      },
      "PaymentRecordResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentRecordResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PaymentRecordStatusEnum": {
        "type": "string",
        "enum": ["created", "processing", "succeeded", "canceled"]
      },
      "PaymentRecordStatusUpdateRequest": {
        "properties": {
          "payment_intent_status": {
            "type": "string",
            "description": "Raw status string of the external payment intent."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentRecordUpdateRequest": {
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Positive amount in case of successful payment, negative amount in case of payment failure or refund, represented in minor currency units (e.g., cents)."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code (ISO 4217) indicating the currency in which the payment was made."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user associated with the payment, if applicable."
          },
          "object": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentRecordObjectRequest" }
            ],
            "description": "Reference object linked to this payment record, indicating the type (receivable or payable) and its identifier."
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp marking when the payment was executed. Null if payment hasn't occurred yet."
          },
          "payment_intent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier for an payment intent."
          },
          "payment_intent_status": {
            "type": "string",
            "description": "Raw status string of the external payment intent."
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method used or planned for the transaction."
          },
          "planned_payment_date": {
            "type": "string",
            "format": "date",
            "description": "Scheduled date for future payments, required when the payment is planned but not yet executed."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentReminder": {
        "properties": {
          "name": { "type": "string", "maxLength": 255, "minLength": 1 },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "term_1_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for first payment term"
          },
          "term_2_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for second payment term"
          },
          "term_final_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for final payment term"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "PaymentReminderResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the PaymentReminder was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the PaymentReminder was last updated. Timestamps follow the ISO 8601 standard."
          },
          "entity_id": { "type": "string", "format": "uuid" },
          "name": { "type": "string" },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "status": { "$ref": "#/components/schemas/StatusEnum" },
          "term_1_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for first payment term"
          },
          "term_2_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for second payment term"
          },
          "term_final_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for final payment term"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "entity_id",
          "name",
          "status"
        ]
      },
      "PaymentReminderUpdateRequest": {
        "properties": {
          "name": { "type": "string", "maxLength": 255, "minLength": 1 },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "term_1_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for first payment term"
          },
          "term_2_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for second payment term"
          },
          "term_final_reminder": {
            "allOf": [{ "$ref": "#/components/schemas/Reminder" }],
            "description": "Reminder to send for final payment term"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentRequirements": {
        "properties": {
          "current_deadline": { "type": "string", "format": "date-time" },
          "currently_due": { "items": { "type": "string" }, "type": "array" },
          "eventually_due": { "items": { "type": "string" }, "type": "array" },
          "pending_verification": {
            "items": { "type": "string" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currently_due", "eventually_due", "pending_verification"]
      },
      "PaymentTerms": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "description": {
            "type": "string",
            "description": "Description of the payment term."
          },
          "name": { "type": "string" },
          "term_1": {
            "allOf": [{ "$ref": "#/components/schemas/InlineTermDiscount" }],
            "description": "The first tier of the payment term. Represents the terms of the first early discount."
          },
          "term_2": {
            "allOf": [{ "$ref": "#/components/schemas/InlineTermDiscount" }],
            "description": "The second tier of the payment term. Defines the terms of the second early discount."
          },
          "term_final": {
            "allOf": [{ "$ref": "#/components/schemas/InlineTermFinal" }],
            "description": "The final tier of the payment term. Defines the invoice due date."
          }
        },
        "type": "object",
        "required": ["term_final"]
      },
      "PaymentTermsCreatePayload": {
        "properties": {
          "description": { "type": "string", "maxLength": 255 },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 },
          "term_1": {
            "allOf": [{ "$ref": "#/components/schemas/TermDiscountDays" }],
            "description": "The first tier of the payment term. Represents the terms of the first early discount."
          },
          "term_2": {
            "allOf": [{ "$ref": "#/components/schemas/TermDiscountDays" }],
            "description": "The second tier of the payment term. Defines the terms of the second early discount."
          },
          "term_final": {
            "allOf": [{ "$ref": "#/components/schemas/TermFinalDays" }],
            "description": "The final tier of the payment term. Defines the invoice due date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "term_final"]
      },
      "PaymentTermsListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PaymentTermsResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentTermsResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "description": { "type": "string" },
          "name": { "type": "string" },
          "term_1": {
            "allOf": [{ "$ref": "#/components/schemas/TermDiscountDays" }],
            "description": "The first tier of the payment term. Represents the terms of the first early discount."
          },
          "term_2": {
            "allOf": [{ "$ref": "#/components/schemas/TermDiscountDays" }],
            "description": "The second tier of the payment term. Defines the terms of the second early discount."
          },
          "term_final": {
            "allOf": [{ "$ref": "#/components/schemas/TermFinalDays" }],
            "description": "The final tier of the payment term. Defines the invoice due date."
          }
        },
        "type": "object",
        "required": ["id", "name", "term_final"]
      },
      "PaymentTermsUpdatePayload": {
        "properties": {
          "description": { "type": "string", "maxLength": 255 },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 },
          "term_1": {
            "allOf": [{ "$ref": "#/components/schemas/TermDiscountDays" }],
            "description": "The first tier of the payment term. Represents the terms of the first early discount."
          },
          "term_2": {
            "allOf": [{ "$ref": "#/components/schemas/TermDiscountDays" }],
            "description": "The second tier of the payment term. Defines the terms of the second early discount."
          },
          "term_final": {
            "allOf": [{ "$ref": "#/components/schemas/TermFinalDays" }],
            "description": "The final tier of the payment term. Defines the invoice due date."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PaymentsBatchPaymentRequest": {
        "properties": {
          "payer_bank_account_id": { "type": "string", "format": "uuid" },
          "payment_intents": {
            "items": { "$ref": "#/components/schemas/SinglePaymentIntent" },
            "type": "array",
            "minItems": 1
          },
          "payment_method": { "type": "string", "enum": ["us_ach"] }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payer_bank_account_id",
          "payment_intents",
          "payment_method"
        ]
      },
      "PaymentsBatchPaymentResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "error": { "type": "object" },
          "payer_bank_account_id": { "type": "string", "format": "uuid" },
          "payment_intents": {
            "items": {
              "$ref": "#/components/schemas/SinglePaymentIntentResponse"
            },
            "type": "array",
            "minItems": 1
          },
          "payment_method": { "type": "string", "enum": ["us_ach"] },
          "status": {
            "$ref": "#/components/schemas/PaymentsBatchPaymentStatus"
          },
          "total_amount": { "type": "integer" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "payer_bank_account_id",
          "payment_intents",
          "payment_method",
          "status"
        ]
      },
      "PaymentsBatchPaymentStatus": {
        "type": "string",
        "enum": [
          "created",
          "processing",
          "partially_successful",
          "succeeded",
          "failed"
        ]
      },
      "PaymentsSettings-Input": {
        "properties": {
          "payment_page_domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "payment_page_theme": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentPageTheme" },
              { "type": "null" }
            ]
          },
          "support_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "The support email address"
          }
        },
        "type": "object"
      },
      "PaymentsSettings-Output": {
        "properties": {
          "payment_page_domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "payment_page_theme": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentPageTheme" },
              { "type": "null" }
            ]
          },
          "support_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "The support email address"
          }
        },
        "type": "object"
      },
      "PermissionEnum": {
        "type": "string",
        "enum": ["allowed", "allowed_for_own", "not_allowed"]
      },
      "PermissionSchema-Input": {
        "properties": {
          "actions": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ActionSchema" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "List of actions"
          },
          "object_type": {
            "$ref": "#/components/schemas/PortalObjectType",
            "description": "Object type",
            "default": "project"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PermissionSchema-Output": {
        "properties": {
          "actions": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ActionSchema" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "List of actions"
          },
          "object_type": {
            "$ref": "#/components/schemas/PortalObjectType",
            "description": "Object type",
            "default": "project"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PersonAddressRequest": {
        "properties": {
          "city": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "City, district, suburb, town, or village"
          },
          "country": {
            "$ref": "#/components/schemas/AllowedCountries",
            "description": "Two-letter country code (ISO 3166-1 alpha-2)",
            "examples": ["DE"]
          },
          "line1": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "description": "Address line 1 (e.g., street, PO Box, or company name)"
          },
          "line2": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "minLength": 1,
            "description": "ZIP or postal code"
          },
          "state": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "State, county, province, or region"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"]
      },
      "PersonAddressResponse": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City, district, suburb, town, or village"
          },
          "country": {
            "type": "string",
            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (e.g., street, PO Box, or company name)"
          },
          "line2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)"
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code"
          },
          "state": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "State, county, province, or region"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"]
      },
      "PersonOnboardingDocumentsPayload": {
        "properties": {
          "additional_verification_document_back": {
            "type": "string",
            "format": "uuid"
          },
          "additional_verification_document_front": {
            "type": "string",
            "format": "uuid"
          },
          "verification_document_back": { "type": "string", "format": "uuid" },
          "verification_document_front": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PersonRelationshipRequest": {
        "properties": {
          "director": {
            "type": "boolean",
            "description": "Whether the person is a director of the account's legal entity",
            "default": false
          },
          "executive": {
            "type": "boolean",
            "description": "Whether the person has significant responsibility to control, manage, or direct the organization",
            "default": false
          },
          "owner": {
            "type": "boolean",
            "description": "Whether the person is an owner of the account's legal entity",
            "default": false
          },
          "percent_ownership": {
            "anyOf": [
              { "type": "number", "maximum": 100.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "description": "The percent owned by the person of the account's legal entity"
          },
          "representative": {
            "type": "boolean",
            "description": "Whether the person is authorized as the primary representative of the account",
            "default": false
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The person's title (e.g., CEO, Support Engineer)"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PersonRelationshipResponse": {
        "properties": {
          "director": {
            "type": "boolean",
            "description": "Whether the person is a director of the account's legal entity",
            "default": false
          },
          "executive": {
            "type": "boolean",
            "description": "Whether the person has significant responsibility to control, manage, or direct the organization",
            "default": false
          },
          "owner": {
            "type": "boolean",
            "description": "Whether the person is an owner of the account's legal entity",
            "default": false
          },
          "percent_ownership": {
            "anyOf": [
              { "type": "number", "maximum": 100.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "description": "The percent owned by the person of the account's legal entity"
          },
          "representative": {
            "type": "boolean",
            "description": "Whether the person is authorized as the primary representative of the account",
            "default": false
          },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The person's title (e.g., CEO, Support Engineer)"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PersonRequest": {
        "properties": {
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/PersonAddressRequest" },
              { "type": "null" }
            ],
            "description": "The person's address"
          },
          "citizenship": {
            "anyOf": [
              { "$ref": "#/components/schemas/AllowedCountries" },
              { "type": "null" }
            ],
            "description": "Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any.",
            "examples": ["DE"]
          },
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "description": "The person's date of birth"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address"
          },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "The person's first name"
          },
          "id_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The person's ID number, as appropriate for their country"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "The person's last name"
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The person's phone number"
          },
          "relationship": {
            "$ref": "#/components/schemas/PersonRelationshipRequest",
            "description": "Describes the person's relationship to the entity"
          },
          "ssn_last_4": {
            "anyOf": [
              { "type": "string", "maxLength": 4, "minLength": 4 },
              { "type": "null" }
            ],
            "description": "The last four digits of the person's Social Security number"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "first_name", "last_name", "relationship"]
      },
      "PersonResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The person's unique identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the person was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the person was updated"
          },
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/PersonAddressResponse" },
              { "type": "null" }
            ],
            "description": "The person's address"
          },
          "citizenship": {
            "anyOf": [
              { "$ref": "#/components/schemas/AllowedCountries" },
              { "type": "null" }
            ],
            "description": "Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any.",
            "examples": ["DE"]
          },
          "created_by_entity_user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "description": "ID of the entity user who created this person, or null if the person was created using a partner access token."
          },
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "description": "The person's date of birth"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity ID"
          },
          "first_name": {
            "type": "string",
            "description": "The person's first name"
          },
          "id_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The person's ID number, as appropriate for their country"
          },
          "last_name": {
            "type": "string",
            "description": "The person's last name"
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The person's phone number"
          },
          "relationship": {
            "$ref": "#/components/schemas/PersonRelationshipResponse",
            "description": "Describes the person's relationship to the entity"
          },
          "ssn_last_4": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The last four digits of the person's Social Security number"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "created_by_entity_user_id",
          "email",
          "entity_id",
          "first_name",
          "last_name",
          "relationship"
        ]
      },
      "PersonsResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PersonResponse" },
            "type": "array",
            "description": "array of objects of type person"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "PhoneNumberVerificationCheckPayload": {
        "properties": {
          "code": {
            "type": "string",
            "description": "Verification code received on phone number"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of person attached to onboarding link"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code"]
      },
      "Platform": {
        "type": "string",
        "enum": [
          "xero",
          "quickbooks",
          "quickbooks_online",
          "quickbooks_online_sandbox"
        ]
      },
      "PortalActionEnum": {
        "type": "string",
        "enum": ["create", "read", "update", "delete"]
      },
      "PortalBizObjectsSchema-Input": {
        "properties": {
          "objects": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PermissionSchema-Input"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "List of objects"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PortalBizObjectsSchema-Output": {
        "properties": {
          "objects": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PermissionSchema-Output"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "List of objects"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PortalObjectType": {
        "type": "string",
        "enum": [
          "company",
          "user",
          "project",
          "project_settings",
          "secret",
          "role"
        ]
      },
      "PortalPermissionEnum": {
        "type": "string",
        "enum": ["allowed", "allowed_for_own", "not_allowed"]
      },
      "PortalUserProfileResponseWithOptionalRole": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "avatar": {
            "anyOf": [
              { "$ref": "#/components/schemas/FileSchema3" },
              { "type": "null" }
            ]
          },
          "company": { "$ref": "#/components/schemas/CompanyResponse" },
          "email": { "type": "string", "format": "email" },
          "fullname": { "type": "string" },
          "role_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ]
          },
          "status": { "$ref": "#/components/schemas/PortalUserStatus" }
        },
        "type": "object",
        "required": ["id", "company", "email", "fullname", "role_id", "status"]
      },
      "PortalUserStatus": {
        "type": "string",
        "enum": ["sent_confirmation", "active", "deleted", "archived"]
      },
      "PreviewSchema": {
        "properties": {
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "examples": [400]
          },
          "url": {
            "type": "string",
            "description": "The image URL.",
            "examples": ["https://bucketname.s3.amazonaws.com/1/2/3.png"]
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "examples": [200]
          }
        },
        "type": "object",
        "required": ["height", "url", "width"],
        "description": "A preview image generated for a file."
      },
      "PreviewSchema2": {
        "properties": {
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "example": 400
          },
          "url": {
            "type": "string",
            "description": "The image URL.",
            "example": "https://bucketname.s3.amazonaws.com/1/2/3.png"
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "example": 200
          }
        },
        "type": "object",
        "required": ["url", "width", "height"],
        "description": "A preview image generated for a file."
      },
      "PreviewSchema3": {
        "properties": {
          "height": {
            "type": "integer",
            "description": "The image height in pixels.",
            "example": 400
          },
          "url": {
            "type": "string",
            "description": "The image URL.",
            "example": "https://bucketname.s3.amazonaws.com/1/2/3.png"
          },
          "width": {
            "type": "integer",
            "description": "The image width in pixels.",
            "example": 200
          }
        },
        "type": "object",
        "required": ["height", "url", "width"],
        "description": "A preview image generated for a file."
      },
      "PreviewTemplateRequest": {
        "properties": {
          "body": {
            "type": "string",
            "description": "Body text of the template"
          },
          "document_type": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentObjectTypeRequestEnum" }
            ],
            "description": "Document type of content"
          },
          "language_code": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "Lowercase ISO code of language"
          },
          "subject": {
            "type": "string",
            "description": "Subject text of the template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body", "document_type", "language_code", "subject"]
      },
      "PreviewTemplateResponse": {
        "properties": {
          "body_preview": { "type": "string" },
          "subject_preview": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_preview", "subject_preview"]
      },
      "Price": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set."
          },
          "value": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual price of the product."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency", "value"]
      },
      "Price2": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set."
          },
          "value": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual price of the product."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency", "value"]
      },
      "PriceFloat": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set."
          },
          "value": {
            "type": "number",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The actual price of the product."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["currency", "value"]
      },
      "PricingPlan": {
        "properties": {
          "advance_rate_percentage": {
            "type": "integer",
            "description": "Advance rate percentage. 10000 means 100%"
          },
          "fee_percentage": {
            "type": "integer",
            "description": "Transaction fee percentage. 300 means 3.00%"
          },
          "repayment_duration_days": {
            "type": "integer",
            "description": "This amount of days after which the repayment duration is due. This is only applicable for FIXED_DURATION repayment type"
          },
          "repayment_type": {
            "allOf": [{ "$ref": "#/components/schemas/WCRepaymentType" }],
            "description": "Repayment type of the loan."
          }
        },
        "type": "object",
        "required": [
          "advance_rate_percentage",
          "fee_percentage",
          "repayment_type"
        ],
        "description": "A pricing plan of a financing offer"
      },
      "ProcessResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "created_by": { "type": "string", "format": "uuid" },
          "error": {
            "type": "object",
            "description": "The error for the process."
          },
          "input": {
            "type": "object",
            "description": "The input for the script."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata for the process."
          },
          "script_snapshot": {
            "anyOf": [
              { "type": "boolean" },
              { "type": "number" },
              { "type": "string" },
              { "items": {}, "type": "array" },
              { "type": "object" }
            ],
            "description": "The script snapshot taken when script started."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/ProcessStatusEnum" }],
            "description": "Tthe current status of the approval policy process."
          },
          "updated_by": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": ["id", "created_at", "input", "metadata", "status"]
      },
      "ProcessStatusEnum": {
        "type": "string",
        "enum": [
          "succeeded",
          "waiting",
          "failed",
          "running",
          "canceled",
          "timed_out"
        ]
      },
      "ProductCursorFields": { "type": "string", "enum": ["name"] },
      "ProductServicePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ProductServiceResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of products and services"
      },
      "ProductServiceRequest": {
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 2000,
            "description": "Description of the product."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog.",
            "examples": ["HT-1234-S-BL", "SERVICE-67890"]
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "Name of the product."
          },
          "price": { "$ref": "#/components/schemas/Price2" },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "ProductServiceResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the product."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the product was last updated. Timestamps follow the ISO 8601 standard."
          },
          "description": {
            "type": "string",
            "description": "Description of the product."
          },
          "entity_id": { "type": "string", "format": "uuid" },
          "entity_user_id": { "type": "string", "format": "uuid" },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog.",
            "examples": ["HT-1234-S-BL", "SERVICE-67890"]
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "name": { "type": "string", "description": "Name of the product." },
          "price": { "$ref": "#/components/schemas/Price2" },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates.",
            "default": "product"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "entity_id", "name"]
      },
      "ProductServiceTypeEnum": {
        "type": "string",
        "enum": ["product", "service"]
      },
      "ProductServiceUpdate": {
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "Description of the product."
          },
          "external_reference": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog.",
            "examples": ["HT-1234-S-BL", "SERVICE-67890"]
          },
          "ledger_account_id": { "type": "string", "format": "uuid" },
          "measure_unit_id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms)."
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "Name of the product."
          },
          "price": { "$ref": "#/components/schemas/Price2" },
          "smallest_amount": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The smallest amount allowed for this product."
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ProductServiceTypeEnum" }
            ],
            "description": "Specifies whether this offering is a product or service. This may affect the applicable tax rates."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ProfileAvatarUpdateResponse": {
        "properties": {
          "avatar": { "$ref": "#/components/schemas/FileSchema3" }
        },
        "type": "object",
        "required": ["avatar"]
      },
      "ProjectCreateRequest": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]+$",
            "description": "Project code"
          },
          "color": {
            "type": "string",
            "maxLength": 128,
            "description": "Project color"
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "description": "Description of project"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "Project end date"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The project name.",
            "example": "Marketing"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent project ID"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Project metadata"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "Project start date"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this project.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "ProjectCursorFields": { "type": "string", "enum": ["id", "created_at"] },
      "ProjectPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ProjectResource" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of projects."
      },
      "ProjectResource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this project."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Project created at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last time project was updated at"
          },
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]+$",
            "description": "Project code"
          },
          "color": {
            "type": "string",
            "maxLength": 128,
            "description": "Project color"
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Project created by entity user"
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "description": "Description of project"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "Project end date"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity to which the project was issued."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The project name.",
            "example": "Marketing"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent project ID"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Project metadata"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "Project start date"
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "A list of user-defined tags (labels) assigned to this project."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "created_at", "updated_at", "entity_id", "name"]
      },
      "ProjectUpdateRequest": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9]+$",
            "description": "Project code"
          },
          "color": {
            "type": "string",
            "maxLength": 128,
            "description": "Project color"
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "description": "Description of project"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "Project end date"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The project name.",
            "example": "Marketing"
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent project ID"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Project metadata"
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "Project start date"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this project.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "PromptCreateRequest": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 512,
            "description": "Text of the saved prompt"
          }
        },
        "type": "object",
        "required": ["content"]
      },
      "PromptResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "content": {
            "type": "string",
            "maxLength": 512,
            "description": "Text of the saved prompt"
          }
        },
        "type": "object",
        "required": ["id", "content", "created_at"]
      },
      "PromptResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/PromptResource" },
            "type": "array",
            "description": "List of saved prompts"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          }
        },
        "type": "object",
        "required": ["data", "prev_pagination_token", "next_pagination_token"]
      },
      "PromptUpdateRequest": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 512,
            "description": "Text of the saved prompt"
          }
        },
        "type": "object",
        "required": ["content"]
      },
      "Provider": {
        "type": "string",
        "enum": ["stripe", "airwallex", "airwallex_component"]
      },
      "PsuIdentification": {
        "properties": {
          "type": { "$ref": "#/components/schemas/PsuIdentificationType" },
          "value": {
            "type": "string",
            "description": "PSU identification type value."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["type", "value"]
      },
      "PsuIdentificationType": {
        "type": "string",
        "enum": ["psu_id", "psu_corporate_id", "psu_ip_address"]
      },
      "PublicPaymentLinkResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "amount": { "type": "integer" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "expires_at": { "type": "string", "format": "date-time" },
          "invoice": { "$ref": "#/components/schemas/Invoice" },
          "payer": { "$ref": "#/components/schemas/PayerAccountResponse" },
          "payment_intent": { "$ref": "#/components/schemas/PaymentIntent" },
          "payment_intent_id": { "type": "string", "format": "uuid" },
          "payment_methods": { "items": { "type": "string" }, "type": "array" },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "payment_reference": { "type": "string" },
          "recipient": {
            "$ref": "#/components/schemas/RecipientAccountResponse"
          },
          "return_url": {
            "type": "string",
            "description": "The URL where to redirect the payer after the payment. If `return_url` is specified, then after the payment is completed the payment page will display the \"Return to platform\" link that navigates to this URL.",
            "example": "https://pay.example.com/complete"
          },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": [
          "id",
          "amount",
          "currency",
          "expires_at",
          "payment_intent_id",
          "payment_methods",
          "payment_page_url",
          "recipient",
          "status"
        ]
      },
      "PurchaseOrderCounterpartAddressSchema": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"],
        "description": "Address information."
      },
      "PurchaseOrderCounterpartIndividualResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The person's email address.",
            "example": "asingh@example.net"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's first name.",
            "example": "Adnan"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "description": "The person's last name.",
            "example": "Singh"
          },
          "phone": {
            "type": "string",
            "description": "The person's phone number.",
            "example": "5553211234"
          },
          "title": {
            "type": "string",
            "description": "The person's title or honorific. Examples: Mr., Ms., Dr., Prof.",
            "example": "Mr."
          }
        },
        "type": "object",
        "required": ["first_name", "is_customer", "is_vendor", "last_name"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "PurchaseOrderCounterpartIndividualRootResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "individual": {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartIndividualResponse"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate pdf documents for this counterpart."
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "individual", "type"],
        "description": "Represents counterparts that are individuals (natural persons)."
      },
      "PurchaseOrderCounterpartOrganizationResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the organization",
            "example": "acme@example.com"
          },
          "is_customer": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a customer."
          },
          "is_vendor": {
            "type": "boolean",
            "description": "Indicates if the counterpart is a vendor."
          },
          "legal_name": {
            "type": "string",
            "description": "The legal name of the organization.",
            "example": "Acme Inc."
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the organization",
            "example": "5551231234"
          }
        },
        "type": "object",
        "required": ["is_customer", "is_vendor", "legal_name"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "PurchaseOrderCounterpartOrganizationRootResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard."
          },
          "created_automatically": {
            "type": "boolean",
            "description": "`true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.",
            "default": false
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user ID of counterpart creator."
          },
          "default_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments."
          },
          "default_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the shipping address."
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language used to generate pdf documents for this counterpart."
          },
          "organization": {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartOrganizationResponse"
          },
          "reminders_enabled": { "type": "boolean" },
          "tax_id": {
            "type": "string",
            "maxLength": 30,
            "description": "The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The counterpart type: `organization` (juridical person) or `individual` (natural person)."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "organization", "type"],
        "description": "Represents counterparts that are organizations (juridical persons)."
      },
      "PurchaseOrderCounterpartSchema": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartIndividualRootResponse"
          },
          {
            "$ref": "#/components/schemas/PurchaseOrderCounterpartOrganizationRootResponse"
          }
        ],
        "description": "A Counterpart object contains information about an organization (juridical person) or\nindividual (natural person) that provides goods and services to or buys them from an\n[SME](https://docs.monite.com/docs/glossary#sme)."
      },
      "PurchaseOrderCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "PurchaseOrderEmailPreviewRequest": {
        "properties": {
          "body_text": { "type": "string" },
          "subject_text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_text", "subject_text"],
        "description": "A schema for request for preview of purchase order email"
      },
      "PurchaseOrderEmailPreviewResponse": {
        "properties": {
          "body_preview": { "type": "string" },
          "subject_preview": { "type": "string" }
        },
        "type": "object",
        "required": ["body_preview", "subject_preview"],
        "description": "A schema for returning a response for email preview"
      },
      "PurchaseOrderEmailSentResponse": {
        "properties": { "mail_id": { "type": "string", "format": "uuid" } },
        "type": "object",
        "required": ["mail_id"],
        "description": "A schema for returning a response an email with a link to purchase order document has been sent"
      },
      "PurchaseOrderItem": {
        "properties": {
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set."
          },
          "name": {
            "type": "string",
            "description": "The name of the product to purchase"
          },
          "price": {
            "type": "integer",
            "description": "The subtotal cost (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "quantity": {
            "type": "integer",
            "description": "Number (quantity) of products"
          },
          "unit": {
            "type": "string",
            "description": "Units (hours, meters, unit)"
          },
          "vat_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "currency",
          "name",
          "price",
          "quantity",
          "unit",
          "vat_rate"
        ]
      },
      "PurchaseOrderPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderResponseSchema"
            },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of purchase orders."
      },
      "PurchaseOrderPayloadSchema": {
        "properties": {
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart unique ID."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set. (all items need to have the same currency)"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID identifier that applied to purchase order"
          },
          "items": {
            "items": { "$ref": "#/components/schemas/PurchaseOrderItem" },
            "type": "array",
            "description": "List of item to purchase"
          },
          "message": {
            "type": "string",
            "description": "Msg which will be send to counterpart for who the purchase order is issued."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "Project id of a purchase order"
          },
          "valid_for_days": {
            "type": "integer",
            "minimum": 1.0,
            "description": "Number of days for which purchase order is valid"
          }
        },
        "type": "object",
        "required": [
          "counterpart_id",
          "currency",
          "items",
          "message",
          "valid_for_days"
        ],
        "description": "Represents an Accounts Purchase Order document created by entity."
      },
      "PurchaseOrderResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID assigned to this purchase order."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "counterpart": {
            "allOf": [
              { "$ref": "#/components/schemas/PurchaseOrderCounterpartSchema" }
            ],
            "description": "Counterpart information about an organization (juridical person) or individual (natural person) that provides goods and services to or buys them from an"
          },
          "counterpart_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PurchaseOrderCounterpartAddressSchema"
              }
            ],
            "description": "Counterpart address data saved on creation or update of the purchase order."
          },
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart unique ID."
          },
          "created_by_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the creator of the purchase order"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency in which the price of the product is set. (all items need to have the same currency)"
          },
          "document_id": { "type": "string" },
          "entity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PayableEntityIndividualResponse"
              },
              {
                "$ref": "#/components/schemas/PayableEntityOrganizationResponse"
              }
            ],
            "description": "Data of the entity (address, name, contact)"
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the entity which issued the purchase order."
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/PurchaseOrderVatId"
          },
          "file_id": { "type": "string", "format": "uuid" },
          "file_url": { "type": "string" },
          "issued_at": {
            "type": "string",
            "format": "date",
            "description": "When status changed from 'draft' to 'send', so after sending purchase order"
          },
          "items": {
            "items": { "$ref": "#/components/schemas/PurchaseOrderItem" },
            "type": "array",
            "description": "List of item to purchase"
          },
          "message": {
            "type": "string",
            "description": "Msg which will be send to counterpart for who the purchase order is issued."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "Project id of a purchase order"
          },
          "status": {
            "type": "string",
            "description": "Purchase order can be in 'draft' state before sending it to counterpart. After that state is 'issued'"
          },
          "valid_for_days": {
            "type": "integer",
            "minimum": 1.0,
            "description": "Number of days for which purchase order is valid"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "counterpart",
          "counterpart_id",
          "currency",
          "document_id",
          "entity",
          "entity_id",
          "items",
          "message",
          "status",
          "valid_for_days"
        ],
        "description": "Represents response for an Accounts Purchase Order document created by entity."
      },
      "PurchaseOrderStatusEnum": {
        "type": "string",
        "enum": ["draft", "issued"]
      },
      "PurchaseOrderVatId": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "country": { "type": "string" },
          "entity_id": { "type": "string", "format": "uuid" },
          "type": { "type": "string" },
          "value": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "country", "entity_id", "type", "value"]
      },
      "QuoteAcceptRequest": {
        "properties": {
          "signature": {
            "allOf": [{ "$ref": "#/components/schemas/Signature" }],
            "description": "A digital signature, if required for quote acceptance"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "QuoteRenderingSettings": {
        "properties": {
          "display_signature": {
            "type": "boolean",
            "description": "If set to `true`, the signature field will be displayed on the quote PDF.",
            "default": false
          }
        },
        "type": "object"
      },
      "QuoteResponsePayload": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard."
          },
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "based_on_document_id": {
            "type": "string",
            "description": "The unique document ID of a previous document related to the receivable if applicable."
          },
          "comment": {
            "type": "string",
            "description": "Field with a comment on why the client declined this Quote"
          },
          "commercial_condition_description": {
            "type": "string",
            "description": "The commercial terms of the receivable (e.g. The products must be delivered in X days)."
          },
          "counterpart_billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact2" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_external_reference": {
            "type": "string",
            "description": "The external reference of the counterpart."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_name": {
            "type": "string",
            "description": "A legal name of a counterpart it is an organization or first and last name if it is an individual"
          },
          "counterpart_shipping_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_tax_id": {
            "type": "string",
            "description": "The VAT/TAX ID of the counterpart."
          },
          "counterpart_type": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartType" }],
            "description": "The type of the counterpart."
          },
          "counterpart_vat_id": {
            "$ref": "#/components/schemas/ReceivableCounterpartVatIDResponse"
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "The currency used in the receivable."
          },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountResponse2" }],
            "description": "The discount for a receivable."
          },
          "discounted_subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "document_id": {
            "type": "string",
            "description": "The sequential code systematically assigned to invoices."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Optional field representing date until which invoice should be paid"
          },
          "einvoice_file_url": {
            "type": "string",
            "description": "E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`."
          },
          "entity": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEntityOrganization" },
              { "$ref": "#/components/schemas/ReceivableEntityIndividual" }
            ]
          },
          "entity_address": {
            "$ref": "#/components/schemas/ReceivableEntityAddressSchema"
          },
          "entity_bank_account": {
            "$ref": "#/components/schemas/ReceivablesRepresentationOfEntityBankAccount2"
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "The entity user who created this document."
          },
          "entity_vat_id": {
            "$ref": "#/components/schemas/ReceivableEntityVatIDResponse"
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated."
          },
          "file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the counterpart's default language."
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "Optional field for the issue of the entry."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/ResponseItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable."
          },
          "original_file_language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated."
          },
          "original_file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the entity's default language."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "signature_required": {
            "type": "boolean",
            "description": "Whether acceptance a quote requires a signature."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/QuoteStateEnum" }],
            "description": "The status of the Quote inside the receivable workflow."
          },
          "subtotal": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "subtotal_after_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array",
            "description": "The list of tags for this receivable.",
            "default": []
          },
          "total_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.",
            "default": 0
          },
          "total_vat_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_vat_amounts": {
            "items": { "$ref": "#/components/schemas/TotalVatAmountItem2" },
            "type": "array",
            "description": "List of total vat amount for each VAT, presented in receivable"
          },
          "total_withholding_tax": {
            "type": "integer",
            "description": "Total price of the receivable with tax withheld in minor units"
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "type": {
            "type": "string",
            "enum": ["quote"],
            "description": "The type of the document uploaded."
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "vat_inclusive_discount_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.",
            "default": "exclusive"
          },
          "vat_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Defines whether the prices of products in receivable will already include VAT or not.",
            "default": "exclusive"
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "counterpart_id",
          "counterpart_type",
          "currency",
          "entity",
          "entity_address",
          "file_language",
          "line_items",
          "original_file_language",
          "status",
          "total_vat_amount",
          "type"
        ]
      },
      "QuoteStateEnum": {
        "type": "string",
        "enum": [
          "draft",
          "issued",
          "accepted",
          "expired",
          "declined",
          "deleted"
        ]
      },
      "ReceiptAttachFile": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "ReceiptCreateSchema": {
        "properties": {
          "base64_encoded_file": {
            "type": "string",
            "description": "Base64-encoded contents of the original receipt file."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code used in the receipt.",
            "example": "EUR"
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "description": "Short transaction description.",
            "example": "Payment for lunch with clients"
          },
          "document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Unique receipt number assigned by the issuer.",
            "example": "DE2287"
          },
          "issued_at": {
            "type": "string",
            "format": "date-time",
            "description": "Receipt issued date and time."
          },
          "merchant_location": {
            "type": "string",
            "maxLength": 255,
            "description": "Location of the merchant.",
            "example": "West Street, London, UK"
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 128,
            "description": "Name of the merchant.",
            "example": "Tesco"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "total_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Total amount for the receipt in minor units (e.g. cents).",
            "example": 15000
          },
          "transaction_id": {
            "type": "string",
            "format": "uuid",
            "description": "Transaction ID."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceiptCursorFields": { "type": "string", "enum": ["id", "created_at"] },
      "ReceiptLineItemCreateSchema": {
        "properties": {
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Accounting tax rate ID."
          },
          "cost_center_id": {
            "type": "string",
            "format": "uuid",
            "description": "Cost center ID."
          },
          "general_ledger_id": {
            "type": "string",
            "format": "uuid",
            "description": "General ledger ID."
          },
          "name": {
            "type": "string",
            "description": "Line item name/description."
          },
          "total": {
            "type": "integer",
            "description": "Line item total in minor units."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceiptLineItemCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "ReceiptLineItemResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique line item ID."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Created at."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Updated at."
          },
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Accounting tax rate ID."
          },
          "cost_center_id": {
            "type": "string",
            "format": "uuid",
            "description": "Cost center ID."
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Created by user."
          },
          "name": { "type": "string", "description": "Line item name." },
          "receipt_id": {
            "type": "string",
            "format": "uuid",
            "description": "Receipt ID."
          },
          "total": { "type": "integer", "description": "Total." }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "created_at", "updated_at", "receipt_id"]
      },
      "ReceiptLineItemUpdateSchema": {
        "properties": {
          "accounting_tax_rate_id": {
            "type": "string",
            "format": "uuid",
            "description": "Accounting tax rate ID."
          },
          "cost_center_id": {
            "type": "string",
            "format": "uuid",
            "description": "Cost center ID."
          },
          "general_ledger_id": {
            "type": "string",
            "format": "uuid",
            "description": "General ledger ID."
          },
          "name": {
            "type": "string",
            "description": "Line item name/description."
          },
          "total": {
            "type": "integer",
            "description": "Line item total in minor units."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceiptLineItemsPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ReceiptLineItemResponseSchema"
            },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "Next page token."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "Previous page token."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "ReceiptOriginEnum": { "type": "string", "enum": ["upload", "email"] },
      "ReceiptPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ReceiptResponseSchema" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "Next page token."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "Previous page token."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "ReceiptResponseSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique receipt ID."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Update timestamp."
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity user who created."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code."
          },
          "currency_exchange": {
            "type": "object",
            "description": "Currency exchange details."
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "description": "Short transaction description.",
            "example": "Payment for lunch with clients"
          },
          "document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Receipt number."
          },
          "file_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the receipt file stored in the file saver.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "file_url": {
            "type": "string",
            "description": "The URL of the receipt file stored in the file saver."
          },
          "issued_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the receipt was issued."
          },
          "merchant_location": {
            "type": "string",
            "maxLength": 255,
            "description": "Merchant location."
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 128,
            "description": "Merchant name."
          },
          "ocr_request_id": {
            "type": "string",
            "format": "uuid",
            "description": "OCR request id."
          },
          "ocr_status": { "type": "string", "description": "OCR status." },
          "origin": {
            "allOf": [{ "$ref": "#/components/schemas/ReceiptOriginEnum" }],
            "description": "Specifies how this receipt was created in Monite."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Partner metadata."
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "The email address from which the invoice was sent to the entity.",
            "example": "hello@example.com"
          },
          "source_of_data": {
            "allOf": [
              { "$ref": "#/components/schemas/SourceOfReceiptDataEnum" }
            ],
            "description": "Source of data."
          },
          "total_amount": {
            "type": "integer",
            "description": "Total amount in minor units."
          },
          "transaction_id": {
            "type": "string",
            "format": "uuid",
            "description": "Transaction ID."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "origin"]
      },
      "ReceiptUpdateSchema": {
        "properties": {
          "base64_encoded_file": {
            "type": "string",
            "description": "Base64-encoded file contents."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "Currency code."
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "description": "Short transaction description.",
            "example": "Payment for lunch with clients"
          },
          "document_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Receipt number."
          },
          "issued_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the receipt was issued."
          },
          "merchant_location": {
            "type": "string",
            "maxLength": 255,
            "description": "Merchant location."
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 128,
            "description": "Merchant name."
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "total_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "Total amount."
          },
          "transaction_id": {
            "type": "string",
            "format": "uuid",
            "description": "Transaction ID."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceiptUploadFile": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "ReceivableCounterpartContact": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress"
              }
            ],
            "description": "The contact address of the counterpart"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The contact email of the counterpart.",
            "example": "marge@example.org"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the counterpart contact.",
            "example": "Marge"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the counterpart contact.",
            "example": "Smith"
          },
          "phone": {
            "type": "string",
            "description": "The contact phone number of the counterpart.",
            "example": "55512378654"
          },
          "title": {
            "type": "string",
            "description": "The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).",
            "example": "Dr."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address", "first_name", "last_name"]
      },
      "ReceivableCounterpartContact2": {
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRepresentationOfCounterpartAddress2"
              }
            ],
            "description": "The contact address of the counterpart"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The contact email of the counterpart.",
            "example": "marge@example.org"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the counterpart contact.",
            "example": "Marge"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the counterpart contact.",
            "example": "Smith"
          },
          "phone": {
            "type": "string",
            "description": "The contact phone number of the counterpart.",
            "example": "55512378654"
          },
          "title": {
            "type": "string",
            "description": "The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).",
            "example": "Dr."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address", "first_name", "last_name"]
      },
      "ReceivableCounterpartVatIDResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32, "example": "123456789" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "counterpart_id", "value"]
      },
      "ReceivableCreateBasedOnPayload": {
        "properties": {
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "The unique ID of a previous document related to the receivable if applicable."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable.",
            "default": []
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/BasedOnTransitionType" }],
            "description": "The type of a created receivable. Currently supported transitions:quote -> invoice; invoice -> credit_note"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["based_on", "type"]
      },
      "ReceivableCreatedEventData": {
        "properties": {},
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivableCursorFields": {
        "type": "string",
        "enum": [
          "counterpart_name",
          "counterpart_id",
          "amount",
          "total_amount",
          "discounted_subtotal",
          "status",
          "due_date",
          "issue_date",
          "document_id",
          "created_at",
          "project_id"
        ]
      },
      "ReceivableCursorFields2": {
        "type": "string",
        "enum": [
          "counterpart_name",
          "counterpart_id",
          "amount",
          "total_amount",
          "status",
          "due_date",
          "issue_date",
          "document_id",
          "created_at",
          "project_id"
        ]
      },
      "ReceivableDeclinePayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Field with a comment on why the client declined this Quote",
            "example": "The quote was declined for some reasons"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Payload for decline a Qoute with a comment"
      },
      "ReceivableDimensionEnum": {
        "type": "string",
        "enum": [
          "created_at",
          "status",
          "counterpart_id",
          "currency",
          "issue_date",
          "due_date",
          "project_id",
          "product_id"
        ]
      },
      "ReceivableEditFlow": {
        "type": "string",
        "enum": ["compliant", "partially_compliant", "non_compliant"]
      },
      "ReceivableEntityAddressSchema": {
        "properties": {
          "city": {
            "type": "string",
            "maxLength": 255,
            "description": "A city (a full name) where the entity is registered"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "A country name (as ISO code) where the entity is registered ",
            "default": "DE",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "maxLength": 255,
            "description": "A street where the entity is registered"
          },
          "line2": {
            "type": "string",
            "maxLength": 100,
            "description": "An alternative street used by the entity"
          },
          "postal_code": {
            "type": "string",
            "maxLength": 10,
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "type": "string",
            "description": "A state in a country where the entity is registered"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["city", "line1", "postal_code"],
        "description": "A schema represents address info of the entity"
      },
      "ReceivableEntityBase": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "type": "string",
            "description": "The registration authority of the entity"
          },
          "registration_number": {
            "type": "string",
            "description": "The registration number of the entity"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A base schemas for an entity"
      },
      "ReceivableEntityIndividual": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the entity issuing the receivable"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the entity issuing the receivable"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "type": "string",
            "description": "The registration authority of the entity"
          },
          "registration_number": {
            "type": "string",
            "description": "The registration number of the entity"
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "The entity type"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": ["first_name", "last_name", "type"],
        "description": "A Response schema for an entity of individual type"
      },
      "ReceivableEntityIndividualRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the entity issuing the receivable"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the entity issuing the receivable"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "type": "string",
            "description": "The registration authority of the entity"
          },
          "registration_number": {
            "type": "string",
            "description": "The registration number of the entity"
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["individual"],
            "description": "The entity type"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["first_name", "last_name", "type"],
        "description": "A Request schema for an entity of individual type"
      },
      "ReceivableEntityOrganization": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "name": {
            "type": "string",
            "description": "The name of the entity issuing the receivable, when it is an organization."
          },
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "type": "string",
            "description": "The registration authority of the entity"
          },
          "registration_number": {
            "type": "string",
            "description": "The registration number of the entity"
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "The entity type"
          },
          "vat_id": {
            "type": "string",
            "description": "The VAT ID of the entity issuing the receivable, when it is an organization."
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "description": "A Response schema for an entity of organization type"
      },
      "ReceivableEntityOrganizationRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email of the entity"
          },
          "logo": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A link to the entity logo"
          },
          "name": {
            "type": "string",
            "description": "The name of the entity issuing the receivable, when it is an organization."
          },
          "phone": {
            "type": "string",
            "description": "A phone number of the entity"
          },
          "registration_authority": {
            "type": "string",
            "description": "The registration authority of the entity"
          },
          "registration_number": {
            "type": "string",
            "description": "The registration number of the entity"
          },
          "tax_id": {
            "type": "string",
            "description": "The Tax ID of the entity issuing the receivable"
          },
          "type": {
            "type": "string",
            "enum": ["organization"],
            "description": "The entity type"
          },
          "website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "A website of the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "type"],
        "description": "A Request schema for an entity of organization type"
      },
      "ReceivableEntityVatIDResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "entity_id": { "type": "string", "format": "uuid" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/VatIDTypeEnum" }],
            "default": "unknown",
            "example": "eu_vat"
          },
          "value": { "type": "string", "maxLength": 32, "example": "123456789" }
        },
        "type": "object",
        "required": ["id", "country", "entity_id", "value"]
      },
      "ReceivableFacadeCreateInvoicePayload": {
        "properties": {
          "commercial_condition_description": { "type": "string" },
          "counterpart_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_einvoicing_credentials_id": {
            "type": "string",
            "format": "uuid",
            "description": "E-invoicing credentials ID of the counterpart"
          },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "counterpart_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a receivable."
          },
          "document_id": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "The document number of the receivable, which will appear in the PDF document. Can be set manually only in the [non-compliant mode](https://docs.monite.com/accounts-receivable/regulatory-compliance/invoice-compliance). Otherwise (or if omitted), it will be generated automatically based on the entity's [document number customization](https://docs.monite.com/advanced/document-number-customization) settings when the document is issued.",
            "examples": ["INV-0001", "2024-027", "CUST/2024/00027"]
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "entity": { "$ref": "#/components/schemas/ReceivableEntityBase" },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided. Can be a current, past, or future date.\n\nSome countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.\n\nIn countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user."
          },
          "is_einvoice": {
            "type": "boolean",
            "description": "Is this Invoice will be sent through E-invoice system",
            "default": false
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "network_credentials_id": {
            "type": "string",
            "format": "uuid",
            "description": "E-invoicing credentials ID of the entity"
          },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "Link to the invoice's payment page. Either Monite's payment links or your custom payment links."
          },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "payment_terms": {
            "$ref": "#/components/schemas/InlinePaymentTermsRequestPayload"
          },
          "payment_terms_id": { "type": "string", "format": "uuid" },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "purchase_order": {
            "type": "string",
            "maxLength": 100,
            "description": "Contain purchase order number."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable.",
            "default": []
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "type": {
            "type": "string",
            "enum": ["invoice"],
            "description": "The type of the document uploaded."
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "vat_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Defines whether the prices of products in receivable will already include VAT or not."
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "counterpart_billing_address_id",
          "counterpart_id",
          "currency",
          "line_items",
          "type"
        ]
      },
      "ReceivableFacadeCreatePayload": {
        "anyOf": [
          { "$ref": "#/components/schemas/ReceivableFacadeCreateQuotePayload" },
          {
            "$ref": "#/components/schemas/ReceivableFacadeCreateInvoicePayload"
          },
          { "$ref": "#/components/schemas/ReceivableCreateBasedOnPayload" }
        ],
        "additionalProperties": false
      },
      "ReceivableFacadeCreateQuotePayload": {
        "properties": {
          "commercial_condition_description": { "type": "string" },
          "counterpart_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_business_type": {
            "type": "string",
            "maxLength": 50,
            "description": "Different types of companies for different countries, ex. GmbH, SAS, SNC, etc."
          },
          "counterpart_id": { "type": "string", "format": "uuid" },
          "counterpart_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a receivable."
          },
          "document_id": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "description": "The document number of the receivable, which will appear in the PDF document. Can be set manually only in the [non-compliant mode](https://docs.monite.com/accounts-receivable/regulatory-compliance/invoice-compliance). Otherwise (or if omitted), it will be generated automatically based on the entity's [document number customization](https://docs.monite.com/advanced/document-number-customization) settings when the document is issued.",
            "examples": ["INV-0001", "2024-027", "CUST/2024/00027"]
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "entity": { "$ref": "#/components/schemas/ReceivableEntityBase" },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItem" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "signature_required": {
            "type": "boolean",
            "description": "Whether acceptance a quote requires a signature."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable.",
            "default": []
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "type": {
            "type": "string",
            "enum": ["quote"],
            "description": "The type of the document uploaded."
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "vat_mode": {
            "allOf": [{ "$ref": "#/components/schemas/VatModeEnum" }],
            "description": "Defines whether the prices of products in receivable will already include VAT or not."
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "counterpart_billing_address_id",
          "counterpart_id",
          "currency",
          "line_items",
          "type"
        ]
      },
      "ReceivableFileUrl": {
        "properties": {
          "file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the counterpart's default language."
          },
          "original_file_url": {
            "type": "string",
            "description": "The receivable's PDF URL in the entity's default language."
          }
        },
        "type": "object"
      },
      "ReceivableHistoryCursorFields": {
        "type": "string",
        "enum": ["timestamp"]
      },
      "ReceivableHistoryEventTypeEnum": {
        "type": "string",
        "enum": [
          "status_changed",
          "receivable_created",
          "receivable_updated",
          "based_on_receivable_created",
          "payment_received",
          "mail_sent",
          "payment_reminder_mail_sent",
          "overdue_reminder_mail_sent"
        ]
      },
      "ReceivableHistoryPaginationResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ReceivableHistoryResponse"
            },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of change history records."
      },
      "ReceivableHistoryResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of the history record.",
            "examples": ["cd58435b-1c79-4b17-9f79-f898c93e5f97"]
          },
          "current_pdf_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "A URL of the PDF file that shows the document state after the change. Available only for the following event types: `receivable_created`, `receivable_updated`, `status_changed`, and `payment_received`. In other event types the `current_pdf_url` value is `null`.\n\nIn `payment_received` events, the `current_pdf_url` value is available only in case of full payments and only if the entity setting `generate_paid_invoice_pdf` is `true`.\n\nNote that Monite generates PDFs asynchronously. This means that the initial value of `current_pdf_url` for the abovementioned events right after they occurred is usually `null` and the value gets populated later after the PDF document has been generated.",
            "examples": [
              "https://monite-file-saver.example.com/12345/67890.pdf"
            ]
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who made the change or trigger the event, or `null` if it was done by using a partner access token.",
            "examples": ["d5a577b0-01c0-4566-ac5c-44f41935e8c4"]
          },
          "event_data": {
            "anyOf": [
              { "$ref": "#/components/schemas/StatusChangedEventData" },
              { "$ref": "#/components/schemas/ReceivableUpdatedEventData" },
              { "$ref": "#/components/schemas/ReceivableCreatedEventData" },
              {
                "$ref": "#/components/schemas/BasedOnReceivableCreatedEventData"
              },
              { "$ref": "#/components/schemas/PaymentReceivedEventData" },
              { "$ref": "#/components/schemas/MailSentEventData" },
              { "$ref": "#/components/schemas/ReminderMailSentEventData" }
            ],
            "description": "An object containing additional information about the event or change. The object structure varies based on the `event_type`. In `receivable_created` and `receivable_updated` events, `event_data` is an empty object `{}`."
          },
          "event_type": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableHistoryEventTypeEnum" }
            ],
            "description": "The type of the event or change. See [Event types](https://docs.monite.com/accounts-receivable/document-history#event-types)."
          },
          "receivable_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the receivable document that was changed or triggered an event.",
            "examples": ["f669a8a4-0563-4ab9-b54f-e9d700d282c5"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "UTC date and time when the event or change occurred."
          }
        },
        "type": "object",
        "required": [
          "id",
          "event_data",
          "event_type",
          "receivable_id",
          "timestamp"
        ],
        "description": "Represents an entry in the change history of an accounts receivable document."
      },
      "ReceivableMailCursorFields": {
        "type": "string",
        "enum": ["status", "created_at", "updated_at"]
      },
      "ReceivableMailPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ReceivableMailResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "ReceivableMailRecipientState": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email address of the recipient."
          },
          "error": {
            "type": "string",
            "description": "An error message in case the mailing was unsuccessful."
          },
          "is_success": {
            "type": "boolean",
            "description": "Whether mail was sent successfully."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "is_success"]
      },
      "ReceivableMailRecipients": {
        "properties": {
          "bcc": {
            "items": {
              "$ref": "#/components/schemas/ReceivableMailRecipientState"
            },
            "type": "array"
          },
          "cc": {
            "items": {
              "$ref": "#/components/schemas/ReceivableMailRecipientState"
            },
            "type": "array"
          },
          "to": {
            "items": {
              "$ref": "#/components/schemas/ReceivableMailRecipientState"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivableMailResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the mail task was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the mail task was updated"
          },
          "recipients": {
            "$ref": "#/components/schemas/ReceivableMailRecipients"
          },
          "status": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableMailStatusEnum" }
            ],
            "description": "The status of the mail sent by receivable"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "status"]
      },
      "ReceivableMailStatusEnum": {
        "type": "string",
        "enum": ["pending", "processing", "sent", "partially_sent", "failed"]
      },
      "ReceivableMetricEnum": {
        "type": "string",
        "enum": ["id", "total_amount", "product_amount", "product_quantity"]
      },
      "ReceivablePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/ReceivableResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of receivables"
      },
      "ReceivablePaidPayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Optional comment explaining how the payment was made."
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the invoice was paid."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivablePartiallyPaidPayload": {
        "properties": {
          "amount_paid": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 1.0,
            "description": "How much has been paid on the invoice (in minor units)."
          },
          "comment": {
            "type": "string",
            "description": "Optional comment explaining how the payment was made."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount_paid"]
      },
      "ReceivablePreviewRequest": {
        "properties": {
          "body_text": {
            "type": "string",
            "minLength": 1,
            "description": "Body text of the content"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "Language code for localization purposes",
            "default": "en"
          },
          "subject_text": {
            "type": "string",
            "minLength": 1,
            "description": "Subject text of the content"
          },
          "type": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivablesPreviewTypeEnum" }
            ],
            "description": "The type of the preview document.",
            "default": "receivable"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_text", "subject_text"],
        "description": "A schema for receiving a request for previewing an email with a receivable document"
      },
      "ReceivablePreviewResponse": {
        "properties": {
          "body_preview": { "type": "string" },
          "subject_preview": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_preview", "subject_preview"],
        "description": "A schema for receiving a request for previewing an email with a receivable document"
      },
      "ReceivableRequiredFields": {
        "properties": {
          "counterpart": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartFields" }],
            "description": "Object describing the required fields for counterpart",
            "default": {
              "tax_id": {
                "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.",
                "required": false
              },
              "vat_id": {
                "description": "The counterpart's VAT (Value Added Tax) identification number. This field is required for counterparts that are VAT-registered.",
                "required": false
              }
            }
          },
          "entity": {
            "allOf": [{ "$ref": "#/components/schemas/EntityFields" }],
            "description": "Object describing the required fields for entity",
            "default": {
              "tax_id": {
                "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.",
                "required": false
              },
              "vat_id": {
                "description": "The entity's VAT (Value Added Tax) identification number. This field is required for entities that are VAT-registered.",
                "required": false
              }
            }
          },
          "line_item": {
            "allOf": [{ "$ref": "#/components/schemas/LineItemFields" }],
            "description": "Object describing the required fields for line items",
            "default": {
              "measure_unit": {
                "description": "Unit used to measure the quantity of the product (e.g. items, meters, kilograms)",
                "required": false
              },
              "tax_rate_value": {
                "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries.",
                "required": false
              },
              "vat_rate_id": {
                "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.",
                "required": false
              }
            }
          }
        },
        "additionalProperties": false,
        "type": "object",
        "examples": [
          {
            "line_item": {
              "vat_rate_id": {
                "required": true,
                "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan."
              },
              "tax_rate_value": {
                "required": false,
                "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries."
              },
              "measure_unit": {
                "required": true,
                "description": "Unit used to measure the quantity of the product (e.g. items, meters, kilograms)"
              }
            },
            "entity": {
              "tax_id": {
                "required": false,
                "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
              },
              "vat_id": {
                "required": true,
                "description": "The entity's VAT (Value Added Tax) identification number. This field is required for entities that are VAT-registered."
              }
            },
            "counterpart": {
              "tax_id": {
                "required": false,
                "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered."
              },
              "vat_id": {
                "required": true,
                "description": "The counterpart's VAT (Value Added Tax) identification number. This field is required for counterparts that are VAT-registered."
              }
            }
          }
        ]
      },
      "ReceivableResponse": {
        "anyOf": [
          { "$ref": "#/components/schemas/QuoteResponsePayload" },
          { "$ref": "#/components/schemas/InvoiceResponsePayload" },
          { "$ref": "#/components/schemas/CreditNoteResponsePayload" }
        ]
      },
      "ReceivableSendRequest": {
        "properties": {
          "body_text": {
            "type": "string",
            "minLength": 1,
            "description": "Body text of the content"
          },
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "subject_text": {
            "type": "string",
            "minLength": 1,
            "description": "Subject text of the content"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_text", "subject_text"],
        "description": "A schema for receiving a request for sending a receivable"
      },
      "ReceivableSendResponse": {
        "properties": { "mail_id": { "type": "string", "format": "uuid" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["mail_id"],
        "description": "A schema for returning a response an email with a link to receivable document has been sent"
      },
      "ReceivableSendTestReminderPayload": {
        "properties": {
          "recipients": { "$ref": "#/components/schemas/Recipients" },
          "reminder_type": {
            "allOf": [{ "$ref": "#/components/schemas/ReminderTypeEnum" }],
            "description": "The type of the reminder to be sent."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["reminder_type"],
        "description": "Payload for sending a test reminder email"
      },
      "ReceivableSettings": {
        "properties": {
          "create_without_personal_info": { "type": "boolean" },
          "deduction_title": {
            "anyOf": [
              { "type": "string", "maxLength": 32, "minLength": 1 },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["create_without_personal_info"]
      },
      "ReceivableTemplatesVariable": {
        "properties": {
          "description": { "type": "string" },
          "name": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["description", "name"]
      },
      "ReceivableTemplatesVariablesObject": {
        "properties": {
          "object_subtype": { "$ref": "#/components/schemas/VariablesType" },
          "object_type": { "type": "string" },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/ReceivableTemplatesVariable"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object_subtype", "object_type", "variables"]
      },
      "ReceivableTemplatesVariablesObjectList": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ReceivableTemplatesVariablesObject"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "ReceivableType": {
        "type": "string",
        "enum": ["quote", "invoice", "credit_note"]
      },
      "ReceivableUncollectiblePayload": {
        "properties": {
          "comment": {
            "type": "string",
            "description": "Optional comment explains why the Invoice goes uncollectible."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivableUpdatePayload": {
        "anyOf": [
          { "$ref": "#/components/schemas/UpdateQuotePayload" },
          { "$ref": "#/components/schemas/UpdateInvoicePayload" },
          { "$ref": "#/components/schemas/UpdateCreditNotePayload" },
          { "$ref": "#/components/schemas/UpdateIssuedInvoicePayload" }
        ],
        "additionalProperties": false
      },
      "ReceivableUpdatedEventData": {
        "properties": {},
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivablesAnalyticsDataPoint": {
        "properties": {
          "dimension_value": { "type": "string" },
          "metric_value": { "type": "integer" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["metric_value"]
      },
      "ReceivablesAnalyticsResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ReceivablesAnalyticsDataPoint"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "ReceivablesCounterpartAddress": {
        "properties": {
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"],
        "description": "Address information."
      },
      "ReceivablesPreviewTypeEnum": {
        "type": "string",
        "enum": ["receivable", "discount_reminder", "final_reminder"]
      },
      "ReceivablesRemindersWarningMessage": {
        "properties": {
          "payment_reminders": {
            "type": "string",
            "description": "Warning message for payment reminder"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivablesRepresentationOfCounterpartAddress": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the address in the system"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"]
      },
      "ReceivablesRepresentationOfCounterpartAddress2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the address in the system"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "example": "Berlin"
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "Street address.",
            "example": "Flughafenstrasse 52"
          },
          "line2": {
            "type": "string",
            "description": "Additional address information (if any)."
          },
          "postal_code": {
            "type": "string",
            "description": "ZIP or postal code.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State, region, province, or county."
          }
        },
        "type": "object",
        "required": ["city", "country", "line1", "postal_code"]
      },
      "ReceivablesRepresentationOfEntityBankAccount": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the entity bank account."
          },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder's name"
          },
          "account_number": {
            "type": "string",
            "description": "Account number (required if IBAN is not provided)"
          },
          "bank_name": {
            "type": "string",
            "description": "The name of the entity's bank account."
          },
          "bic": {
            "type": "string",
            "description": "The BIC of the entity's bank account."
          },
          "iban": {
            "type": "string",
            "description": "The IBAN of the entity's bank account."
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number (US)"
          },
          "sort_code": { "type": "string", "description": "Sort code (GB)" }
        },
        "type": "object"
      },
      "ReceivablesRepresentationOfEntityBankAccount2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the entity bank account."
          },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder's name"
          },
          "account_number": {
            "type": "string",
            "description": "Account number (required if IBAN is not provided)"
          },
          "bank_name": {
            "type": "string",
            "description": "The name of the entity's bank account."
          },
          "bic": {
            "type": "string",
            "description": "The BIC of the entity's bank account."
          },
          "iban": {
            "type": "string",
            "description": "The IBAN of the entity's bank account."
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number (US)"
          },
          "sort_code": { "type": "string", "description": "Sort code (GB)" }
        },
        "type": "object"
      },
      "ReceivablesSearchRequest": {
        "properties": {
          "based_on": {
            "type": "string",
            "format": "uuid",
            "description": "This parameter accepts a quote ID or an invoice ID.\n\n* Specify a quote ID to find invoices created from this quote.\n* Specify an invoice ID to find credit notes created for this invoice.\n\nValid but nonexistent IDs do not raise errors but produce no results."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Return only receivables created for the counterpart with the specified ID.\n\nCounterparts that have been deleted but have associated receivables will still return results here because the receivables contain a frozen copy of the counterpart data.\n\nIf the specified counterpart ID does not exist and never existed, no results are returned."
          },
          "counterpart_name": {
            "type": "string",
            "description": "Return only receivables created for counterparts with the specified name (exact match, case-sensitive). For counterparts of `type` = `individual`, the full name is formatted as `first_name last_name`."
          },
          "counterpart_name__contains": {
            "type": "string",
            "description": "Return only receivables created for counterparts whose name contains the specified string (case-sensitive)."
          },
          "counterpart_name__icontains": {
            "type": "string",
            "description": "Return only receivables created for counterparts whose name contains the specified string (case-insensitive)."
          },
          "created_at__gt": {
            "type": "string",
            "format": "date-time",
            "description": "Return only receivables created after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`."
          },
          "created_at__gte": {
            "type": "string",
            "format": "date-time",
            "description": "Return only receivables created on or after the specified date and time."
          },
          "created_at__lt": {
            "type": "string",
            "format": "date-time",
            "description": "Return only receivables created before the specified date and time."
          },
          "created_at__lte": {
            "type": "string",
            "format": "date-time",
            "description": "Return only receivables created before or on the specified date and time."
          },
          "discounted_subtotal": {
            "type": "integer",
            "description": "Return only receivables with the exact specified discounted subtotal. The amount must be specified in the [minor units](https://docs.monite.com/references/currencies#minor-units) of currency. For example, $12.5 is represented as 1250."
          },
          "discounted_subtotal__gt": {
            "type": "integer",
            "description": "Return only receivables whose discounted subtotal (in minor units) is greater than the specified value."
          },
          "discounted_subtotal__gte": {
            "type": "integer",
            "description": "Return only receivables whose discounted subtotal (in minor units) is greater than or equal to the specified value."
          },
          "discounted_subtotal__lt": {
            "type": "integer",
            "description": "Return only receivables whose discounted subtotal (in minor units) is less than the specified value."
          },
          "discounted_subtotal__lte": {
            "type": "integer",
            "description": "Return only receivables whose discounted subtotal (in minor units) is less than or equal to the specified value."
          },
          "document_id": {
            "type": "string",
            "description": "Return a receivable with the exact specified document number (case-sensitive). The `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`)."
          },
          "document_id__contains": {
            "type": "string",
            "description": "Return only receivables whose document number (`document_id`) contains the specified string (case-sensitive)."
          },
          "document_id__icontains": {
            "type": "string",
            "description": "Return only receivables whose document number (`document_id`) contains the specified string (case-insensitive)."
          },
          "due_date__gt": {
            "type": "string",
            "format": "date",
            "description": "Return invoices that are due after the specified date (exclusive, `YYYY-MM-DD`).\n\nThis filter excludes quotes, credit notes, and draft invoices."
          },
          "due_date__gte": {
            "type": "string",
            "format": "date",
            "description": "Return invoices that are due on or after the specified date (`YYYY-MM-DD`).\n\nThis filter excludes quotes, credit notes, and draft invoices."
          },
          "due_date__lt": {
            "type": "string",
            "format": "date",
            "description": "Return invoices that are due before the specified date (exclusive, `YYYY-MM-DD`).\n\nThis filter excludes quotes, credit notes, and draft invoices."
          },
          "due_date__lte": {
            "type": "string",
            "format": "date",
            "description": "Return invoices that are due before or on the specified date (`YYYY-MM-DD`).\n\nThis filter excludes quotes, credit notes, and draft invoices."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Return only receivables created by the entity user with the specified ID. To query receivables by multiple user IDs at once, use the `entity_user_id__in` parameter instead.\n\nIf the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.\n\nIDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results."
          },
          "entity_user_id__in": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "id__in": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "issue_date__gt": {
            "type": "string",
            "format": "date-time",
            "description": "Return only non-draft receivables that were issued after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`."
          },
          "issue_date__gte": {
            "type": "string",
            "format": "date-time",
            "description": "Return only non-draft receivables that were issued on or after the specified date and time."
          },
          "issue_date__lt": {
            "type": "string",
            "format": "date-time",
            "description": "Return only non-draft receivables that were issued before the specified date and time."
          },
          "issue_date__lte": {
            "type": "string",
            "format": "date-time",
            "description": "Return only non-draft receivables that were issued before or on the specified date and time."
          },
          "limit": {
            "type": "integer",
            "maximum": 250.0,
            "minimum": 1.0,
            "default": 100
          },
          "order": {
            "allOf": [{ "$ref": "#/components/schemas/OrderEnum" }],
            "default": "asc"
          },
          "pagination_token": { "type": "string" },
          "product_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "product_ids__in": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "Return only receivables assigned to the project with the specified ID. Valid but nonexistent project IDs do not raise errors but return no results."
          },
          "project_id__in": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "sort": { "$ref": "#/components/schemas/ReceivableCursorFields2" },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "issuing",
              "issued",
              "failed",
              "accepted",
              "expired",
              "declined",
              "recurring",
              "partially_paid",
              "paid",
              "overdue",
              "uncollectible",
              "canceled"
            ],
            "description": "Return only receivables that have the specified status. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).\n\nTo query multiple statuses at once, use the `status__in` parameter instead."
          },
          "status__in": { "items": { "type": "string" }, "type": "array" },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "tag_ids__in": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "total_amount": {
            "type": "integer",
            "description": "Return only receivables with the exact specified total amount. The amount must be specified in the [minor units](https://docs.monite.com/references/currencies#minor-units) of currency. For example, $12.5 is represented as 1250."
          },
          "total_amount__gt": {
            "type": "integer",
            "description": "Return only receivables whose total amount (in minor units) exceeds the specified value."
          },
          "total_amount__gte": {
            "type": "integer",
            "description": "Return only receivables whose total amount (in minor units) is greater than or equal to the specified value."
          },
          "total_amount__lt": {
            "type": "integer",
            "description": "Return only receivables whose total amount (in minor units) is less than the specified value."
          },
          "total_amount__lte": {
            "type": "integer",
            "description": "Return only receivables whose total amount (in minor units) is less than or equal to the specified value."
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivableType" }],
            "description": "Return only receivables of the specified type. Use this parameter to get only invoices, or only quotes, or only credit notes."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ReceivablesSendResponse": {
        "properties": {
          "mail_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["mail_ids"],
        "description": "A schema for returning a response with list of ids by which user check sending status"
      },
      "ReceivablesStatusEnum": {
        "type": "string",
        "enum": [
          "draft",
          "issuing",
          "issued",
          "failed",
          "accepted",
          "expired",
          "declined",
          "recurring",
          "partially_paid",
          "paid",
          "overdue",
          "uncollectible",
          "canceled",
          "deleted"
        ],
        "description": "This Enum the results of combining two types of statuses from\nQuoteStateEnum, CreditNoteStateEnum and InvoiceStateEnum. You shouldn't use\nit in your scenarios if only for edge cases in workers, but ideally need to\nremove this shared Enum."
      },
      "ReceivablesVerifyResponse": {
        "properties": {
          "errors": {
            "allOf": [{ "$ref": "#/components/schemas/MissingFields" }],
            "description": "Missing fields of receivable"
          },
          "warnings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivablesRemindersWarningMessage"
              }
            ],
            "description": "Warning message for payment reminder"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema for returning a response with validation results"
      },
      "Recipient": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "type": { "$ref": "#/components/schemas/RecipientType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "RecipientAccountResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of a payment account"
          },
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "type": "array",
            "description": "List of bank accounts"
          },
          "name": {
            "type": "string",
            "description": "Display name of a payment account"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentAccountType" }],
            "description": "Type of a payment account. Can be `entity` or `counterpart`"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "RecipientAccountResponse2": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of a payment account"
          },
          "authorized_bank_accounts": {
            "items": { "$ref": "#/components/schemas/AuthorizedBankAccount" },
            "type": "array",
            "description": "List of authorized bank accounts"
          },
          "bank_accounts": {
            "items": { "$ref": "#/components/schemas/BankAccount" },
            "type": "array",
            "description": "List of bank accounts"
          },
          "name": {
            "type": "string",
            "description": "Display name of a payment account"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/PaymentAccountType" }],
            "description": "Type of a payment account. Can be `entity` or `counterpart`"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type"]
      },
      "RecipientType": { "type": "string", "enum": ["entity", "counterpart"] },
      "Recipients": {
        "properties": {
          "bcc": {
            "items": { "type": "string", "format": "email" },
            "type": "array"
          },
          "cc": {
            "items": { "type": "string", "format": "email" },
            "type": "array"
          },
          "to": {
            "items": { "type": "string", "format": "email" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "RecurrenceFrequency": {
        "type": "string",
        "enum": ["day", "week", "month", "quarter", "year"]
      },
      "RecurrenceIteration": {
        "properties": {
          "issue_at": { "type": "string", "format": "date" },
          "issued_invoice_id": { "type": "string", "format": "uuid" },
          "iteration": { "type": "integer", "default": 1 },
          "status": { "$ref": "#/components/schemas/IterationStatus" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["issue_at", "status"]
      },
      "RecurrenceResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the recurrence was created. Timestamps follow the ISO 8601 standard."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the recurrence was last updated. Timestamps follow the ISO 8601 standard."
          },
          "automation_level": {
            "allOf": [{ "$ref": "#/components/schemas/AutomationLevel" }],
            "description": "Controls how invoices are processed when generated:\n- \"draft\": Creates invoices in draft status, requiring manual review, issuing, and sending\n- \"issue\": Automatically issues invoices but requires manual sending\n- \"issue_and_send\": Fully automates the process (creates, issues, and sends invoices)\n\nDefault: \"issue\" (or \"issue_and_send\" if subject_text and body_text are provided)\n\nNote: When using \"issue_and_send\", both subject_text and body_text must be provided.\n"
          },
          "body_text": {
            "type": "string",
            "description": "The body text for the email that will be sent with the recurring invoice."
          },
          "current_iteration": {
            "type": "integer",
            "minimum": 1.0,
            "description": "Current iteration number"
          },
          "day_of_month": {
            "allOf": [{ "$ref": "#/components/schemas/DayOfMonth" }],
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified."
          },
          "end_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "description": "Deprecated, use `end_date` instead",
            "deprecated": true
          },
          "end_year": {
            "type": "integer",
            "maximum": 2077.0,
            "description": "Deprecated, use `end_date` instead",
            "deprecated": true
          },
          "frequency": {
            "allOf": [{ "$ref": "#/components/schemas/RecurrenceFrequency" }],
            "description": "How often the invoice will be created."
          },
          "interval": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "description": "The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months."
          },
          "invoice_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the base invoice that will be used as a template for creating recurring invoices."
          },
          "iterations": {
            "items": { "$ref": "#/components/schemas/RecurrenceIteration" },
            "type": "array",
            "minItems": 1,
            "description": "List of iterations for the recurrence"
          },
          "max_occurrences": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "description": "How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified."
          },
          "recipients": {
            "allOf": [{ "$ref": "#/components/schemas/Recipients" }],
            "description": "An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field."
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`."
          },
          "start_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "start_year": {
            "type": "integer",
            "maximum": 2077.0,
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/RecurrenceStatus" }],
            "description": "Status of the recurrence",
            "examples": ["active", "canceled", "completed"]
          },
          "subject_text": {
            "type": "string",
            "description": "The subject for the email that will be sent with the recurring invoice."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "automation_level",
          "current_iteration",
          "day_of_month",
          "frequency",
          "interval",
          "invoice_id",
          "iterations",
          "start_date",
          "start_month",
          "start_year",
          "status"
        ]
      },
      "RecurrenceResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/RecurrenceResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "RecurrenceStatus": {
        "type": "string",
        "enum": ["active", "paused", "canceled", "completed"],
        "description": "Represents the status of a recurrence\n\nAllowed transitions:\n- active -> paused\n- active -> canceled\n- active -> completed\n- paused -> active\n- paused -> canceled"
      },
      "RegisterPartnerUserPayload": {
        "properties": {
          "company_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          },
          "company_website": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "email": { "type": "string", "format": "email" },
          "fullname": { "type": "string", "minLength": 1 },
          "password": { "type": "string", "minLength": 12 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "company_name",
          "company_website",
          "email",
          "fullname",
          "password"
        ]
      },
      "RegisterResponse": {
        "properties": {
          "invited_users": {
            "items": { "type": "string", "format": "email" },
            "type": "array"
          },
          "not_invited_users": {
            "items": { "type": "string", "format": "email" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["invited_users", "not_invited_users"]
      },
      "RelatedDocuments": {
        "properties": {
          "credit_note_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array"
          },
          "proforma_invoice_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Relationship": {
        "type": "string",
        "enum": ["representative", "owner", "director", "executive"]
      },
      "Reminder": {
        "properties": {
          "body": { "type": "string" },
          "days_before": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 1.0
          },
          "subject": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body", "days_before", "subject"]
      },
      "ReminderMailSentEventData": {
        "properties": {
          "mail_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the email sending operation. Can be used to get the email sending status from `GET /receivables/{receivable_id}/mails/{mail_id}`.",
            "examples": ["d6185c8d-527c-4586-84c9-95881e7ba19f"]
          },
          "mail_status": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableMailStatusEnum" }
            ],
            "description": "The overall email sending status across all recipients."
          },
          "recipients": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableMailRecipients" }
            ],
            "description": "Contains a list of email recipients (To, CC, BCC) and the email sending status for each recipient."
          },
          "term": {
            "allOf": [{ "$ref": "#/components/schemas/ReminderTypeEnum" }],
            "description": "Invoice reminder type:\n\n* `term_1` - [payment reminder](https://docs.monite.com/accounts-receivable/invoices/payment-reminders) sent before discount date 1,\n* `term_2` - payment reminder sent before discount date 2,\n* `term_final` - payment reminder sent before the invoice due date.\n* `overdue` - [overdue reminder](https://docs.monite.com/accounts-receivable/invoices/overdue-reminders) sent after the due date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["mail_id", "mail_status", "recipients", "term"],
        "description": "Contains information about an invoice reminder sent via email."
      },
      "ReminderTypeEnum": {
        "type": "string",
        "enum": ["term_1", "term_2", "term_final", "overdue"]
      },
      "RemindersSettings": {
        "properties": { "enabled": { "type": "boolean", "default": true } },
        "type": "object"
      },
      "RepaymentSchedule": {
        "properties": {
          "repayment_amount": {
            "type": "integer",
            "description": "Repayment amount in minor units"
          },
          "repayment_date": {
            "type": "string",
            "description": "Repayment date in ISO 8601 format"
          },
          "repayment_fee_amount": {
            "type": "integer",
            "description": "Repayment fee amount in minor units"
          },
          "repayment_principal_amount": {
            "type": "integer",
            "description": "Repayment principal amount in minor units"
          }
        },
        "type": "object",
        "required": [
          "repayment_date",
          "repayment_amount",
          "repayment_fee_amount",
          "repayment_principal_amount"
        ],
        "description": "Repayment schedule model"
      },
      "RequestResendInvite": {
        "properties": {
          "email": { "type": "string", "format": "email" },
          "old_invitation_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email"]
      },
      "RequirementsError": {
        "properties": {
          "code": { "type": "string" },
          "reason": { "type": "string" },
          "requirement": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code", "reason", "requirement"]
      },
      "ResetPasswordPayload": {
        "properties": { "email": { "type": "string", "format": "email" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["email"]
      },
      "ResponseItem": {
        "properties": {
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a product."
          },
          "product": { "$ref": "#/components/schemas/LineItemProduct" },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 0.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          },
          "total_after_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item after VAT with applied line item discount in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "total_before_vat": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "description": "Total of line_item before VAT in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          }
        },
        "type": "object",
        "required": [
          "product",
          "quantity",
          "total_after_vat",
          "total_before_vat"
        ]
      },
      "RevertPaymentsPayload": {
        "properties": {
          "amount_paid": {
            "type": "integer",
            "minimum": 0.0,
            "description": "How much was paid on the invoice (in minor units)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount_paid"]
      },
      "RevokeTokenPayload": {
        "properties": {
          "client_id": { "type": "string", "format": "uuid" },
          "client_secret": { "type": "string" },
          "token": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_id", "client_secret", "token"]
      },
      "RoleCursorFields": {
        "type": "string",
        "enum": ["updated_at", "created_at"]
      },
      "RolePaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/RoleResponse" },
            "type": "array",
            "description": "array of records"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "RoleResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID role ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "description": "Role name"
          },
          "permissions": {
            "$ref": "#/components/schemas/BizObjectsSchema-Output",
            "description": "Access permissions"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "record status, 'active' by default"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "permissions",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "RolesCreatePayload": {
        "properties": {
          "description": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "name": { "type": "string", "minLength": 1 },
          "permissions": {
            "$ref": "#/components/schemas/PortalBizObjectsSchema-Input",
            "description": "Access permissions"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "permissions"]
      },
      "RolesResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_by_user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ]
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }]
          },
          "name": { "type": "string", "minLength": 1 },
          "permissions": {
            "$ref": "#/components/schemas/PortalBizObjectsSchema-Output",
            "description": "Access permissions"
          }
        },
        "type": "object",
        "required": ["id", "description", "name", "permissions"]
      },
      "RolesUpdatePayload": {
        "properties": {
          "description": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "name": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "permissions": {
            "anyOf": [
              { "$ref": "#/components/schemas/PortalBizObjectsSchema-Input" },
              { "type": "null" }
            ],
            "description": "Access permissions"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "RootSchema-Input": {
        "oneOf": [
          { "$ref": "#/components/schemas/CommonSchema-Input" },
          { "$ref": "#/components/schemas/PayableSchema-Input" }
        ],
        "discriminator": {
          "propertyName": "object_type",
          "mapping": {
            "approval_policy": "#/components/schemas/CommonSchema-Input",
            "approval_request": "#/components/schemas/CommonSchema-Input",
            "comment": "#/components/schemas/CommonSchema-Input",
            "counterpart": "#/components/schemas/CommonSchema-Input",
            "counterpart_vat_id": "#/components/schemas/CommonSchema-Input",
            "delivery_note": "#/components/schemas/CommonSchema-Input",
            "entity": "#/components/schemas/CommonSchema-Input",
            "entity_bank_account": "#/components/schemas/CommonSchema-Input",
            "entity_user": "#/components/schemas/CommonSchema-Input",
            "entity_vat_ids": "#/components/schemas/CommonSchema-Input",
            "export": "#/components/schemas/CommonSchema-Input",
            "mailbox": "#/components/schemas/CommonSchema-Input",
            "ocr_task": "#/components/schemas/CommonSchema-Input",
            "onboarding": "#/components/schemas/CommonSchema-Input",
            "overdue_reminder": "#/components/schemas/CommonSchema-Input",
            "payable": "#/components/schemas/PayableSchema-Input",
            "payables_purchase_order": "#/components/schemas/CommonSchema-Input",
            "payment_record": "#/components/schemas/CommonSchema-Input",
            "payment_reminder": "#/components/schemas/CommonSchema-Input",
            "person": "#/components/schemas/CommonSchema-Input",
            "product": "#/components/schemas/CommonSchema-Input",
            "project": "#/components/schemas/CommonSchema-Input",
            "receipt": "#/components/schemas/CommonSchema-Input",
            "receivable": "#/components/schemas/CommonSchema-Input",
            "reconciliation": "#/components/schemas/CommonSchema-Input",
            "role": "#/components/schemas/CommonSchema-Input",
            "tag": "#/components/schemas/CommonSchema-Input",
            "todo_task": "#/components/schemas/CommonSchema-Input",
            "todo_task_mute": "#/components/schemas/CommonSchema-Input",
            "transaction": "#/components/schemas/CommonSchema-Input",
            "workflow": "#/components/schemas/CommonSchema-Input"
          }
        }
      },
      "RootSchema-Output": {
        "oneOf": [
          { "$ref": "#/components/schemas/CommonSchema-Output" },
          { "$ref": "#/components/schemas/PayableSchema-Output" }
        ],
        "discriminator": {
          "propertyName": "object_type",
          "mapping": {
            "approval_policy": "#/components/schemas/CommonSchema-Output",
            "approval_request": "#/components/schemas/CommonSchema-Output",
            "comment": "#/components/schemas/CommonSchema-Output",
            "counterpart": "#/components/schemas/CommonSchema-Output",
            "counterpart_vat_id": "#/components/schemas/CommonSchema-Output",
            "delivery_note": "#/components/schemas/CommonSchema-Output",
            "entity": "#/components/schemas/CommonSchema-Output",
            "entity_bank_account": "#/components/schemas/CommonSchema-Output",
            "entity_user": "#/components/schemas/CommonSchema-Output",
            "entity_vat_ids": "#/components/schemas/CommonSchema-Output",
            "export": "#/components/schemas/CommonSchema-Output",
            "mailbox": "#/components/schemas/CommonSchema-Output",
            "ocr_task": "#/components/schemas/CommonSchema-Output",
            "onboarding": "#/components/schemas/CommonSchema-Output",
            "overdue_reminder": "#/components/schemas/CommonSchema-Output",
            "payable": "#/components/schemas/PayableSchema-Output",
            "payables_purchase_order": "#/components/schemas/CommonSchema-Output",
            "payment_record": "#/components/schemas/CommonSchema-Output",
            "payment_reminder": "#/components/schemas/CommonSchema-Output",
            "person": "#/components/schemas/CommonSchema-Output",
            "product": "#/components/schemas/CommonSchema-Output",
            "project": "#/components/schemas/CommonSchema-Output",
            "receipt": "#/components/schemas/CommonSchema-Output",
            "receivable": "#/components/schemas/CommonSchema-Output",
            "reconciliation": "#/components/schemas/CommonSchema-Output",
            "role": "#/components/schemas/CommonSchema-Output",
            "tag": "#/components/schemas/CommonSchema-Output",
            "todo_task": "#/components/schemas/CommonSchema-Output",
            "todo_task_mute": "#/components/schemas/CommonSchema-Output",
            "transaction": "#/components/schemas/CommonSchema-Output",
            "workflow": "#/components/schemas/CommonSchema-Output"
          }
        }
      },
      "SCAMethod": {
        "properties": {
          "id": { "type": "string" },
          "description": { "type": "string" },
          "information": { "type": "string" },
          "type": { "$ref": "#/components/schemas/SCAMethodType" }
        },
        "type": "object",
        "required": ["id", "type"]
      },
      "SCAMethodType": {
        "type": "string",
        "enum": ["SMS_OTP", "CHIP_OTP", "PHOTO_OTP", "PUSH_OTP"]
      },
      "SecretRequest": {
        "properties": {
          "name": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
          "project_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["project_id"]
      },
      "SecretStatusEnum": {
        "type": "string",
        "enum": ["active", "revoked", "scheduled_to_revoke"]
      },
      "SendPurchaseOrderViaEmailRequest": {
        "properties": {
          "body_text": { "type": "string" },
          "subject_text": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_text", "subject_text"],
        "description": "A schema for request for sending purchase order via email"
      },
      "ServiceProvidersEnum": { "type": "string", "enum": ["codat", "railz"] },
      "SetPasswordPayload": {
        "properties": {
          "new_password": { "type": "string", "minLength": 12 },
          "token": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["new_password", "token"]
      },
      "SetScaCodePayload": {
        "properties": {
          "application_user_id": { "type": "string" },
          "sca_code": {
            "type": "string",
            "description": "Confirmation code that the user received from the bank via the selected SCA method."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["application_user_id", "sca_code"]
      },
      "SetScaMethodPayload": {
        "properties": {
          "application_user_id": { "type": "string" },
          "sca_method_id": {
            "type": "string",
            "description": "Identifier of SCA method obtained during the initialization of the embedded session."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["application_user_id", "sca_method_id"]
      },
      "SettingsResponse": {
        "properties": {
          "accounting": {
            "anyOf": [
              { "$ref": "#/components/schemas/AccountingSettings" },
              { "type": "null" }
            ]
          },
          "allow_purchase_order_autolinking": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "description": "Automatically attempt to find a corresponding purchase order for all incoming payables.",
            "default": true
          },
          "currency": {
            "anyOf": [
              { "$ref": "#/components/schemas/CurrencySettings-Output" },
              { "type": "null" }
            ]
          },
          "document_ids": {
            "anyOf": [
              { "$ref": "#/components/schemas/DocumentIDsSettings" },
              { "type": "null" }
            ]
          },
          "document_rendering": {
            "$ref": "#/components/schemas/DocumentRenderingSettings-Output",
            "description": "Settings for rendering documents in PDF format."
          },
          "generate_paid_invoice_pdf": {
            "type": "boolean",
            "description": "This setting affects how PDF is generated for paid accounts receivable invoices. If set to `true`, once an invoice is fully paid its PDF version is updated to display the amount paid and the payment-related features are removed.\n\nThe PDF file gets regenerated at the moment when an invoice becomes paid. It is not issued as a separate document, and the original PDF invoice is no longer available.\n\nThis field is deprecated and will be replaced by `document_rendering.invoice.generate_paid_invoice_pdf`.",
            "default": false
          },
          "language": {
            "anyOf": [
              { "$ref": "#/components/schemas/LanguageCodeEnum" },
              { "type": "null" }
            ]
          },
          "payables_ocr_auto_tagging": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OcrAutoTaggingSettingsRequest"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "description": "Auto tagging settings for all incoming OCR payable documents."
          },
          "payables_skip_approval_flow": {
            "type": "boolean",
            "description": "If enabled, the approval policy will be skipped and the payable will be moved to `waiting_to_be_paid` status.",
            "default": false
          },
          "payment_priority": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentPriorityEnum" },
              { "type": "null" }
            ],
            "description": "Payment preferences for entity to automate calculating suggested payment date based on payment terms and entity preferences.",
            "default": "working_capital"
          },
          "quote_signature_required": {
            "type": "boolean",
            "description": "Sets the default behavior of whether a signature is required to accept quotes.",
            "default": false
          },
          "receivable_edit_flow": {
            "anyOf": [
              { "$ref": "#/components/schemas/ReceivableEditFlow" },
              { "type": "null" }
            ],
            "default": "compliant"
          },
          "reminder": {
            "anyOf": [
              { "$ref": "#/components/schemas/RemindersSettings" },
              { "type": "null" }
            ]
          },
          "vat_inclusive_discount_mode": {
            "$ref": "#/components/schemas/VatModeEnum",
            "description": "Defines whether the amount discounts (for percentage discounts it does not matter) on VAT inclusive invoices will be applied on amounts including VAT or excluding VAT.",
            "default": "exclusive"
          },
          "vat_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/VatModeEnum" },
              { "type": "null" }
            ],
            "description": "Defines whether the prices of products in receivables will already include VAT or not.",
            "default": "exclusive"
          }
        },
        "type": "object"
      },
      "Signature": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of a person who signed a quote"
          },
          "full_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The full name of a person who signed a quote"
          },
          "signature_image": {
            "type": "string",
            "maxLength": 524288,
            "minLength": 32,
            "contentEncoding": "base64",
            "contentMediaType": "image/png",
            "description": "Base64 encoded PNG image of a signature"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "full_name", "signature_image"]
      },
      "SignatureResponse": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of a person who signed a quote"
          },
          "full_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The full name of a person who signed a quote"
          },
          "signature_image_url": {
            "type": "string",
            "description": "URL of the signature image"
          },
          "signed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the receivable was signed"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "full_name", "signature_image_url", "signed_at"]
      },
      "SingleOnboardingRequirementsResponse": {
        "properties": {
          "disabled_reason": { "type": "string" },
          "payment_method": { "type": "string" },
          "requirements": {
            "$ref": "#/components/schemas/PaymentMethodRequirements"
          },
          "requirements_errors": {
            "items": {
              "$ref": "#/components/schemas/OnboardingRequirementsError"
            },
            "type": "array"
          },
          "verification_errors": {
            "items": {
              "$ref": "#/components/schemas/OnboardingVerificationError"
            },
            "type": "array"
          },
          "verification_status": {
            "$ref": "#/components/schemas/OnboardingVerificationStatusEnum"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "payment_method",
          "requirements",
          "requirements_errors",
          "verification_errors",
          "verification_status"
        ]
      },
      "SinglePaymentIntent": {
        "properties": {
          "object": { "$ref": "#/components/schemas/PaymentObjectPayable" },
          "payment_reference": {
            "type": "string",
            "description": "Must be provided if payable's document id is missing."
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentIntentsRecipient"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["object", "recipient"]
      },
      "SinglePaymentIntentResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "amount": { "type": "integer" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "error": { "type": "object" },
          "object": { "$ref": "#/components/schemas/PaymentObjectPayable" },
          "payment_reference": { "type": "string" },
          "recipient": {
            "$ref": "#/components/schemas/PaymentIntentsRecipient"
          },
          "status": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "amount",
          "currency",
          "object",
          "payment_reference",
          "recipient",
          "status"
        ]
      },
      "SourceOfPayableDataEnum": {
        "type": "string",
        "enum": ["ocr", "user_specified", "einvoicing"]
      },
      "SourceOfReceiptDataEnum": {
        "type": "string",
        "enum": ["ocr", "user_specified"]
      },
      "StatusChangedEventData": {
        "properties": {
          "new_status": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivablesStatusEnum" }],
            "description": "The new status of a document.",
            "examples": ["issued"]
          },
          "old_status": {
            "allOf": [{ "$ref": "#/components/schemas/ReceivablesStatusEnum" }],
            "description": "The old status of a document.",
            "examples": ["draft"]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["new_status", "old_status"],
        "description": "Contains information about a document's status change. See the applicable\n[invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index),\n[quote statuses](https://docs.monite.com/accounts-receivable/quotes/index),\nand [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle)."
      },
      "StatusEnum": { "type": "string", "enum": ["active", "deleted"] },
      "StorecoveEvent": { "type": "string", "enum": ["received", "failed"] },
      "StorecoveEventGroup": {
        "type": "string",
        "enum": ["invoice", "unknown"]
      },
      "StorecoveEventType": { "type": "string", "enum": ["received_document"] },
      "StorecoveNewDocumentReceivedEventPayload": {
        "properties": {
          "document_guid": { "type": "string", "format": "uuid" },
          "event": { "$ref": "#/components/schemas/StorecoveEvent" },
          "event_group": { "$ref": "#/components/schemas/StorecoveEventGroup" },
          "event_type": { "$ref": "#/components/schemas/StorecoveEventType" },
          "receive_guid": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": ["document_guid", "event_type", "event_group", "event"]
      },
      "StripeData": {
        "properties": {
          "publishable": { "type": "string" },
          "secret": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["secret"]
      },
      "SuccessResult": {
        "properties": { "success": { "type": "boolean", "default": true } },
        "type": "object"
      },
      "SuggestedCounterpartPayload": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "address_id": { "type": "string", "format": "uuid" },
          "bank_account_id": { "type": "string", "format": "uuid" },
          "vat_id_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id"]
      },
      "SuggestedPaymentTerm": {
        "properties": {
          "date": { "type": "string", "format": "date" },
          "discount": { "type": "integer", "maximum": 10000.0, "minimum": 0.0 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["date"],
        "description": "Suggested payment date and corresponding discount"
      },
      "SuggestedResponse": {
        "properties": {
          "suggested_counterpart": {
            "$ref": "#/components/schemas/SuggestedCounterpartPayload"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["suggested_counterpart"]
      },
      "SupportedFieldNames": {
        "type": "string",
        "enum": ["default_account_code", "default_tax_rate_code"]
      },
      "SupportedFormatSchema": {
        "properties": {
          "available_types": {
            "additionalProperties": {
              "items": { "$ref": "#/components/schemas/ExportFormat" },
              "type": "array"
            },
            "type": "object"
          },
          "object_type": { "type": "string", "enum": ["payable", "receivable"] }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["available_types", "object_type"]
      },
      "SupportedPaymentAuthorizationFlow": {
        "type": "string",
        "enum": ["redirect", "embedded"]
      },
      "SyncRecordCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "SyncRecordResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "errors": { "type": "object" },
          "last_pulled_at": { "type": "string", "format": "date-time" },
          "object_id": { "type": "string", "format": "uuid" },
          "object_type": { "$ref": "#/components/schemas/ObjectMatchTypes" },
          "object_updated_at": { "type": "string", "format": "date-time" },
          "platform": { "$ref": "#/components/schemas/Platform" },
          "platform_object_id": { "type": "string" },
          "platform_updated_at": { "type": "string", "format": "date-time" },
          "provider": { "$ref": "#/components/schemas/ServiceProvidersEnum" },
          "provider_object_id": { "type": "string" },
          "provider_updated_at": { "type": "string", "format": "date-time" },
          "sync_status": { "$ref": "#/components/schemas/SyncStatus" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "last_pulled_at",
          "sync_status",
          "object_type"
        ]
      },
      "SyncRecordResourceList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SyncRecordResource" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).",
            "example": "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).",
            "example": "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "SyncStatus": { "type": "string", "enum": ["pending", "error", "done"] },
      "SyncStatusResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "sync_status": { "$ref": "#/components/schemas/SyncStatus" },
          "type": { "$ref": "#/components/schemas/ObjectMatchTypes" }
        },
        "type": "object"
      },
      "SyncStatusResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/SyncStatusResponse" },
            "type": "array"
          },
          "next_pagination_token": { "type": "string", "format": "uuid" },
          "prev_pagination_token": { "type": "string", "format": "uuid" }
        },
        "type": "object",
        "required": ["data"]
      },
      "SystemTemplateDataSchema": {
        "properties": {
          "available_templates": {
            "items": { "$ref": "#/components/schemas/TemplateDataSchema" },
            "type": "array",
            "description": "Array of templates"
          },
          "template_name": {
            "type": "string",
            "description": "Name of the template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["available_templates", "template_name"]
      },
      "SystemTemplates": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SystemTemplateDataSchema"
            },
            "type": "array",
            "description": "All pre-defined email templates"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "TagCategory": {
        "type": "string",
        "enum": [
          "document_type",
          "department",
          "project",
          "cost_center",
          "vendor_type",
          "payment_method",
          "approval_status"
        ]
      },
      "TagCreateSchema": {
        "properties": {
          "category": {
            "allOf": [{ "$ref": "#/components/schemas/TagCategory" }],
            "description": "The tag category.",
            "example": "department"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag description.",
            "example": "Tag for the Marketing Department"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag name. Must be unique.",
            "example": "Marketing"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name"]
      },
      "TagCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "TagReadSchema": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique ID of this tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.",
            "example": "2022-09-07T16:35:18.484507+00:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.",
            "example": "2022-09-07T16:35:18.484507+00:00"
          },
          "category": {
            "allOf": [{ "$ref": "#/components/schemas/TagCategory" }],
            "description": "The tag category.",
            "example": "department"
          },
          "created_by_entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who created the tag.",
            "example": "ea837e28-509b-4b6a-a600-d54b6aa0b1f5"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag description.",
            "example": "Tag for the Marketing Department"
          },
          "name": {
            "type": "string",
            "description": "The tag name.",
            "example": "Marketing"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "name"],
        "description": "Represents a user-defined tag that can be assigned to resources to filter them."
      },
      "TagUpdateSchema": {
        "properties": {
          "category": {
            "allOf": [{ "$ref": "#/components/schemas/TagCategory" }],
            "description": "The tag category.",
            "example": "department"
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag description.",
            "example": "Tag for the Marketing Department"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "The tag name. Must be unique.",
            "example": "Marketing"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "TagsPaginationResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TagReadSchema" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).",
            "example": "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9"
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).",
            "example": "eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9"
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of tags."
      },
      "TaxComponentResponse": {
        "properties": {
          "is_compound": {
            "type": "boolean",
            "description": "A flag to indicate with the tax is calculated using the principle of compounding."
          },
          "name": { "type": "string" },
          "rate": {
            "type": "integer",
            "description": "Component tax rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250."
          }
        },
        "type": "object"
      },
      "TaxRateAccountCursorFields": { "type": "string", "enum": ["name"] },
      "TemplateDataSchema": {
        "properties": {
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible email body template"
          },
          "language": {
            "type": "string",
            "description": "Lowercase ISO code of language"
          },
          "subject_template": {
            "type": "string",
            "description": "Jinja2 compatible email subject template"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["body_template", "language", "subject_template"]
      },
      "TemplateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TemplateReceivableResponse"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TemplateReceivableResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "blocks": { "items": { "type": "string" }, "type": "array" },
          "document_type": { "$ref": "#/components/schemas/DocumentTypeEnum" },
          "is_default": { "type": "boolean" },
          "language": { "type": "string" },
          "name": { "type": "string" },
          "preview": { "$ref": "#/components/schemas/FileResponse" },
          "template": { "type": "string" },
          "template_type": {
            "allOf": [{ "$ref": "#/components/schemas/TemplateTypeEnum" }],
            "default": "source_object"
          }
        },
        "type": "object",
        "required": [
          "id",
          "document_type",
          "is_default",
          "language",
          "name",
          "template"
        ]
      },
      "TemplateTypeEnum": {
        "type": "string",
        "enum": ["block", "source_object"]
      },
      "TermDiscountDays": {
        "properties": {
          "discount": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%."
          },
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["discount", "number_of_days"]
      },
      "TermFinalDays": {
        "properties": {
          "number_of_days": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of days after the invoice issue date."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["number_of_days"]
      },
      "TermsOfServiceAcceptance-Input": {
        "properties": {
          "date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "description": "The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement."
          },
          "ip": {
            "anyOf": [
              { "type": "string", "format": "ipvanyaddress" },
              { "type": "null" }
            ],
            "description": "The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.",
            "examples": ["203.0.113.24"]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "TermsOfServiceAcceptance-Output": {
        "properties": {
          "date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "description": "The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement."
          },
          "ip": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.",
            "examples": ["203.0.113.24"]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "TextTemplateDocumentTypeEnum": {
        "type": "string",
        "enum": [
          "quote",
          "invoice",
          "credit_note",
          "discount_reminder",
          "final_reminder",
          "payables_purchase_order",
          "overdue_reminder"
        ]
      },
      "TextTemplateResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "document_type": {
            "$ref": "#/components/schemas/TextTemplateDocumentTypeEnum"
          },
          "is_default": { "type": "boolean" },
          "name": { "type": "string" },
          "template": { "type": "string" },
          "type": { "$ref": "#/components/schemas/TextTemplateType" }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "document_type",
          "is_default",
          "name",
          "template",
          "type"
        ]
      },
      "TextTemplateResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TextTemplateResponse" },
            "type": "array"
          },
          "next_pagination_token": { "type": "string" },
          "prev_pagination_token": { "type": "string" }
        },
        "type": "object",
        "required": ["data"]
      },
      "TextTemplateType": {
        "type": "string",
        "enum": ["email_header", "email_body", "memo"]
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "examples": ["L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg"]
          },
          "token_type": { "type": "string", "examples": ["Bearer"] }
        },
        "type": "object",
        "required": ["access_token", "token_type"]
      },
      "TokenSerializerTypeEnum": {
        "type": "string",
        "enum": ["forgot_password", "invitation"]
      },
      "TotalVatAmountItem": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "components": {
            "items": {
              "$ref": "#/components/schemas/TotalVatAmountItemComponent"
            },
            "type": "array",
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "name": {
            "type": "string",
            "description": "Display name of the vat rate."
          },
          "taxable_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The amount on which this VAT is calculated, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "value": {
            "type": "number",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["amount", "taxable_amount", "value"]
      },
      "TotalVatAmountItem2": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "components": {
            "items": {
              "$ref": "#/components/schemas/TotalVatAmountItemComponent2"
            },
            "type": "array",
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "name": {
            "type": "string",
            "description": "Display name of the vat rate."
          },
          "taxable_amount": {
            "type": "integer",
            "minimum": 0.0,
            "description": "The amount on which this VAT is calculated, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["amount", "taxable_amount", "value"]
      },
      "TotalVatAmountItemComponent": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "name": { "type": "string" },
          "value": {
            "type": "number",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["name", "value", "amount"]
      },
      "TotalVatAmountItemComponent2": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units)."
          },
          "name": { "type": "string" },
          "value": {
            "type": "number",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["name", "value", "amount"]
      },
      "TransactionBulkObject": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique Monite-generated ID assigned to the created transaction."
          }
        },
        "type": "object"
      },
      "TransactionBulkRequest": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TransactionRequest" },
            "type": "array",
            "description": "A list of transactions to create."
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "TransactionBulkResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TransactionBulkObject" },
            "type": "array",
            "maxItems": 5000,
            "minItems": 1
          },
          "status": {
            "allOf": [
              { "$ref": "#/components/schemas/TransactionBulkStatusEnum" }
            ],
            "description": "The overall status of the bulk creation operation."
          }
        },
        "type": "object",
        "required": ["data", "status"]
      },
      "TransactionBulkStatusEnum": {
        "type": "string",
        "enum": ["success", "partial_success", "error"]
      },
      "TransactionCursorFields": {
        "type": "string",
        "enum": [
          "created_at",
          "updated_at",
          "started_at",
          "amount",
          "merchant_amount",
          "merchant_name",
          "status",
          "type",
          "external_id"
        ]
      },
      "TransactionPaymentMethod": {
        "oneOf": [
          { "$ref": "#/components/schemas/CardPaymentMethod" },
          { "$ref": "#/components/schemas/BankAccountPaymentMethod" }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/CardPaymentMethod",
            "bank_account": "#/components/schemas/BankAccountPaymentMethod"
          }
        }
      },
      "TransactionRequest": {
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The transaction amount in [minor units](https://docs.monite.com/references/currencies#minor-units). Positive values for in-flow, negative values for out-flow."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code.",
            "examples": ["EUR"]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "A human-readable description of the transaction."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who made the transaction, if applicable."
          },
          "external_id": {
            "type": "string",
            "maxLength": 128,
            "description": "External identifier for idempotency, if provided by the source system."
          },
          "merchant_amount": {
            "type": "integer",
            "description": "Original merchant transaction amount in minor units."
          },
          "merchant_currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code for the `merchant_amount`."
          },
          "merchant_location": {
            "type": "string",
            "maxLength": 128,
            "description": "The merchant location.",
            "examples": ["Berlin, Germany"]
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 128,
            "description": "The merchant name.",
            "examples": ["Acme Inc."]
          },
          "partner_metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "description": "Extensible key-value pairs for storing additional custom information for partner needs."
          },
          "payment_method": {
            "$ref": "#/components/schemas/TransactionPaymentMethod"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the transaction was initiated."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/TransactionStatusEnum" }],
            "description": "The current processing status of the transaction.",
            "default": "created"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TransactionTypeEnum" }],
            "description": "The nature of the transaction."
          }
        },
        "type": "object",
        "required": [
          "amount",
          "currency",
          "merchant_amount",
          "merchant_currency",
          "merchant_location",
          "merchant_name",
          "payment_method",
          "type"
        ]
      },
      "TransactionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "A unique Monite-generated ID assigned to this transaction."
          },
          "amount": {
            "type": "integer",
            "description": "The transaction amount in [minor units](https://docs.monite.com/references/currencies#minor-units). Positive values for in-flow, negative values for out-flow."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code.",
            "examples": ["EUR"]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "A human-readable description of the transaction."
          },
          "entity_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity that owns this resource."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who made the transaction, if applicable."
          },
          "external_id": {
            "type": "string",
            "maxLength": 128,
            "description": "External identifier for idempotency, if provided by the source system."
          },
          "merchant_amount": {
            "type": "integer",
            "description": "Original merchant transaction amount in minor units."
          },
          "merchant_currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code for the `merchant_amount`."
          },
          "merchant_location": {
            "type": "string",
            "maxLength": 128,
            "description": "The merchant location.",
            "examples": ["Berlin, Germany"]
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 128,
            "description": "The merchant name.",
            "examples": ["Acme Inc."]
          },
          "partner_metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "description": "Extensible key-value pairs for storing additional custom information for partner needs."
          },
          "payment_method": {
            "$ref": "#/components/schemas/TransactionPaymentMethod"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the transaction was initiated."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/TransactionStatusEnum" }],
            "description": "The current processing status of the transaction.",
            "default": "created"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TransactionTypeEnum" }],
            "description": "The nature of the transaction."
          }
        },
        "type": "object",
        "required": [
          "id",
          "amount",
          "currency",
          "entity_id",
          "merchant_amount",
          "merchant_currency",
          "merchant_location",
          "merchant_name",
          "payment_method",
          "started_at",
          "type"
        ]
      },
      "TransactionResponseList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/TransactionResponse" },
            "type": "array"
          },
          "next_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "type": "string",
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "type": "object",
        "required": ["data"],
        "description": "A paginated list of transactions."
      },
      "TransactionStatusEnum": {
        "type": "string",
        "enum": [
          "created",
          "processing",
          "succeeded",
          "declined",
          "refunded",
          "failed"
        ]
      },
      "TransactionTypeEnum": {
        "type": "string",
        "enum": [
          "capture",
          "refund",
          "cash_withdrawal",
          "fee",
          "adjustment",
          "reversal"
        ]
      },
      "TransactionUpdateRequest": {
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The transaction amount in [minor units](https://docs.monite.com/references/currencies#minor-units). Positive values for in-flow, negative values for out-flow."
          },
          "currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code.",
            "examples": ["EUR"]
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "A human-readable description of the transaction."
          },
          "entity_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the entity user who made the transaction, if applicable."
          },
          "external_id": {
            "type": "string",
            "maxLength": 128,
            "description": "External identifier for idempotency, if provided by the source system."
          },
          "merchant_amount": {
            "type": "integer",
            "description": "Original merchant transaction amount in minor units."
          },
          "merchant_currency": {
            "allOf": [{ "$ref": "#/components/schemas/CurrencyEnum" }],
            "description": "ISO currency code for the `merchant_amount`."
          },
          "merchant_location": {
            "type": "string",
            "maxLength": 128,
            "description": "The merchant location.",
            "examples": ["Berlin, Germany"]
          },
          "merchant_name": {
            "type": "string",
            "maxLength": 128,
            "description": "The merchant name.",
            "examples": ["Acme Inc."]
          },
          "partner_metadata": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "description": "Extensible key-value pairs for storing additional custom information for partner needs."
          },
          "payment_method": {
            "$ref": "#/components/schemas/TransactionPaymentMethod"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the transaction was initiated."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/TransactionStatusEnum" }],
            "description": "The current processing status of the transaction.",
            "default": "created"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/TransactionTypeEnum" }],
            "description": "The nature of the transaction."
          }
        },
        "type": "object"
      },
      "Unit": {
        "properties": {
          "designation": {
            "type": "string",
            "minLength": 1,
            "examples": ["kg"]
          },
          "name": { "type": "string", "minLength": 1, "examples": ["Kilogram"] }
        },
        "type": "object",
        "required": ["designation", "name"]
      },
      "UnitListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/UnitResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "UnitRequest": {
        "properties": {
          "description": { "type": "string", "maxLength": 200 },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 }
        },
        "type": "object",
        "required": ["name"]
      },
      "UnitResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "description": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "name"]
      },
      "UnitUpdate": {
        "properties": {
          "description": { "type": "string", "maxLength": 200 },
          "name": { "type": "string", "maxLength": 100, "minLength": 1 }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCounterpartBankAccount": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "description": "The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.",
            "example": "Bob Jones"
          },
          "account_number": {
            "type": "string",
            "description": "The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.",
            "example": "12345678"
          },
          "bic": {
            "type": "string",
            "maxLength": 11,
            "description": "The BIC/SWIFT code of the bank.",
            "example": "DEUTDEFFXXX"
          },
          "country": { "$ref": "#/components/schemas/AllowedCountries" },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "iban": {
            "type": "string",
            "maxLength": 34,
            "description": "The IBAN of the bank account.",
            "example": "DE74500700100100000900"
          },
          "name": { "type": "string", "maxLength": 200 },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs."
          },
          "routing_number": {
            "type": "string",
            "description": "The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits."
          },
          "sort_code": {
            "type": "string",
            "description": "The bank's sort code.",
            "example": "123456"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCounterpartContactPayload": {
        "properties": {
          "address": {
            "allOf": [{ "$ref": "#/components/schemas/CounterpartAddress" }],
            "description": "The address of a contact person."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of a contact person.",
            "example": "contact@example.org"
          },
          "first_name": {
            "type": "string",
            "description": "The first name of a contact person.",
            "example": "Mary"
          },
          "last_name": {
            "type": "string",
            "description": "The last name of a contact person.",
            "example": "O'Brien"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of a contact person",
            "example": "5551235476"
          },
          "title": {
            "type": "string",
            "description": "The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.",
            "example": "Ms."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "The contact person for an organization."
      },
      "UpdateCounterpartEinvoicingCredentialSchema": {
        "properties": {
          "network_identifier": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "network_schema": {
            "$ref": "#/components/schemas/EinvoiceSchemaTypeEnum"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCreditNote": {
        "properties": {
          "counterpart_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_contact": {
            "allOf": [
              { "$ref": "#/components/schemas/ReceivableCounterpartContact2" }
            ],
            "description": "Additional information about counterpart contacts."
          },
          "counterpart_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address where goods were shipped / where services were provided."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "entity": { "$ref": "#/components/schemas/ReceivableEntityBase" },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "line_items": {
            "$ref": "#/components/schemas/UpdateLineItemForCreditNote"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateCreditNotePayload": {
        "properties": {
          "credit_note": { "$ref": "#/components/schemas/UpdateCreditNote" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["credit_note"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateCustomTemplateSchemaRequest": {
        "properties": {
          "body_template": {
            "type": "string",
            "description": "Jinja2 compatible string with email body"
          },
          "language": {
            "allOf": [{ "$ref": "#/components/schemas/LanguageCodeEnum" }],
            "description": "Lowercase ISO code of language"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "description": "Custom template name",
            "serialization_alias": "template_name"
          },
          "subject_template": {
            "type": "string",
            "description": "Jinja2 compatible string with email subject"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateEinvoicingAddress": {
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Street address line 1"
          },
          "address_line2": {
            "type": "string",
            "description": "Street address line 2"
          },
          "city": { "type": "string", "description": "City name" },
          "postal_code": { "type": "string", "description": "Postal/ZIP code" },
          "state": { "type": "string", "description": "State/Province/County" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["address_line1", "city", "postal_code"]
      },
      "UpdateEntityAddressSchema": {
        "properties": {
          "city": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A city (a full name) where the entity is registered"
          },
          "line1": {
            "anyOf": [
              { "type": "string", "maxLength": 200, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A street where the entity is registered"
          },
          "line2": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "An alternative street used by the entity"
          },
          "postal_code": {
            "anyOf": [
              { "type": "string", "maxLength": 10, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A postal code of the address where the entity is registered"
          },
          "state": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "A state in a country where the entity is registered"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateEntityBankAccountRequest": {
        "properties": {
          "account_holder_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "description": "The name of the person or business that owns this bank account. If the account currency is GBP or USD, the holder name cannot be changed to an empty string.",
            "example": "Cayla Lloyd"
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "description": "User-defined name of this bank account, such as 'Primary account' or 'Savings account'.",
            "example": "Primary account"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "Data that can be updated in existing bank accounts of an entity."
      },
      "UpdateEntityRequest": {
        "properties": {
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/UpdateEntityAddressSchema" },
              { "type": "null" }
            ],
            "description": "An address description of the entity"
          },
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "An official email address of the entity"
          },
          "individual": {
            "anyOf": [
              { "$ref": "#/components/schemas/OptionalIndividualSchema" },
              { "type": "null" }
            ],
            "description": "A set of meta data describing the individual"
          },
          "organization": {
            "anyOf": [
              { "$ref": "#/components/schemas/OptionalOrganizationSchema" },
              { "type": "null" }
            ],
            "description": "A set of meta data describing the organization"
          },
          "phone": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "description": "The contact phone number of the entity. Required for US organizations to use payments."
          },
          "registration_authority": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided.",
            "examples": ["Amtsgericht Charlottenburg"]
          },
          "registration_number": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "(Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available.",
            "examples": ["HRB 202324"]
          },
          "tax_id": {
            "anyOf": [
              { "type": "string", "maxLength": 30, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered."
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "description": "A website of the entity"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "description": "A schema for a request to update an entity"
      },
      "UpdateEntityUserRequest": {
        "properties": {
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "An entity user business email"
          },
          "first_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "First name",
            "examples": ["Casey"]
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Last name",
            "examples": ["Peters"]
          },
          "login": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Login",
            "examples": ["caseyp"]
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "An entity user phone number in the international format"
          },
          "role_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "description": "UUID of the role assigned to this entity user"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Title",
            "examples": ["Finance Manager"]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateInvoice": {
        "properties": {
          "contact_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart contact."
          },
          "counterpart_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_einvoicing_credentials_id": {
            "type": "string",
            "format": "uuid",
            "description": "E-invoicing credentials ID of the counterpart"
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a receivable."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "entity": { "$ref": "#/components/schemas/ReceivableEntityBase" },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided. Can be a current, past, or future date.\n\nSome countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.\n\nIn countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user."
          },
          "is_einvoice": {
            "type": "boolean",
            "description": "Is this Invoice will be sent through E-invoice system"
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItemUpdate" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "network_credentials_id": {
            "type": "string",
            "format": "uuid",
            "description": "E-invoicing network credentials ID of the entity"
          },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_page_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "Link to your invoice's custom payment rails or external payment link."
          },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "payment_terms": {
            "$ref": "#/components/schemas/InlinePaymentTermsRequestPayload"
          },
          "payment_terms_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the payment terms."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable."
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateInvoicePayload": {
        "properties": {
          "invoice": { "$ref": "#/components/schemas/UpdateInvoice" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["invoice"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateIssuedInvoice": {
        "properties": {
          "contact_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart contact."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Id of a new or updated counterpart"
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "The date by which the invoice must be paid."
          },
          "entity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReceivableEntityOrganizationRequest"
              },
              {
                "$ref": "#/components/schemas/ReceivableEntityIndividualRequest"
              }
            ]
          },
          "entity_address": {
            "$ref": "#/components/schemas/ReceivableEntityAddressSchema"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "fulfillment_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the goods are shipped or the service is provided. Can be a current, past, or future date.\n\nSome countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.\n\nIn countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user."
          },
          "issue_date": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime when the invoice was issued"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "overdue_reminder_id": { "type": "string", "format": "uuid" },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_reminder_id": { "type": "string", "format": "uuid" },
          "payment_terms": {
            "$ref": "#/components/schemas/InlinePaymentTermsRequestPayload"
          },
          "payment_terms_id": { "type": "string", "format": "uuid" },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateIssuedInvoicePayload": {
        "properties": {
          "issued_invoice": {
            "$ref": "#/components/schemas/UpdateIssuedInvoice"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["issued_invoice"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateLineItemForCreditNote": {
        "additionalProperties": {
          "$ref": "#/components/schemas/UpdateProductForCreditNote"
        },
        "type": "object",
        "description": "Line item with given product id can be changed only once",
        "example": {
          "6639ac63-0622-4bd9-b340-31c25e2096b8": {
            "quantity": 5,
            "price_diff": 100,
            "old_price": 400
          }
        }
      },
      "UpdateLineItems": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/LineItem" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "UpdateMeEntityUserRequest": {
        "properties": {
          "email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "description": "An entity user business email"
          },
          "first_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "First name",
            "examples": ["Casey"]
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Last name",
            "examples": ["Peters"]
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "An entity user phone number in the international format"
          },
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 255 },
              { "type": "null" }
            ],
            "description": "Title",
            "examples": ["Finance Manager"]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdatePasswordPayload": {
        "properties": {
          "new_password": { "type": "string", "minLength": 12 },
          "old_password": { "type": "string", "minLength": 12 }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["new_password", "old_password"]
      },
      "UpdatePaymentIntentPayload": {
        "properties": { "amount": { "type": "integer" } },
        "additionalProperties": false,
        "type": "object",
        "required": ["amount"]
      },
      "UpdateProductForCreditNote": {
        "properties": {
          "old_price": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 1.0,
            "description": "The old price of the line item. Used to choose for which line item new price should be applied"
          },
          "price_diff": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 1.0,
            "description": "The price diff of the line item, i.e. applied discount"
          },
          "quantity": {
            "type": "number",
            "maximum": 2147483647.0,
            "minimum": 1.0,
            "description": "The quantity of each of the goods, materials, or services listed in the receivable."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quantity"]
      },
      "UpdatePurchaseOrderPayloadSchema": {
        "properties": {
          "counterpart_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart unique ID."
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID identifier that applied to purchase order"
          },
          "items": {
            "items": { "$ref": "#/components/schemas/PurchaseOrderItem" },
            "type": "array",
            "description": "List of item to purchase"
          },
          "message": {
            "type": "string",
            "description": "Msg which will be send to counterpart for who the purchase order is issued."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "Project id of a purchase order"
          },
          "valid_for_days": {
            "type": "integer",
            "minimum": 1.0,
            "description": "Number of days for which purchase order is valid"
          }
        },
        "type": "object",
        "description": "Represents an Accounts Purchase Order document created by entity."
      },
      "UpdateQuote": {
        "properties": {
          "contact_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart contact."
          },
          "counterpart_billing_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company."
          },
          "counterpart_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the counterpart."
          },
          "counterpart_shipping_address_id": {
            "type": "string",
            "format": "uuid",
            "description": "Address where goods were shipped / where services were provided."
          },
          "counterpart_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Counterpart VAT ID id"
          },
          "currency": { "$ref": "#/components/schemas/CurrencyEnum" },
          "deduction_amount": {
            "type": "integer",
            "maximum": 9007199254740991.0,
            "minimum": 0.0,
            "description": "The amount of tax deducted in minor units"
          },
          "deduction_memo": {
            "type": "string",
            "description": "A note with additional information about a tax deduction"
          },
          "discount": {
            "allOf": [{ "$ref": "#/components/schemas/Discount2" }],
            "description": "The discount for a receivable."
          },
          "document_rendering": {
            "allOf": [
              { "$ref": "#/components/schemas/DocumentRenderingSettings" }
            ],
            "description": "Settings for rendering documents in PDF format, including settings for line items and specific document types."
          },
          "entity": { "$ref": "#/components/schemas/ReceivableEntityBase" },
          "entity_bank_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity bank account ID"
          },
          "entity_vat_id_id": {
            "type": "string",
            "format": "uuid",
            "description": "Entity VAT ID id"
          },
          "expiry_date": {
            "type": "string",
            "format": "date",
            "description": "The date (in ISO 8601 format) until which the quote is valid."
          },
          "footer": {
            "type": "string",
            "description": "Optional text displayed below the line items table in the PDF."
          },
          "line_items": {
            "items": { "$ref": "#/components/schemas/LineItemUpdate" },
            "type": "array"
          },
          "memo": {
            "type": "string",
            "description": "A note with additional information for a receivable"
          },
          "partner_metadata": {
            "type": "object",
            "description": "Metadata for partner needs"
          },
          "payment_terms": {
            "$ref": "#/components/schemas/InlinePaymentTermsRequestPayload"
          },
          "payment_terms_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the payment terms."
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "description": "A project related to current receivable"
          },
          "quote_accept_page_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "description": "Link for custom quote accept page"
          },
          "signature_required": {
            "type": "boolean",
            "description": "Whether acceptance a quote requires a signature."
          },
          "tag_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "description": "A list of IDs of user-defined tags (labels) assigned to this receivable."
          },
          "trade_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Trade name of the entity"
          },
          "vat_exempt": {
            "type": "boolean",
            "description": "Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not."
          },
          "vat_exemption_rationale": {
            "type": "string",
            "description": "The reason for the VAT exemption, if applicable."
          },
          "withholding_tax_rate": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "The amount of tax withheld in percent minor units"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateQuotePayload": {
        "properties": {
          "quote": { "$ref": "#/components/schemas/UpdateQuote" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["quote"],
        "description": "Helper class that provides a standard way to create an ABC using\ninheritance."
      },
      "UpdateRecurrencePayload": {
        "properties": {
          "automation_level": {
            "allOf": [{ "$ref": "#/components/schemas/AutomationLevel" }],
            "description": "Controls how invoices are processed when generated:\n- \"draft\": Creates invoices in draft status, requiring manual review, issuing, and sending\n- \"issue\": Automatically issues invoices but requires manual sending\n- \"issue_and_send\": Fully automates the process (creates, issues, and sends invoices)\n\nDefault: \"issue\" (or \"issue_and_send\" if subject_text and body_text are provided)\n\nNote: When using \"issue_and_send\", both subject_text and body_text must be provided.\n"
          },
          "body_text": {
            "type": "string",
            "minLength": 1,
            "description": "The body text for the email that will be sent with the recurring invoice."
          },
          "day_of_month": {
            "allOf": [{ "$ref": "#/components/schemas/DayOfMonth" }],
            "description": "Deprecated, use `start_date` instead",
            "deprecated": true
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "description": "The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified."
          },
          "end_month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "description": "Deprecated, use `end_date` instead",
            "deprecated": true
          },
          "end_year": {
            "type": "integer",
            "maximum": 2077.0,
            "description": "Deprecated, use `end_date` instead",
            "deprecated": true
          },
          "frequency": {
            "allOf": [{ "$ref": "#/components/schemas/RecurrenceFrequency" }],
            "description": "How often the invoice will be created."
          },
          "interval": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "description": "The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months."
          },
          "max_occurrences": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "description": "How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified."
          },
          "recipients": {
            "allOf": [{ "$ref": "#/components/schemas/Recipients" }],
            "description": "An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field."
          },
          "start_date": {
            "type": "string",
            "format": "date",
            "description": "The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`."
          },
          "subject_text": {
            "type": "string",
            "minLength": 1,
            "description": "The subject for the email that will be sent with the recurring invoice."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateRoleRequest": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 255, "minLength": 1 },
              { "type": "null" }
            ],
            "description": "Role name"
          },
          "permissions": {
            "anyOf": [
              { "$ref": "#/components/schemas/BizObjectsSchema-Input" },
              { "type": "null" }
            ],
            "description": "Access permissions"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateTextTemplatePayload": {
        "properties": {
          "name": { "type": "string" },
          "template": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateUserProfilePayload": {
        "properties": {
          "fullname": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "password": {
            "anyOf": [
              { "$ref": "#/components/schemas/UpdatePasswordPayload" },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UpdateWebhookSubscriptionRequest": {
        "properties": {
          "event_types": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ]
          },
          "object_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/WebhookObjectType" },
              { "type": "null" }
            ]
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UploadFile": {
        "properties": {
          "file": { "type": "string", "format": "binary" },
          "file_type": { "$ref": "#/components/schemas/AllowedFileTypes" }
        },
        "type": "object",
        "required": ["file", "file_type"]
      },
      "UserUpdatePayload": {
        "properties": {
          "fullname": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }]
          },
          "password": {
            "anyOf": [{ "type": "string", "minLength": 12 }, { "type": "null" }]
          },
          "role_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "UsersInviteRequest": {
        "properties": {
          "email": { "type": "string", "format": "email" },
          "role_id": { "type": "string", "format": "uuid" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["email", "role_id"]
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array"
          },
          "msg": { "type": "string" },
          "type": { "type": "string" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"]
      },
      "Variable": {
        "properties": {
          "description": { "type": "string" },
          "name": { "type": "string" }
        },
        "type": "object",
        "required": ["description", "name"]
      },
      "VariablesObject": {
        "properties": {
          "object_subtype": { "$ref": "#/components/schemas/DocumentTypeEnum" },
          "object_type": { "type": "string" },
          "variables": {
            "items": { "$ref": "#/components/schemas/Variable" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["object_subtype", "object_type", "variables"]
      },
      "VariablesObjectList": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/VariablesObject" },
            "type": "array"
          }
        },
        "type": "object",
        "required": ["data"]
      },
      "VariablesType": {
        "type": "string",
        "enum": [
          "quote",
          "invoice",
          "credit_note",
          "discount_reminder",
          "final_reminder",
          "overdue_reminder"
        ]
      },
      "VatIDTypeEnum": {
        "type": "string",
        "enum": [
          "ae_trn",
          "au_abn",
          "au_arn",
          "bg_uic",
          "br_cnpj",
          "br_cpf",
          "ca_bn",
          "ca_gst_hst",
          "ca_pst_bc",
          "ca_pst_mb",
          "ca_pst_sk",
          "ca_qst",
          "ch_vat",
          "cl_tin",
          "es_cif",
          "eu_oss_vat",
          "eu_vat",
          "gb_vat",
          "ge_vat",
          "hk_br",
          "hu_tin",
          "id_npwp",
          "il_vat",
          "in_gst",
          "is_vat",
          "jp_cn",
          "jp_rn",
          "kr_brn",
          "li_uid",
          "mx_rfc",
          "my_frp",
          "my_itn",
          "my_sst",
          "no_vat",
          "nz_gst",
          "ru_inn",
          "ru_kpp",
          "sa_vat",
          "sg_gst",
          "sg_uen",
          "si_tin",
          "th_vat",
          "tw_vat",
          "ua_vat",
          "us_ein",
          "za_vat",
          "unknown"
        ]
      },
      "VatModeEnum": { "type": "string", "enum": ["exclusive", "inclusive"] },
      "VatRateComponent": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "Display name of the Tax."
          },
          "value": {
            "type": "number",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent multiplied by a 100. Example: 12.125% is 1212.5. Will be rounded to 2 decimal places"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "value"]
      },
      "VatRateComponent2": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "Display name of the Tax."
          },
          "value": {
            "type": "number",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent multiplied by a 100. Example: 12.125% is 1212.5. Will be rounded to 2 decimal places"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["name", "value"]
      },
      "VatRateCreator": { "type": "string", "enum": ["monite", "accounting"] },
      "VatRateListResponse": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/VatRateResponse" },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "VatRateRequest": {
        "properties": {
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "description": "Date starting from when this rate can be used."
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "description": "Date when this rate was depreciated, after this date rate cannot be used."
          },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["country"]
      },
      "VatRateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the vat rate object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when this rate was recorded in the table."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date/time when this rate was updated in the table."
          },
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "created_by": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateCreator" }],
            "description": "By whom this rate was recorded: monite employee | accounting system.",
            "default": "monite",
            "deprecated": true
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateStatusEnum" }],
            "description": "Status for this vat rate: active | inactive."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "description": "Date starting from when this rate can be used."
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "description": "Date when this rate was depreciated, after this date rate cannot be used."
          },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "updated_at", "country", "value"]
      },
      "VatRateStatusEnum": { "type": "string", "enum": ["active", "inactive"] },
      "VatRateUpdate": {
        "properties": {
          "components": {
            "items": { "$ref": "#/components/schemas/VatRateComponent2" },
            "type": "array",
            "maxItems": 3,
            "minItems": 1,
            "description": "Sub-taxes included in the VAT."
          },
          "country": {
            "allOf": [{ "$ref": "#/components/schemas/AllowedCountries" }],
            "description": "Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
            "example": "DE"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VatRateStatusEnum" }],
            "description": "Status for this vat rate: active | inactive."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "description": "Date starting from when this rate can be used."
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "description": "Date when this rate was depreciated, after this date rate cannot be used."
          },
          "value": {
            "type": "integer",
            "maximum": 10000.0,
            "minimum": 0.0,
            "description": "Percent minor units. Example: 12.5% is 1250."
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "VerificationAirwallexPlaidRequest": {
        "properties": {
          "client_name": {
            "type": "string",
            "maxLength": 30,
            "minLength": 1,
            "description": "The name of your application to be displayed in Plaid Modal"
          },
          "link_customization_name": {
            "type": "string",
            "minLength": 1,
            "description": "The name of the Link customization configured on the Plaid Dashboard. If not specified, the default customization will be applied"
          },
          "redirect_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "URL to handle the OAuth verification flow"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_name", "redirect_url"]
      },
      "VerificationAirwallexPlaidResponse": {
        "properties": {
          "client_name": {
            "type": "string",
            "maxLength": 30,
            "minLength": 1,
            "description": "Client name from the request"
          },
          "expires_at": { "type": "string", "format": "date-time" },
          "link_customization_name": {
            "type": "string",
            "minLength": 1,
            "description": "Customization name from the request"
          },
          "link_token": {
            "type": "string",
            "minLength": 1,
            "description": "Link token that should be used to init Plaid SDK"
          },
          "redirect_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "description": "URL from the request"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["client_name", "expires_at", "link_token", "redirect_url"]
      },
      "VerificationError": {
        "properties": {
          "code": { "type": "string" },
          "details": { "type": "string" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["code", "details"]
      },
      "VerificationRequest": {
        "properties": {
          "airwallex_plaid": {
            "$ref": "#/components/schemas/VerificationAirwallexPlaidRequest"
          },
          "type": { "$ref": "#/components/schemas/BankAccountVerificationType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["airwallex_plaid", "type"]
      },
      "VerificationResponse": {
        "properties": {
          "airwallex_plaid": {
            "$ref": "#/components/schemas/VerificationAirwallexPlaidResponse"
          },
          "type": { "$ref": "#/components/schemas/BankAccountVerificationType" }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["airwallex_plaid", "type"]
      },
      "VerificationStatusEnum": {
        "type": "string",
        "enum": ["enabled", "disabled", "pending"]
      },
      "VerifyPhoneNumberPayload": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number of person attached to onboarding link"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "VerifyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Entry UUID"
          },
          "domain": {
            "type": "string",
            "format": "hostname",
            "description": "The domain name."
          },
          "status": { "type": "string" }
        },
        "type": "object",
        "required": ["id", "domain", "status"]
      },
      "WCBusinessStatus": {
        "type": "string",
        "enum": ["NEW", "INPUT_REQUIRED", "ONBOARDED"],
        "description": "- NEW: A business has been created within Kanmon\n- ONBOARDED: A business has completed all of the onboarding steps within Kanmon and is now awaiting underwriting.\n- INPUT_REQUIRED: A business will be asked to provide required data"
      },
      "WCInvoiceStatus": {
        "type": "string",
        "enum": [
          "DRAFT",
          "NEW",
          "FUNDED",
          "PAID",
          "LATE",
          "REJECTED",
          "DEFAULTED"
        ],
        "description": "- DRAFT: The invoice is in draft state. The business has not submitted the invoice for funding.\n- NEW: The business has submitted an invoice and it is under review.\n- FUNDED: The funds for the invoice have been disbursed. The business is now expected to pay back the funds.\n- PAID: A payment was made that fully paid off an outstanding invoice.\n- LATE: A payment was not made towards an outstanding invoice.\n- REJECTED: An invoice was rejected during the funding step.\n- DEFAULTED: A payment was not made towards an outstanding invoice."
      },
      "WCOfferStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "ACCEPTED",
          "EXPIRED",
          "CURRENT",
          "LATE",
          "CLOSED",
          "DEFAULTED"
        ],
        "description": "- NEW: A new offer has been extended to the business.\n- ACCEPTED: Business has accepted an offer and is waiting on the closing process.\n- EXPIRED: Business has not accepted the offer, and the offer has expired.\n- CURRENT: A loan has been originated and does not currently have any outstanding delayed payments.\n- LATE: One or more repayments on the issued product have failed.\n- CLOSED: The issued product is no longer available to the business.\n- DEFAULTED: The business has failed to meet agreed-upon terms of the loan agreement."
      },
      "WCRepaymentType": {
        "type": "string",
        "enum": ["MULTIPLE_DURATION", "FIXED_DURATION", "FIXED_DATE"],
        "description": "- MULTIPLE_DURATION: The business can repay the loan over multiple durations.\n- FIXED_DURATION: The business must repay the loan over a fixed duration.\n- FIXED_DATE: The business must repay the loan on a fixed date."
      },
      "WebhookDeliveryCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "WebhookDeliveryPaginationResource": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/WebhookDeliveryResource" },
            "type": "array",
            "description": "A set of webhooks returned per page"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "WebhookDeliveryResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "event_id": { "type": "string", "format": "uuid" },
          "requests_made_count": { "type": "integer" },
          "response": { "anyOf": [{ "type": "string" }, { "type": "null" }] },
          "response_status_code": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }]
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          },
          "was_successful": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "event_id", "requests_made_count", "url"]
      },
      "WebhookObjectType": {
        "type": "string",
        "enum": [
          "account",
          "accounting_connection",
          "approval",
          "approval_request",
          "approval_policy",
          "approval_policy_process",
          "batch_payment",
          "comment",
          "counterpart",
          "counterpart_address",
          "counterpart_bank_account",
          "counterpart_contact_person",
          "counterpart_partner_metadata",
          "counterpart_tax_id",
          "entity",
          "entity_bank_account",
          "entity_settings",
          "entity_user",
          "export",
          "overdue_reminder",
          "partner_settings",
          "payable",
          "payables_credit_note",
          "payables_purchase_order",
          "payable.line_item",
          "payment",
          "payment_intent",
          "payment_link",
          "payment_reminder",
          "product",
          "project",
          "receivable",
          "recurrence",
          "role",
          "tag",
          "todo_task",
          "workflow",
          "workflow_pipeline",
          "ocr_task",
          "delivery_note",
          "receipt",
          "transaction"
        ]
      },
      "WebhookSubscriptionCursorFields": {
        "type": "string",
        "enum": ["created_at", "updated_at"]
      },
      "WebhookSubscriptionPaginationResource": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/WebhookSubscriptionResource"
            },
            "type": "array",
            "description": "A set of webhook settings of different types returned per page"
          },
          "next_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page)."
          },
          "prev_pagination_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "description": "A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page)."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["data"]
      },
      "WebhookSubscriptionResource": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "event_types": { "items": { "type": "string" }, "type": "array" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "status": {
            "$ref": "#/components/schemas/WebhookSubscriptionStatus"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "type": "object",
        "required": ["id", "event_types", "object_type", "status", "url"]
      },
      "WebhookSubscriptionResourceWithSecret": {
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "event_types": { "items": { "type": "string" }, "type": "array" },
          "object_type": { "$ref": "#/components/schemas/WebhookObjectType" },
          "secret": { "type": "string" },
          "status": {
            "$ref": "#/components/schemas/WebhookSubscriptionStatus"
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri"
          }
        },
        "type": "object",
        "required": [
          "id",
          "event_types",
          "object_type",
          "secret",
          "status",
          "url"
        ]
      },
      "WebhookSubscriptionStatus": {
        "type": "string",
        "enum": ["enabled", "disabled"]
      },
      "YapilyCountriesCoverageCodes": {
        "type": "string",
        "enum": ["BE", "GB", "IT", "IE", "NL", "DE", "AT"]
      },
      "portal_v1_companies_id_logo": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "portal_v1_profile_avatar": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      },
      "portal_v1_users_id_avatar": {
        "properties": { "file": { "type": "string", "format": "binary" } },
        "type": "object",
        "required": ["file"]
      }
    },
    "securitySchemes": { "HTTPBearer": { "type": "http", "scheme": "bearer" } }
  },
  "tags": [
    { "name": "Access tokens" },
    { "name": "Accounting connections" },
    { "name": "Accounting data pull" },
    { "name": "Accounting synchronized records" },
    { "name": "Accounting tax rates" },
    { "name": "Analytics" },
    { "name": "Approval policies" },
    { "name": "Approval requests" },
    { "name": "Auth" },
    { "name": "Batch payments" },
    { "name": "Comments" },
    { "name": "Companies" },
    { "name": "Counterpart VAT IDs" },
    { "name": "Counterpart addresses" },
    { "name": "Counterpart bank accounts" },
    { "name": "Counterpart contacts" },
    { "name": "Counterpart e-invoicing credentials" },
    { "name": "Counterparts" },
    { "name": "Credit notes" },
    { "name": "Currencies internal" },
    { "name": "Custom VAT rates" },
    { "name": "Data export" },
    { "name": "Data export - extra data" },
    { "name": "Delivery notes" },
    { "name": "E-invoicing Search" },
    { "name": "E-invoicing connections" },
    { "name": "Email exists" },
    { "name": "Entities" },
    { "name": "Entity VAT IDs" },
    { "name": "Entity bank account verifications" },
    { "name": "Entity bank accounts" },
    { "name": "Entity onboarding data" },
    { "name": "Entity persons" },
    { "name": "Entity users" },
    { "name": "Events" },
    { "name": "Files" },
    { "name": "Financing" },
    { "name": "Internal" },
    { "name": "Ledger accounts" },
    { "name": "Mail templates" },
    { "name": "Mailbox domains" },
    { "name": "Mailboxes" },
    { "name": "Measure units" },
    { "name": "Monite AI" },
    { "name": "OCR" },
    { "name": "Onboarding documents" },
    { "name": "Onboarding links" },
    { "name": "Onboarding requirements" },
    { "name": "Overdue reminders" },
    { "name": "PDF templates" },
    { "name": "Partner settings" },
    { "name": "Partners Portal Projects" },
    { "name": "Payable line items" },
    { "name": "Payables" },
    { "name": "Payables internal" },
    { "name": "Payment intents" },
    { "name": "Payment intents internal" },
    { "name": "Payment links" },
    { "name": "Payment methods" },
    { "name": "Payment records" },
    { "name": "Payment reminders" },
    { "name": "Payment terms" },
    { "name": "Products" },
    { "name": "Profile" },
    { "name": "Project dictionaries" },
    { "name": "Projects" },
    { "name": "Projects settings" },
    { "name": "Purchase orders" },
    { "name": "Quotes internal" },
    { "name": "Receipts" },
    { "name": "Receivables" },
    { "name": "Recurrences" },
    { "name": "Register" },
    { "name": "Roles" },
    { "name": "Secrets" },
    { "name": "Tags" },
    { "name": "Text templates" },
    { "name": "Transactions" },
    { "name": "Users" },
    { "name": "VAT rates" },
    { "name": "VAT rates internal" },
    { "name": "Webhook deliveries" },
    { "name": "Webhook subscriptions" },
    { "name": "Webhooks" },
    { "name": "admin" }
  ]
}
