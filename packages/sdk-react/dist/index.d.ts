import * as _emotion_react_jsx_runtime from '@emotion/react/jsx-runtime';
import { GridSortDirection } from '@mui/x-data-grid/models/gridSortModel';
import * as react from 'react';
import { SetStateAction, Context, ReactNode, MouseEvent, FocusEvent, ContextType, SyntheticEvent } from 'react';
import { FieldValues, Control, FieldPath, DeepRequired, SetFieldValue } from 'react-hook-form';
import * as _tanstack_react_query from '@tanstack/react-query';
import { QueryClient } from '@tanstack/react-query';
import { ServiceOperationQuery, ServiceOperationMutation, requestFn, QraftContextValue } from '@openapi-qraft/react';
import { DialogProps } from '@mui/material/Dialog';
import { SxProps, ChipProps, Theme as Theme$1, MenuProps, ButtonProps } from '@mui/material';
import { IconButtonProps } from '@mui/material/IconButton';
import { Theme } from '@mui/material/styles';
import { GridSortDirection as GridSortDirection$1, GridColDef } from '@mui/x-data-grid';
import * as _tanstack_query_core from '@tanstack/query-core';
import { UseChatOptions } from '@ai-sdk/react';
import { UIMessage, JSONValue } from '@ai-sdk/ui-utils';
export { Message, UIMessage } from '@ai-sdk/ui-utils';
import { Messages, I18n } from '@lingui/core';
import { Hub } from '@sentry/react';
import { Locale } from 'date-fns';
export { toast } from 'react-hot-toast';
import * as _mui_x_data_grid_internals from '@mui/x-data-grid/internals';

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */
interface paths {
    "/accounting/payables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payables list from accounting system
         * @description Returns a list of accounts payable invoices (bills) that exist in the entity's accounting system. This requires that an accounting connection has been previously established. Refer to the [Accounting integration guide](https://docs.monite.com/accounting/integration/index) for details.
         *
         *     This endpoint only provides read-only access to the accounting system's data but does not pull those payables into Monite. You can use it to review the data in the accounting system and find out which of those payables already exist or do not exist in Monite.
         *
         *     Data is actual as of the date and time of the last accounting synchronization, which is specified by the `last_pull` value in the response from `GET /accounting_connections/{connection_id}`. To make sure you are accessing the most up-to-date accounting data, you can use `POST /accounting_connections/{connection_id}/sync` to trigger on-demand synchronization before getting the list of payables.
         */
        get: operations["get_accounting_payables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/payables/{payable_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payable details from accounting system
         * @description Returns information about an individual payable invoice (bill) that exists in the entity's accounting system. This payable may or may not also exist in Monite.
         */
        get: operations["get_accounting_payables_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/receivables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoice list from accounting system
         * @description Returns a list of invoices that exist in the entity's accounting system. This requires that an accounting connection has been previously established. Refer to the [Accounting integration guide](https://docs.monite.com/accounting/integration/index) for details.
         *
         *     This endpoint only provides read-only access to the accounting system's data but does not pull those invoices into Monite. You can use it to review the data in the accounting system and find out which of those invoices already exist or do not exist in Monite.
         *
         *     Data is actual as of the date and time of the last accounting synchronization, which is specified by the `last_pull` value in the response from `GET /accounting_connections/{connection_id}`. To make sure you are accessing the most up-to-date accounting data, you can use `POST /accounting_connections/{connection_id}/sync` to trigger on-demand synchronization before getting the invoice list.
         */
        get: operations["get_accounting_receivables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting/receivables/{invoice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoice details from accounting system
         * @description Returns information about an individual invoice that exists in the entity's accounting system. This invoice may or may not also exist in Monite.
         */
        get: operations["get_accounting_receivables_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get accounting connections
         * @description Get all connections
         */
        get: operations["get_accounting_connections"];
        put?: never;
        /**
         * Connect to an accounting system
         * @description Create new connection
         */
        post: operations["post_accounting_connections"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_connections/{connection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an accounting connection by ID
         * @description Get connection by id
         */
        get: operations["get_accounting_connections_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_connections/{connection_id}/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disconnect from an accounting system
         * @description Disconnect
         */
        post: operations["post_accounting_connections_id_disconnect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_connections/{connection_id}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Force Sync */
        post: operations["post_accounting_connections_id_sync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_synced_records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Synced Records
         * @description Get synchronized records
         */
        get: operations["get_accounting_synced_records"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_synced_records/{synced_record_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Single Synced Record
         * @description Get synchronized record by id
         */
        get: operations["get_accounting_synced_records_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_synced_records/{synced_record_id}/push": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Push Object
         * @description Push object to the accounting system manually
         */
        post: operations["post_accounting_synced_records_id_push"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_tax_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tax rate accounts
         * @description Get all tax rate accounts
         */
        get: operations["get_accounting_tax_rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounting_tax_rates/{tax_rate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a tax rate account by ID
         * @description Get tax rate account by id
         */
        get: operations["get_accounting_tax_rates_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get conversations
         * @description Retrieve all historical conversations for the authenticated user.
         *
         *         This endpoint returns a paginated list of conversations sorted by recency.
         *         Each conversation includes basic metadata such as ID, title, and creation timestamp.
         *
         *         You can control the number of results using the `limit` parameter.
         */
        get: operations["get_ai_conversations"];
        put?: never;
        /**
         * Create conversation
         * @description Create a new empty conversation for the authenticated user.
         *
         *         This endpoint initializes a conversation record that can be used with the chat endpoint.
         *         The response includes the new conversation's unique ID which should be used in subsequent
         *         chat API calls.
         */
        post: operations["post_ai_conversations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/conversations/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get conversation by ID
         * @description Retrieve a specific conversation and its messages by ID.
         *
         *         This endpoint returns the conversation metadata along with all messages exchanged
         *         between the user and the assistant. Messages are ordered chronologically.
         *         The conversation is only accessible to the user who created it.
         */
        get: operations["get_ai_conversations_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/conversations/{conversation_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat with the Argon assistant
         * @description Send a message to the Argon assistant to start a new chat or continue an existing conversation.
         *
         *         This endpoint allows:
         *         - Continuing an existing conversation by providing a valid conversation_id
         *         - Sending user messages to receive AI-generated responses
         *         - Streaming responses back to the client in real-time
         *
         *         The response is a StreamingResponse that delivers chunks of the assistant's
         *         message as they are generated. The stream contains JSON-formatted message parts,
         *         token usage statistics, and completion indicators.
         */
        post: operations["post_ai_conversations_id_messages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/message_feedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a message as helpful or not */
        post: operations["post_ai_message_feedbacks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/message_feedbacks/commentary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post feedback commentary for a message */
        post: operations["post_ai_message_feedbacks_commentary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user prompts
         * @description Retrieve all saved prompts for the authenticated user. This endpoint returns a list of prompts saved by the user. Each prompt includes its ID, content, and creation timestamp.
         */
        get: operations["get_ai_prompts"];
        put?: never;
        /**
         * Create a prompt
         * @description Save a new prompt to the user's prompt library.
         *
         *         This endpoint allows users to save frequently used prompts for later reuse.
         */
        post: operations["post_ai_prompts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/prompts/{prompt_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get prompt by ID
         * @description Retrieve a specific prompt of entity user by prompt ID.
         */
        get: operations["get_ai_prompts_id"];
        put?: never;
        post?: never;
        /**
         * Delete prompt by ID
         * @description Delete a specific prompt of entity user by prompt ID.
         */
        delete: operations["delete_ai_prompts_id"];
        options?: never;
        head?: never;
        /**
         * Update prompt by ID
         * @description Update a specific prompt of entity user by prompt ID.
         */
        patch: operations["patch_ai_prompts_id"];
        trace?: never;
    };
    "/analytics/credit_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get credit notes analytics
         * @description Retrieve aggregated statistics for payables with different breakdowns.
         */
        get: operations["get_analytics_credit_notes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/payables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payables analytics
         * @description Retrieve aggregated statistics for payables with different breakdowns.
         */
        get: operations["get_analytics_payables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/receivables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get receivables analytics
         * @description Retrieve aggregated statistics for receivables with different breakdowns.
         */
        get: operations["get_analytics_receivables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get approval policies
         * @description Retrieve a list of all approval policies with pagination.
         */
        get: operations["get_approval_policies"];
        put?: never;
        /**
         * Create an approval policy
         * @description Create a new approval policy.
         */
        post: operations["post_approval_policies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_policies/{approval_policy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an approval policy by ID
         * @description Retrieve a specific approval policy.
         */
        get: operations["get_approval_policies_id"];
        put?: never;
        post?: never;
        /**
         * Delete an approval policy
         * @description Delete an existing approval policy.
         */
        delete: operations["delete_approval_policies_id"];
        options?: never;
        head?: never;
        /**
         * Update an approval policy
         * @description Update an existing approval policy.
         */
        patch: operations["patch_approval_policies_id"];
        trace?: never;
    };
    "/approval_policies/{approval_policy_id}/processes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get approval processes created from a policy
         * @description Retrieve a list of all approval policy processes.
         */
        get: operations["get_approval_policies_id_processes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_policies/{approval_policy_id}/processes/{process_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an approval process by ID
         * @description Retrieve a specific approval policy process.
         */
        get: operations["get_approval_policies_id_processes_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_policies/{approval_policy_id}/processes/{process_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an approval process
         * @description Cancel an ongoing approval process for a specific approval policy.
         */
        post: operations["post_approval_policies_id_processes_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_policies/{approval_policy_id}/processes/{process_id}/steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the steps of an approval process
         * @description Retrieve a list of approval policy process steps.
         */
        get: operations["get_approval_policies_id_processes_id_steps"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get approval requests */
        get: operations["get_approval_requests"];
        put?: never;
        /** Create an approval request */
        post: operations["post_approval_requests"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_requests/{approval_request_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an approval request by ID */
        get: operations["get_approval_requests_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_requests/{approval_request_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve an approval request */
        post: operations["post_approval_requests_id_approve"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_requests/{approval_request_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel an approval request */
        post: operations["post_approval_requests_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approval_requests/{approval_request_id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject an approval request */
        post: operations["post_approval_requests_id_reject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke a token
         * @description Revoke an existing token immediately.
         */
        post: operations["post_auth_revoke"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a token
         * @description Create a new access token based on client ID and client secret.
         */
        post: operations["post_auth_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity's bank accounts
         * @description Get all bank accounts of this entity.
         */
        get: operations["get_bank_accounts"];
        put?: never;
        /**
         * Create an entity bank account
         * @description Adds a new bank account for the specified entity.
         *
         *     The minimum required fields are `currency` and `country`. Other required fields depend on the currency and country.
         *
         *     Bank accounts in African countries can use any fields or combinations of fields.
         *
         *     For other countries:
         *     * EUR accounts require `iban`.
         *     * GBP accounts require `account_holder_name`, `account_number`, and `sort_code`.
         *     * USD accounts require `account_holder_name`, `account_number`, and `routing_number`.
         *     * Accounts in other currencies require one of:
         *       * `iban`
         *       * `account_number` and `sort_code`
         *       * `account_number` and `routing_number`
         */
        post: operations["post_bank_accounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts/complete_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete entity bank account verification */
        post: operations["post_bank_accounts_complete_verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts/start_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start entity bank account verification
         * @description Start entity bank account verification. The flow depends on verification type.
         *     For airwallex_plaid it generates Plaid Link token to init the Plaid SDK.
         */
        post: operations["post_bank_accounts_start_verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts/{bank_account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity's bank account
         * @description Retrieve a bank account by its ID.
         */
        get: operations["get_bank_accounts_id"];
        put?: never;
        post?: never;
        /**
         * Delete an entity's bank account
         * @description Delete the bank account specified by its ID.
         */
        delete: operations["delete_bank_accounts_id"];
        options?: never;
        head?: never;
        /**
         * Update an entity's bank account
         * @description Change the specified fields with the provided values.
         */
        patch: operations["patch_bank_accounts_id"];
        trace?: never;
    };
    "/bank_accounts/{bank_account_id}/complete_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete verification of the provided entity bank account */
        post: operations["post_bank_accounts_id_complete_verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts/{bank_account_id}/make_default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set an entity's bank account as the default for its currency
         * @description Set a bank account as the default for this entity per currency.
         */
        post: operations["post_bank_accounts_id_make_default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts/{bank_account_id}/refresh_verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh verification of the provided entity bank account */
        post: operations["post_bank_accounts_id_refresh_verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bank_accounts/{bank_account_id}/verifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a bank account verifications */
        get: operations["get_bank_accounts_id_verifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batch_payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a batch payment */
        post: operations["post_batch_payments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batch_payments/{batch_payment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get batch payment by ID */
        get: operations["get_batch_payments_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get comments
         * @description Get comments
         */
        get: operations["get_comments"];
        put?: never;
        /**
         * Create a comment
         * @description Create new comment
         */
        post: operations["post_comments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a comment by ID
         * @description Get comment
         */
        get: operations["get_comments_id"];
        put?: never;
        post?: never;
        /**
         * Delete a comment
         * @description Delete comment
         */
        delete: operations["delete_comments_id"];
        options?: never;
        head?: never;
        /**
         * Update a comment
         * @description Update comment
         */
        patch: operations["patch_comments_id"];
        trace?: never;
    };
    "/counterparts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all counterparts */
        get: operations["get_counterparts"];
        put?: never;
        /** Create a counterpart */
        post: operations["post_counterparts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart */
        get: operations["get_counterparts_id"];
        put?: never;
        post?: never;
        /** Delete a counterpart */
        delete: operations["delete_counterparts_id"];
        options?: never;
        head?: never;
        /** Update a counterpart */
        patch: operations["patch_counterparts_id"];
        trace?: never;
    };
    "/counterparts/{counterpart_id}/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's addresses */
        get: operations["get_counterparts_id_addresses"];
        put?: never;
        /** Create a counterpart address */
        post: operations["post_counterparts_id_addresses"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/addresses/{address_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's address */
        get: operations["get_counterparts_id_addresses_id"];
        put?: never;
        post?: never;
        /** Delete a counterpart's address */
        delete: operations["delete_counterparts_id_addresses_id"];
        options?: never;
        head?: never;
        /** Update a counterpart's address */
        patch: operations["patch_counterparts_id_addresses_id"];
        trace?: never;
    };
    "/counterparts/{counterpart_id}/bank_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's bank accounts */
        get: operations["get_counterparts_id_bank_accounts"];
        put?: never;
        /** Create a counterpart bank account */
        post: operations["post_counterparts_id_bank_accounts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's bank account */
        get: operations["get_counterparts_id_bank_accounts_id"];
        put?: never;
        post?: never;
        /** Delete a counterpart's bank account */
        delete: operations["delete_counterparts_id_bank_accounts_id"];
        options?: never;
        head?: never;
        /** Update a counterpart's bank account */
        patch: operations["patch_counterparts_id_bank_accounts_id"];
        trace?: never;
    };
    "/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set a counterpart's bank account as default for its currency */
        post: operations["post_counterparts_id_bank_accounts_id_make_default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's contacts */
        get: operations["get_counterparts_id_contacts"];
        put?: never;
        /** Create a counterpart contact */
        post: operations["post_counterparts_id_contacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/contacts/{contact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's contact */
        get: operations["get_counterparts_id_contacts_id"];
        put?: never;
        post?: never;
        /** Delete a counterpart's contact */
        delete: operations["delete_counterparts_id_contacts_id"];
        options?: never;
        head?: never;
        /** Update a counterpart's contact */
        patch: operations["patch_counterparts_id_contacts_id"];
        trace?: never;
    };
    "/counterparts/{counterpart_id}/contacts/{contact_id}/make_default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set a counterpart's default contact */
        post: operations["post_counterparts_id_contacts_id_make_default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/einvoicing_credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of a counterpart's e-invoicing credentials */
        get: operations["get_counterparts_id_einvoicing_credentials"];
        put?: never;
        /** Add e-invoicing credentials for a counterpart */
        post: operations["post_counterparts_id_einvoicing_credentials"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's e-invoicing credentials by ID */
        get: operations["get_counterparts_id_einvoicing_credentials_id"];
        put?: never;
        post?: never;
        /** Delete a counterpart's e-invoicing credentials */
        delete: operations["delete_counterparts_id_einvoicing_credentials_id"];
        options?: never;
        head?: never;
        /** Update a counterpart's e-invoicing credentials */
        patch: operations["patch_counterparts_id_einvoicing_credentials_id"];
        trace?: never;
    };
    "/counterparts/{counterpart_id}/partner_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get counterpart metadata */
        get: operations["get_counterparts_id_partner_metadata"];
        /** Replace counterpart metadata */
        put: operations["put_counterparts_id_partner_metadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/vat_ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's VAT IDs */
        get: operations["get_counterparts_id_vat_ids"];
        put?: never;
        /** Create a counterpart VAT ID */
        post: operations["post_counterparts_id_vat_ids"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/counterparts/{counterpart_id}/vat_ids/{vat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a counterpart's VAT ID */
        get: operations["get_counterparts_id_vat_ids_id"];
        put?: never;
        post?: never;
        /** Delete a counterpart's VAT ID */
        delete: operations["delete_counterparts_id_vat_ids_id"];
        options?: never;
        head?: never;
        /** Update a counterpart's VAT ID */
        patch: operations["patch_counterparts_id_vat_ids_id"];
        trace?: never;
    };
    "/custom_vat_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get custom VAT rates */
        get: operations["get_custom_vat_rates"];
        put?: never;
        /** Create a custom VAT rate */
        post: operations["post_custom_vat_rates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom_vat_rates/{custom_vat_rate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a custom VAT rate by ID */
        get: operations["get_custom_vat_rates_id"];
        put?: never;
        post?: never;
        /** Delete a custom VAT rate */
        delete: operations["delete_custom_vat_rates_id"];
        options?: never;
        head?: never;
        /** Update a custom VAT rate */
        patch: operations["patch_custom_vat_rates_id"];
        trace?: never;
    };
    "/data_exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all export jobs */
        get: operations["get_data_exports"];
        put?: never;
        /**
         * Create an export job
         * @description Request the export of payable and receivable documents with the specified statuses.
         */
        post: operations["post_data_exports"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data_exports/extra_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get extra fields included in data export */
        get: operations["get_data_exports_extra_data"];
        put?: never;
        /** Add a field to be included in data export */
        post: operations["post_data_exports_extra_data"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data_exports/extra_data/{extra_data_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an extra field by ID */
        get: operations["get_data_exports_extra_data_id"];
        put?: never;
        post?: never;
        /** Delete an extra field */
        delete: operations["delete_data_exports_extra_data_id"];
        options?: never;
        head?: never;
        /** Update the configuration of an extra field */
        patch: operations["patch_data_exports_extra_data_id"];
        trace?: never;
    };
    "/data_exports/supported_formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get supported export formats */
        get: operations["get_data_exports_supported_formats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data_exports/{document_export_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the export job status by ID */
        get: operations["get_data_exports_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get delivery notes
         * @description Get all delivery notes with filtering and pagination.
         */
        get: operations["get_delivery_notes"];
        put?: never;
        /** Create a delivery note */
        post: operations["post_delivery_notes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery_notes/{delivery_note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a delivery note by ID */
        get: operations["get_delivery_notes_id"];
        put?: never;
        post?: never;
        /** Delete a delivery note */
        delete: operations["delete_delivery_notes_id"];
        options?: never;
        head?: never;
        /** Update a delivery note */
        patch: operations["patch_delivery_notes_id"];
        trace?: never;
    };
    "/delivery_notes/{delivery_note_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a delivery note */
        post: operations["post_delivery_notes_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delivery_notes/{delivery_note_id}/mark_as_delivered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a delivery note as delivered */
        post: operations["post_delivery_notes_id_mark_as_delivered"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PDF templates
         * @description This API call returns all supported templates with language codes.
         */
        get: operations["get_document_templates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document_templates/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get built-in PDF templates
         * @description This API call returns all supported system templates with language codes.
         */
        get: operations["get_document_templates_system"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document_templates/{document_template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a PDF template by ID */
        get: operations["get_document_templates_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document_templates/{document_template_id}/make_default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the default PDF template */
        post: operations["post_document_templates_id_make_default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document_templates/{document_template_id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview a PDF template
         * @description Returns a sample PDF invoice generated using the specified template.
         */
        get: operations["get_document_templates_id_preview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/einvoice_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if e-invoicing credentials exist in the network. */
        get: operations["get_einvoice_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/einvoicing_connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all e-invoicing connections */
        get: operations["get_einvoicing_connections"];
        put?: never;
        /** Create an e-invoicing connection */
        post: operations["post_einvoicing_connections"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/einvoicing_connections/{einvoicing_connection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an e-invoicing connection by ID */
        get: operations["get_einvoicing_connections_id"];
        put?: never;
        post?: never;
        /** Delete an e-invoicing connection */
        delete: operations["delete_einvoicing_connections_id"];
        options?: never;
        head?: never;
        /** Update an e-invoicing connection */
        patch: operations["patch_einvoicing_connections_id"];
        trace?: never;
    };
    "/einvoicing_connections/{einvoicing_connection_id}/network_credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an e-invoicing credential */
        post: operations["post_einvoicing_connections_id_network_credentials"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all entities
         * @description Retrieve a list of all entities.
         */
        get: operations["get_entities"];
        put?: never;
        /**
         * Create an entity
         * @description Create a new entity from the specified values.
         */
        post: operations["post_entities"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current entity
         * @deprecated
         * @description Deprecated. Use `GET /entity_users/my_entity` instead.
         */
        get: operations["get_entities_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update the current entity
         * @deprecated
         * @description Deprecated. Use `PATCH /entity_users/my_entity` instead.
         */
        patch: operations["patch_entities_me"];
        trace?: never;
    };
    "/entities/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity
         * @description Retrieve an entity by its ID.
         */
        get: operations["get_entities_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an entity
         * @description Change the specified fields with the provided values.
         */
        patch: operations["patch_entities_id"];
        trace?: never;
    };
    "/entities/{entity_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate an entity
         * @description Activate an entity to allow it to perform any operations.
         */
        post: operations["post_entities_id_activate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate an entity
         * @description Deactivate an entity to stop it from performing any operations.
         */
        post: operations["post_entities_id_deactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update entity onboarding documents
         * @deprecated
         * @description Deprecated. Use `POST /onboarding_documents` instead. Update the onboarding documents of an entity.
         */
        post: operations["post_entities_id_documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upload an entity logo
         * @description Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.
         */
        put: operations["put_entities_id_logo"];
        post?: never;
        /** Delete an entity's logo */
        delete: operations["delete_entities_id_logo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/onboarding_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get entity onboarding data */
        get: operations["get_entities_id_onboarding_data"];
        /**
         * Update entity onboarding data
         * @deprecated
         * @description Deprecated. Use `PATCH /entities/{entity_id}/onboarding_data` instead. Update entity onboarding data.
         */
        put: operations["put_entities_id_onboarding_data"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch entity onboarding data */
        patch: operations["patch_entities_id_onboarding_data"];
        trace?: never;
    };
    "/entities/{entity_id}/onboarding_requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get onboarding requirements
         * @deprecated
         * @description Deprecated. Use `GET /onboarding_requirements` instead. Check the information required to complete the onboarding process.
         */
        get: operations["get_entities_id_onboarding_requirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/partner_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entity metadata
         * @description Retrieve a metadata object associated with this entity, usually in a JSON format.
         */
        get: operations["get_entities_id_partner_metadata"];
        /**
         * Replace entity metadata
         * @description Fully replace the current metadata object with the specified instance.
         */
        put: operations["put_entities_id_partner_metadata"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/payment_methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Enabled Payment Methods
         * @description Get all enabled payment methods.
         */
        get: operations["get_entities_id_payment_methods"];
        /**
         * Enable Payment Methods
         * @description Set which payment methods should be enabled.
         */
        put: operations["put_entities_id_payment_methods"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entity settings
         * @description Retrieve all settings for this entity.
         */
        get: operations["get_entities_id_settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update entity settings
         * @description Change the specified fields with the provided values.
         */
        patch: operations["patch_entities_id_settings"];
        trace?: never;
    };
    "/entities/{entity_id}/settings/next_document_numbers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the next document numbers for an entity */
        get: operations["get_entities_id_settings_next_document_numbers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/vat_ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an entity's VAT IDs */
        get: operations["get_entities_id_vat_ids"];
        put?: never;
        /** Create an entity VAT ID */
        post: operations["post_entities_id_vat_ids"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entities/{entity_id}/vat_ids/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an entity's VAT ID */
        get: operations["get_entities_id_vat_ids_id"];
        put?: never;
        post?: never;
        /** Delete an entity's VAT ID */
        delete: operations["delete_entities_id_vat_ids_id"];
        options?: never;
        head?: never;
        /** Update an entity's VAT ID */
        patch: operations["patch_entities_id_vat_ids_id"];
        trace?: never;
    };
    "/entity_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all entity users
         * @description Retrieve a list of all entity users.
         */
        get: operations["get_entity_users"];
        put?: never;
        /**
         * Create an entity user
         * @description Create a new entity user from the specified values.
         */
        post: operations["post_entity_users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entity_users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current entity user
         * @description Retrieve an entity user by its ID.
         */
        get: operations["get_entity_users_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update current entity user
         * @description Change the specified fields with provided values.
         */
        patch: operations["patch_entity_users_me"];
        trace?: never;
    };
    "/entity_users/my_entity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity of this user
         * @description Retrieves information of an entity, which this entity user belongs to.
         */
        get: operations["get_entity_users_my_entity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an entity of this user
         * @description Update information of an entity, which this entity user belongs to.
         */
        patch: operations["patch_entity_users_my_entity"];
        trace?: never;
    };
    "/entity_users/my_role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a role of this entity user
         * @description Retrieves information of a role assigned to this entity user.
         */
        get: operations["get_entity_users_my_role"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entity_users/{entity_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an entity user
         * @description Retrieve an entity user by its ID.
         */
        get: operations["get_entity_users_id"];
        put?: never;
        post?: never;
        /** Delete an entity user */
        delete: operations["delete_entity_users_id"];
        options?: never;
        head?: never;
        /**
         * Update an entity user
         * @description Change the specified fields with provided values.
         */
        patch: operations["patch_entity_users_id"];
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events
         * @description Returns all webhook events that were triggered for the specified entity based on your enabled webhook subscriptions. These are the same events that were sent to your configured webhook listener endpoints, aggregated into a single list. Results can be filtered by the related object type or time period.
         *
         *     You can use this to get the missed events for the time periods when your webhook listener was temporarily unavailable.
         *
         *     We guarantee access to event data only from the last three months. Earlier events may be unavailable.
         */
        get: operations["get_events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an event by ID
         * @description Get a webhook event by its ID. The data is the same as you might have previously received in a webhook sent by Monite to your server.
         */
        get: operations["get_events_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get files */
        get: operations["get_files"];
        put?: never;
        /** Upload a file */
        post: operations["post_files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a file by ID */
        get: operations["get_files_id"];
        put?: never;
        post?: never;
        /** Delete a file */
        delete: operations["delete_files_id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financing_invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoices
         * @description Returns a list of invoices requested for financing
         */
        get: operations["get_financing_invoices"];
        put?: never;
        /**
         * Request financing for invoices
         * @description Returns a session token and a connect token to open Kanmon SDK for confirming invoice details.
         */
        post: operations["post_financing_invoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financing_offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get financing offers and the business status
         * @description Returns a list of financing offers and the business's onboarding status
         */
        get: operations["get_financing_offers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financing_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a token for Kanmon SDK
         * @description Returns a token for Kanmon SDK. Creates a business and user on Kanmon if not already exist.
         */
        post: operations["post_financing_tokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frontend/bank_account_masks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bank account masks for supported currencies
         * @description Get bank account masks for supported currencies
         */
        get: operations["get_frontend_bank_account_masks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frontend/bank_accounts_currency_to_supported_countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get currency to allowed countries mapping
         * @description Get currency to allowed countries mapping
         */
        get: operations["get_frontend_bank_accounts_currency_to_supported_countries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frontend/document_type_descriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get descriptions of allowed verification documents by country
         * @description Get descriptions of allowed verification documents by country
         */
        get: operations["get_frontend_document_type_descriptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frontend/onboarding_requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get onboarding requirements
         * @description Get onboarding requirements for the entity
         */
        get: operations["get_frontend_onboarding_requirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frontend/person_mask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get person mask based on relationships
         * @description Get person mask based on relationships
         */
        get: operations["get_frontend_person_mask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/accounting_connections/{connection_id}/sync_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sync Status
         * @description Get all sync statuses
         *     Not production ready
         *     For test purposes only, internal use only
         *     Api could be changed
         */
        get: operations["get_internal_accounting_connections_id_sync_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/counterparts/ai_suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find similar counterparts */
        get: operations["get_internal_counterparts_ai_suggestions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Currencies */
        get: operations["get_internal_currencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/entities/{entity_id}/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entity logo
         * @description Retrieve info about entity logo.
         */
        get: operations["get_internal_entities_id_logo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/onboarding_links/{onboarding_link_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Onboarding Link */
        get: operations["get_internal_onboarding_links_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/onboarding_links/{onboarding_link_id}/airwallex_component": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Onboarding Link Airwallex Component Data */
        get: operations["get_internal_onboarding_links_id_airwallex_component"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Onboarding Link Airwallex Component Data */
        patch: operations["patch_internal_onboarding_links_id_airwallex_component"];
        trace?: never;
    };
    "/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Authorization Code */
        post: operations["post_internal_onboarding_links_id_airwallex_component_auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/onboarding_links/{onboarding_link_id}/request_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request Otp */
        post: operations["post_internal_onboarding_links_id_request_otp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/onboarding_links/{onboarding_link_id}/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Onboarding Link Stripe Data */
        get: operations["get_internal_onboarding_links_id_stripe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Onboarding Link Stripe Data */
        patch: operations["patch_internal_onboarding_links_id_stripe"];
        trace?: never;
    };
    "/internal/onboarding_links/{onboarding_link_id}/verify_otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify Otp */
        post: operations["post_internal_onboarding_links_id_verify_otp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payables/{payable_id}/revert_payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reverts all payments made to a payable
         * @description This internal endpoint used in reconciliation service to revert payments made to a payable
         */
        post: operations["post_internal_payables_id_revert_payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authorize Payment Link */
        post: operations["post_internal_payment_intents_id_authorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authorize Payment Link Embedded */
        post: operations["post_internal_payment_intents_id_authorize_embedded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Consent Data */
        get: operations["get_internal_payment_intents_id_authorize_embedded_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authorize Payment Link Embedded Set Sca Code */
        post: operations["post_internal_payment_intents_id_authorize_embedded_id_set_sca_code"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authorize Payment Link Embedded Set Sca Method */
        post: operations["post_internal_payment_intents_id_authorize_embedded_id_set_sca_method"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/banks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Banks For Payment Intent */
        get: operations["get_internal_payment_intents_id_banks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/confirm_payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm Payment */
        post: operations["post_internal_payment_intents_id_confirm_payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_intents/{payment_intent_id}/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Yapily Payment */
        post: operations["post_internal_payment_intents_id_payments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_links/{payment_link_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Payment Link */
        get: operations["get_internal_payment_links_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_links/{payment_link_id}/regenerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Regenerate Payment Link */
        post: operations["post_internal_payment_links_id_regenerate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/payment_page_theme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get partner payment page theme settings for frontend */
        get: operations["get_internal_payment_page_theme"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/quotes/{receivable_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Quote By Id */
        get: operations["get_internal_quotes_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/quotes/{receivable_id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept Quote */
        post: operations["post_internal_quotes_id_accept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/quotes/{receivable_id}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Decline Quote */
        post: operations["post_internal_quotes_id_decline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get partner settings for frontend
         * @description Retrieve settings necessary for frontend for this partner.
         */
        get: operations["get_internal_settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/validators/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Line Items
         * @description Validate if line items for bill/invoice may be pushed to accounting
         */
        post: operations["post_internal_validators_line_items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/vat_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Vat Rates */
        get: operations["get_internal_vat_rates"];
        put?: never;
        /** Create Vat Rates */
        post: operations["post_internal_vat_rates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/vat_rates/{vat_rate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Vat Rates */
        delete: operations["delete_internal_vat_rates_id"];
        options?: never;
        head?: never;
        /** Update Vat Rates */
        patch: operations["patch_internal_vat_rates_id"];
        trace?: never;
    };
    "/ledger_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ledger accounts
         * @description Get all ledger accounts
         */
        get: operations["get_ledger_accounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ledger_accounts/{ledger_account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a ledger account by ID
         * @description Get ledger account by id
         */
        get: operations["get_ledger_accounts_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All With Filters
         * @description Get all custom templates
         */
        get: operations["get_mail_templates"];
        put?: never;
        /**
         * Create
         * @description Create custom template
         */
        post: operations["post_mail_templates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail_templates/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview
         * @description Preview rendered template
         */
        post: operations["post_mail_templates_preview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail_templates/system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All System Templates
         * @description Get all system templates
         */
        get: operations["get_mail_templates_system"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail_templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get
         * @description Get custom template by ID
         */
        get: operations["get_mail_templates_id"];
        put?: never;
        post?: never;
        /**
         * Delete
         * @description Delete custom template bt ID
         */
        delete: operations["delete_mail_templates_id"];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Update custom template by ID
         */
        patch: operations["patch_mail_templates_id"];
        trace?: never;
    };
    "/mail_templates/{template_id}/make_default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make Default
         * @description Make template default
         */
        post: operations["post_mail_templates_id_make_default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailbox_domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mailbox domains
         * @description Get all domains owned by partner_id
         */
        get: operations["get_mailbox_domains"];
        put?: never;
        /**
         * Create a mailbox domain
         * @description Create domain for the partner_id
         */
        post: operations["post_mailbox_domains"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailbox_domains/{domain_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a mailbox domain
         * @description Delete domain for the partner_id
         */
        delete: operations["delete_mailbox_domains_id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailbox_domains/{domain_id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify a mailbox domain
         * @description Verify domain for the partner_id
         */
        post: operations["post_mailbox_domains_id_verify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailboxes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mailboxes
         * @description Get all mailboxes owned by Entity
         */
        get: operations["get_mailboxes"];
        put?: never;
        /**
         * Create a mailbox
         * @description Create a new mailbox
         */
        post: operations["post_mailboxes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailboxes/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get mailboxes by IDs
         * @description Get all mailboxes owned by Entity
         */
        post: operations["post_mailboxes_search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mailboxes/{mailbox_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a mailbox
         * @description Delete mailbox
         */
        delete: operations["delete_mailboxes_id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/measure_units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get measure units */
        get: operations["get_measure_units"];
        put?: never;
        /** Create a measure unit */
        post: operations["post_measure_units"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/measure_units/{unit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a measure unit by ID */
        get: operations["get_measure_units_id"];
        put?: never;
        post?: never;
        /** Delete a measure unit */
        delete: operations["delete_measure_units_id"];
        options?: never;
        head?: never;
        /** Update a measure unit */
        patch: operations["patch_measure_units_id"];
        trace?: never;
    };
    "/ocr_tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get OCR tasks */
        get: operations["get_ocr_tasks"];
        put?: never;
        /** OCR a file from URL */
        post: operations["post_ocr_tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocr_tasks/upload_from_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a file for OCR */
        post: operations["post_ocr_tasks_upload_from_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocr_tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an OCR task by ID */
        get: operations["get_ocr_tasks_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onboarding_documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provide files for entity onboarding verification
         * @description Provide files for entity onboarding verification
         */
        post: operations["post_onboarding_documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onboarding_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Onboarding Link */
        post: operations["post_onboarding_links"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onboarding_requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get onboarding requirements
         * @description Get onboarding requirements for the entity
         */
        get: operations["get_onboarding_requirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overdue_reminders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get overdue reminder configurations */
        get: operations["get_overdue_reminders"];
        put?: never;
        /** Create an overdue reminder configuration */
        post: operations["post_overdue_reminders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overdue_reminders/{overdue_reminder_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an overdue reminder configuration by ID */
        get: operations["get_overdue_reminders_id"];
        put?: never;
        post?: never;
        /** Delete an overdue reminder configuration */
        delete: operations["delete_overdue_reminders_id"];
        options?: never;
        head?: never;
        /** Update an overdue reminder configuration */
        patch: operations["patch_overdue_reminders_id"];
        trace?: never;
    };
    "/payable_credit_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get credit notes */
        get: operations["get_payable_credit_notes"];
        put?: never;
        /** Create a credit note */
        post: operations["post_payable_credit_notes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/upload_from_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a credit note from a file
         * @description Upload an incoming credit note (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
         */
        post: operations["post_payable_credit_notes_upload_from_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/validations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get credit note validations
         * @description Get credit notes validations.
         */
        get: operations["get_payable_credit_notes_validations"];
        /**
         * Update credit note validations
         * @description Update credit notes validations.
         */
        put: operations["put_payable_credit_notes_validations"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/validations/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset credit note validations
         * @description Reset credit notes validations.
         */
        post: operations["post_payable_credit_notes_validations_reset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a credit note by ID */
        get: operations["get_payable_credit_notes_id"];
        put?: never;
        post?: never;
        /** Delete a credit note */
        delete: operations["delete_payable_credit_notes_id"];
        options?: never;
        head?: never;
        /** Update a credit note */
        patch: operations["patch_payable_credit_notes_id"];
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve a credit note
         * @description Approve the credit note for appliance.
         */
        post: operations["post_payable_credit_notes_id_approve"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a credit note
         * @description Cancel the credit note that was not confirmed during the review.
         */
        post: operations["post_payable_credit_notes_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/cancel_ocr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel OCR of a credit note
         * @description Request to cancel the OCR processing of the specified credit note.
         */
        post: operations["post_payable_credit_notes_id_cancel_ocr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all line items of a credit note */
        get: operations["get_payable_credit_notes_id_line_items"];
        /** Replace all line items of a credit note */
        put: operations["put_payable_credit_notes_id_line_items"];
        /** Add a new line item to a credit note */
        post: operations["post_payable_credit_notes_id_line_items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single line item of a credit note */
        get: operations["get_payable_credit_notes_id_line_items_id"];
        put?: never;
        post?: never;
        /** Delete a line item from a credit note */
        delete: operations["delete_payable_credit_notes_id_line_items_id"];
        options?: never;
        head?: never;
        /** Update a line item of a credit note */
        patch: operations["patch_payable_credit_notes_id_line_items_id"];
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reject a credit note
         * @description Decline the credit note when an approver finds any mismatch or discrepancies.
         */
        post: operations["post_payable_credit_notes_id_reject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/submit_for_approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a credit note for approval
         * @description Start the approval process once the uploaded credit note is validated.
         */
        post: operations["post_payable_credit_notes_id_submit_for_approval"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_credit_notes/{credit_note_id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate a credit note */
        get: operations["get_payable_credit_notes_id_validate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_purchase_orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get purchase orders */
        get: operations["get_payable_purchase_orders"];
        put?: never;
        /** Create a purchase order */
        post: operations["post_payable_purchase_orders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_purchase_orders/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the available variables for purchase orders
         * @description Get a list of placeholders allowed to insert into an email template for customization
         */
        get: operations["get_payable_purchase_orders_variables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_purchase_orders/{purchase_order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a purchase order by ID */
        get: operations["get_payable_purchase_orders_id"];
        put?: never;
        post?: never;
        /** Delete a purchase order */
        delete: operations["delete_payable_purchase_orders_id"];
        options?: never;
        head?: never;
        /** Update a purchase order */
        patch: operations["patch_payable_purchase_orders_id"];
        trace?: never;
    };
    "/payable_purchase_orders/{purchase_order_id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Preview a purchase order's email message */
        post: operations["post_payable_purchase_orders_id_preview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payable_purchase_orders/{purchase_order_id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a purchase order via email */
        post: operations["post_payable_purchase_orders_id_send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payables
         * @description Lists all payables from the connected entity.
         *
         *     If you already have the data of the payable (amount in [minor units](
         *     https://docs.monite.com/references/currencies#minor-units), currency, vendor information, and other details)
         *     stored somewhere as individual attributes, you can create a payable with these attributes by calling [POST
         *     /payables](https://docs.monite.com/api/payables/post-payables) and providing the [base64-encoded](
         *     https://en.wikipedia.org/wiki/Base64) contents of the original invoice file in the field `base64_encoded_file`.
         *
         *     A payable is a financial document given by an entity`s supplier itemizing the purchase of a good or a service and
         *     demanding payment.
         *
         *     The `file_name` field is optional. If omitted, it defaults to “default_file_name”. If the settings are configured
         *     to automatically set `suggested_payment_term`, this object can be omitted from the request body.
         *
         *     The `id` generated for this payable can be used in other API calls to update the data of this payable or trigger [
         *     status transitions](https://docs.monite.com/accounts-payable/approvals/manual-transition), for example. essential data
         *     fields to move from `draft` to `new`
         *
         *     Related guide: [Create a payable from data](https://docs.monite.com/accounts-payable/payables/collect#create-a-payable-from-data)
         *
         *     See also:
         *
         *
         *     [Automatic calculation of due date](https://docs.monite.com/accounts-payable/payables/collect#automatic-calculation-of-due-date)
         *
         *     [Suggested payment date](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)
         *
         *     [Attach file](https://docs.monite.com/accounts-payable/payables/collect#attach-file)
         *
         *     [Collect payables by email](https://docs.monite.com/accounts-payable/payables/collect#send-payables-by-email)
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         */
        get: operations["get_payables"];
        put?: never;
        /**
         * Create a payable
         * @description Add a new payable by providing the amount, currency, vendor name, and other details.
         *     You can provide the base64_encoded contents of the original invoice file in the field `base64_encoded_file`.
         *
         *     You can use this endpoint to bypass the Monite OCR service and provide the data directly
         *     (for example, if you already have the data in place).
         *
         *     A newly created payable has the the `draft` [status](https://docs.monite.com/accounts-payable/payables/index).
         */
        post: operations["post_payables"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payables analytics
         * @deprecated
         * @description Retrieve aggregated statistics for payables, including total amount and count, both overall and by status.
         *
         *     For more flexible configuration and retrieval of other data types, use `GET /analytics/payables`.
         */
        get: operations["get_payables_analytics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/storecove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Webhook to receive e-invoicing events from Storecove for new documents
         * @description A webhook endpoint designed to handle e-invoicing events from Storecove. It listens for events about newly received documents and validates them for further processing in a background. More information about Storecove webhooks is [here](https://www.storecove.com/docs#_receiving_documents).
         */
        post: operations["post_payables_storecove"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/upload_from_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a payable from a file
         * @description Upload an incoming invoice (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
         */
        post: operations["post_payables_upload_from_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/validations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payables validations
         * @description Get payable validations.
         */
        get: operations["get_payables_validations"];
        /**
         * Update payables validations
         * @description Update payable validations.
         */
        put: operations["put_payables_validations"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/validations/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset payables validations
         * @description Reset payable validations to default ones.
         */
        post: operations["post_payables_validations_reset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the available variables for payable email templates
         * @description Get a list of placeholders allowed to insert into an email template for customization
         */
        get: operations["get_payables_variables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a payable by ID
         * @description Retrieves information about a specific payable with the given ID.
         */
        get: operations["get_payables_id"];
        put?: never;
        post?: never;
        /**
         * Delete a payable
         * @description Deletes a specific payable.
         */
        delete: operations["delete_payables_id"];
        options?: never;
        head?: never;
        /**
         * Update a payable
         * @description Updates the information about a specific payable.
         */
        patch: operations["patch_payables_id"];
        trace?: never;
    };
    "/payables/{payable_id}/approve_payment_operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve a payable for payment
         * @description Confirms that the payable is ready to be paid.
         */
        post: operations["post_payables_id_approve_payment_operation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/attach_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a file to a payable
         * @description Attach file to payable without existing attachment.
         */
        post: operations["post_payables_id_attach_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a payable
         * @description Cancels the payable that was not confirmed during the review.
         */
        post: operations["post_payables_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/cancel_ocr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel OCR of a payable
         * @description Request to cancel the OCR processing of the specified payable.
         */
        post: operations["post_payables_id_cancel_ocr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the history of the specified accounts payable document. */
        get: operations["get_payables_id_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the line items of a payable
         * @description Get a list of all line items related to a specific payable.
         *     Related guide: [List all payable line items](https://docs.monite.com/accounts-payable/payables/line-items#list-all-line-items-of-a-payable)
         *
         *     See also:
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         *
         *     [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
         */
        get: operations["get_payables_id_line_items"];
        /**
         * Replaces the lines items in a payable
         * @description Replaces the information of all line items of a specific payable.
         *
         *     Related guide: [Replace all line items](https://docs.monite.com/accounts-payable/payables/line-items#replace-all-line-items)
         *
         *     See also:
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         *
         *     [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
         */
        put: operations["put_payables_id_line_items"];
        /**
         * Add a line item to a payable
         * @description Add a new line item to a specific payable.
         *
         *     The `subtotal` and `total` fields of line items are automatically calculated based on the `unit_price`,
         *      `quantity`, and `tax` fields, therefore, are read-only and appear only in the response schema. The field
         *       `ledger_account_id` is required **only** for account integration, otherwise, it is optional.
         *
         *     Related guide: [Add line items to a payable](https://docs.monite.com/accounts-payable/payables/line-items#add-line-items-to-a-payable)
         *
         *     See also:
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         *
         *     [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
         */
        post: operations["post_payables_id_line_items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/line_items/{line_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single line item of a payable
         * @description Get information about a specific line item with a given ID.
         *
         *     Related guide: [Retrieve a line item](https://docs.monite.com/accounts-payable/payables/line-items#retrieve-a-line-item)
         *
         *     See also:
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         *
         *     [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
         */
        get: operations["get_payables_id_line_items_id"];
        put?: never;
        post?: never;
        /**
         * Delete a line item from a payable
         * @description Delete the line item with the given ID.
         *
         *     Related guide: [Remove a line item](https://docs.monite.com/accounts-payable/payables/line-items#remove-a-line-item)
         *
         *     See also:
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         *
         *     [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
         */
        delete: operations["delete_payables_id_line_items_id"];
        options?: never;
        head?: never;
        /**
         * Update a line item in a payable
         * @description Edits the information of a specific line item.
         *
         *     Related guide: [Update a line item](https://docs.monite.com/accounts-payable/payables/line-items#update-a-line-item)
         *
         *     See also:
         *
         *     [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
         *
         *     [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
         */
        patch: operations["patch_payables_id_line_items_id"];
        trace?: never;
    };
    "/payables/{payable_id}/mark_as_paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark a payable as paid
         * @description Mark a payable as paid.
         *
         *     Payables can be paid using the payment channels offered by Monite or through external payment channels. In the latter
         *      case, the invoice is not automatically marked as paid in the system and needs to be converted to the paid status
         *      manually.
         *
         *     Optionally, it is possible to pass the `comment` field in the request body, to describe how and when the invoice was
         *     paid.
         *
         *     Notes:
         *     - To use this endpoint with an entity user token, this entity user must have a role that includes the `pay` permission
         *     for payables.
         *     - The `amount_to_pay` field is automatically calculated based on the `amount_due` less the percentage described
         *     in the `payment_terms.discount` value.
         *
         *     Related guide: [Mark a payable as paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-paid)
         *
         *     See also:
         *
         *     [Payables lifecycle](https://docs.monite.com/accounts-payable/payables/index)
         *
         *     [Payables status transitions](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)
         */
        post: operations["post_payables_id_mark_as_paid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/mark_as_partially_paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark a payable as partially paid
         * @description Mark a payable as partially paid.
         *
         *     If the payable is partially paid, its status is moved to `partially_paid`. The value of the `amount_paid` field must be
         *      the sum of all payments made, not only the last one.
         *
         *     Notes:
         *     - This endpoint can be used for payables in the `waiting_to_be_paid` status.
         *     - The `amount_paid` must be greater than 0 and less than the total payable amount specified by the `amount` field.
         *     - You can use this endpoint multiple times for the same payable to reflect multiple partial payments, always setting the
         *      sum of all payments made.
         *     - To use this endpoint with an entity user token, this entity user must have a role that includes the `pay`
         *     permission for payables.
         *     - The `amount_to_pay` field is automatically calculated based on the `amount_due` less the percentage described
         *     in the `payment_terms.discount` value.
         *
         *     Related guide: [Mark a payable as partially paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-partially-paid)
         *
         *     See also:
         *
         *     [Payables lifecycle](https://docs.monite.com/accounts-payable/payables/index)
         *
         *     [Payables status transitions](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)
         *
         *     [Mark a payable as paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-paid)
         */
        post: operations["post_payables_id_mark_as_partially_paid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reject a payable
         * @description Declines the payable when an approver finds any mismatch or discrepancies.
         */
        post: operations["post_payables_id_reject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/reopen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reopen a rejected or waiting_to_be_paid payable
         * @description Reset payable state from rejected or waiting_to_be_paid to new.
         */
        post: operations["post_payables_id_reopen"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/submit_for_approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a payable for approval
         * @description Starts the approval process once the uploaded payable is validated.
         */
        post: operations["post_payables_id_submit_for_approval"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get suggestions
         * @description Get AI suggestions
         */
        get: operations["get_payables_id_suggestions"];
        put?: never;
        post?: never;
        /**
         * Delete suggestions
         * @description Remove AI suggestions
         */
        delete: operations["delete_payables_id_suggestions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payables/{payable_id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate a payable
         * @description Check the invoice for compliance with the requirements for movement from draft to new status.
         */
        post: operations["post_payables_id_validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment intents */
        get: operations["get_payment_intents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_intents/{payment_intent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment intent by ID */
        get: operations["get_payment_intents_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the payment intent amount */
        patch: operations["patch_payment_intents_id"];
        trace?: never;
    };
    "/payment_intents/{payment_intent_id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the payment intent history */
        get: operations["get_payment_intents_id_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a payment link */
        post: operations["post_payment_links"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_links/{payment_link_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment link by ID */
        get: operations["get_payment_links_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_links/{payment_link_id}/expire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Expire a payment link */
        post: operations["post_payment_links_id_expire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_onboarding_links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an onboarding link */
        post: operations["post_payment_onboarding_links"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment records */
        get: operations["get_payment_records"];
        put?: never;
        /** Create a payment record */
        post: operations["post_payment_records"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_records/{payment_record_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a payment record */
        get: operations["get_payment_records_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a payment record */
        patch: operations["patch_payment_records_id"];
        trace?: never;
    };
    "/payment_records/{payment_record_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a payment record */
        post: operations["post_payment_records_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_records/{payment_record_id}/mark_as_succeeded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a payment record as succeeded */
        post: operations["post_payment_records_id_mark_as_succeeded"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_records/{payment_record_id}/start_processing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start processing a payment record */
        post: operations["post_payment_records_id_start_processing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_reminders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment reminder configurations */
        get: operations["get_payment_reminders"];
        put?: never;
        /** Create a payment reminder configuration */
        post: operations["post_payment_reminders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_reminders/{payment_reminder_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a payment reminder configuration by ID */
        get: operations["get_payment_reminders_id"];
        put?: never;
        post?: never;
        /** Delete a payment reminder configuration */
        delete: operations["delete_payment_reminders_id"];
        options?: never;
        head?: never;
        /** Update a payment reminder configuration */
        patch: operations["patch_payment_reminders_id"];
        trace?: never;
    };
    "/payment_terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment terms */
        get: operations["get_payment_terms"];
        put?: never;
        /** Create a payment term */
        post: operations["post_payment_terms"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment_terms/{payment_terms_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a payment term by ID */
        get: operations["get_payment_terms_id"];
        put?: never;
        post?: never;
        /** Delete a payment term */
        delete: operations["delete_payment_terms_id"];
        options?: never;
        head?: never;
        /** Update a payment term */
        patch: operations["patch_payment_terms_id"];
        trace?: never;
    };
    "/persons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all persons */
        get: operations["get_persons"];
        put?: never;
        /** Create a person */
        post: operations["post_persons"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons/{person_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a person */
        get: operations["get_persons_id"];
        put?: never;
        post?: never;
        /** Delete a person */
        delete: operations["delete_persons_id"];
        options?: never;
        head?: never;
        /** Update a person */
        patch: operations["patch_persons_id"];
        trace?: never;
    };
    "/persons/{person_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update person onboarding documents
         * @deprecated
         * @description Deprecated. Use `POST /persons/{person_id}/onboarding_documents` instead. Update the onboarding documents of a person.
         */
        post: operations["post_persons_id_documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons/{person_id}/onboarding_documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provide files for person onboarding verification
         * @description Provide files for person onboarding verification
         */
        post: operations["post_persons_id_onboarding_documents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get products */
        get: operations["get_products"];
        put?: never;
        /** Create a product */
        post: operations["post_products"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product by ID */
        get: operations["get_products_id"];
        put?: never;
        post?: never;
        /** Delete a product */
        delete: operations["delete_products_id"];
        options?: never;
        head?: never;
        /** Update a product */
        patch: operations["patch_products_id"];
        trace?: never;
    };
    "/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all projects for entity
         * @description Get all projects for an entity
         */
        get: operations["get_projects"];
        put?: never;
        /**
         * Create a project
         * @description Create a new project.
         */
        post: operations["post_projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a project by ID
         * @description Get a project with the given ID.
         */
        get: operations["get_projects_id"];
        put?: never;
        post?: never;
        /**
         * Delete a project
         * @description Delete a project.
         */
        delete: operations["delete_projects_id"];
        options?: never;
        head?: never;
        /**
         * Update a project
         * @description Update a project.
         */
        patch: operations["patch_projects_id"];
        trace?: never;
    };
    "/receipts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists all receipts from the connected entity. */
        get: operations["get_receipts"];
        put?: never;
        /** Create a receipt */
        post: operations["post_receipts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/upload_from_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a receipt from a file
         * @description Upload an incoming receipt in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
         */
        post: operations["post_receipts_upload_from_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves information about a specific receipt with the given ID. */
        get: operations["get_receipts_id"];
        put?: never;
        post?: never;
        /** Deletes a specific receipt. */
        delete: operations["delete_receipts_id"];
        options?: never;
        head?: never;
        /** Updates the information about a specific receipt. */
        patch: operations["patch_receipts_id"];
        trace?: never;
    };
    "/receipts/{receipt_id}/attach_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a file to a receipt
         * @description Attach file to receipt without existing attachment.
         */
        post: operations["post_receipts_id_attach_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all line items of a receipt */
        get: operations["get_receipts_id_line_items"];
        put?: never;
        /** Add a new line item to a receipt */
        post: operations["post_receipts_id_line_items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receipts/{receipt_id}/line_items/{line_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a line item from a receipt */
        delete: operations["delete_receipts_id_line_items_id"];
        options?: never;
        head?: never;
        /** Update a line item of a receipt */
        patch: operations["patch_receipts_id_line_items_id"];
        trace?: never;
    };
    "/receivables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get receivables
         * @description Returns a list of [accounts receivable](https://docs.monite.com/accounts-receivable/index) documents - invoices, quotes, and credit notes - of the specified entity.
         *
         *     Results can be filtered by amount, counterpart, due date, and other criteria. Multiple filters are combined using logical AND unless specified otherwise. If no documents matching the search criteria are found, the endpoint returns a successful response with an empty `data` array.
         *
         *     This endpoint supports [pagination](https://docs.monite.com/api/concepts/pagination-sorting-filtering) and sorting. By default, results are sorted by the creation date in ascending order (from oldest to newest).
         *
         *     #### Examples
         *
         *     ##### Invoices
         *
         *     * Get all overdue invoices:
         *         ```
         *         GET /receivables?type=invoice&status=overdue
         *         ```
         *
         *     * Get all invoices created for the counterpart named "Solarwind" (case-insensitive):
         *
         *         ```
         *         GET /receivables?type=invoice?counterpart_name__icontains=Solarwind
         *         ```
         *
         *     * Get invoices whose total amount starts from 500 EUR:
         *
         *         ```
         *         GET /receivables?type=invoice&total_amount__gte=50000
         *         ```
         *
         *     * Get invoices that are due for payment in September 2024:
         *
         *         ```
         *         GET /receivables?type=invoice&due_date__gte=2024-09-01T00:00:00Z&due_date__lt=2024-10-01T00:00:00Z
         *         ```
         *
         *     * Get invoices created on or after September 1, 2024:
         *
         *         ```
         *         GET /receivables?type=invoice&created_at__gte=2024-09-01T00:00:00Z
         *         ```
         *
         *     * Find an invoice created from a specific quote:
         *
         *         ```
         *         GET /receivables?type=invoice?based_on=QUOTE_ID
         *         ```
         *
         *     ##### Quotes
         *
         *     * Get the latest created quote:
         *
         *         ```
         *         GET /receivables?type=quote&sort=created_at&order=desc&limit=1
         *         ```
         *
         *     * Get the latest issued quote:
         *
         *         ```
         *         GET /receivables?type=quote&sort=issue_date&order=desc&limit=1
         *         ```
         *
         *     ##### Credit notes
         *
         *     * Find all credit notes created for a specific invoice:
         *
         *         ```
         *         GET /receivables?type=credit_note?based_on=INVOICE_ID
         *         ```
         */
        get: operations["get_receivables"];
        put?: never;
        /** Create a receivable */
        post: operations["post_receivables"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/required_fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get required field names for invoice creation
         * @description Get field requirements for invoice creation given the entity and counterpart details.
         */
        get: operations["get_receivables_required_fields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search receivables
         * @description This is a POST version of the `GET /receivables` endpoint. Use it to send search and filter parameters in the request body instead of the URL query string in case the query is too long and exceeds the URL length limit of your HTTP client.
         */
        post: operations["post_receivables_search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get email template variables
         * @description Get a list of placeholders that can be used in email templates for customization.
         */
        get: operations["get_receivables_variables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a receivable by ID */
        get: operations["get_receivables_id"];
        put?: never;
        post?: never;
        /** Delete a receivable */
        delete: operations["delete_receivables_id"];
        options?: never;
        head?: never;
        /** Update a receivable */
        patch: operations["patch_receivables_id"];
        trace?: never;
    };
    "/receivables/{receivable_id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept a quote */
        post: operations["post_receivables_id_accept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel an invoice */
        post: operations["post_receivables_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clone a receivable */
        post: operations["post_receivables_id_clone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Decline a quote */
        post: operations["post_receivables_id_decline"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a receivable's history
         * @description Returns the history of the specified accounts receivable document. The history contains all revisions of the document, status updates, and other events that occurred during the document's lifecycle. For more information, see [Document history](https://docs.monite.com/accounts-receivable/document-history).
         *
         *     You can filter the history by the date range and event type. Events are sorted from oldest to newest by default.
         */
        get: operations["get_receivables_id_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/history/{receivable_history_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a receivable's history record by ID
         * @description Returns a single record from the change history of the specified accounts receivable document.
         */
        get: operations["get_receivables_id_history_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue a receivable */
        post: operations["post_receivables_id_issue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/line_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update the line items of a receivable
         * @description Replace all line items of an existing invoice or quote with a new list of line items.
         */
        put: operations["put_receivables_id_line_items"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/mails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all mails sent by receivable */
        get: operations["get_receivables_id_mails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/mails/{mail_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a mail sent by receivable */
        get: operations["get_receivables_id_mails_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/mark_as_paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an invoice as paid */
        post: operations["post_receivables_id_mark_as_paid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/mark_as_partially_paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark an invoice as partially paid
         * @deprecated
         * @description Deprecated. Use `POST /payment_records` to record an invoice payment.
         */
        post: operations["post_receivables_id_mark_as_partially_paid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/mark_as_uncollectible": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark an invoice as uncollectible */
        post: operations["post_receivables_id_mark_as_uncollectible"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/pdf_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a link to the PDF version of a receivable */
        get: operations["get_receivables_id_pdf_link"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Preview a receivable's email message */
        post: operations["post_receivables_id_preview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a receivable via email */
        post: operations["post_receivables_id_send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/send_test_reminder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a test reminder */
        post: operations["post_receivables_id_send_test_reminder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/receivables/{receivable_id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify a receivable */
        post: operations["post_receivables_id_verify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurrences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get recurrences */
        get: operations["get_recurrences"];
        put?: never;
        /** Create a recurrence */
        post: operations["post_recurrences"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurrences/{recurrence_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a recurrence by ID */
        get: operations["get_recurrences_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a recurrence */
        patch: operations["patch_recurrences_id"];
        trace?: never;
    };
    "/recurrences/{recurrence_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a recurrence */
        post: operations["post_recurrences_id_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurrences/{recurrence_id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pause a recurrence */
        post: operations["post_recurrences_id_pause"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurrences/{recurrence_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume a recurrence */
        post: operations["post_recurrences_id_resume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search roles
         * @description Find all roles that match the search criteria.
         */
        get: operations["get_roles"];
        put?: never;
        /**
         * Create a role
         * @description Create a new role from the specified values.
         */
        post: operations["post_roles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a role by ID */
        get: operations["get_roles_id"];
        put?: never;
        post?: never;
        /**
         * Delete a role
         * @description Delete a role with the specified ID. The role being deleted must not be in use by any entity users, otherwise a 409 error is returned. To check if there are entity users that have this role, call `GET /entity_users?role_id=ROLE_ID`.
         */
        delete: operations["delete_roles_id"];
        options?: never;
        head?: never;
        /**
         * Update a role
         * @description Change the specified fields with the provided values.
         */
        patch: operations["patch_roles_id"];
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get partner settings
         * @description Retrieve all settings for this partner.
         */
        get: operations["get_settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update partner settings
         * @description Change the specified fields with the provided values.
         */
        patch: operations["patch_settings"];
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tags
         * @description Get a list of all tags. Tags can be assigned to resources to assist with searching and filtering.
         *         Tags can also be used as trigger conditions in payable approval policies.
         */
        get: operations["get_tags"];
        put?: never;
        /**
         * Create a tag
         * @description Create a new tag. The tag name must be unique.
         *         Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
         *
         *
         *     The response returns an auto-generated ID assigned to this tag.
         *     To assign this tag to a resource, send the tag ID in the `tag_ids` list when creating or updating a resource.
         */
        post: operations["post_tags"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a tag by ID
         * @description Get information about a tag with the given ID.
         */
        get: operations["get_tags_id"];
        put?: never;
        post?: never;
        /**
         * Delete a tag
         * @description Delete a tag with the given ID. This tag will be automatically deleted from all resources where it was used.
         */
        delete: operations["delete_tags_id"];
        options?: never;
        head?: never;
        /**
         * Update a tag
         * @description Change the tag name. The new name must be unique among existing tags.
         *         Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
         */
        patch: operations["patch_tags_id"];
        trace?: never;
    };
    "/text_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get text templates
         * @description Get text templates
         */
        get: operations["get_text_templates"];
        put?: never;
        /**
         * Create a text template
         * @description Create a text template
         */
        post: operations["post_text_templates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/text_templates/{text_template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a text template by ID
         * @description Get all custom contents
         */
        get: operations["get_text_templates_id"];
        put?: never;
        post?: never;
        /**
         * Delete a text template
         * @description Delete custom content by ID
         */
        delete: operations["delete_text_templates_id"];
        options?: never;
        head?: never;
        /**
         * Update a text template by ID
         * @description Update custom content by ID
         */
        patch: operations["patch_text_templates_id"];
        trace?: never;
    };
    "/text_templates/{text_template_id}/make_default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make a text template default
         * @description Make text template default
         */
        post: operations["post_text_templates_id_make_default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vat_rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get VAT rates */
        get: operations["get_vat_rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook_deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the webhook delivery log
         * @description Returns an aggregated log of webhook delivery attempts. The data contains a list of triggered webhook events, how many times Monite tried to send each event to your server, the last HTTP status code returned by your webhook listener endpoint, and whether the final attempt to deliver that event was successful.
         *
         *     We guarantee access to webhook delivery data only from the last three months. Earlier data may be unavailable.
         *
         *     Note that if the same event type is included in multiple webhook subscriptions, the results will include several entries for each occurrence of this event - one entry per subscription.
         */
        get: operations["get_webhook_deliveries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook_subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get webhook subscriptions */
        get: operations["get_webhook_subscriptions"];
        put?: never;
        /** Subscribe to a webhook */
        post: operations["post_webhook_subscriptions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook_subscriptions/{webhook_subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a webhook subscription */
        get: operations["get_webhook_subscriptions_id"];
        put?: never;
        post?: never;
        /** Delete a webhook subscription */
        delete: operations["delete_webhook_subscriptions_id"];
        options?: never;
        head?: never;
        /** Update a webhook subscription */
        patch: operations["patch_webhook_subscriptions_id"];
        trace?: never;
    };
    "/webhook_subscriptions/{webhook_subscription_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable a webhook subscription */
        post: operations["post_webhook_subscriptions_id_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook_subscriptions/{webhook_subscription_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable a webhook subscription */
        post: operations["post_webhook_subscriptions_id_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Regenerate a webhook secret and return the new webhook subscription */
        post: operations["post_webhook_subscriptions_id_regenerate_secret"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
type webhooks = Record<string, never>;
interface components {
    schemas: {
        /** @enum {string} */
        APIVersion: "2025-06-23" | "2024-05-25" | "2024-01-31" | "2023-09-01" | "2023-06-04" | "2023-04-12" | "2023-03-14" | "2023-03-01" | "2023-02-07" | "2022-11-16";
        AcceptInvitationPayload: {
            fullname: string;
            invitation_token: string;
            password: string;
        };
        AccessTokenResponse: {
            access_token: string;
            expires_in: number;
            token_type: string;
        };
        /** @enum {string} */
        AccountDisabledReason: "requirements.past_due" | "requirements.pending_verification" | "listed" | "platform_paused" | "rejected.fraud" | "rejected.listed" | "rejected.terms_of_service" | "rejected.other" | "under_review" | "other";
        AccountIdentification: {
            type: components["schemas"]["PaymentIntentAccountType"];
            value: string;
        };
        AccountingConnectionList: {
            data: components["schemas"]["AccountingConnectionResponse"][];
        };
        AccountingConnectionResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            business_info?: components["schemas"]["BusinessInfoSchema"];
            connection_url: string;
            errors?: components["schemas"]["ErrorSchema"][];
            /** Format: date-time */
            last_pull?: string;
            platform?: string;
            status?: components["schemas"]["ConnectionStatus"];
        };
        AccountingCustomerRefObject: {
            /**
             * @description A unique identifier of the customer in the accounting system.
             * @example 120
             */
            id: string;
            /**
             * @description Customer name in the accounting system.
             * @example Acme Inc.
             */
            company_name?: string;
        };
        /** @description Contains the details of an invoice line item retrieved from an accounting system. */
        AccountingLineItem: {
            /**
             * @description The name or description of the product or service being invoiced.
             * @example Logo design
             */
            description?: string;
            /** @description Discount amount for this line item (if any). */
            discount_amount?: number;
            /** @description Discount percentage for this line item (if any). */
            discount_percentage?: number;
            /** @description ID of the ledger account associated with this line item. You can use `GET /ledger_accounts/{ledger_account_id}` to get further details about this ledger account. */
            ledger_account_id?: string;
            /** @description The quantity of the product or service. */
            quantity?: number;
            /** @description An internal reference to the tax rate in the accounting system that the line item is linked to. */
            tax_rate_ref?: components["schemas"]["AccountingRefObject"];
            /** @description The cost per unit of the product or service. */
            unit_amount?: number;
        };
        AccountingMessageResponse: {
            message: string;
        };
        /** @description Details of an accounts payable invoice (bill) retrieved from an accounting system. */
        AccountingPayable: {
            /** @description An internal identifier of the payable in the accounting system. */
            id: string;
            /** @description Remaining amount to be paid. */
            amount_due?: number;
            /**
             * @description ISO-4217 currency code of the payable.
             * @example EUR
             */
            currency?: string;
            /** @description Rate to convert the total amount of the transaction into the entity's base currency at the time of the transaction. */
            currency_rate?: number;
            /** @description The payable's due date. */
            due_date?: string;
            /** @description Invoice number of the payable. */
            invoice_number?: string;
            lines?: components["schemas"]["AccountingLineItem"][];
            /** @description Any additional information or business notes about the payable. */
            memo?: string;
            /**
             * Format: date
             * @description Date when the payable was added to the accounting service. This may differ from the payable creation date.
             */
            posted_date?: string;
            /** @description A list of purchase orders linked to the payable, if any. */
            purchase_order_refs?: components["schemas"]["AccountingPurchaseOrderRef"][];
            /**
             * @description The status of the payable in the accounting system. Possible values: `open`, `draft`, `partially_paid`, `paid`, `unknown`, `void`.
             * @example paid
             */
            status: string;
            /** @description Amount payable, including discounts but excluding VAT/taxes. */
            subtotal?: number;
            /** @description Total VAT or tax amount. */
            tax_amount?: number;
            /** @description The total amount payable, including discounts and VAT/taxes. */
            total_amount: number;
            /** @description Information about the vendor from whom the payable was received. */
            vendor_ref?: components["schemas"]["AccountingVendorRefObject"];
        };
        AccountingPayableList: {
            data: components["schemas"]["AccountingPayable"][];
        };
        AccountingPurchaseOrderRef: {
            /**
             * @description An internal ID of the purchase order in the accounting system.
             * @example 10
             */
            id: string;
            /**
             * @description Reference number of the purchase order.
             * @example PO-1234
             */
            name?: string;
        };
        /** @description Invoice details retrieved from an accounting system. */
        AccountingReceivable: {
            /** @description An internal identifier of the invoice in the accounting system. */
            id?: string;
            /**
             * @description ISO-4217 currency code of the invoice.
             * @example EUR
             */
            currency?: string;
            /** @description Rate to convert the total amount of the transaction into the entity's base currency at the time of the transaction. */
            currency_rate?: number;
            /** @description Information about the customer that the invoice was sent to. */
            customer_ref?: components["schemas"]["AccountingCustomerRefObject"];
            /** @description Invoice due date. */
            due_date?: string;
            /** @description Invoice document number. */
            invoice_number?: string;
            lines?: components["schemas"]["AccountingLineItem"][];
            /** @description Any additional information or business notes about the invoice. */
            memo?: string;
            /** @description An object containing additional invoice data returned by the accounting system. This sometimes includes custom invoice fields. */
            pass_through?: Record<string, never>;
            /**
             * Format: date
             * @description Date when the invoice was added to the accounting service. This may differ from the invoice creation date.
             */
            posted_date?: string;
        };
        AccountingReceivableList: {
            data: components["schemas"]["AccountingReceivable"][];
        };
        AccountingRefObject: {
            /** @description An internal ID of the tax rate in the accounting system. */
            id?: string;
        };
        AccountingSettings: {
            /** @description Default ledger accounts that will be used for various objects pushed into an accounting system. Use `GET /ledger_accounts` to get the IDs of these ledger accounts. */
            ledger_account_ids?: components["schemas"]["DefaultLedgerAccountIDs"] | null;
            /** @description Default accounting tax IDs that will be used for various objects pushed into an accounting system. Use `GET /accounting_tax_rates` to get the IDs of these taxes. */
            tax_ids?: components["schemas"]["DefaultAccountingTaxIDs"] | null;
        };
        AccountingTaxRateListResponse: {
            data: components["schemas"]["AccountingTaxRateResponse"][];
            next_pagination_token?: string;
            prev_pagination_token?: string;
        };
        AccountingTaxRateResponse: {
            /** Format: uuid */
            id: string;
            /** @description Code for the tax rate from the accounting platform. */
            code?: string;
            components?: components["schemas"]["TaxComponentResponse"][];
            /** @description Effective tax rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250. */
            effective_tax_rate?: number;
            name?: string;
            status?: string;
            /** @description Total (not compounded) sum of the components of a tax rate in [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250. */
            total_tax_rate?: number;
        };
        AccountingVendorRefObject: {
            /**
             * @description A unique identifier of the vendor in the accounting system.
             * @example 120
             */
            id: string;
            /**
             * @description Vendor name in the accounting system.
             * @example Acme Inc.
             */
            name?: string;
        };
        /** @enum {string} */
        ActionEnum: "create" | "read" | "update" | "delete";
        ActionSchema: {
            /**
             * @description Action name
             * @default read
             */
            action_name: components["schemas"]["PortalActionEnum"];
            /**
             * @description Permission type
             * @default allowed
             */
            permission: components["schemas"]["PortalPermissionEnum"];
        };
        ActionSchema2: {
            /**
             * @description Action name
             * @default read
             */
            action_name: components["schemas"]["ActionEnum"];
            /**
             * @description Permission type
             * @default allowed
             */
            permission: components["schemas"]["PermissionEnum"];
        };
        AddCustomTemplateSchema: {
            /** @description Jinja2 compatible string with email body */
            body_template: string;
            /**
             * @description Is default template
             * @default false
             */
            is_default: boolean;
            /**
             * @description Lowercase ISO code of language
             * @default en
             */
            language: components["schemas"]["LanguageCodeEnum"];
            /** @description Custom template name */
            name: string;
            /** @description Jinja2 compatible string with email subject */
            subject_template: string;
            /** @description Document type of content */
            type: components["schemas"]["DocumentObjectTypeRequestEnum"];
        };
        /** @enum {string} */
        AggregationFunctionEnum: "count" | "average" | "summary" | "min" | "max";
        AirwallexData: {
            payment_intent_id: string;
            secret: string;
        };
        AirwallexMandate: {
            /**
             * Format: email
             * @description PDF copy of mandate will be sent to the email by Airwallex
             */
            email: string;
            /** @description Name of the person signed the mandate, must be a bank account owner */
            signatory: string;
            type: components["schemas"]["AirwallexMandateType"];
            version: components["schemas"]["AirwallexMandateVersion"];
        };
        /** @enum {string} */
        AirwallexMandateType: "us_ach_debit";
        /** @enum {string} */
        AirwallexMandateVersion: "1.0";
        AirwallexPlaidAccount: {
            /** @description Plaid`s unique identifier for the account */
            id: string;
            /** @description The last 2-4 alphanumeric characters of an account's official account number */
            mask: string;
            /** @description The name of the account, either assigned by the user or by the financial institution itself */
            name: string;
        };
        /** @enum {string} */
        AirwallexPlaidBankAccountVerificationStatus: "verified" | "expired" | "suspended";
        AirwallexPlaidInstitution: {
            /** @description The institution identifier assigned by Plaid */
            id: string;
            /** @description The full financial institution name */
            name: string;
        };
        AirwallexPlaidVerification: {
            /** @description Status of the bank account verification */
            status: components["schemas"]["AirwallexPlaidBankAccountVerificationStatus"];
        };
        AllDocumentExportResponseSchema: {
            /** @description A set of export objects returned per page. */
            data: components["schemas"]["DocumentExportResponseSchema"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results. If there is no next page, i.e. you have reached the last page, the value is `null`. */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results. If there is no previous page, i.e. you have reached the first page, the value is `null`. */
            prev_pagination_token?: string;
        };
        AllOverdueRemindersResponse: {
            data: components["schemas"]["OverdueReminderResponse"][];
        };
        /** @enum {string} */
        AllowedCountries: "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "IC" | "CV" | "KY" | "CF" | "EA" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KP" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "AN" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "MK" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "SH" | "KN" | "LC" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SK" | "SI" | "SB" | "SO" | "ZA" | "SS" | "GS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "US" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "BL" | "BQ" | "CW" | "MF" | "SX";
        /** @enum {string} */
        AllowedCountriesNames: "Afghanistan" | "Åland Islands" | "Albania" | "Algeria" | "American Samoa" | "Andorra" | "Angola" | "Anguilla" | "Antarctica" | "Antigua and Barbuda" | "Argentina" | "Armenia" | "Aruba" | "Australia" | "Austria" | "Azerbaijan" | "Bahamas" | "Bahrain" | "Bangladesh" | "Barbados" | "Belarus" | "Belgium" | "Belize" | "Benin" | "Bermuda" | "Bhutan" | "Bolivia" | "Bosnia and Herzegovina" | "Botswana" | "Bouvet Island" | "Brazil" | "British Indian Ocean Territory" | "Brunei Darussalam" | "Bulgaria" | "Burkina Faso" | "Burundi" | "Cambodia" | "Cameroon" | "Canada" | "Canary Islands" | "Cabo Verde" | "Cayman Islands" | "Central African Republic" | "Ceuta and Melilla" | "Chad" | "Chile" | "China" | "Christmas Island" | "Cocos Islands" | "Colombia" | "Comoros" | "Congo" | "Democratic Republic of the Congo" | "Cook Islands" | "Costa Rica" | "Côte d'Ivoire" | "Croatia" | "Cuba" | "Cyprus" | "Czech Republic" | "Denmark" | "Djibouti" | "Dominica" | "Dominican Republic" | "Ecuador" | "Egypt" | "El Salvador" | "Equatorial Guinea" | "Eritrea" | "Estonia" | "Eswatini" | "Ethiopia" | "Falkland Islands" | "Faroe Islands" | "Fiji" | "Finland" | "France" | "French Guiana" | "French Polynesia" | "French Southern Territories" | "Gabon" | "Gambia" | "Georgia" | "Germany" | "Ghana" | "Gibraltar" | "Greece" | "Greenland" | "Grenada" | "Guadeloupe" | "Guam" | "Guatemala" | "Guernsey" | "Guinea" | "Guinea-Bissau" | "Guyana" | "Haiti" | "Heard Island and McDonald Islands" | "Holy See (Vatican City State)" | "Honduras" | "Hong Kong" | "Hungary" | "Iceland" | "India" | "Indonesia" | "Iran" | "Iraq" | "Ireland" | "Isle of Man" | "Israel" | "Italy" | "Jamaica" | "Japan" | "Jersey" | "Jordan" | "Kazakhstan" | "Kenya" | "Kiribati" | "North Korea" | "South Korea" | "Kuwait" | "Kyrgyzstan" | "Laos" | "Latvia" | "Lebanon" | "Lesotho" | "Liberia" | "Libya" | "Liechtenstein" | "Lithuania" | "Luxembourg" | "Macao" | "Madagascar" | "Malawi" | "Malaysia" | "Maldives" | "Mali" | "Malta" | "Marshall Islands" | "Martinique" | "Mauritania" | "Mauritius" | "Mayotte" | "Mexico" | "Micronesia, Federated States of" | "Moldova, Republic of" | "Monaco" | "Mongolia" | "Montenegro" | "Montserrat" | "Morocco" | "Mozambique" | "Myanmar" | "Namibia" | "Nauru" | "Nepal" | "Netherlands" | "Netherlands Antilles" | "New Caledonia" | "New Zealand" | "Nicaragua" | "Niger" | "Nigeria" | "Niue" | "Norfolk Island" | "Northern Mariana Islands" | "North Macedonia" | "Norway" | "Oman" | "Pakistan" | "Palau" | "Palestine" | "Panama" | "Papua New Guinea" | "Paraguay" | "Peru" | "Philippines" | "Pitcairn" | "Poland" | "Portugal" | "Puerto Rico" | "Qatar" | "Réunion" | "Romania" | "Russian Federation" | "Rwanda" | "Saint Helena" | "Saint Kitts and Nevis" | "Saint Lucia" | "Saint Pierre and Miquelon" | "Saint Vincent and the Grenadines" | "Samoa" | "San Marino" | "Sao Tome and Principe" | "Saudi Arabia" | "Senegal" | "Serbia" | "Seychelles" | "Sierra Leone" | "Singapore" | "Slovakia" | "Slovenia" | "Solomon Islands" | "Somalia" | "South Africa" | "South Sudan" | "South Georgia and the South Sandwich Islands" | "Spain" | "Sri Lanka" | "Sudan" | "Suriname" | "Svalbard and Jan Mayen" | "Sweden" | "Switzerland" | "Syrian Arab Republic" | "Taiwan" | "Tajikistan" | "Tanzania" | "Thailand" | "Timor-Leste" | "Togo" | "Tokelau" | "Tonga" | "Trinidad and Tobago" | "Tunisia" | "Türkiye" | "Turkmenistan" | "Turks and Caicos Islands" | "Tuvalu" | "Uganda" | "Ukraine" | "United Arab Emirates" | "United Kingdom" | "United States of America" | "United States Minor Outlying Islands" | "Uruguay" | "Uzbekistan" | "Vanuatu" | "Venezuela" | "Viet Nam" | "Virgin Islands, British" | "Virgin Islands, U.S." | "Wallis and Futuna" | "Western Sahara" | "Yemen" | "Zambia" | "Zimbabwe" | "Saint Barthélemy" | "Bonaire, Sint Eustatius and Saba" | "Curaçao" | "Saint Martin (French part)" | "Sint Maarten (Dutch part)";
        /** @enum {string} */
        AllowedEinvoicingCountryCodes: "DE" | "NL" | "BE";
        /** @enum {string} */
        AllowedFileTypes: "ocr_results" | "ocr_files" | "payables" | "receivables" | "delivery_notes" | "receipts" | "userpics" | "entity_logo" | "companies_logo" | "zip" | "identity_documents" | "additional_identity_documents" | "receivable_signatures" | "einvoices_xml" | "attachments";
        AnalyticsDataPoint: {
            dimension_value?: string;
            metric_value: number;
        };
        ApprovalPolicyCreate: {
            /** @description A brief description of the approval policy. */
            description?: string;
            /**
             * Format: date-time
             * @description The date and time (in the ISO 8601 format) when the approval policy stops being active and stops triggering approval workflows.If `ends_at` is provided in the request, then `starts_at` must also be provided and `ends_at` must be later than `starts_at`. The value will be converted to UTC.
             */
            ends_at?: string;
            /** @description The name of the approval policy. */
            name: string;
            /**
             * @description The priority controls which approval policy takes precedence when a payable matches multiple approval policies. A higher value mean higher priority.
             * @default 0
             */
            priority: number;
            /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
            script: (boolean | number | string | unknown[] | Record<string, never>)[];
            /**
             * Format: date-time
             * @description The date and time (in the ISO 8601 format) when the approval policy becomes active. Only payables submitted for approval during the policy's active period will trigger this policy. If omitted or `null`, the policy is effective immediately. The value will be converted to UTC.
             */
            starts_at?: string;
            /**
             * @description A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.
             * @example {amount >= 1000}
             */
            trigger?: boolean | number | string | unknown[] | Record<string, never>;
        };
        /** @enum {string} */
        ApprovalPolicyCursorFields: "created_at" | "updated_at";
        ApprovalPolicyResource: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uuid */
            created_by: string;
            /** @description A brief description of the approval policy. */
            description?: string;
            /**
             * Format: date-time
             * @description The date and time (in the ISO 8601 format) when the approval policy stops being active and stops triggering approval workflows.If `ends_at` is provided in the request, then `starts_at` must also be provided and `ends_at` must be later than `starts_at`. The value will be converted to UTC.
             */
            ends_at?: string;
            /** @description The name of the approval policy. */
            name: string;
            /**
             * @description The priority controls which approval policy takes precedence when a payable matches multiple approval policies. A higher value mean higher priority.
             * @default 0
             */
            priority: number;
            /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
            script: (boolean | number | string | unknown[] | Record<string, never>)[];
            /**
             * Format: date-time
             * @description The date and time (in the ISO 8601 format) when the approval policy becomes active. Only payables submitted for approval during the policy's active period will trigger this policy. If omitted or `null`, the policy is effective immediately. The value will be converted to UTC.
             */
            starts_at?: string;
            /**
             * @description The current status of the approval policy.
             * @example active
             * @enum {string}
             */
            status: "active" | "pending";
            /**
             * @description A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.
             * @example {amount >= 1000}
             */
            trigger?: boolean | number | string | unknown[] | Record<string, never>;
            /** Format: uuid */
            updated_by?: string;
        };
        ApprovalPolicyResourceList: {
            data: components["schemas"]["ApprovalPolicyResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        ApprovalPolicyStatus: "active" | "deleted" | "pending";
        ApprovalPolicyUpdate: {
            /** @description A brief description of the approval policy. */
            description?: string;
            /**
             * Format: date-time
             * @description The date and time (in the ISO 8601 format) when the approval policy stops being active and stops triggering approval workflows.If `ends_at` is provided in the request, then `starts_at` must also be provided and `ends_at` must be later than `starts_at`. The value will be converted to UTC.
             */
            ends_at?: string;
            /** @description The name of the approval policy. */
            name?: string;
            /** @description The priority controls which approval policy takes precedence when a payable matches multiple approval policies. A higher value mean higher priority. */
            priority?: number;
            /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
            script?: (boolean | number | string | unknown[] | Record<string, never>)[];
            /**
             * Format: date-time
             * @description The date and time (in the ISO 8601 format) when the approval policy becomes active. Only payables submitted for approval during the policy's active period will trigger this policy. If omitted or `null`, the policy is effective immediately. The value will be converted to UTC.
             */
            starts_at?: string;
            /** @description A string that represents the current status of the approval policy. */
            status?: components["schemas"]["ApprovalPolicyStatus"];
            /**
             * @description A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.
             * @example {amount >= 1000}
             */
            trigger?: boolean | number | string | unknown[] | Record<string, never>;
        };
        ApprovalProcessResourceList: {
            data: components["schemas"]["ProcessResource"][];
        };
        ApprovalProcessStepResource: {
            /** Format: uuid */
            approval_request_id?: string;
            approved_by: string[];
            /** Format: uuid */
            object_id: string;
            /** Format: uuid */
            rejected_by?: string;
            required_approval_count: number;
            role_ids: string[];
            status: components["schemas"]["ApprovalProcessStepStatus"];
            user_ids: string[];
        };
        ApprovalProcessStepResourceList: {
            data: components["schemas"]["ApprovalProcessStepResource"][];
        };
        /** @enum {string} */
        ApprovalProcessStepStatus: "waiting" | "approved" | "rejected" | "canceled" | "failed" | "not_started" | "skipped";
        ApprovalRequestCreateByRoleRequest: {
            /** Format: uuid */
            object_id: string;
            object_type: components["schemas"]["ObjectType"];
            required_approval_count: number;
            role_ids: string[];
        };
        ApprovalRequestCreateByUserRequest: {
            /** Format: uuid */
            object_id: string;
            object_type: components["schemas"]["ObjectType"];
            required_approval_count: number;
            user_ids: string[];
        };
        ApprovalRequestCreateRequest: components["schemas"]["ApprovalRequestCreateByRoleRequest"] | components["schemas"]["ApprovalRequestCreateByUserRequest"];
        /** @enum {string} */
        ApprovalRequestCursorFields: "created_at" | "updated_at";
        ApprovalRequestResourceList: {
            data: components["schemas"]["ApprovalRequestResourceWithMetadata"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        ApprovalRequestResourceWithMetadata: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            approved_by: string[];
            /**
             * Format: uuid
             * @description ID of the user who created the approval request
             * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
             */
            created_by: string;
            /** Format: uuid */
            object_id: string;
            object_type: components["schemas"]["ObjectType"];
            /** Format: uuid */
            rejected_by?: string;
            required_approval_count: number;
            role_ids: string[];
            status: components["schemas"]["ApprovalRequestStatus"];
            user_ids: string[];
        };
        /** @enum {string} */
        ApprovalRequestStatus: "waiting" | "approved" | "rejected" | "canceled";
        AttachmentRequest: {
            /**
             * Format: uuid
             * @description Unique ID of the file with file_type=attachment from /v1/files.
             */
            id: string;
            /**
             * @description Indicates whether the file would be included in the email.
             * @default false
             */
            include_in_email: boolean;
        };
        AttachmentResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the file with file_type=attachment from /v1/files.
             */
            id: string;
            /**
             * @description Indicates whether the file would be included in the email.
             * @default false
             */
            include_in_email: boolean;
            /** @description MIME type of the file (e.g., 'application/pdf'). */
            mimetype: string;
            /** @description Original filename of the attachment. */
            name: string;
            /** @description File size in bytes. */
            size: number;
            /** @description URL to access the attachment file. */
            url: string;
        };
        AttachmentResponse2: {
            /**
             * Format: uuid
             * @description Unique ID of the file with file_type=attachment from /v1/files.
             */
            id: string;
            /**
             * @description Indicates whether the file would be included in the email.
             * @default false
             */
            include_in_email: boolean;
            /** @description MIME type of the file (e.g., 'application/pdf'). */
            mimetype: string;
            /** @description Original filename of the attachment. */
            name: string;
            /** @description File size in bytes. */
            size: number;
            /** @description URL to access the attachment file. */
            url: string;
        };
        AuthPayload: {
            /** Format: email */
            email: string;
            password: string;
        };
        AuthPaymentIntentPayload: components["schemas"]["ManuallySpecifiedBankAccountPayload"] | components["schemas"]["AuthorizedBankAccountPayload"] | components["schemas"]["BankAccountPayload"];
        AuthPaymentIntentResponse: {
            /** Format: uri */
            authorization_url: string;
        };
        AuthResponse: {
            auth: components["schemas"]["Token"];
            /** @default false */
            deactivated_by_default: boolean;
        };
        AuthorizedBankAccount: {
            /** Format: uuid */
            id: string;
            /** @description Masked account number, e.g. ****1234 */
            account_number?: string;
            /**
             * Format: uuid
             * @description ID of the entity or counterpart bank account
             */
            bank_account_id?: string;
            bank_id: string;
            country: components["schemas"]["AllowedCountries"];
            /** @description Masked IBAN number, e.g. ****1234 */
            iban?: string;
            name?: string;
        };
        AuthorizedBankAccountPayload: {
            /** Format: uuid */
            authorized_bank_account_id: string;
            /** @default false */
            iframe: boolean;
            /** @description PSU identification is required for some banks (e.g. some Germany institutions). */
            psu_identification?: components["schemas"]["PsuIdentification"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "authorized_bank_account";
        };
        /**
         * @description Automation level for recurrence
         * @enum {string}
         */
        AutomationLevel: "draft" | "issue" | "issue_and_send";
        Bank: {
            authorization_methods: components["schemas"]["SupportedPaymentAuthorizationFlow"][];
            bank_id: string;
            country: components["schemas"]["AllowedCountries"];
            media: components["schemas"]["Media"][];
            name: string;
            payer_required: boolean;
            psu_identification?: components["schemas"]["PsuIdentificationType"];
        };
        BankAccount: {
            /**
             * Format: uuid
             * @description The ID of the bank account.
             */
            id: string;
            /**
             * @description The name of the person or business that owns this bank account.
             * @example Bob Jones
             */
            account_holder_name?: string;
            /**
             * @description The bank account number. Typically used for UK and US bank accounts. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
             * @example 12345678
             */
            account_number?: string;
            /**
             * @description The BIC/SWIFT code of the bank.
             * @example DEUTDEFFXXX
             */
            bic?: string;
            /**
             * @description The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @description The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/references/currencies).
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /**
             * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'. Used only for entity bank accounts.
             * @example Primary account
             */
            display_name?: string;
            /**
             * @description The IBAN of the bank account.
             * @example DE74500700100100000900
             */
            iban?: string;
            /**
             * @description Indicates whether this bank account is the default one for its currency.
             * @default false
             */
            is_default: boolean;
            /**
             * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'. Used only for counterpart bank accounts.
             * @example Primary account
             */
            name?: string;
            /** @description The bank's routing transit number (RTN). Typically used for US banks. US routing numbers consist of 9 digits. */
            routing_number?: string;
            /**
             * @description The bank's sort code. Typically used for UK banks.
             * @example 123456
             */
            sort_code?: string;
            /**
             * Format: uuid
             * @description ID of the entity user who added this bank account, or `null` if it was added using a partner access token. Used only for entity bank accounts.
             */
            was_created_by_user_id?: string;
        };
        BankAccountPayload: {
            /** Format: uuid */
            bank_account_id: string;
            bank_id: string;
            /** @default false */
            iframe: boolean;
            /** @description PSU identification is required for some banks (e.g. some Germany institutions). */
            psu_identification?: components["schemas"]["PsuIdentification"];
            /** @default false */
            save_to_authorized: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bank_account";
        };
        /** @enum {string} */
        BankAccountVerificationType: "airwallex_plaid" | "micro_deposit";
        BankAccountVerifications: {
            /** @description Airwallex Plaid verification */
            airwallex_plaid?: components["schemas"]["AirwallexPlaidVerification"];
        };
        BanksResponse: {
            data: components["schemas"]["Bank"][];
        };
        /** @description In invoice history, this object contains information about a credit note created for this invoice.
         *     In quote history, it contains information about an invoice created from this quote. */
        BasedOnReceivableCreatedEventData: {
            /**
             * Format: uuid
             * @description The ID of the newly created receivable document.
             */
            receivable_id: string;
            /** @description The type of the receivable document that was created based on the current document. */
            type: components["schemas"]["ReceivableType"];
        };
        /** @enum {string} */
        BasedOnTransitionType: "invoice" | "credit_note";
        "BizObjectsSchema-Input": {
            /** @description List of objects */
            objects?: components["schemas"]["RootSchema-Input"][];
        };
        "BizObjectsSchema-Output": {
            /** @description List of objects */
            objects?: components["schemas"]["RootSchema-Output"][];
        };
        Body_put_entities_id_logo: {
            /** Format: binary */
            file: Blob;
        };
        BusinessInfoSchema: {
            base_currency?: string;
            email?: string;
            legal_name?: string;
            name?: string;
            type?: string;
        };
        "BusinessProfile-Input": {
            /** @description Required for US entities. A free-form description of the products the entity sells (whether online or at offline retail stores) or the services it provides to its customers. */
            description_of_goods_or_services?: string | null;
            /** @description Required for US entities. The approximate revenue that the business generates per month. */
            estimated_monthly_revenue?: components["schemas"]["EstimatedMonthlyRevenue"] | null;
            /** @description The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide. */
            mcc?: string | null;
            /** @description Required for US entities. A list of primary countries where the business conducts its operations, such as selling products or providing services. Use two-letter country codes (ISO 3166-2 alpha-2). */
            operating_countries?: components["schemas"]["AllowedCountries"][] | null;
            /** @description The business's publicly available website. */
            url?: string | null;
        };
        "BusinessProfile-Output": {
            /** @description Required for US entities. A free-form description of the products the entity sells (whether online or at offline retail stores) or the services it provides to its customers. */
            description_of_goods_or_services?: string | null;
            /** @description Required for US entities. The approximate revenue that the business generates per month. */
            estimated_monthly_revenue?: components["schemas"]["EstimatedMonthlyRevenue"] | null;
            /** @description The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide. */
            mcc?: string | null;
            /** @description Required for US entities. A list of primary countries where the business conducts its operations, such as selling products or providing services. Use two-letter country codes (ISO 3166-2 alpha-2). */
            operating_countries?: components["schemas"]["AllowedCountries"][] | null;
            /** @description The business's publicly available website. */
            url?: string | null;
        };
        ButtonTheme: {
            primary_color?: string | null;
            primary_hover_color?: string | null;
            secondary_color?: string | null;
            secondary_hover_color?: string | null;
        };
        CardTheme: {
            background_color?: string | null;
        };
        ClientMessage: {
            attachments?: string[] | null;
            text_prompt: string;
        } & {
            [key: string]: unknown;
        };
        CommentCreateRequest: {
            /** Format: uuid */
            object_id: string;
            object_type: string;
            /** Format: uuid */
            reply_to_entity_user_id?: string;
            text: string;
        };
        /** @enum {string} */
        CommentCursorFields: "id";
        CommentPayload: {
            /** @description An arbitrary comment that describes how and when this payable was paid. */
            comment?: string;
        };
        CommentResource: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uuid */
            created_by_entity_user_id: string;
            /** Format: uuid */
            entity_id: string;
            /** Format: uuid */
            object_id: string;
            object_type: string;
            /** Format: uuid */
            reply_to_entity_user_id?: string;
            status: components["schemas"]["StatusEnum"];
            text: string;
        };
        CommentResourceList: {
            data: components["schemas"]["CommentResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        CommentUpdateRequest: {
            /** Format: uuid */
            reply_to_entity_user_id?: string;
            text?: string;
        };
        "CommonSchema-Input": {
            /** @description List of actions */
            actions?: components["schemas"]["ActionSchema2"][];
            /**
             * @description Object type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            object_type: "approval_policy" | "approval_request" | "comment" | "counterpart" | "counterpart_vat_id" | "delivery_note" | "entity" | "entity_bank_account" | "entity_user" | "entity_vat_ids" | "export" | "mailbox" | "ocr_task" | "onboarding" | "overdue_reminder" | "payables_purchase_order" | "payment_record" | "payment_reminder" | "person" | "product" | "project" | "receipt" | "receivable" | "reconciliation" | "role" | "tag" | "todo_task" | "todo_task_mute" | "transaction" | "workflow";
        };
        "CommonSchema-Output": {
            /** @description List of actions */
            actions?: components["schemas"]["ActionSchema2"][];
            /**
             * @description Object type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            object_type: "approval_policy" | "approval_request" | "comment" | "counterpart" | "counterpart_vat_id" | "delivery_note" | "entity" | "entity_bank_account" | "entity_user" | "entity_vat_ids" | "export" | "mailbox" | "ocr_task" | "onboarding" | "overdue_reminder" | "payables_purchase_order" | "payment_record" | "payment_reminder" | "person" | "product" | "project" | "receipt" | "receivable" | "reconciliation" | "role" | "tag" | "todo_task" | "todo_task_mute" | "transaction" | "workflow";
        };
        CompanyRequest: {
            contact_email?: string | null;
            contact_phone?: string | null;
            name: string;
            /** Format: uri */
            website: string;
        };
        CompanyResponse: {
            /** Format: uuid */
            id: string;
            contact_email?: string | null;
            contact_phone?: string | null;
            created_by_user_id?: string | null;
            logo?: components["schemas"]["FileSchema3"] | null;
            name: string;
            status: components["schemas"]["StatusEnum"];
            /** Format: uri */
            website: string;
        };
        CompanyUpdateRequest: {
            contact_email?: string | null;
            contact_phone?: string | null;
            name?: string | null;
            website?: string | null;
        };
        CompleteRefreshVerificationRequest: {
            type: components["schemas"]["BankAccountVerificationType"];
        };
        CompleteRefreshVerificationResponse: {
            verifications: components["schemas"]["BankAccountVerifications"];
        };
        CompleteVerificationAirwallexPlaidRequest: {
            /** @description The bank account that was selected in the Plaid Modal */
            account: components["schemas"]["AirwallexPlaidAccount"];
            /** @description The financial institution that was selected in the Plaid Modal */
            institution: components["schemas"]["AirwallexPlaidInstitution"];
            mandate: components["schemas"]["AirwallexMandate"];
            /** @description The Plaid Public Token */
            public_token: string;
        };
        CompleteVerificationRequest: {
            airwallex_plaid: components["schemas"]["CompleteVerificationAirwallexPlaidRequest"];
            type: components["schemas"]["BankAccountVerificationType"];
        };
        CompleteVerificationResponse: {
            /**
             * Format: uuid
             * @deprecated
             * @description Deprecated. Use bank_account_id instead.
             */
            id: string;
            /** @description Account holder's name */
            account_holder_name?: string;
            /** @description Account number (required if IBAN is not provided) */
            account_number?: string;
            /** Format: uuid */
            bank_account_id: string;
            /** @description The name of the entity`s bank account. */
            bank_name?: string;
            /** @description The BIC of the entity`s bank account. */
            bic?: string;
            country?: components["schemas"]["AllowedCountries"];
            currency?: components["schemas"]["CurrencyEnum"];
            display_name?: string;
            /** @description The IBAN of the entity`s bank account. */
            iban?: string;
            /** @description Marks if a bank account should be used by default for the currency. Only 1 can be True for each currency. */
            is_default: boolean;
            /** @description Routing number (US) */
            routing_number?: string;
            /** @description Sort code (GB) */
            sort_code?: string;
            verifications: components["schemas"]["BankAccountVerifications"];
            /** Format: uuid */
            was_created_by_user_id?: string;
        };
        /** @enum {string} */
        ConnectionStatus: "connected" | "disconnected" | "deauthorized" | "pending_auth";
        ConsentPayload: {
            consent: string;
        };
        /** @enum {string} */
        ConsentState: "AWAITING_SCA_METHOD" | "AWAITING_SCA_CODE" | "AWAITING_DECOUPLED_AUTHORIZATION" | "AUTHORIZED" | "FAILED";
        ConversationResource: {
            /**
             * Format: uuid
             * @description Unique identifier of the conversation
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time the conversation was created
             */
            created_at: string;
            /** @description Indicates if the conversation is starred by the user */
            is_starred: boolean;
            /** @description List of messages in the conversation. Filled only when conversation is retrieved individually */
            messages?: components["schemas"]["Message"][] | null;
            /** @description Title of the conversation generated by LLM */
            title: string;
        };
        ConversationResourceList: {
            /** @description List of conversations */
            data: components["schemas"]["ConversationResource"][];
            /** @description Token to retrieve the next page of conversations */
            next_pagination_token?: string | null;
            /** @description Token to retrieve the previous page of conversations */
            prev_pagination_token?: string | null;
        };
        /** @description Address information. */
        CounterpartAddress: {
            /**
             * @description City name.
             * @example Berlin
             */
            city: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        CounterpartAddressResourceList: {
            data: components["schemas"]["CounterpartAddressResponseWithCounterpartID"][];
        };
        /** @description Address information. */
        CounterpartAddressResponseWithCounterpartID: {
            /**
             * Format: uuid
             * @description Unique ID of the address in the system
             */
            id: string;
            /**
             * @description City name.
             * @example Berlin
             */
            city: string;
            /**
             * Format: uuid
             * @description ID of the counterpart that owns the address.
             */
            counterpart_id: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        CounterpartAiSuggestion: {
            /**
             * Format: uuid
             * @description The id of the counterpart.
             */
            id: string;
            /**
             * Format: uuid
             * @description The id of the address of the counterpart.
             */
            address_id?: string;
            /**
             * Format: uuid
             * @description The id of the bank account of the counterpart.
             */
            bank_account_id?: string;
            /**
             * Format: uuid
             * @description The id of the VAT ID of the counterpart.
             */
            vat_id_id?: string;
        };
        /** @description Payload for AI suggestions. */
        CounterpartAiSuggestionsResponse: {
            data: components["schemas"]["CounterpartAiSuggestion"][];
        };
        CounterpartBankAccountResourceList: {
            data: components["schemas"]["CounterpartBankAccountResponse"][];
        };
        CounterpartBankAccountResponse: {
            /** Format: uuid */
            id: string;
            /**
             * @description The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
             * @example Bob Jones
             */
            account_holder_name?: string;
            /**
             * @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
             * @example 12345678
             */
            account_number?: string;
            /**
             * @description The BIC/SWIFT code of the bank.
             * @example DEUTDEFFXXX
             */
            bic?: string;
            /** Format: uuid */
            counterpart_id: string;
            country: components["schemas"]["AllowedCountries"];
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * @description The IBAN of the bank account.
             * @example DE74500700100100000900
             */
            iban?: string;
            /** @default false */
            is_default_for_currency: boolean;
            name?: string;
            /** @description Metadata for partner needs. */
            partner_metadata?: Record<string, never>;
            /** @description The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits. */
            routing_number?: string;
            /**
             * @description The bank's sort code.
             * @example 123456
             */
            sort_code?: string;
        };
        /** @description The contact person for an organization. */
        CounterpartContactResponse: {
            /** Format: uuid */
            id: string;
            /** @description The address of a contact person. */
            address: components["schemas"]["CounterpartAddress"];
            /** Format: uuid */
            counterpart_id: string;
            /**
             * Format: email
             * @description The email address of a contact person.
             * @example contact@example.org
             */
            email?: string;
            /**
             * @description The first name of a contact person.
             * @example Mary
             */
            first_name: string;
            is_default: boolean;
            /**
             * @description The last name of a contact person.
             * @example O'Brien
             */
            last_name: string;
            /**
             * @description The phone number of a contact person
             * @example 5551235476
             */
            phone?: string;
            /**
             * @description The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
             * @example Ms.
             */
            title?: string;
        };
        CounterpartContactsResourceList: {
            data: components["schemas"]["CounterpartContactResponse"][];
        };
        /** @description This schema is used to create new counterparts (either organizations or individuals).
         *     The counterpart type is specified by the `type` property. Depending on the `type`,
         *     you need to provide the data for either the `individual` or `organization` property. */
        CounterpartCreatePayload: components["schemas"]["CounterpartOrganizationRootCreatePayload"] | components["schemas"]["CounterpartIndividualRootCreatePayload"];
        /** @enum {string} */
        CounterpartCursorFields: "counterpart_name";
        CounterpartEinvoicingCredentialExistenceResponse: {
            /** @description Indicates if the e-invoicing credentials exist in the system */
            exists: boolean;
        };
        CounterpartEinvoicingCredentialResponse: {
            /** Format: uuid */
            id: string;
            network_identifier: string;
            network_schema: components["schemas"]["EinvoiceSchemaTypeEnum"];
        };
        CounterpartEinvoicingCredentialResponseList: {
            data: components["schemas"]["CounterpartEinvoicingCredentialResponse"][];
        };
        CounterpartEinvoicingCredentialSchema: {
            network_identifier: string;
            network_schema: components["schemas"]["EinvoiceSchemaTypeEnum"];
        };
        CounterpartFields: {
            /**
             * @description Object describing the required field `tax_id` of an counterpart
             * @default {
             *       "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.",
             *       "required": false
             *     }
             */
            tax_id: components["schemas"]["FieldSchema"];
            /**
             * @description Object describing the required field `vat_id` of an counterpart
             * @default {
             *       "description": "The counterpart's VAT (Value Added Tax) identification number. This field is required for counterparts that are VAT-registered.",
             *       "required": false
             *     }
             */
            vat_id: components["schemas"]["FieldSchema"];
        };
        /** @description Represents counterparts that are individuals (natural persons). */
        CounterpartIndividualCreatePayload: {
            /** @description The person's address. */
            address: components["schemas"]["CounterpartAddress"];
            /**
             * Format: email
             * @description The person's email address.
             * @example asingh@example.net
             */
            email?: string;
            /**
             * @description The person's first name.
             * @example Adnan
             */
            first_name: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor: boolean;
            /**
             * @description The person's last name.
             * @example Singh
             */
            last_name: string;
            /**
             * @description The person's phone number.
             * @example 5553211234
             */
            phone?: string;
            /** @description A list of IDs of user-defined tags (labels) assigned to this counterpart. */
            tag_ids?: string[];
            /**
             * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
             * @example Mr.
             */
            title?: string;
        };
        CounterpartIndividualResponse: {
            /**
             * Format: email
             * @description The person's email address.
             * @example asingh@example.net
             */
            email?: string;
            /**
             * @description The person's first name.
             * @example Adnan
             */
            first_name: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor: boolean;
            /**
             * @description The person's last name.
             * @example Singh
             */
            last_name: string;
            /**
             * @description The person's phone number.
             * @example 5553211234
             */
            phone?: string;
            /** @description The list of tags for this counterpart. */
            tags?: components["schemas"]["CounterpartTagSchema"][];
            /**
             * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
             * @example Mr.
             */
            title?: string;
        };
        /** @description This schema is used to create counterparts that are individuals (natural persons). */
        CounterpartIndividualRootCreatePayload: {
            /** @description A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity. */
            external_reference?: string;
            individual: components["schemas"]["CounterpartIndividualCreatePayload"];
            /**
             * @description The language used to generate PDF documents for this counterpart.
             * @default en
             */
            language: components["schemas"]["LanguageCodeEnum"];
            /** @default true */
            reminders_enabled: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered. */
            tax_id?: string;
            /**
             * @description Must be "individual".
             * @example individual
             * @enum {string}
             */
            type: "individual";
        };
        /** @description Represents counterparts that are individuals (natural persons). */
        CounterpartIndividualRootResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            updated_at: string;
            /**
             * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
             * @default false
             */
            created_automatically: boolean;
            /**
             * Format: uuid
             * @description Entity user ID of counterpart creator.
             */
            created_by_entity_user_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
             */
            default_billing_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the shipping address.
             */
            default_shipping_address_id?: string;
            /**
             * @description A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.
             * @example 123456789
             */
            external_reference?: string;
            individual: components["schemas"]["CounterpartIndividualResponse"];
            /** @description The language used to generate PDF documents for this counterpart. */
            language?: components["schemas"]["LanguageCodeEnum"];
            reminders_enabled?: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. */
            tax_id?: string;
            /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
            type: components["schemas"]["CounterpartType"];
        };
        /** @description Represents counterparts that are individuals (natural persons). */
        CounterpartIndividualRootUpdatePayload: {
            /**
             * Format: uuid
             * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
             */
            default_billing_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the shipping address.
             */
            default_shipping_address_id?: string;
            /**
             * @description A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.
             * @example 123456789
             */
            external_reference?: string;
            individual: components["schemas"]["CounterpartIndividualUpdatePayload"];
            /** @description The language used to generate PDF documents for this counterpart. */
            language?: components["schemas"]["LanguageCodeEnum"];
            reminders_enabled?: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered. */
            tax_id?: string;
        };
        /** @description Represents counterparts that are individuals (natural persons). */
        CounterpartIndividualUpdatePayload: {
            /**
             * Format: email
             * @description The person's email address.
             * @example asingh@example.net
             */
            email?: string;
            /**
             * @description The person's first name.
             * @example Adnan
             */
            first_name?: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer?: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor?: boolean;
            /**
             * @description The person's last name.
             * @example Singh
             */
            last_name?: string;
            /**
             * @description The person's phone number.
             * @example 5553211234
             */
            phone?: string;
            /** @description A list of IDs of user-defined tags (labels) assigned to this counterpart. */
            tag_ids?: string[];
            /**
             * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
             * @example Mr.
             */
            title?: string;
        };
        /** @description Represents counterparts that are organizations (juridical persons). */
        CounterpartOrganizationCreatePayload: {
            /** @description The address of the organization. */
            address: components["schemas"]["CounterpartAddress"];
            /**
             * Format: email
             * @description The email address of the organization
             * @example acme@example.com
             */
            email?: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor: boolean;
            /**
             * @description The legal name of the organization.
             * @example Acme Inc.
             */
            legal_name: string;
            /**
             * @description The phone number of the organization
             * @example 5551231234
             */
            phone?: string;
            /** @description A list of IDs of user-defined tags (labels) assigned to this counterpart. */
            tag_ids?: string[];
        };
        CounterpartOrganizationResponse: {
            /**
             * Format: email
             * @description The email address of the organization
             * @example acme@example.com
             */
            email?: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor: boolean;
            /**
             * @description The legal name of the organization.
             * @example Acme Inc.
             */
            legal_name: string;
            /**
             * @description The phone number of the organization
             * @example 5551231234
             */
            phone?: string;
            /** @description The list of tags for this counterpart. */
            tags?: components["schemas"]["CounterpartTagSchema"][];
        };
        /** @description This schema is used to create counterparts that are organizations (juridical persons). */
        CounterpartOrganizationRootCreatePayload: {
            /**
             * @description A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.
             * @example 123456789
             */
            external_reference?: string;
            /**
             * @description The language used to generate PDF documents for this counterpart.
             * @default en
             */
            language: components["schemas"]["LanguageCodeEnum"];
            organization: components["schemas"]["CounterpartOrganizationCreatePayload"];
            /** @default true */
            reminders_enabled: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered. */
            tax_id?: string;
            /**
             * @description Must be "organization".
             * @example organization
             * @enum {string}
             */
            type: "organization";
        };
        /** @description Represents counterparts that are organizations (juridical persons). */
        CounterpartOrganizationRootResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            updated_at: string;
            /**
             * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
             * @default false
             */
            created_automatically: boolean;
            /**
             * Format: uuid
             * @description Entity user ID of counterpart creator.
             */
            created_by_entity_user_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
             */
            default_billing_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the shipping address.
             */
            default_shipping_address_id?: string;
            /**
             * @description A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.
             * @example 123456789
             */
            external_reference?: string;
            /** @description The language used to generate PDF documents for this counterpart. */
            language?: components["schemas"]["LanguageCodeEnum"];
            organization: components["schemas"]["CounterpartOrganizationResponse"];
            reminders_enabled?: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. */
            tax_id?: string;
            /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
            type: components["schemas"]["CounterpartType"];
        };
        /** @description Represents counterparts that are organizations (juridical persons). */
        CounterpartOrganizationRootUpdatePayload: {
            /**
             * Format: uuid
             * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
             */
            default_billing_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the shipping address.
             */
            default_shipping_address_id?: string;
            /**
             * @description A user-defined identifier of the counterpart. For example, the customer or vendor reference number in the entity's CRM system. If specified, it will be displayed in PDF invoices and other accounts receivable documents created by the entity.
             * @example 123456789
             */
            external_reference?: string;
            /**
             * @description The language used to generate PDF documents for this counterpart.
             * @default en
             */
            language: components["schemas"]["LanguageCodeEnum"];
            organization: components["schemas"]["CounterpartOrganizationUpdatePayload"];
            /** @default true */
            reminders_enabled: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered. */
            tax_id?: string;
        };
        /** @description Represents counterparts that are organizations (juridical persons). */
        CounterpartOrganizationUpdatePayload: {
            /**
             * Format: email
             * @description The email address of the organization.
             * @example acme@example.com
             */
            email?: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer?: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor?: boolean;
            /**
             * @description The legal name of the organization.
             * @example Acme Inc.
             */
            legal_name?: string;
            /**
             * @description The phone number of the organization.
             * @example 5551231234
             */
            phone?: string;
            /** @description A list of IDs of user-defined tags (labels) assigned to this counterpart. */
            tag_ids?: string[];
        };
        /** @description A paginated list of counterparts */
        CounterpartPaginationResponse: {
            data: components["schemas"]["CounterpartResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @description Address information. */
        CounterpartRawAddress: {
            /**
             * @description City name.
             * @example Berlin
             */
            city?: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1?: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code?: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        /** @description Address information. */
        CounterpartRawAddressUpdateRequest: {
            /**
             * @description City name.
             * @example Berlin
             */
            city?: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1?: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code?: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        CounterpartRawBankAccount: {
            /** @description Vendor's bank account name. */
            account_holder_name?: string;
            /**
             * @description Vendor's bank account number, IBAN, or similar (if specified in the payable document).
             * @example 123456789012
             */
            account_number?: string;
            /**
             * @description SWIFT code (BIC) of the vendor's bank.
             * @example DEUTDE2HXXX
             */
            bic?: string;
            /** @description required for non-GB bank accounts */
            iban?: string;
            /** @description required for US bank accounts */
            routing_number?: string;
            /** @description required for GB bank accounts */
            sort_code?: string;
        };
        CounterpartRawBankAccountUpdateRequest: {
            /** @description Vendor's bank account name. */
            account_holder_name?: string;
            /**
             * @description Vendor's bank account number, IBAN, or similar (if specified in the payable document).
             * @example 123456789012
             */
            account_number?: string;
            /**
             * @description SWIFT code (BIC) of the vendor's bank.
             * @example DEUTDE2HXXX
             */
            bic?: string;
            /** @description required for non-GB bank accounts */
            iban?: string;
            /** @description required for US bank accounts */
            routing_number?: string;
            /** @description required for GB bank accounts */
            sort_code?: string;
        };
        CounterpartRawData: {
            /** @description The address of the vendor or supplier. */
            address?: components["schemas"]["CounterpartRawAddress"];
            /** @description Object representing counterpart bank account. */
            bank_account?: components["schemas"]["CounterpartRawBankAccount"];
            /**
             * Format: email
             * @description The email address of the organization
             * @example acme@example.com
             */
            email?: string;
            /**
             * @description Vendor or supplier name.
             * @example Acme Inc.
             */
            name?: string;
            /**
             * @description The phone number of the organization
             * @example 5551231234
             */
            phone?: string;
            /**
             * @description The tax id of the counterpart.
             * @example DE12345678
             */
            tax_id?: string;
            /** @description VAT ID of the vendor or supplier which was used in the invoice. */
            vat_id?: components["schemas"]["CounterpartRawVatID"];
        };
        CounterpartRawDataUpdateRequest: {
            /** @description The address of the vendor or supplier. */
            address?: components["schemas"]["CounterpartRawAddressUpdateRequest"];
            /** @description Object representing counterpart bank account. */
            bank_account?: components["schemas"]["CounterpartRawBankAccountUpdateRequest"];
            /**
             * Format: email
             * @description The email address of the organization
             * @example acme@example.com
             */
            email?: string;
            /**
             * @description Vendor or supplier name.
             * @example Acme Inc.
             */
            name?: string;
            /**
             * @description The phone number of the organization
             * @example 5551231234
             */
            phone?: string;
            /**
             * @description The tax id of the counterpart.
             * @example DE12345678
             */
            tax_id?: string;
            /** @description VAT ID of the vendor or supplier which was used in the invoice. */
            vat_id?: components["schemas"]["CounterpartRawVatIDUpdateRequest"];
        };
        CounterpartRawVatID: {
            country?: components["schemas"]["AllowedCountries"];
            type?: string;
            value?: string;
        };
        CounterpartRawVatIDUpdateRequest: {
            country?: components["schemas"]["AllowedCountries"];
            type?: string;
            value?: string;
        };
        /** @description A Counterpart object contains information about an organization (juridical person) or
         *     individual (natural person) that provides goods and services to or buys them from an
         *     [SME](https://docs.monite.com/docs/glossary#sme). */
        CounterpartResponse: components["schemas"]["CounterpartIndividualRootResponse"] | components["schemas"]["CounterpartOrganizationRootResponse"];
        /** @description Represents a user-defined tag that can be assigned to resources to filter them. */
        CounterpartTagSchema: {
            /**
             * Format: uuid
             * @description A unique ID of this tag.
             * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             * @example 2022-09-07T16:35:18.484507+00:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             * @example 2022-09-07T16:35:18.484507+00:00
             */
            updated_at: string;
            /**
             * @description The tag category.
             * @example department
             */
            category?: components["schemas"]["TagCategory"];
            /**
             * Format: uuid
             * @description ID of the user who created the tag.
             * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
             */
            created_by_entity_user_id?: string;
            /**
             * @description The tag description.
             * @example Tag for the Marketing Department
             */
            description?: string;
            /**
             * @description The tag name.
             * @example Marketing
             */
            name: string;
        };
        /** @enum {string} */
        CounterpartType: "individual" | "organization";
        CounterpartUpdateAddress: {
            /**
             * @description City name.
             * @example Berlin
             */
            city?: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1?: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code?: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        /** @description This schema is used to update existing counterparts (organizations or individuals). */
        CounterpartUpdatePayload: components["schemas"]["CounterpartIndividualRootUpdatePayload"] | components["schemas"]["CounterpartOrganizationRootUpdatePayload"];
        CounterpartUpdateVatID: {
            country?: components["schemas"]["AllowedCountries"];
            /** @example eu_vat */
            type?: components["schemas"]["VatIDTypeEnum"];
            value?: string;
        };
        CounterpartVatID: {
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @default unknown
             * @example eu_vat
             */
            type: components["schemas"]["VatIDTypeEnum"];
            /** @example 123456789 */
            value: string;
        };
        CounterpartVatIDResourceList: {
            data: components["schemas"]["CounterpartVatIDResponse"][];
        };
        CounterpartVatIDResponse: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            counterpart_id: string;
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @default unknown
             * @example eu_vat
             */
            type: components["schemas"]["VatIDTypeEnum"];
            /** @example 123456789 */
            value: string;
        };
        CreateCounterpartBankAccount: {
            /**
             * @description The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
             * @example Bob Jones
             */
            account_holder_name?: string;
            /**
             * @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
             * @example 12345678
             */
            account_number?: string;
            /**
             * @description The BIC/SWIFT code of the bank.
             * @example DEUTDEFFXXX
             */
            bic?: string;
            country: components["schemas"]["AllowedCountries"];
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * @description The IBAN of the bank account.
             * @example DE74500700100100000900
             */
            iban?: string;
            /** @default false */
            is_default_for_currency: boolean;
            name?: string;
            /** @description Metadata for partner needs. */
            partner_metadata?: Record<string, never>;
            /** @description The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits. */
            routing_number?: string;
            /**
             * @description The bank's sort code.
             * @example 123456
             */
            sort_code?: string;
        };
        /** @description The contact person for an organization. */
        CreateCounterpartContactPayload: {
            /** @description The address of a contact person. */
            address: components["schemas"]["CounterpartAddress"];
            /**
             * Format: email
             * @description The email address of a contact person.
             * @example contact@example.org
             */
            email?: string;
            /**
             * @description The first name of a contact person.
             * @example Mary
             */
            first_name: string;
            /**
             * @description The last name of a contact person.
             * @example O'Brien
             */
            last_name: string;
            /**
             * @description The phone number of a contact person
             * @example 5551235476
             */
            phone?: string;
            /**
             * @description The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
             * @example Ms.
             */
            title?: string;
        };
        CreateCounterpartEinvoicingCredentialCounterpartVatId: {
            /**
             * Format: uuid
             * @description ID of Counterpart VAT ID
             */
            counterpart_vat_id_id: string;
        };
        CreateCounterpartEinvoicingCredentialPayload: components["schemas"]["CreateCounterpartEinvoicingCredentialCounterpartVatId"] | components["schemas"]["CounterpartEinvoicingCredentialSchema"];
        /** @description Represents a bank account owned by an entity. */
        CreateEntityBankAccountRequest: {
            /**
             * @description The name of the person or business that owns this bank account. Required in the following cases:
             *     * the account currency is GBP or USD,
             *     * the account currency is EUR and the entity wishes to receive SEPA Credit transfers to this account.
             * @example Cayla Lloyd
             */
            account_holder_name?: string;
            /**
             * @description The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.
             * @example 12345678
             */
            account_number?: string;
            /**
             * @description The bank name.
             * @example Deutsche Bank
             */
            bank_name?: string;
            /**
             * @description The SWIFT/BIC code of the bank. Can be either 8 or 11 characters long. Monite verifies the BIC length, country code, and whether the structure conforms to ISO 9362.
             *
             *     If `bic` is specified, `iban` must also be specified.
             * @example DEUTDEFFXXX
             */
            bic?: string;
            /**
             * @description The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).
             * @example EUR
             */
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
             * @example Primary account
             */
            display_name?: string;
            /**
             * @description The IBAN of the bank account, up to 34 characters. Required if the account currency is EUR. Monite verifies the IBAN length, checksum digits, and country-specific format according to ISO 13616.
             * @example DE74500700100100000900
             */
            iban?: string;
            /**
             * @description If set to `true` or if this is the first bank account added for the given currency, this account becomes the default one for its currency.
             * @default false
             */
            is_default_for_currency: boolean;
            /** @description The bank's routing transit number (RTN) or branch code. Required if the account currency is USD. US routing numbers consist of 9 digits. */
            routing_number?: string;
            /**
             * @description The bank's sort code. Required if the account currency is GBP.
             * @example 123456
             */
            sort_code?: string;
        };
        /** @description A schema for a request to create an entity of different types */
        CreateEntityRequest: {
            /** @description An address description of the entity */
            address: components["schemas"]["EntityAddressSchema"];
            /**
             * Format: email
             * @description An official email address of the entity
             */
            email: string;
            /** @description A set of meta data describing the individual */
            individual?: components["schemas"]["IndividualSchema"] | null;
            /** @description A set of meta data describing the organization */
            organization?: components["schemas"]["OrganizationSchema"] | null;
            /** @description The contact phone number of the entity. Required for US organizations to use payments. */
            phone?: string | null;
            /** @description (Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided. */
            registration_authority?: string | null;
            /** @description (Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available. */
            registration_number?: string | null;
            /** @description The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered. */
            tax_id?: string | null;
            /** @description A type for an entity */
            type: components["schemas"]["EntityTypeEnum"];
            /** @description A website of the entity */
            website?: string | null;
        };
        CreateEntityUserRequest: {
            /** @description An entity user business email */
            email?: string | null;
            /** @description First name */
            first_name: string;
            /** @description Last name */
            last_name?: string | null;
            login: string;
            /** @description An entity user phone number in the international format */
            phone?: string | null;
            /** @description UUID of the role assigned to this entity user */
            role_id?: string | null;
            /** @description Title */
            title?: string | null;
        };
        CreateExportTaskResponseSchema: {
            /** Format: uuid */
            id: string;
        };
        CreateOCRRequestPayload: {
            document_type?: components["schemas"]["OCRDocumentTypeEnum"];
            file_url: string;
        };
        CreateOnboardingLinkRequest: {
            recipient: components["schemas"]["Recipient"];
            /** Format: uri */
            refresh_url: string;
            /** Format: uri */
            return_url: string;
        };
        CreatePaymentLinkRequest: {
            /**
             * @description The payment amount in [minor units](https://docs.monite.com/references/currencies#minor-units). Required if `object` is not specified.
             * @example 120550
             */
            amount?: number;
            /**
             * @description The payment currency. Required if `object` is not specified.
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /** Format: date-time */
            expires_at?: string;
            /** @description An object containing information about the invoice being paid. Used only if `object` is not specified. */
            invoice?: components["schemas"]["Invoice"];
            /** @description If the invoice being paid is a payable or receivable stored in Monite, provide the `object` object containing the invoice type and ID. Otherwise, use the `amount`, `currency`, `payment_reference`, and (optionally) `invoice` fields to specify the invoice-related data. */
            object?: components["schemas"]["PaymentObject"];
            payment_methods: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
            /**
             * @description A payment reference number that the recipient can use to identify the payer or purpose of the transaction. Required if `object` is not specified.
             * @example 011/7057/26072
             */
            payment_reference?: string;
            recipient: components["schemas"]["PaymentAccountObject"];
            /**
             * Format: uri
             * @description The URL where to redirect the payer after the payment. If `return_url` is specified, then after the payment is completed the payment page will display the "Return to platform" link that navigates to this URL.
             * @example https://pay.example.com/complete
             */
            return_url?: string;
        };
        CreateRecurrencePayload: {
            /** @description Controls how invoices are processed when generated:
             *     - "draft": Creates invoices in draft status, requiring manual review, issuing, and sending
             *     - "issue": Automatically issues invoices but requires manual sending
             *     - "issue_and_send": Fully automates the process (creates, issues, and sends invoices)
             *
             *     Default: "issue" (or "issue_and_send" if subject_text and body_text are provided)
             *
             *     Note: When using "issue_and_send", both subject_text and body_text must be provided.
             *      */
            automation_level?: components["schemas"]["AutomationLevel"];
            /** @description The body text for the email that will be sent with the recurring invoice. */
            body_text?: string;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            day_of_month?: components["schemas"]["DayOfMonth"];
            /**
             * Format: date
             * @description The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified.
             */
            end_date?: string;
            /**
             * @deprecated
             * @description Deprecated, use `end_date` instead
             */
            end_month?: number;
            /**
             * @deprecated
             * @description Deprecated, use `end_date` instead
             */
            end_year?: number;
            /**
             * @description How often the invoice will be created.
             * @default month
             */
            frequency: components["schemas"]["RecurrenceFrequency"];
            /**
             * @description The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months.
             * @default 1
             */
            interval: number;
            /**
             * Format: uuid
             * @description ID of the base invoice that will be used as a template for creating recurring invoices.
             */
            invoice_id: string;
            /** @description How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified. */
            max_occurrences?: number;
            /** @description An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field. */
            recipients?: components["schemas"]["Recipients"];
            /**
             * Format: date
             * @description The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`.
             */
            start_date?: string;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            start_month?: number;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            start_year?: number;
            /** @description The subject for the email that will be sent with the recurring invoice. */
            subject_text?: string;
        };
        CreateRoleRequest: {
            /** @description Role name */
            name: string;
            /** @description Access permissions */
            permissions: components["schemas"]["BizObjectsSchema-Input"];
        };
        CreateTextTemplatePayload: {
            document_type: components["schemas"]["TextTemplateDocumentTypeEnum"];
            name: string;
            template: string;
            type: components["schemas"]["TextTemplateType"];
        };
        CreateWebhookSubscriptionRequest: {
            event_types?: string[];
            object_type: components["schemas"]["WebhookObjectType"];
            /** Format: uri */
            url: string;
        };
        /** @description Schema for creating a new credit note. */
        CreditNoteCreateRequest: {
            /**
             * Format: uuid
             * @description ID of the payable this credit note is based on. The credit note will be linked to this payable
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            based_on?: string;
            /**
             * @description The document ID of the original payable that this credit note refers to
             * @example INV-2287
             */
            based_on_document_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart's address
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart's bank account
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_bank_account_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart (vendor/supplier)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart's VAT registration
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_vat_id_id?: string;
            /**
             * @description The currency code of the credit note
             * @default EUR
             * @example EUR
             */
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * @description An arbitrary description of this credit note
             * @example Credit note for returned items from invoice INV-2287
             */
            description?: string;
            /**
             * @description A unique credit note number assigned by the credit note issuer for tracking purposes
             * @example CN-2287
             */
            document_id: string;
            /**
             * Format: date
             * @description The date when the credit note was issued, in the YYYY-MM-DD format
             * @example 2024-01-15
             */
            issued_at: string;
            /**
             * Format: uuid
             * @description The ID of the project this credit note belongs to
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            project_id?: string;
            /**
             * @description The email address from which the credit note was received
             * @example supplier@example.com
             */
            sender?: string;
            /**
             * @description The subtotal amount before taxes
             * @example 1000
             */
            subtotal?: number;
            /**
             * @description List of tag IDs associated with this credit note
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ]
             */
            tag_ids?: string[];
            /**
             * @description The tax percentage applied to the subtotal
             * @example 20
             */
            tax?: number;
            /**
             * @description The calculated tax amount
             * @example 200
             */
            tax_amount?: number;
            /**
             * @description The total amount including taxes
             * @example 1200
             */
            total_amount?: number;
        };
        /** @enum {string} */
        CreditNoteCursorFields: "id" | "created_at";
        /** @enum {string} */
        CreditNoteDimensionEnum: "created_at" | "status" | "counterpart_id" | "currency" | "issued_at" | "project_id";
        /** @enum {string} */
        CreditNoteFieldsAllowedForValidate: "currency" | "document_id" | "issued_at" | "tax_amount" | "based_on" | "total_amount" | "subtotal" | "description" | "tax" | "file_id" | "counterpart_id" | "counterpart_bank_account_id" | "counterpart_address_id" | "counterpart_vat_id_id" | "line_items" | "line_items.quantity" | "line_items.unit_price" | "line_items.tax" | "line_items.unit" | "line_items.name" | "line_items.description" | "line_items.subtotal" | "line_items.total" | "line_items.tax_amount";
        /** @description Schema for creating a new credit note line item. */
        CreditNoteLineItemCreateRequest: {
            /**
             * @description Detailed description of the line item
             * @example Premium version of Product XYZ with extended warranty
             */
            description?: string;
            /**
             * @description Name or title of the line item
             * @example Product XYZ
             */
            name?: string;
            /**
             * @description Quantity of items
             * @example 2
             */
            quantity?: number;
            /**
             * @description VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
             * @example 1250
             */
            tax?: number;
            /**
             * @description Unit of measurement
             * @example pieces
             */
            unit?: string;
            /**
             * @description Price per unit in smallest currency unit (e.g. cents)
             * @example 5000
             */
            unit_price?: number;
        };
        /** @enum {string} */
        CreditNoteLineItemCursorFields: "id" | "created_at" | "name" | "total" | "quantity" | "unit_price";
        /** @description A paginated list of credit note line items. */
        CreditNoteLineItemPaginationResponse: {
            /** @description List of credit note line items for the current page */
            data: components["schemas"]["CreditNoteLineItemResponse"][];
            /**
             * @description Token to retrieve the next page of results
             * @example eyJwYWdlIjoyfQ==
             */
            next_pagination_token?: string;
            /**
             * @description Token to retrieve the previous page of results
             * @example eyJwYWdlIjoxfQ==
             */
            prev_pagination_token?: string;
        };
        /** @description Schema for replacing all line items of a credit note. */
        CreditNoteLineItemReplaceRequest: {
            /** @description List of credit note line items to replace existing ones */
            data: components["schemas"]["CreditNoteLineItemCreateRequest"][];
        };
        /** @description Schema for credit note line item response. Includes all fields that can be returned from the API. */
        CreditNoteLineItemResponse: {
            /**
             * Format: uuid
             * @description Unique identifier of the line item
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * Format: date-time
             * @description Timestamp when the line item was created
             * @example 2024-01-15T14:30:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the line item was last updated
             * @example 2024-01-15T14:30:00Z
             */
            updated_at: string;
            /**
             * Format: uuid
             * @description ID of the user who created the line item
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            created_by_user_id?: string;
            /**
             * Format: uuid
             * @description ID of the parent credit note
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            credit_note_id: string;
            /**
             * @description Detailed description of the line item
             * @example Premium version of Product XYZ with extended warranty
             */
            description?: string;
            /**
             * @description Name or title of the line item
             * @example Product XYZ
             */
            name?: string;
            /**
             * @description Quantity of items
             * @example 2
             */
            quantity?: number;
            /**
             * @description Subtotal amount before tax
             * @example 10000
             */
            subtotal?: number;
            /**
             * @description Tax percentage
             * @example 20
             */
            tax?: number;
            /**
             * @description Tax amount
             * @example 2000
             */
            tax_amount?: number;
            /**
             * @description Total amount including tax
             * @example 12000
             */
            total?: number;
            /**
             * @description Unit of measurement
             * @example pieces
             */
            unit?: string;
            /**
             * @description Price per unit in smallest currency unit
             * @example 5000
             */
            unit_price?: number;
        };
        /** @description Schema for updating an existing credit note line item. All fields are optional. */
        CreditNoteLineItemUpdateRequest: {
            /**
             * @description Detailed description of the line item
             * @example Premium version of Product XYZ with extended warranty
             */
            description?: string;
            /**
             * @description Name or title of the line item
             * @example Product XYZ
             */
            name?: string;
            /**
             * @description Quantity of items
             * @example 2
             */
            quantity?: number;
            /**
             * @description VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
             * @example 1250
             */
            tax?: number;
            /**
             * @description Unit of measurement
             * @example pieces
             */
            unit?: string;
            /**
             * @description Price per unit in smallest currency unit
             * @example 5000
             */
            unit_price?: number;
        };
        /** @enum {string} */
        CreditNoteMetricEnum: "id" | "total_amount";
        /** @description A paginated list of credit notes. */
        CreditNotePaginationResponse: {
            /** @description List of credit notes for the current page */
            data: components["schemas"]["CreditNoteResponse"][];
            /**
             * @description Token to retrieve the next page of results
             * @example eyJwYWdlIjoyfQ==
             */
            next_pagination_token?: string;
            /**
             * @description Token to retrieve the previous page of results
             * @example eyJwYWdlIjoxfQ==
             */
            prev_pagination_token?: string;
        };
        CreditNoteRenderingSettings: {
            /**
             * @description If set to `true`, the entity's bank account details will be displayed on the credit note PDF.
             * @default true
             */
            display_entity_bank_account: boolean;
        };
        /** @description Schema for credit note response. Includes all fields that can be returned from the API. */
        CreditNoteResponse: {
            /**
             * Format: uuid
             * @description The unique identifier of the credit note
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the credit note was created in the system
             * @example 2024-01-15T14:30:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time of the last update to the credit note
             * @example 2024-01-15T14:30:00Z
             */
            updated_at: string;
            /**
             * Format: uuid
             * @description ID of the payable this credit note is based on
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            based_on?: string;
            /**
             * @description The document ID of the original payable that this credit note refers to
             * @example INV-2287
             */
            based_on_document_id?: string;
            /** @description Object representing de-normalized counterpart data */
            counterpart?: components["schemas"]["CounterpartRawData"];
            /**
             * Format: uuid
             * @description ID of the counterpart's address
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's bank account
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_bank_account_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_id?: string;
            /** @description Object representing counterpart data which was extracted by OCR. Used for informational purposes. */
            counterpart_raw?: components["schemas"]["CounterpartRawData"];
            /**
             * Format: uuid
             * @description ID of the counterpart's VAT registration
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_vat_id_id?: string;
            /**
             * @description External system's user ID for the creator
             * @example ext_user_123
             */
            created_by_external_user_id?: string;
            /**
             * @description Name of the external user who created the credit note
             * @example John Doe
             */
            created_by_external_user_name?: string;
            /**
             * Format: uuid
             * @description ID of the user who created the credit note
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            created_by_user_id?: string;
            /**
             * @description The currency code
             * @example EUR
             */
            currency?: string;
            currency_exchange?: components["schemas"]["CurrencyExchangeSchema"];
            /**
             * @description Description of the credit note
             * @example Credit note for returned items from invoice INV-2287
             */
            description?: string;
            /**
             * @description The credit note's unique document number
             * @example CN-2287
             */
            document_id?: string;
            /**
             * Format: uuid
             * @description The ID of the entity to which the credit note belongs
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            entity_id: string;
            /**
             * Format: uuid
             * @description The id of the credit note file stored in the file saver.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            file_id?: string;
            /** @description The URL of the credit note file stored in the file saver. */
            file_url?: string;
            /**
             * Format: date
             * @description Date when the credit note was issued
             * @example 2024-01-15
             */
            issued_at?: string;
            /**
             * Format: uuid
             * @description ID of the OCR processing request
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            ocr_request_id?: string;
            /**
             * @description Status of OCR processing
             * @example completed
             */
            ocr_status?: string;
            /**
             * @description The origin or source system of the credit note
             * @example SAP
             */
            origin: string;
            /**
             * Format: uuid
             * @description ID of the associated project
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            project_id?: string;
            /**
             * @description Email address of the sender
             * @example supplier@example.com
             */
            sender?: string;
            /**
             * @description How the data was input (ocr/user_specified)
             * @example user_specified
             */
            source_of_data: string;
            /**
             * @description The current status of the credit note in its lifecycle
             * @example submitted_for_approval
             */
            status: string;
            /**
             * @description The subtotal amount before taxes
             * @example 1000
             */
            subtotal?: number;
            /**
             * @description List of tags associated with this credit note
             * @example [
             *       {
             *         "id": "123e4567-e89b-12d3-a456-426614174000",
             *         "name": "Department A",
             *         "category": "department"
             *       }
             *     ]
             */
            tags?: components["schemas"]["TagReadSchema"][];
            /**
             * @description The tax percentage
             * @example 20
             */
            tax?: number;
            /**
             * @description The calculated tax amount
             * @example 200
             */
            tax_amount?: number;
            /**
             * @description The total amount including taxes
             * @example 1200
             */
            total_amount?: number;
        };
        CreditNoteResponsePayload: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentResponse2"][];
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the receivable if applicable.
             */
            based_on?: string;
            /** @description The unique document ID of a previous document related to the receivable if applicable. */
            based_on_document_id?: string;
            /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
            commercial_condition_description?: string;
            /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
            counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
            counterpart_business_type?: string;
            /** @description Additional information about counterpart contacts. */
            counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
            /** @description E-invoicing credentials of the counterpart */
            counterpart_einvoicing_credentials?: components["schemas"]["EinvoicingCredentials"];
            /** @description The external reference of the counterpart. */
            counterpart_external_reference?: string;
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            counterpart_id: string;
            /** @description A legal name of a counterpart it is an organization or first and last name if it is an individual */
            counterpart_name?: string;
            /** @description Address where goods were shipped / where services were provided. */
            counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /** @description The VAT/TAX ID of the counterpart. */
            counterpart_tax_id?: string;
            /** @description The type of the counterpart. */
            counterpart_type: components["schemas"]["CounterpartType"];
            counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
            /** @description The currency used in the receivable. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["DiscountResponse2"];
            /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units). */
            discounted_subtotal?: number;
            /** @description The sequential code systematically assigned to invoices. */
            document_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            /**
             * Format: date
             * @description Optional field representing date until which invoice should be paid
             */
            due_date?: string;
            /** @description Error that was returned by E-invoicing */
            einvoice_error_comment?: string;
            /** @description E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`. */
            einvoice_file_url?: string;
            entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
            entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
            entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount2"];
            /**
             * Format: uuid
             * @description The entity user who created this document.
             */
            entity_user_id?: string;
            entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
            /** @description The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated. */
            file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the counterpart's default language. */
            file_url?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * @description If `true`, the credit note will be sent through an e-invoicing network. The value is inherited from the invoice for which the credit note was created, and cannot be changed.
             * @default false
             */
            is_einvoice: boolean;
            /**
             * Format: date-time
             * @description Optional field for the issue of the entry.
             */
            issue_date?: string;
            line_items: components["schemas"]["ResponseItem"][];
            /** @description A note with additional information for a receivable. */
            memo?: string;
            /** @description E-invoicing credentials of the entity */
            network_credentials?: components["schemas"]["EinvoicingCredentials"];
            /** @description The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated. */
            original_file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the entity's default language. */
            original_file_url?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /** @description Contain purchase order number. */
            purchase_order?: string;
            /** @description The status of the Credit Note inside the receivable workflow. */
            status: components["schemas"]["CreditNoteStateEnum"];
            /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal?: number;
            /** @description The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal_after_vat?: number;
            /**
             * @description The list of tags for this receivable.
             * @default []
             */
            tags: components["schemas"]["TagReadSchema"][];
            /**
             * @description Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
             * @default 0
             */
            total_amount: number;
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_vat_amount: number;
            /** @description List of total vat amount for each VAT, presented in receivable */
            total_vat_amounts?: components["schemas"]["TotalVatAmountItem2"][];
            /** @description Total price of the receivable with tax withheld in minor units */
            total_withholding_tax?: number;
            /** @description Trade name of the entity */
            trade_name?: string;
            /**
             * @description The type of the receivable
             * @enum {string}
             */
            type: "credit_note";
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /**
             * @description Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.
             * @default exclusive
             */
            vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
            /**
             * @description Defines whether the prices of products in receivable will already include VAT or not.
             * @default exclusive
             */
            vat_mode: components["schemas"]["VatModeEnum"];
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        /** @enum {string} */
        CreditNoteStateEnum: "draft" | "issuing" | "issued" | "failed" | "deleted";
        /** @description Schema for updating an existing credit note. All fields are optional. */
        CreditNoteUpdateRequest: {
            /**
             * Format: uuid
             * @description ID of the payable this credit note is based on. The credit note will be linked to this payable
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            based_on?: string;
            /**
             * @description The document ID of the original payable
             * @example INV-2287
             */
            based_on_document_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's address
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's bank account
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_bank_account_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's VAT registration
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            counterpart_vat_id_id?: string;
            /**
             * @description The currency code of the credit note
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /**
             * @description An arbitrary description of this credit note
             * @example Credit note for returned items from invoice INV-2287
             */
            description?: string;
            /**
             * @description A unique credit note number assigned by the credit note issuer for tracking purposes
             * @example CN-2287
             */
            document_id?: string;
            /**
             * Format: date
             * @description The date when the credit note was issued, in the YYYY-MM-DD format
             * @example 2024-01-15
             */
            issued_at?: string;
            /**
             * Format: uuid
             * @description The ID of the project this credit note belongs to
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            project_id?: string;
            /**
             * @description Email address of the sender
             * @example supplier@example.com
             */
            sender?: string;
            /**
             * @description The subtotal amount before taxes
             * @example 1000
             */
            subtotal?: number;
            /**
             * @description List of tag IDs associated with this credit note
             * @example [
             *       "123e4567-e89b-12d3-a456-426614174000"
             *     ]
             */
            tag_ids?: string[];
            /**
             * @description The tax percentage applied to the subtotal
             * @example 20
             */
            tax?: number;
            /**
             * @description The calculated tax amount
             * @example 200
             */
            tax_amount?: number;
            /**
             * @description The total amount including taxes
             * @example 1200
             */
            total_amount?: number;
        };
        CreditNoteUploadFile: {
            /** Format: binary */
            file: Blob;
        };
        CreditNoteValidationResponse: {
            /**
             * Format: uuid
             * @description A unique ID assigned to this credit note.
             */
            id: string;
            validation_errors?: Record<string, never>[];
        };
        CreditNoteValidationsResource: {
            required_fields: components["schemas"]["CreditNoteFieldsAllowedForValidate"][];
        };
        CurrencyDetails: {
            minor_units: number;
            name: string;
            symbol: string;
        };
        /** @enum {string} */
        CurrencyEnum: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHF" | "CLP" | "CNY" | "COP" | "CRC" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HTG" | "HUF" | "IDR" | "ILS" | "INR" | "IQD" | "ISK" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SEK" | "SGD" | "SHP" | "SLE" | "SOS" | "SRD" | "SSP" | "SVC" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XOF" | "XPF" | "YER" | "ZAR" | "ZMW";
        CurrencyExchangeSchema: {
            default_currency_code: string;
            rate: number;
            total: number;
        };
        CurrencyExchangeSchema2: {
            default_currency_code: string;
            rate: number;
            total: number;
        };
        "CurrencySettings-Input": {
            default: components["schemas"]["CurrencyEnum"];
            exchange_rates?: (components["schemas"]["ExchangeRate"] | null)[];
        };
        "CurrencySettings-Output": {
            default: components["schemas"]["CurrencyEnum"];
            exchange_rates?: (components["schemas"]["ExchangeRate"] | null)[];
        };
        /** @enum {string} */
        CursorFields: "id" | "created_at";
        CustomTemplateDataSchema: {
            /**
             * Format: uuid
             * @description ID of email template
             */
            id: string;
            /**
             * Format: date-time
             * @description Template created date and time
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Template updated date and time
             */
            updated_at: string;
            /** @description Jinja2 compatible email body template */
            body_template: string;
            /** @description Is default template */
            is_default: boolean;
            /** @description Lowercase ISO code of language */
            language: string;
            /** @description Name of the template */
            name: string;
            /** @description Jinja2 compatible email subject template */
            subject_template: string;
            /** @description Document type of content */
            type: string;
        };
        /** @enum {string} */
        CustomTemplatesCursorFields: "type" | "name";
        CustomTemplatesPaginationResponse: {
            /** @description All user-defined email templates */
            data: components["schemas"]["CustomTemplateDataSchema"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        CustomVatRateRequest: {
            /** @description Sub-taxes included in the Custom VAT. */
            components: components["schemas"]["VatRateComponent2"][];
            /** @description Display name of the Custom VAT. */
            name: string;
        };
        CustomVatRateResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the Custom VAT rate was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the Custom VAT rate was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description Sub-taxes included in the Custom VAT. */
            components: components["schemas"]["VatRateComponent2"][];
            /**
             * Format: uuid
             * @description ID of the user that created the Custom VAT rate
             */
            created_by_entity_user_id?: string;
            /** @description Display name of the Custom VAT. */
            name: string;
            /** @description Total sum of the Custom VAT rate including components. Percent multiplied by a 100. Example: 12.125% is 1212.5. */
            value: number;
        };
        CustomVatRateResponseList: {
            data: components["schemas"]["CustomVatRateResponse"][];
        };
        CustomVatRateUpdateRequest: {
            /** @description Sub-taxes included in the Custom VAT. */
            components?: components["schemas"]["VatRateComponent2"][];
            /** @description Display name of the Custom VAT. */
            name?: string;
        };
        DNSRecord: {
            is_active: boolean;
            name?: string;
            /** @description Purpose of specific entry to distinguish between various TXT entries. */
            record_purpose?: components["schemas"]["DNSRecordPurpose"];
            record_type: components["schemas"]["DNSRecordType"];
            /** @description Field reflecting validation status by Mailgun. */
            valid: string;
            value: string;
        };
        /** @enum {string} */
        DNSRecordPurpose: "DKIM" | "SPF";
        /** @enum {string} */
        DNSRecordType: "TXT" | "MX" | "CNAME";
        DNSRecords: {
            /** @description Set of DNS settings required by Mailgun for domain verification before emails receiving is possible. */
            receiving_dns_records: components["schemas"]["DNSRecord"][];
            /** @description Set of DNS settings required by Mailgun for domain verification before emails sending is possible. */
            sending_dns_records: components["schemas"]["DNSRecord"][];
        };
        /** @enum {string} */
        DataExportCursorFields: "created_at";
        /** @enum {string} */
        DateDimensionBreakdownEnum: "daily" | "weekly" | "monthly" | "quarterly" | "yearly";
        /** @enum {string} */
        DayOfMonth: "first_day" | "last_day";
        DecryptTokenResponse: {
            company_name: string;
            /** Format: email */
            email: string;
            expired: boolean;
            token_type: components["schemas"]["TokenSerializerTypeEnum"];
        };
        DefaultAccountingTaxIDs: {
            /** @description ID of the accounting tax ID with which all deductions will be pushed. */
            deductions?: string | null;
        };
        DefaultLedgerAccountIDs: {
            /** @description ID of the ledger account to which all payment records will be pushed. Changing this value affects only future data pushes and does not affect payment records that already exist in the accounting system. */
            payments?: string | null;
            /** @description ID of the ledger account to which products without a `ledger_account_id` specified will be pushed. Changing this value affects only future data pushes and does not affect products that already exist in the accounting system. */
            products?: string | null;
        };
        DeliveryNoteCounterpartResource: {
            /**
             * Format: uuid
             * @description ID of the counterpart
             */
            id: string;
            /** @description Individual counterpart */
            individual?: components["schemas"]["CounterpartIndividualResponse"];
            /** @description The language used to generate pdf documents for this counterpart. */
            language?: components["schemas"]["LanguageCodeEnum"];
            /** @description Organization counterpart */
            organization?: components["schemas"]["CounterpartOrganizationResponse"];
        };
        DeliveryNoteCreateBasedOnRequest: {
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the receivable if applicable.
             */
            based_on: string;
        };
        DeliveryNoteCreateLineItem: {
            /** @description Object of product. Can be used instead of product_id, created in product's catalog */
            product?: components["schemas"]["DeliveryNoteLineItemProduct"];
            /**
             * Format: uuid
             * @description Unique identifier of the product.
             */
            product_id?: string;
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity: number;
        };
        /** @description Delivery Note creation request schema */
        DeliveryNoteCreateRequest: {
            /**
             * Format: uuid
             * @description ID of the counterpart address selected for the delivery note
             */
            counterpart_address_id: string;
            /**
             * Format: uuid
             * @description ID of the counterpart
             */
            counterpart_id: string;
            /**
             * Format: date
             * @description Date of delivery
             */
            delivery_date?: string;
            /** @description Delivery number */
            delivery_number?: string;
            /**
             * @description Whether to display a signature placeholder in the generated PDF
             * @default false
             */
            display_signature_placeholder: boolean;
            /** @description Document ID of the delivery note */
            document_id?: string;
            /** @description List of line items in the delivery note */
            line_items: components["schemas"]["DeliveryNoteCreateLineItem"][];
            /** @description Additional information regarding the delivery note */
            memo?: string;
        };
        /** @enum {string} */
        DeliveryNoteCursorFields: "status" | "document_id" | "delivery_date" | "created_at";
        DeliveryNoteLineItemProduct: {
            /** @description Description of the product. */
            description?: string;
            measure_unit?: components["schemas"]["UnitRequest"];
            /** @description Name of the product. */
            name: string;
        };
        DeliveryNoteLineItemResource: {
            product: components["schemas"]["DeliveryNoteLineItemProduct"];
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity: number;
        };
        /** @example {
         *       "id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
         *       "status": "created",
         *       "created_at": "2022-01-01T00:00:00Z",
         *       "updated_at": "2022-01-01T00:00:00Z",
         *       "entity_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
         *       "entity": {
         *         "name": "Entity Name"
         *       },
         *       "entity_address": {
         *         "line1": "Entity Street",
         *         "city": "Entity City",
         *         "postal_code": "123009",
         *         "country": "DE"
         *       },
         *       "created_by_entity_user_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
         *       "counterpart_id": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
         *       "counterpart": {
         *         "name": "Counterpart Name"
         *       },
         *       "counterpart_address": {
         *         "line1": "Counterpart Street",
         *         "city": "Counterpart City",
         *         "postal_code": "123009",
         *         "country": "DE"
         *       },
         *       "line_items": [
         *         {
         *           "quantity": 20,
         *           "product": {
         *             "name": "Product Name",
         *             "description": "Description of product",
         *             "measure_unit": {
         *               "name": "pcs",
         *               "description": "Pieces"
         *             }
         *           }
         *         }
         *       ],
         *       "document_id": "DN-2022-01-01-0001",
         *       "delivery_date": "2022-01-01",
         *       "delivery_number": "102-2022-0987",
         *       "memo": "This is a memo",
         *       "display_signature_placeholder": true,
         *       "file_url": "https://example.com/delivery_note.pdf",
         *       "original_file_url": "https://example.com/delivery_note_original.pdf",
         *       "file_language": "en",
         *       "original_file_language": "de",
         *       "based_on": "a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6",
         *       "based_on_document_id": "IN-2022-01-01-0001"
         *     } */
        DeliveryNoteResource: {
            /**
             * Format: uuid
             * @description Unique ID of the delivery note
             */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the delivery note was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the delivery note was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the delivery note if applicable.
             */
            based_on?: string;
            /** @description The unique document ID of a previous document related to the delivery note if applicable. */
            based_on_document_id?: string;
            /** @description Counterpart of the delivery note */
            counterpart: components["schemas"]["DeliveryNoteCounterpartResource"];
            /** @description Address of the counterpart */
            counterpart_address: components["schemas"]["ReceivablesCounterpartAddress"];
            /**
             * Format: uuid
             * @description ID of the counterpart
             */
            counterpart_id: string;
            /**
             * Format: uuid
             * @description ID of the user that created the delivery note
             */
            created_by_entity_user_id?: string;
            /**
             * Format: date
             * @description Date of delivery
             */
            delivery_date?: string;
            /** @description Delivery number */
            delivery_number?: string;
            /** @description Whether to display a signature placeholder in the generated PDF */
            display_signature_placeholder: boolean;
            /** @description Document ID of the delivery note */
            document_id: string;
            /** @description Entity that created the delivery note */
            entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
            /** @description Address of the entity that created the delivery note */
            entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
            /**
             * Format: uuid
             * @description ID of the entity that created the delivery note
             */
            entity_id: string;
            /** @description The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated. */
            file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The delivery note's PDF URL in the customer-facing language. */
            file_url?: string;
            /** @description List of line items in the delivery note */
            line_items: components["schemas"]["DeliveryNoteLineItemResource"][];
            /** @description Additional information regarding the delivery note */
            memo?: string;
            /** @description The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated. */
            original_file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The delivery note's PDF URL in the entity's language. */
            original_file_url?: string;
            /** @description Status of the delivery note */
            status: components["schemas"]["DeliveryNoteStatusEnum"];
        };
        DeliveryNoteResourceList: {
            /** @description List of delivery notes */
            data: components["schemas"]["DeliveryNoteResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        DeliveryNoteStatusEnum: "created" | "canceled" | "delivered";
        /** @description Delivery Note update request schema */
        DeliveryNoteUpdateRequest: {
            /**
             * Format: uuid
             * @description ID of the counterpart address selected for the delivery note
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart
             */
            counterpart_id?: string;
            /**
             * Format: date
             * @description Date of delivery
             */
            delivery_date?: string;
            /** @description Delivery number */
            delivery_number?: string;
            /** @description Whether to display a signature placeholder in the generated PDF */
            display_signature_placeholder?: boolean;
            /** @description List of line items in the delivery note */
            line_items?: components["schemas"]["DeliveryNoteCreateLineItem"][];
            /** @description Additional information regarding the delivery note */
            memo?: string;
        };
        DictsResponse: {
            name: string;
        };
        Discount: {
            /** @description The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units */
            amount: number;
            /** @description The field specifies whether to use product currency or %. */
            type: components["schemas"]["DiscountType"];
        };
        Discount2: {
            /** @description The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units */
            amount: number;
            /** @description The field specifies whether to use product currency or %. */
            type: components["schemas"]["DiscountType"];
        };
        DiscountResponse: {
            /** @description The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units */
            amount: number;
            /** @description The field specifies whether to use product currency or %. */
            type: components["schemas"]["DiscountType"];
            /** @description The monetary amount of the discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). If the discount `type` is `amount`, this value is the same as the `amount` value. If `type` is `percentage`, the value is the calculated discount amount. */
            value?: number;
        };
        DiscountResponse2: {
            /** @description The actual discount of the product in [minor units](https://docs.monite.com/references/currencies#minor-units) if type field equals amount, else in percent minor units */
            amount: number;
            /** @description The field specifies whether to use product currency or %. */
            type: components["schemas"]["DiscountType"];
            /** @description The monetary amount of the discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). If the discount `type` is `amount`, this value is the same as the `amount` value. If `type` is `percentage`, the value is the calculated discount amount. */
            value?: number;
        };
        /** @enum {string} */
        DiscountType: "amount" | "percentage";
        DocumentExportResponseSchema: {
            /** Format: uuid */
            id: string;
            count: number;
            /** Format: uuid */
            created_by_entity_user_id?: string;
            /** Format: date-time */
            end_datetime?: string;
            /** Format: uuid */
            entity_id: string;
            format: string;
            language: string;
            /** Format: uri */
            source_url?: string;
            /** Format: date-time */
            start_datetime?: string;
            status: string;
        };
        /** @enum {string} */
        DocumentIDSeparators: "/" | "-" | "|" | "." | "";
        DocumentIDsSettings: {
            /**
             * @description Prefixes for each document_type.
             * @default {
             *       "credit_note": "CN",
             *       "delivery_note": "DN",
             *       "invoice": "INV",
             *       "purchase_order": "PO",
             *       "quote": "Q"
             *     }
             */
            document_type_prefix: components["schemas"]["DocumentTypePrefix"];
            /**
             * @description Optionally add 4-digit of the current year.
             * @default false
             */
            include_date: boolean;
            /**
             * @description Minimal size of number in document ID Number will be left padded with zeros if less.
             * @default 5
             */
            min_digits: number;
            /** @description Optional prefix. Does not substitute document_type prefix. */
            prefix?: string | null;
            /**
             * @description Which character should separate each part of the document_id.
             * @default -
             */
            separator: components["schemas"]["DocumentIDSeparators"];
        };
        DocumentIDsSettingsNextNumber: {
            credit_note?: number | null;
            delivery_note?: number | null;
            invoice?: number | null;
            purchase_order?: number | null;
            quote?: number | null;
        };
        DocumentIDsSettingsRequest: {
            /**
             * @description Prefixes for each document_type.
             * @default {
             *       "credit_note": "CN",
             *       "delivery_note": "DN",
             *       "invoice": "INV",
             *       "purchase_order": "PO",
             *       "quote": "Q"
             *     }
             */
            document_type_prefix: components["schemas"]["DocumentTypePrefix"];
            /**
             * @description Optionally add 4-digit of the current year.
             * @default false
             */
            include_date: boolean;
            /**
             * @description Minimal size of number in document ID Number will be left padded with zeros if less.
             * @default 5
             */
            min_digits: number;
            /** @description Write-only field. Changes which number will be issued next. Can't be less than the last issued document number. */
            next_number?: components["schemas"]["DocumentIDsSettingsNextNumber"] | null;
            /** @description Optional prefix. Does not substitute document_type prefix. */
            prefix?: string | null;
            /**
             * @description Which character should separate each part of the document_id.
             * @default -
             */
            separator: components["schemas"]["DocumentIDSeparators"];
        };
        /** @enum {string} */
        DocumentObjectTypeRequestEnum: "receivables_quote" | "receivables_invoice" | "receivables_paid_invoice" | "receivables_credit_note" | "receivables_discount_reminder" | "receivables_final_reminder" | "payables_purchase_order" | "payables_notify_approver" | "payables_notify_payer";
        /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
        DocumentRenderingSettings: {
            /** @description Credit note-specific rendering settings for PDF documents. */
            credit_note?: components["schemas"]["CreditNoteRenderingSettings"];
            /**
             * @description If set to `true`, the entity's bank account details will be displayed on the PDF documents. Defaults to `true`.
             * @default true
             */
            display_entity_bank_account: boolean;
            /**
             * @description If set to `true`, the line items table will be displayed on the quote PDF. Defaults to `true`.
             * @default true
             */
            display_line_items: boolean;
            /** @description Invoice-specific rendering settings for PDF documents. */
            invoice?: components["schemas"]["InvoiceRenderingSettings"];
            /** @description Settings for rendering line items in PDF documents.  */
            line_items?: components["schemas"]["LineItemsRenderingSettings"];
            /** @description Quote-specific rendering settings for PDF documents. */
            quote?: components["schemas"]["QuoteRenderingSettings"];
        };
        /** @description Rendering settings that control how different parts of the PDF documents are displayed.
         *     Includes common settings for all document types such as quotes, invoices, and credit notes and document
         *     type-specific settings that are defined in their respective objects. */
        "DocumentRenderingSettings-Input": {
            /** @description Credit note-specific rendering settings for PDF documents. */
            credit_note?: components["schemas"]["CreditNoteRenderingSettings"];
            /**
             * @description If set to `true`, the entity's bank account details will be displayed on the PDF documents. Defaults to `true`.
             * @default true
             */
            display_entity_bank_account: boolean;
            /**
             * @description If set to `true`, the line items table will be displayed on the quote PDF. Defaults to `true`.
             * @default true
             */
            display_line_items: boolean;
            /** @description Invoice-specific rendering settings for PDF documents. */
            invoice?: components["schemas"]["InvoiceRenderingSettings"];
            /** @description Settings for rendering line items in PDF documents.  */
            line_items?: components["schemas"]["LineItemsRenderingSettings"];
            /** @description Quote-specific rendering settings for PDF documents. */
            quote?: components["schemas"]["QuoteRenderingSettings"];
        };
        /** @description Rendering settings that control how different parts of the PDF documents are displayed.
         *     Includes common settings for all document types such as quotes, invoices, and credit notes and document
         *     type-specific settings that are defined in their respective objects. */
        "DocumentRenderingSettings-Output": {
            /** @description Credit note-specific rendering settings for PDF documents. */
            credit_note?: components["schemas"]["CreditNoteRenderingSettings"];
            /**
             * @description If set to `true`, the entity's bank account details will be displayed on the PDF documents. Defaults to `true`.
             * @default true
             */
            display_entity_bank_account: boolean;
            /**
             * @description If set to `true`, the line items table will be displayed on the quote PDF. Defaults to `true`.
             * @default true
             */
            display_line_items: boolean;
            /** @description Invoice-specific rendering settings for PDF documents. */
            invoice?: components["schemas"]["InvoiceRenderingSettings"];
            /** @description Settings for rendering line items in PDF documents.  */
            line_items?: components["schemas"]["LineItemsRenderingSettings"];
            /** @description Quote-specific rendering settings for PDF documents. */
            quote?: components["schemas"]["QuoteRenderingSettings"];
        };
        /** @enum {string} */
        DocumentType: "receivable" | "payable";
        /** @enum {string} */
        DocumentTypeEnum: "receivable" | "delivery_note" | "purchase_order" | "payable";
        DocumentTypePrefix: {
            /** @default CN */
            credit_note: string;
            /** @default DN */
            delivery_note: string;
            /** @default INV */
            invoice: string;
            /** @default PO */
            purchase_order: string;
            /** @default Q */
            quote: string;
        };
        DomainListResponse: {
            data: components["schemas"]["DomainResponse"][];
        };
        DomainRequest: {
            /**
             * Format: hostname
             * @description The domain name, such as `mail.mycompany.com`. Can contain only alphanumeric characters (A..Z a..z 0..9), dots (.), and hyphens (-). Each segment of the domain name must start and end with either a letter or a digit.
             */
            domain: string;
        };
        DomainResponse: {
            /**
             * Format: uuid
             * @description Entry UUID
             */
            id: string;
            /** @description A dedicated IP address assigned to this mailbox and used to send outgoing email. */
            dedicated_ip?: string;
            dns_records: components["schemas"]["DNSRecords"] | Record<string, never>;
            /**
             * Format: hostname
             * @description The domain name.
             */
            domain: string;
            /**
             * Format: date-time
             * @description The time the domain was updated for the last time
             */
            last_updated_at?: string;
            status: string;
        };
        EInvoicingRetrieveListData: {
            /** @description List of connections for the current page */
            data: components["schemas"]["EinvoicingConnectionResponse"][];
        };
        /** @enum {string} */
        EinvoiceSchemaTypeEnum: "DE:VAT" | "NL:KVK" | "NL:VAT" | "BE:VAT" | "BE:EN";
        EinvoicingAddress: {
            /** @description Street address line 1 */
            address_line1: string;
            /** @description Street address line 2 */
            address_line2?: string;
            /** @description City name */
            city: string;
            /** @description Country name */
            country: components["schemas"]["AllowedEinvoicingCountryCodes"];
            /** @description Postal/ZIP code */
            postal_code: string;
            /** @description State/Province/County */
            state?: string;
        };
        EinvoicingConnectionCreateRequest: {
            /** @description Integration Address */
            address: components["schemas"]["EinvoicingAddress"];
            /**
             * Format: uuid
             * @description Entity VAT ID identifier for the integration
             */
            entity_vat_id_id?: string;
            /**
             * @description Set to `true` if the entity needs to receive e-invoices.
             * @default true
             */
            is_receiver: boolean;
            /**
             * @description Set to `true` if the entity needs to send e-invoices. Either `is_sender` or `is_receiver` or both must be `true`.
             * @default true
             */
            is_sender: boolean;
        };
        EinvoicingConnectionResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Date of Integration
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update of Integration
             */
            updated_at: string;
            /** @description Integration Address */
            address: components["schemas"]["EinvoicingAddress"];
            /** @description List of credentials */
            credentials: components["schemas"]["EinvoicingNetworkCredentialsResponse"][];
            /**
             * Format: uuid
             * @description ID of the entity
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            entity_id: string;
            /**
             * @description Set to `true` if the entity needs to receive e-invoices.
             * @default true
             */
            is_receiver: boolean;
            /**
             * @description Set to `true` if the entity needs to send e-invoices. Either `is_sender` or `is_receiver` or both must be `true`.
             * @default true
             */
            is_sender: boolean;
            /** @description Legal name of the Entity */
            legal_name: string;
            /**
             * @description ID assigned by integration partner
             * @example 12345
             */
            provider_id?: string;
            /**
             * @description Current status of the integration
             * @example active
             */
            status: string;
        };
        EinvoicingConnectionUpdateRequest: {
            /** @description Integration Address */
            address?: components["schemas"]["UpdateEinvoicingAddress"];
            /** @description Set to `true` if the entity needs to receive e-invoices. */
            is_receiver?: boolean;
            /** @description Set to `true` if the entity needs to send e-invoices. Either `is_sender` or `is_receiver` or both must be `true`. */
            is_sender?: boolean;
        };
        EinvoicingCredentials: {
            /** Format: uuid */
            id: string;
            network_identifier: string;
            network_schema: string;
        };
        EinvoicingNetworkCredentialsCreateRequest: {
            /**
             * @description Network participant identifier
             * @example 12345678
             */
            network_credentials_identifier: string;
            /**
             * @description Network scheme identifier
             * @example NL:KVK
             */
            network_credentials_schema: components["schemas"]["EinvoiceSchemaTypeEnum"];
        };
        EinvoicingNetworkCredentialsResponse: {
            /**
             * Format: uuid
             * @description ID of the credentials
             */
            id: string;
            /**
             * Format: date-time
             * @description Date of credential
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update of credential
             */
            updated_at: string;
            /**
             * Format: uuid
             * @description ID of the Einvoicing connection
             */
            einvoicing_connection_id: string;
            /**
             * @description Network participant identifier
             * @example 12345678
             */
            network_credentials_identifier: string;
            /**
             * @description Network scheme identifier
             * @example NL:KVK
             */
            network_credentials_schema: components["schemas"]["EinvoiceSchemaTypeEnum"];
        };
        EmbeddedAuthPayload: components["schemas"]["EmbeddedManuallySpecifiedPayload"] | components["schemas"]["EmbeddedAuthorizedBankAccountPayload"] | components["schemas"]["EmbeddedBankAccountPayload"];
        EmbeddedAuthorizationResponse: {
            application_user_id: string;
            consent_id: string;
            consent_token?: string;
            sca_methods?: components["schemas"]["SCAMethod"][];
            selected_sca_method?: components["schemas"]["SCAMethod"];
            state: components["schemas"]["ConsentState"];
        };
        EmbeddedAuthorizedBankAccountPayload: {
            /** @description User's password in the bank system. */
            auth_password: string;
            /** @description User login in the bank system. */
            auth_user: string;
            /** Format: uuid */
            authorized_bank_account_id: string;
            /** @default false */
            iframe: boolean;
            /** @description PSU identification is required for some banks (e.g. some Germany institutions). */
            psu_identification?: components["schemas"]["PsuIdentification"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "authorized_bank_account";
        };
        EmbeddedBankAccountPayload: {
            /** @description User's password in the bank system. */
            auth_password: string;
            /** @description User login in the bank system. */
            auth_user: string;
            /** Format: uuid */
            bank_account_id: string;
            bank_id: string;
            /** @default false */
            iframe: boolean;
            /** @description PSU identification is required for some banks (e.g. some Germany institutions). */
            psu_identification?: components["schemas"]["PsuIdentification"];
            /** @default false */
            save_to_authorized: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bank_account";
        };
        EmbeddedManuallySpecifiedPayload: {
            /** @description User's password in the bank system. */
            auth_password: string;
            /** @description User login in the bank system. */
            auth_user: string;
            bank_id: string;
            /** @default false */
            iframe: boolean;
            payer_account_country: components["schemas"]["YapilyCountriesCoverageCodes"];
            payer_account_holder_name?: string;
            payer_account_identification: components["schemas"]["AccountIdentification"];
            /** @description PSU identification is required for some banks (e.g. some Germany institutions). */
            psu_identification?: components["schemas"]["PsuIdentification"];
            /** @default false */
            save_to_authorized: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "manual_input";
        };
        EnabledPaymentMethods: {
            /**
             * @deprecated
             * @description Deprecated. Use payment_methods_receive instead.
             */
            payment_methods?: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
            /** @description Enable payment methods to receive money. */
            payment_methods_receive?: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
            /** @description Enable payment methods to send money. */
            payment_methods_send?: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
        };
        /** @description A schema represents address info of the entity */
        EntityAddressResponseSchema: {
            /** @description A city (a full name) where the entity is registered */
            city: string;
            /** @description A country name (as ISO code) where the entity is registered  */
            country: components["schemas"]["AllowedCountries"];
            /** @description A street where the entity is registered */
            line1: string;
            /** @description An alternative street used by the entity */
            line2?: string | null;
            /** @description A postal code of the address where the entity is registered */
            postal_code: string;
            /** @description A state in a country where the entity is registered */
            state?: string | null;
        };
        /** @description A schema represents address info of the entity */
        EntityAddressSchema: {
            /** @description A city (a full name) where the entity is registered */
            city: string;
            /** @description A country name (as ISO code) where the entity is registered  */
            country: components["schemas"]["AllowedCountries"];
            /** @description A street where the entity is registered */
            line1: string;
            /** @description An alternative street used by the entity */
            line2?: string | null;
            /** @description A postal code of the address where the entity is registered */
            postal_code: string;
            /** @description State, county, province, prefecture, region, or similar component of the entity's address. For US entities, `state` is required and must be a two-letter [USPS state abbreviation](https://pe.usps.com/text/pub28/28apb.htm), for example, NY or CA. */
            state?: string | null;
        };
        /** @description A paginated list of an entity's bank accounts. */
        EntityBankAccountPaginationResponse: {
            /** @description A list of an entity's bank accounts. */
            data: components["schemas"]["EntityBankAccountResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @description Represents a bank account owned by an entity. */
        EntityBankAccountResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the bank account.
             */
            id: string;
            /**
             * @description The name of the person or business that owns this bank account. Required in the following cases:
             *     * the account currency is GBP or USD,
             *     * the account currency is EUR and the entity wishes to receive SEPA Credit transfers to this account.
             * @example Cayla Lloyd
             */
            account_holder_name?: string;
            /**
             * @description The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.
             * @example 12345678
             */
            account_number?: string;
            /**
             * @description The bank name.
             * @example Deutsche Bank
             */
            bank_name?: string;
            /**
             * @description The SWIFT/BIC code of the bank. Can be either 8 or 11 characters long. Monite verifies the BIC length, country code, and whether the structure conforms to ISO 9362.
             *
             *     If `bic` is specified, `iban` must also be specified.
             * @example DEUTDEFFXXX
             */
            bic?: string;
            /**
             * @description The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @description The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /**
             * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
             * @example Primary account
             */
            display_name?: string;
            /**
             * @description The IBAN of the bank account, up to 34 characters. Required if the account currency is EUR. Monite verifies the IBAN length, checksum digits, and country-specific format according to ISO 13616.
             * @example DE74500700100100000900
             */
            iban?: string;
            /**
             * @description Indicates whether this bank account is the default one for its currency.
             * @default false
             */
            is_default_for_currency: boolean;
            /** @description The bank's routing transit number (RTN) or branch code. Required if the account currency is USD. US routing numbers consist of 9 digits. */
            routing_number?: string;
            /**
             * @description The bank's sort code. Required if the account currency is GBP.
             * @example 123456
             */
            sort_code?: string;
            /**
             * Format: uuid
             * @description ID of the entity user who added this bank account, or `null` if it was added using a partner access token.
             */
            was_created_by_user_id?: string;
        };
        /** @enum {string} */
        EntityBusinessStructure: "incorporated_partnership" | "unincorporated_partnership" | "public_corporation" | "private_corporation" | "sole_proprietorship" | "single_member_llc" | "multi_member_llc" | "private_partnership" | "unincorporated_association" | "public_partnership";
        /** @enum {string} */
        EntityCursorFields: "created_at" | "updated_at";
        EntityFields: {
            /**
             * @description Object describing the required field `tax_id` of an entity
             * @default {
             *       "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.",
             *       "required": false
             *     }
             */
            tax_id: components["schemas"]["FieldSchema"];
            /**
             * @description Object describing the required field `vat_id` of an entity
             * @default {
             *       "description": "The entity's VAT (Value Added Tax) identification number. This field is required for entities that are VAT-registered.",
             *       "required": false
             *     }
             */
            vat_id: components["schemas"]["FieldSchema"];
        };
        EntityIndividualResponse: {
            /**
             * Format: uuid
             * @description UUID entity ID
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            updated_at: string;
            /** @description An address description of the entity */
            address: components["schemas"]["EntityAddressResponseSchema"];
            /** @description An official email address of the entity */
            email?: string | null;
            /** @description A set of metadata describing an individual */
            individual: components["schemas"]["IndividualResponseSchema"];
            /** @description A logo image of the entity */
            logo?: components["schemas"]["FileSchema2"] | null;
            /** @description A phone number of the entity */
            phone?: string | null;
            /** @description (Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided. */
            registration_authority?: string | null;
            /** @description (Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available. */
            registration_number?: string | null;
            /** @description record status, 'active' by default */
            status: components["schemas"]["EntityStatusEnum"];
            /** @description The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered. */
            tax_id?: string | null;
            /**
             * @description A type for an individual (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "individual";
            /** @description A website of the entity */
            website?: string | null;
        };
        /** @description Email settings for entity */
        EntityMailSettings: {
            /** @description Reply-to email addresses for outgoing entity emails. When set, recipients can reply directly to these addresses instead of the sender's email address. Used for invoices, reminders, and other automated emails. */
            reply_to?: string[] | null;
        };
        EntityOnboardingDataRequest: {
            /** @description Business information about the entity. */
            business_profile?: components["schemas"]["BusinessProfile-Input"] | null;
            /** @description Used to attest that the beneficial owner information provided is both current and correct. */
            ownership_declaration?: components["schemas"]["OwnershipDeclaration-Input"] | null;
            /** @description Details on the entity's acceptance of the service agreement. */
            tos_acceptance?: components["schemas"]["TermsOfServiceAcceptance-Input"] | null;
            /** @description Details on the entity's acceptance of the Stripe Treasury service agreement. */
            treasury_tos_acceptance?: components["schemas"]["TermsOfServiceAcceptance-Input"] | null;
        };
        EntityOnboardingDataResponse: {
            /** @description Business information about the entity. */
            business_profile?: components["schemas"]["BusinessProfile-Output"] | null;
            /** @description Used to attest that the beneficial owner information provided is both current and correct. */
            ownership_declaration?: components["schemas"]["OwnershipDeclaration-Output"] | null;
            /** @description Details on the entity's acceptance of the service agreement. */
            tos_acceptance?: components["schemas"]["TermsOfServiceAcceptance-Output"] | null;
            /** @description Details on the entity's acceptance of the Stripe Treasury service agreement. */
            treasury_tos_acceptance?: components["schemas"]["TermsOfServiceAcceptance-Output"] | null;
        };
        EntityOnboardingDocumentsPayload: {
            /** Format: uuid */
            additional_verification_document_back?: string;
            /** Format: uuid */
            additional_verification_document_front?: string;
            bank_account_ownership_verification?: string[];
            company_license?: string[];
            company_memorandum_of_association?: string[];
            company_ministerial_decree?: string[];
            company_registration_verification?: string[];
            company_tax_id_verification?: string[];
            proof_of_registration?: string[];
            /** Format: uuid */
            verification_document_back?: string;
            /** Format: uuid */
            verification_document_front?: string;
        };
        EntityOrganizationResponse: {
            /**
             * Format: uuid
             * @description UUID entity ID
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            updated_at: string;
            /** @description An address description of the entity */
            address: components["schemas"]["EntityAddressResponseSchema"];
            /** @description An official email address of the entity */
            email?: string | null;
            /** @description A logo image of the entity */
            logo?: components["schemas"]["FileSchema2"] | null;
            /** @description A set of metadata describing an organization */
            organization: components["schemas"]["OrganizationResponseSchema"];
            /** @description A phone number of the entity */
            phone?: string | null;
            /** @description (Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided. */
            registration_authority?: string | null;
            /** @description (Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available. */
            registration_number?: string | null;
            /** @description record status, 'active' by default */
            status: components["schemas"]["EntityStatusEnum"];
            /** @description The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered. */
            tax_id?: string | null;
            /**
             * @description A type for an organization (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "organization";
            /** @description A website of the entity */
            website?: string | null;
        };
        EntityPaginationResponse: {
            /** @description A set of entities of different types returned per page */
            data: components["schemas"]["EntityResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string | null;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string | null;
        };
        /** @description A schema for a response after creation of an entity of different types */
        EntityResponse: components["schemas"]["EntityOrganizationResponse"] | components["schemas"]["EntityIndividualResponse"];
        /** @enum {string} */
        EntityStatusEnum: "active" | "inactive" | "deleted";
        /** @enum {string} */
        EntityTypeEnum: "individual" | "organization";
        EntityUpdateVatID: {
            country?: components["schemas"]["AllowedCountries"] | null;
            type?: components["schemas"]["VatIDTypeEnum"] | null;
            value?: string | null;
        };
        /** @enum {string} */
        EntityUserCursorFields: "updated_at";
        EntityUserPaginationResponse: {
            /** @description array of records */
            data: components["schemas"]["EntityUserResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string | null;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string | null;
        };
        EntityUserResponse: {
            /**
             * Format: uuid
             * @description UUID entity user ID
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            updated_at: string;
            /** @description An entity user business email */
            email?: string | null;
            /** @description First name */
            first_name?: string;
            /** @description Last name */
            last_name?: string | null;
            /** @description Login */
            login: string;
            /** @description An entity user phone number in the international format */
            phone?: string | null;
            /**
             * Format: uuid
             * @description UUID role ID
             */
            role_id: string;
            /** @description record status, 'active' by default */
            status: components["schemas"]["StatusEnum"];
            userpic_file_id?: string | null;
        };
        EntityVatID: {
            country: components["schemas"]["AllowedCountries"];
            /** @default unknown */
            type: components["schemas"]["VatIDTypeEnum"];
            value: string;
        };
        EntityVatIDResourceList: {
            data: components["schemas"]["EntityVatIDResponse"][];
        };
        EntityVatIDResponse: {
            /** Format: uuid */
            id: string;
            country: components["schemas"]["AllowedCountries"];
            /** Format: uuid */
            entity_id: string;
            /** @default unknown */
            type: components["schemas"]["VatIDTypeEnum"];
            value: string;
        };
        /** @enum {string} */
        EnvironmentEnum: "EU sandbox";
        ErrorSchema: {
            message: string;
        };
        ErrorSchema2: {
            message: string;
        };
        ErrorSchema3: {
            message: string;
        };
        ErrorSchemaResponse: {
            error: components["schemas"]["ErrorSchema"];
        };
        ErrorSchemaResponse2: {
            error: components["schemas"]["ErrorSchema2"];
        };
        ErrorSchemaResponse3: {
            error: components["schemas"]["ErrorSchema3"];
        };
        EstimatedMonthlyRevenue: {
            /** @description The amount of the monthly revenue, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250. */
            amount?: number | null;
            /** @description [Currency code](https://docs.monite.com/references/currencies) of the revenue. */
            currency?: components["schemas"]["CurrencyEnum"] | null;
        };
        /** @enum {string} */
        EventCursorFields: "created_at" | "updated_at";
        EventPaginationResource: {
            /** @description A set of events returned per page */
            data: components["schemas"]["EventResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string | null;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string | null;
        };
        EventResource: {
            /** Format: uuid */
            id: string;
            /** @description The timestamp that was generated at the time of making the database transaction that has initially caused the event */
            created_at?: string | null;
            action: string;
            api_version: string | null;
            description: string;
            /** Format: uuid */
            entity_id: string;
            object?: unknown | null;
            object_type: components["schemas"]["WebhookObjectType"];
        };
        EventResourceForWebhookClient: {
            /** Format: uuid */
            id: string;
            /** @description The timestamp that was generated at the time of making the database transaction that has initially caused the event */
            created_at?: string | null;
            action: string;
            api_version: string | null;
            description: string;
            /** Format: uuid */
            entity_id: string;
            object?: unknown | null;
            object_type: components["schemas"]["WebhookObjectType"];
            /** Format: uuid */
            webhook_subscription_id: string;
        };
        ExchangeRate: {
            base: components["schemas"]["CurrencyEnum"];
            rate: number;
            to: components["schemas"]["CurrencyEnum"];
        };
        /** @enum {string} */
        ExportFormat: "csv" | "pdf" | "csv_xero";
        ExportObjectSchema: components["schemas"]["ExportPayableSchema"] | components["schemas"]["ExportReceivableSchema"];
        ExportPayableSchema: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "payable";
            statuses: components["schemas"]["PayableStateEnum"][];
        };
        ExportPayloadSchema: {
            /** Format: date */
            date_from: string;
            /** Format: date */
            date_to: string;
            format: components["schemas"]["ExportFormat"];
            objects: components["schemas"]["ExportObjectSchema"][];
        };
        ExportReceivableSchema: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "receivable";
            statuses: components["schemas"]["ReceivablesStatusEnum"][];
        };
        /** @enum {string} */
        ExportSettingCursorFields: "id" | "created_at";
        ExtraDataCreateRequest: {
            field_name: components["schemas"]["SupportedFieldNames"];
            field_value: string;
            /** Format: uuid */
            object_id: string;
            /** @enum {string} */
            object_type: "counterpart";
        };
        ExtraDataResource: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uuid */
            created_by?: string;
            field_name: components["schemas"]["SupportedFieldNames"];
            field_value: string;
            /** Format: uuid */
            object_id: string;
            /** @enum {string} */
            object_type: "counterpart";
        };
        ExtraDataResourceList: {
            data: components["schemas"]["ExtraDataResource"][];
            next_pagination_token?: string;
            prev_pagination_token?: string;
        };
        ExtraDataUpdateRequest: {
            field_name?: components["schemas"]["SupportedFieldNames"];
            field_value?: string;
            /** Format: uuid */
            object_id?: string;
            /** @enum {string} */
            object_type?: "counterpart";
        };
        FeaturesResponse: {
            /** Format: uuid */
            id: string;
            name: string;
        };
        FieldSchema: {
            /** @description Description of the field */
            description: string;
            /** @description Whether the field is required */
            required: boolean;
        };
        FileAttachedEventData: {
            file_name: string;
            file_size: number;
            url: string;
        };
        FileResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            file_type: string;
            md5: string;
            mimetype: string;
            name: string;
            region: string;
            s3_bucket: string;
            s3_file_path: string;
            size: number;
            url: string;
        };
        /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
        FileSchema: {
            /**
             * Format: uuid
             * @description A unique ID of this file.
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC date and time when this file was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
             */
            created_at: string;
            /**
             * @description The type of the business object associated with this file.
             * @example payables
             */
            file_type: string;
            /**
             * @description The MD5 hash of the file.
             * @example 31d1a2dd1ad3dfc39be849d70a68dac0
             */
            md5: string;
            /**
             * @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
             * @example application/pdf
             */
            mimetype: string;
            /**
             * @description The original file name (if available).
             * @example invoice.pdf
             */
            name: string;
            /**
             * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
             * @default []
             */
            pages: components["schemas"]["PageSchema2"][];
            /**
             * @description Preview images generated for this file. There can be multiple images with different sizes.
             * @default []
             */
            previews: components["schemas"]["PreviewSchema2"][];
            /**
             * @description Geographical region of the data center where the file is stored.
             * @example eu-central-1
             */
            region: string;
            /**
             * @description The file size in bytes.
             * @example 24381
             */
            size: number;
            /**
             * @description The URL to download the file.
             * @example https://bucketname.s3.amazonaws.com/12345/67890.pdf
             */
            url: string;
        };
        /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
        FileSchema2: {
            /**
             * Format: uuid
             * @description A unique ID of this file.
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC date and time when this file was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
             */
            created_at: string;
            /** @description The type of the business object associated with this file. */
            file_type: string;
            /** @description The MD5 hash of the file. */
            md5: string;
            /** @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types). */
            mimetype: string;
            /** @description The original file name (if available). */
            name: string;
            /**
             * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
             * @default []
             */
            pages: components["schemas"]["PageSchema"][] | null;
            /**
             * @description Preview images generated for this file. There can be multiple images with different sizes.
             * @default []
             */
            previews: components["schemas"]["PreviewSchema"][] | null;
            /** @description Geographical region of the data center where the file is stored. */
            region: string;
            /** @description The file size in bytes. */
            size: number;
            /** @description The URL to download the file. */
            url: string;
        };
        /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
        FileSchema3: {
            /**
             * Format: uuid
             * @description A unique ID of this file.
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
             */
            created_at: string;
            /** @description The type of the business object associated with this file. */
            file_type: string;
            /** @description The MD5 hash of the file. */
            md5: string;
            /** @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types). */
            mimetype: string;
            /** @description The original file name (if available). */
            name: string;
            /**
             * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
             * @default []
             */
            pages: components["schemas"]["PageSchema"][] | null;
            /**
             * @description Preview images generated for this file. There can be multiple images with different sizes.
             * @default []
             */
            previews: components["schemas"]["PreviewSchema"][] | null;
            /** @description Geographical region of the data center where the file is stored. */
            region: string;
            /** @description The file size in bytes. */
            size: number;
            /** @description The URL to download the file. */
            url: string;
        };
        /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
        FileSchema4: {
            /**
             * Format: uuid
             * @description A unique ID of this file.
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
             */
            created_at: string;
            /**
             * @description The type of the business object associated with this file.
             * @example payables
             */
            file_type: string;
            /**
             * @description The MD5 hash of the file.
             * @example 31d1a2dd1ad3dfc39be849d70a68dac0
             */
            md5: string;
            /**
             * @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types).
             * @example application/pdf
             */
            mimetype: string;
            /**
             * @description The original file name (if available).
             * @example invoice.pdf
             */
            name: string;
            /**
             * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
             * @default []
             */
            pages: components["schemas"]["PageSchema3"][];
            /**
             * @description Preview images generated for this file. There can be multiple images with different sizes.
             * @default []
             */
            previews: components["schemas"]["PreviewSchema3"][];
            /**
             * @description Geographical region of the data center where the file is stored.
             * @example eu-central-1
             */
            region: string;
            /**
             * @description The file size in bytes.
             * @example 24381
             */
            size: number;
            /**
             * @description The URL to download the file.
             * @example https://bucketname.s3.amazonaws.com/12345/67890.pdf
             */
            url: string;
        };
        FilesResponse: {
            data: components["schemas"]["FileResponse"][];
        };
        FinancingInvoice: {
            /** @description Amount after fees the business will receive in minor units. */
            advance_amount?: number;
            /** @description Advance rate percentage. 10000 means 100% */
            advance_rate_percentage?: number;
            /** @description Currency code. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description Description of the invoice. */
            description?: string;
            /** @description Monite document ID. */
            document_id: string;
            /**
             * Format: date
             * @description Monite invoice due date.
             */
            due_date: string;
            /** @description Fee amount in minor units. */
            fee_amount?: number;
            /** @description Fee percentage. 300 means 3% */
            fee_percentage?: number;
            /**
             * Format: uuid
             * @description Monite invoice ID.
             */
            invoice_id: string;
            /**
             * Format: date
             * @description Monite invoice issue date.
             */
            issue_date: string;
            /** @description Payer business name. Only applicable for BUSINESS payer type. */
            payer_business_name?: string;
            /** @description Payer first name. Only applicable for INDIVIDUAL payer type. */
            payer_first_name?: string;
            /** @description Payer last name. Only applicable for INDIVIDUAL payer type. */
            payer_last_name?: string;
            /** @description Payer type. BUSINESS or INDIVIDUAL */
            payer_type: string;
            /** @description Principal amount of the loan in minor units. */
            principal_amount?: number;
            /** @description Amount the business will repay in minor units. */
            repayment_amount?: number;
            /**
             * @description Repayment schedule of the invoice.
             * @example {
             *       "repayment_date": "2025-03-01",
             *       "repayment_amount": 100000,
             *       "repayment_fee_amount": 3000,
             *       "repayment_principal_amount": 97000
             *     }
             */
            repayment_schedule?: components["schemas"]["RepaymentSchedule"];
            /** @description Amount the business requests to be financed in minor units. */
            requested_amount?: number;
            /** @description Status of the invoice. */
            status: components["schemas"]["WCInvoiceStatus"];
            /** @description Total amount of the invoice in minor units. */
            total_amount: number;
            /** @description The type of the invoice i.e. receivable or payable. */
            type: components["schemas"]["FinancingInvoiceType"];
        };
        /** @enum {string} */
        FinancingInvoiceCursorFields: "id" | "created_at";
        FinancingInvoiceListResponse: {
            /** @description A list of invoices requested for financing. */
            data: components["schemas"]["FinancingInvoice"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        FinancingInvoiceType: "payable" | "receivable";
        FinancingOffer: {
            /**
             * @description The available credit limit in minor units.
             * @example 500000
             */
            available_amount?: number;
            /**
             * @description The currency code.
             * @example USD
             */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description A list of pricing plans for the offer. */
            pricing_plans: components["schemas"]["PricingPlan"][];
            /**
             * @description The status of the financing offer.
             * @example CURRENT
             */
            status: components["schemas"]["WCOfferStatus"];
            /**
             * @description The total credit limit in minor units.
             * @example 1000000
             */
            total_amount: number;
        };
        FinancingOffersResponse: {
            /**
             * @description The business's onboarding status.
             * @example ONBOARDED
             */
            business_status: components["schemas"]["WCBusinessStatus"];
            /** @description A list of financing offers extended to the business. */
            offers: components["schemas"]["FinancingOffer"][];
        };
        FinancingPushInvoicesRequest: {
            /** @description A list of invoices to request financing for. */
            invoices: components["schemas"]["FinancingPushInvoicesRequestInvoice"][];
        };
        FinancingPushInvoicesRequestInvoice: {
            /**
             * Format: uuid
             * @description The invoice ID.
             */
            id: string;
            /** @description The invoice type. */
            type: components["schemas"]["FinancingInvoiceType"];
        };
        FinancingPushInvoicesResponse: {
            /** @description A connect token for Kanmon SDK. */
            connect_token: string;
            /** @description An embedded session token for Kanmon SDK. */
            session_token: string;
        };
        FinancingTokenResponse: {
            /** @description A connect token for Kanmon SDK. */
            connect_token: string;
        };
        GetAllPaymentReminders: {
            data: components["schemas"]["PaymentReminderResponse"][];
        };
        GetOnboardingRequirementsResponse: {
            data: components["schemas"]["SingleOnboardingRequirementsResponse"][];
        };
        GetSecretsResponse: {
            secrets: components["schemas"]["GetSecretsResponseSecret"][];
        };
        GetSecretsResponseSecret: {
            id: string;
            /** Format: date-time */
            created_at: string;
            client_id: string;
            client_secret_mask: string;
            last_used_at?: string | null;
            name?: string | null;
            revoke_datetime?: string | null;
            status: components["schemas"]["SecretStatusEnum"];
        };
        /** @enum {string} */
        GrantType: "client_credentials" | "entity_user";
        HTTPValidationError: {
            detail?: components["schemas"]["ValidationError"][];
        };
        /** @description Contains data specific to entities of the `individual` type. */
        IndividualResponseSchema: {
            date_of_birth?: string | null;
            /** @description A first name of an individual */
            first_name: string;
            id_number?: string | null;
            /** @description A last name of an individual */
            last_name: string;
            /** @description The last four digits of the individual's Social Security number */
            ssn_last_4?: string | null;
            /** @description A title of an individual */
            title?: string | null;
        };
        /** @description A schema contains metadata for an individual */
        IndividualSchema: {
            date_of_birth?: string | null;
            /** @description A first name of an individual */
            first_name: string;
            id_number?: string | null;
            /** @description A last name of an individual */
            last_name: string;
            /** @description The last four digits of the individual's Social Security number */
            ssn_last_4?: string | null;
            /** @description A title of an individual */
            title?: string | null;
        };
        InlinePaymentTermsRequestPayload: {
            /** @description The first tier of the payment term. Represents the terms of the first early discount. */
            term_1?: components["schemas"]["InlineTermDiscount"];
            /** @description The second tier of the payment term. Defines the terms of the second early discount. */
            term_2?: components["schemas"]["InlineTermDiscount"];
            /** @description The final tier of the payment term. Defines the invoice due date. */
            term_final: components["schemas"]["InlineTermFinal"];
        };
        InlineTermDiscount: {
            /** @description The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%. */
            discount: number;
            /** Format: date */
            end_date?: string;
            /** @description The amount of days after the invoice issue date. */
            number_of_days?: number;
        };
        InlineTermFinal: {
            /** Format: date */
            end_date?: string;
            /** @description The amount of days after the invoice issue date. */
            number_of_days?: number;
        };
        InternalLineItemProduct: {
            /**
             * Format: uuid
             * @description Unique ID of the product.
             */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the product was created. Timestamps follow the ISO 8601 standard.
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Time at which the product was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at?: string;
            /**
             * Format: uuid
             * @description Unique identifier of the accounting tax rate object.
             */
            accounting_tax_rate_id?: string;
            /** @description Description of the product. */
            description?: string;
            /** Format: uuid */
            entity_id?: string;
            /** Format: uuid */
            entity_user_id?: string;
            /** @description A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog. */
            external_reference?: string;
            /**
             * @description Indicates whether the product is inline
             * @default false
             */
            is_inline: boolean;
            /** Format: uuid */
            ledger_account_id?: string;
            measure_unit?: components["schemas"]["LineItemProductMeasureUnit"];
            /**
             * Format: uuid
             * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
             */
            measure_unit_id?: string;
            /** @description Name of the product. */
            name: string;
            price: components["schemas"]["Price"];
            price_after_vat: components["schemas"]["Price"];
            price_after_vat_precise: components["schemas"]["PriceFloat"];
            price_precise: components["schemas"]["PriceFloat"];
            /** @description The smallest amount allowed for this product. */
            smallest_amount?: number;
            /**
             * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
             * @default product
             */
            type: components["schemas"]["ProductServiceTypeEnum"];
            vat_rate: components["schemas"]["LineItemProductVatRate"];
        };
        InternalOnboardingRequirementsResponse: {
            data?: components["schemas"]["OnboardingData"];
            requirements: components["schemas"]["OnboardingRequirement"][];
        };
        InternalPaymentLinkResponse: {
            /** Format: uuid */
            id: string;
            /** @default true */
            confirm_on_backend: boolean;
            /** Format: uuid */
            entity_id: string;
            /** Format: date-time */
            expires_at: string;
            /** Format: uuid */
            partner_id: string;
            payment_intent: components["schemas"]["PaymentIntentWithSecrets"];
            /** Format: uuid */
            payment_intent_id: string;
            payment_page_url: string;
            /** Format: uuid */
            project_id: string;
            return_url?: string;
            status: string;
        };
        InternalQuoteResponsePayload: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentResponse"][];
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the receivable if applicable.
             */
            based_on?: string;
            /** @description The unique document ID of a previous document related to the receivable if applicable. */
            based_on_document_id?: string;
            /** @description Field with a comment on why the client declined this Quote */
            comment?: string;
            /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
            commercial_condition_description?: string;
            /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
            counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress"];
            /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
            counterpart_business_type?: string;
            /** @description Additional information about counterpart contacts. */
            counterpart_contact?: components["schemas"]["ReceivableCounterpartContact"];
            /** @description The external reference of the counterpart. */
            counterpart_external_reference?: string;
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            counterpart_id: string;
            /** @description A legal name of a counterpart it is an organization or first and last name if it is an individual */
            counterpart_name?: string;
            /** @description Address where goods were shipped / where services were provided. */
            counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress"];
            /** @description The VAT/TAX ID of the counterpart. */
            counterpart_tax_id?: string;
            /** @description The type of the counterpart. */
            counterpart_type: components["schemas"]["CounterpartType"];
            /** @description Address of the counterpart, if we need to only one address */
            counterpart_universal_address: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress"];
            counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
            /** @description The currency used in the receivable. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description Partner level customizable deduction title */
            deduction_title?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["DiscountResponse"];
            /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units). */
            discounted_subtotal?: number;
            /** @description The sequential code systematically assigned to invoices. */
            document_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            /**
             * Format: date
             * @description Optional field representing date until which invoice should be paid
             */
            due_date?: string;
            /** @description E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`. */
            einvoice_file_url?: string;
            entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
            entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
            entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount"];
            /**
             * Format: uuid
             * @description The entity user who created this document.
             */
            entity_user_id?: string;
            entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
            /**
             * Format: date
             * @description The date (in ISO 8601 format) until which the quote is valid.
             */
            expiry_date?: string;
            /**
             * Format: uri
             * @description External link redirecting user from qr code
             */
            external_qr_code_link?: string;
            /** @description The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated. */
            file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the counterpart's default language. */
            file_url?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * Format: date-time
             * @description Optional field for the issue of the entry.
             */
            issue_date?: string;
            line_items: components["schemas"]["InternalResponseItem"][];
            /** @description A note with additional information for a receivable. */
            memo?: string;
            /** @description The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated. */
            original_file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the entity's default language. */
            original_file_url?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /**
             * Format: uri
             * @description Link for custom quote accept page
             */
            quote_accept_page_url?: string;
            /** @description Quote's digital signature */
            signature?: components["schemas"]["SignatureResponse"];
            /** @description Whether acceptance a quote requires a signature. */
            signature_required?: boolean;
            /** @description The status of the Quote inside the receivable workflow. */
            status: components["schemas"]["QuoteStateEnum"];
            /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal?: number;
            /** @description The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal_after_vat?: number;
            /**
             * @description The list of tags for this receivable.
             * @default []
             */
            tags: components["schemas"]["TagReadSchema"][];
            /**
             * @description Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
             * @default 0
             */
            total_amount: number;
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_vat_amount: number;
            /** @description List of total vat amount for each VAT, presented in receivable */
            total_vat_amounts?: components["schemas"]["TotalVatAmountItem"][];
            /** @description Total price of the receivable with tax withheld in minor units */
            total_withholding_tax?: number;
            /** @description Trade name of the entity */
            trade_name?: string;
            /**
             * @description The type of the document uploaded.
             * @enum {string}
             */
            type: "quote";
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /**
             * @description Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.
             * @default exclusive
             */
            vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
            /**
             * @description Defines whether the prices of products in receivable will already include VAT or not.
             * @default exclusive
             */
            vat_mode: components["schemas"]["VatModeEnum"];
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        InternalResponseItem: {
            /** @description The discount for a product. */
            discount?: components["schemas"]["Discount"];
            product: components["schemas"]["InternalLineItemProduct"];
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity: number;
            /** @description Total of line_item after VAT with applied line item discount in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_after_vat: number;
            /** @description Total of line_item after VAT in float */
            total_after_vat_precise: number;
            /** @description Total of line_item before VAT in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_before_vat: number;
            /** @description Total of line_item before VAT in float */
            total_before_vat_precise: number;
        };
        InviteRequest: {
            users: components["schemas"]["UsersInviteRequest"][];
        };
        Invoice: {
            /** Format: date */
            due_date?: string;
            file?: components["schemas"]["InvoiceFile"];
            /** Format: date */
            issue_date?: string;
        };
        InvoiceFile: {
            mimetype: string;
            name: string;
            /** Format: uri */
            url: string;
        };
        InvoiceRenderingSettings: {
            /**
             * @description If set to `true`, the entity's bank account details will be displayed on the invoice PDF.
             * @default true
             */
            display_entity_bank_account: boolean;
        };
        InvoiceResponsePayload: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description How much is left to be paid in [minor units](https://docs.monite.com/references/currencies#minor-units). Equal 0 if the Invoice is fully paid. */
            amount_due: number;
            /** @description How much has been paid [minor units](https://docs.monite.com/references/currencies#minor-units) */
            amount_paid: number;
            /** @description How much is left to be paid in in [minor units](https://docs.monite.com/references/currencies#minor-units), including payment_term discounts. */
            amount_to_pay?: number;
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentResponse2"][];
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the receivable if applicable.
             */
            based_on?: string;
            /** @description The unique document ID of a previous document related to the receivable if applicable. */
            based_on_document_id?: string;
            /** @description Field with a comment for pay/partially/uncollectible info on this Invoice */
            comment?: string;
            /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
            commercial_condition_description?: string;
            /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
            counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
            counterpart_business_type?: string;
            /** @description Additional information about counterpart contacts. */
            counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
            /** @description E-invoicing credentials of the counterpart */
            counterpart_einvoicing_credentials?: components["schemas"]["EinvoicingCredentials"];
            /** @description The external reference of the counterpart. */
            counterpart_external_reference?: string;
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            counterpart_id: string;
            /** @description A legal name of a counterpart it is an organization or first and last name if it is an individual */
            counterpart_name?: string;
            /** @description Address where goods were shipped / where services were provided. */
            counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /** @description The VAT/TAX ID of the counterpart. */
            counterpart_tax_id?: string;
            /** @description The type of the counterpart. */
            counterpart_type: components["schemas"]["CounterpartType"];
            counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
            /** @description The currency used in the receivable. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["DiscountResponse2"];
            /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units). */
            discounted_subtotal?: number;
            /** @description The sequential code systematically assigned to invoices. */
            document_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            /**
             * Format: date
             * @description Optional field representing date until which invoice should be paid
             */
            due_date?: string;
            /** @description Error that was returned by E-invoicing */
            einvoice_error_comment?: string;
            /** @description E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`. */
            einvoice_file_url?: string;
            entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
            entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
            entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount2"];
            /**
             * Format: uuid
             * @description The entity user who created this document.
             */
            entity_user_id?: string;
            entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
            /** @description The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated. */
            file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the counterpart's default language. */
            file_url?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * Format: date
             * @description The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
             *
             *     Some countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.
             *
             *     In countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user.
             */
            fulfillment_date?: string;
            /**
             * @description Is this Invoice will be sent through E-invoice system
             * @default false
             */
            is_einvoice: boolean;
            /**
             * Format: date-time
             * @description Optional field for the issue of the entry.
             */
            issue_date?: string;
            line_items: components["schemas"]["ResponseItem"][];
            /** @description A note with additional information for a receivable. */
            memo?: string;
            /** @description E-invoicing credentials of the entity */
            network_credentials?: components["schemas"]["EinvoicingCredentials"];
            /** @description The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated. */
            original_file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the entity's default language. */
            original_file_url?: string;
            /** Format: uuid */
            overdue_reminder_id?: string;
            /**
             * Format: date-time
             * @description Date and time when the invoice was paid.
             */
            paid_at?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uri
             * @description Link to the invoice's payment page. Either Monite's payment links or your custom payment links.
             */
            payment_page_url?: string;
            /** Format: uuid */
            payment_reminder_id?: string;
            payment_terms?: components["schemas"]["PaymentTerms"];
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /** @description Contain purchase order number. */
            purchase_order?: string;
            /**
             * Format: uuid
             * @description Stores an unique ID of a recurrence if the receivable is in a recurring status
             */
            recurrence_id?: string;
            /** @description Ids of documents that relate to invoice. I.e credit notes, proforma invoices, etc. */
            related_documents: components["schemas"]["RelatedDocuments"];
            /** @description The status of the receivable inside the receivable workflow. */
            status: components["schemas"]["ReceivablesStatusEnum"];
            /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal?: number;
            /** @description The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal_after_vat?: number;
            /**
             * @description The list of tags for this receivable.
             * @default []
             */
            tags: components["schemas"]["TagReadSchema"][];
            /**
             * @description Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
             * @default 0
             */
            total_amount: number;
            /** @description The total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units), including VAT and excluding all issued credit notes. */
            total_amount_with_credit_notes: number;
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_vat_amount: number;
            /** @description List of total vat amount for each VAT, presented in receivable */
            total_vat_amounts?: components["schemas"]["TotalVatAmountItem2"][];
            /** @description Total price of the receivable with tax withheld in minor units */
            total_withholding_tax?: number;
            /** @description Trade name of the entity */
            trade_name?: string;
            /**
             * @description The type of the document uploaded.
             * @enum {string}
             */
            type: "invoice";
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /**
             * @description Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.
             * @default exclusive
             */
            vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
            /**
             * @description Defines whether the prices of products in receivable will already include VAT or not.
             * @default exclusive
             */
            vat_mode: components["schemas"]["VatModeEnum"];
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        /** @description Contains information about a text block or line extracted from an uploaded document by OCR. */
        Item: {
            /**
             * @description OCR confidence score - the estimated accuracy percentage of character recognition of the extracted text, from 0 to 100%.
             * @example 96.238
             */
            confidence: number;
            /**
             * @description If the `text` value is identified as a currency amount or a date, `processed_text` contains this value converted to a common format:
             *
             *     * Currency amounts (such as the total, subtotal, tax/VAT, line item prices) are converted to numbers with the currency character removed. For example, "€1,125.00" becomes 1125.0.* Dates are converted to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, `YYYY-MM-DDThh:mm:ss`. For example, "26/3/2021" becomes "2021-03-26T00:00:00".
             *
             *     If `text` is not a currency amount or a date, `processed_text` is `null`.
             * @example 1125
             */
            processed_text?: unknown;
            /**
             * @description The text as recognized by OCR.
             * @example €1,125.00
             */
            text: string;
        };
        /** @enum {string} */
        IterationStatus: "pending" | "completed" | "canceled" | "skipped" | "issue_failed" | "send_failed";
        /** @description A label-value pair extracted from an uploaded document by OCR.
         *     For example, the label could be "Total" and the value could be a currency amount. */
        LabelNValue: {
            /**
             * @description Text label.
             * @example {
             *       "text": "total",
             *       "confidence": 99.799
             *     }
             */
            label: components["schemas"]["Item"];
            /** @description The value (if any). */
            value: components["schemas"]["Item"];
        };
        /** @enum {string} */
        LanguageCodeEnum: "ab" | "aa" | "af" | "ak" | "sq" | "am" | "ar" | "an" | "hy" | "av" | "ae" | "ay" | "az" | "bm" | "ba" | "eu" | "be" | "bn" | "bi" | "bs" | "br" | "bg" | "my" | "ca" | "ch" | "ce" | "ny" | "zh" | "cu" | "cv" | "kw" | "co" | "cr" | "hr" | "cs" | "da" | "dv" | "nl" | "dz" | "en" | "eo" | "et" | "ee" | "fo" | "fj" | "fi" | "fr" | "fy" | "ff" | "gd" | "gl" | "lg" | "ka" | "de" | "el" | "kl" | "gn" | "gu" | "ht" | "ha" | "he" | "hz" | "hi" | "ho" | "hu" | "io" | "ig" | "id" | "ia" | "ie" | "iu" | "ik" | "ga" | "it" | "ja" | "jv" | "kn" | "kr" | "ks" | "kk" | "km" | "ki" | "rw" | "ky" | "kv" | "kg" | "ko" | "kj" | "ku" | "lo" | "la" | "lv" | "li" | "ln" | "lt" | "lu" | "lb" | "mk" | "mg" | "ms" | "ml" | "mt" | "gv" | "mi" | "mr" | "mh" | "mn" | "na" | "nv" | "nd" | "nr" | "ng" | "ne" | "no" | "nb" | "nn" | "ii" | "oc" | "oj" | "om" | "os" | "pi" | "ps" | "fa" | "pl" | "pt" | "pa" | "qu" | "ro" | "rm" | "rn" | "ru" | "se" | "sm" | "sg" | "sa" | "sc" | "sr" | "sn" | "sd" | "si" | "sk" | "sl" | "so" | "st" | "es" | "su" | "sw" | "ss" | "sv" | "tl" | "ty" | "tg" | "ta" | "tt" | "te" | "th" | "bo" | "ti" | "to" | "ts" | "tn" | "tr" | "tk" | "tw" | "ug" | "uk" | "ur" | "uz" | "ve" | "vi" | "vo" | "wa" | "cy" | "wo" | "xh" | "yi" | "yo" | "za" | "zu";
        /** @enum {string} */
        LedgerAccountCursorFields: "name";
        /** @description A paginated list of ledger accounts. */
        LedgerAccountListResponse: {
            data: components["schemas"]["LedgerAccountResponse"][];
            next_pagination_token?: string;
            prev_pagination_token?: string;
        };
        /** @description Represents a general ledger account retrieved from an accounting system. */
        LedgerAccountResponse: {
            /**
             * Format: uuid
             * @description A unique identifier of the ledger account.
             */
            id: string;
            /**
             * @description The currency of the ledger account, specified as a three-letter [currency code](https://docs.monite.com/references/currencies) (ISO 4217).
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description The current balance in the account. */
            current_balance?: number;
            /** @description User-defined description of the ledger account. */
            description?: string;
            /** @description Indicates whether this ledger account represents a bank account. */
            is_bank_account: boolean;
            /**
             * @description A user-defined name of the ledger account. Examples: Accounts Receivable, Office Equipment, Advertising, Salaries.
             * @example Accounts Receivable
             */
            name: string;
            /**
             * @description The account code in the accounting system.
             * @example 610
             */
            nominal_code?: string;
            /**
             * @description The status of the ledger account. Possible values: Active, Archived, Pending, Unknown.
             * @example Active
             */
            status: string;
            /**
             * @description The subtype or category of the ledger account. Possible values vary based on the accounting system used. Examples: Current, Fixed, Expense, Inventory, Equity.
             * @example Current
             */
            subtype?: string;
            /**
             * @description The type of the ledger account. It determines whether the account is a credit account or a debit account and where it appears in financial reports within the accounting system. Possible values: Asset, Equity, Expense, Income, Liability, Unknown.
             * @example Asset
             */
            type: string;
        };
        LineItem: {
            /**
             * Format: uuid
             * @description ID of the tax rate in the connected accounting system, to be used when pushing the invoice to that accounting system. Use `GET /accounting_tax_rates` to get these IDs. If omitted, Monite will attempt to match the tax rates based on their numeric value.
             */
            accounting_tax_rate_id?: string;
            /**
             * Format: uuid
             * @description Unique identifier of the user-defined vat rate object.
             */
            custom_vat_rate_id?: string;
            /** @description The discount for a product. */
            discount?: components["schemas"]["Discount2"];
            /** @description Object of product. Can be used instead of product_id, created in product's catalog */
            product?: components["schemas"]["LineItemProductCreate"];
            /**
             * Format: uuid
             * @description Unique identifier of the product.
             */
            product_id?: string;
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity: number;
            /** @description Specifies the display name of the tax rate. This field is applicable only when tax_rate_value is also provided. */
            tax_rate_name?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries. */
            tax_rate_value?: number;
            /**
             * Format: uuid
             * @description Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.
             */
            vat_rate_id?: string;
        };
        LineItemColumnSettings: {
            /** @default true */
            display: boolean;
            /** @description Line item table column header to override Monite's default. If not set, the Monite's default will be used. */
            label?: string;
        };
        /** @enum {string} */
        LineItemCursorFields: "created_at" | "updated_at";
        LineItemFields: {
            /**
             * @description Object describing the required field `measure_unit` of a line item's product
             * @default {
             *       "description": "Unit used to measure the quantity of the product (e.g. items, meters, kilograms)",
             *       "required": false
             *     }
             */
            measure_unit: components["schemas"]["FieldSchema"];
            /**
             * @description Object describing the required field `tax_rate_value` of a line item
             * @default {
             *       "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries.",
             *       "required": false
             *     }
             */
            tax_rate_value: components["schemas"]["FieldSchema"];
            /**
             * @description Object describing the required field `vat_rate_id` of a line item
             * @default {
             *       "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.",
             *       "required": false
             *     }
             */
            vat_rate_id: components["schemas"]["FieldSchema"];
        };
        LineItemForValidation: {
            /** Format: uuid */
            ledger_account_id?: string;
            /** @description Line item tax rate in minor units. */
            monite_tax_rate?: number;
        };
        LineItemInternalRequest: {
            /**
             * Format: uuid
             * @description ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
             * @example dd13735f-ef3a-4312-8c37-835d70341375
             */
            accounting_tax_rate_id?: string;
            /** @description Description of the product. */
            description?: string;
            /**
             * Format: uuid
             * @description ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
             * @example 7df884fd-8be8-4eba-b6ff-417b66efe033
             */
            ledger_account_id?: string;
            /** @description Name of the product. */
            name?: string;
            /**
             * @description The quantity of each of the goods, materials, or services listed in the payable.
             * @example 1.22
             */
            quantity?: number;
            subtotal?: number;
            /**
             * @description VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
             * @example 1250
             */
            tax?: number;
            total?: number;
            /**
             * @description The unit of the product
             * @example meter
             */
            unit?: string;
            /**
             * @description The unit price of the product, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1200
             */
            unit_price?: number;
        };
        /** @description Extended settings for numeric columns in line items. */
        LineItemNumericColumnSettings: {
            /** @default true */
            display: boolean;
            /** @description Line item table column header to override Monite's default. If not set, the Monite's default will be used. */
            label?: string;
            /** @description Number of decimal places to display for numeric values in this column. */
            precision?: number;
        };
        LineItemPaginationResponse: {
            data: components["schemas"]["LineItemResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        LineItemProduct: {
            /**
             * Format: uuid
             * @description Unique ID of the product.
             */
            id: string;
            /**
             * Format: uuid
             * @description Unique identifier of the accounting tax rate object.
             */
            accounting_tax_rate_id?: string;
            /** @description Description of the product. */
            description?: string;
            /** @description A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog. */
            external_reference?: string;
            /**
             * @description Indicates whether the product is inline
             * @default false
             */
            is_inline: boolean;
            /** Format: uuid */
            ledger_account_id?: string;
            measure_unit?: components["schemas"]["LineItemProductMeasureUnit2"];
            /** @description Name of the product. */
            name: string;
            price: components["schemas"]["Price2"];
            price_after_vat: components["schemas"]["Price2"];
            /** @description The smallest amount allowed for this product. */
            smallest_amount?: number;
            /**
             * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
             * @default product
             */
            type: components["schemas"]["ProductServiceTypeEnum"];
            vat_rate: components["schemas"]["LineItemProductVatRate2"];
        };
        LineItemProductCreate: {
            /** @description Description of the product. */
            description?: string;
            /** @description A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog. */
            external_reference?: string;
            /** Format: uuid */
            ledger_account_id?: string;
            measure_unit?: components["schemas"]["UnitRequest"];
            /** @description Name of the product. */
            name: string;
            price: components["schemas"]["Price2"];
            /** @description The smallest amount allowed for this product. */
            smallest_amount?: number;
            /**
             * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
             * @default product
             */
            type: components["schemas"]["ProductServiceTypeEnum"];
        };
        LineItemProductMeasureUnit: {
            /** Format: uuid */
            id?: string;
            description?: string;
            name: string;
        };
        LineItemProductMeasureUnit2: {
            /** Format: uuid */
            id?: string;
            description?: string;
            name: string;
        };
        LineItemProductVatRate: {
            /**
             * Format: uuid
             * @description Unique identifier of the vat rate object.
             */
            id?: string;
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["VatRateComponent"][];
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Indicates whether this vat rate is defined by user.
             * @default false
             */
            is_custom: boolean;
            /** @description Display name of the vat rate. */
            name?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        LineItemProductVatRate2: {
            /**
             * Format: uuid
             * @description Unique identifier of the vat rate object.
             */
            id?: string;
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["VatRateComponent2"][];
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Indicates whether this vat rate is defined by user.
             * @default false
             */
            is_custom: boolean;
            /** @description Display name of the vat rate. */
            name?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        LineItemRequest: {
            /**
             * Format: uuid
             * @description ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
             * @example dd13735f-ef3a-4312-8c37-835d70341375
             */
            accounting_tax_rate_id?: string;
            /** @description Description of the product. */
            description?: string;
            /**
             * Format: uuid
             * @description ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
             * @example 7df884fd-8be8-4eba-b6ff-417b66efe033
             */
            ledger_account_id?: string;
            /** @description Name of the product. */
            name?: string;
            /**
             * @description The quantity of each of the goods, materials, or services listed in the payable.
             * @example 1.22
             */
            quantity?: number;
            /**
             * @description VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
             * @example 1250
             */
            tax?: number;
            /**
             * @description The unit of the product
             * @example meter
             */
            unit?: string;
            /**
             * @description The unit price of the product, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1200
             */
            unit_price?: number;
        };
        LineItemResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: uuid
             * @description ID of the tax rate reference used for accounting integartion. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
             * @example dd13735f-ef3a-4312-8c37-835d70341375
             */
            accounting_tax_rate_id?: string;
            /** @description Description of the product. */
            description?: string;
            /**
             * Format: uuid
             * @description ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
             * @example 7df884fd-8be8-4eba-b6ff-417b66efe033
             */
            ledger_account_id?: string;
            /** @description Name of the product. */
            name?: string;
            /**
             * @description Indicates whether the item's `unit_price` and `quantity` were adjusted by OCR.
             * @default false
             * @example false
             */
            ocr_set_quantity_to_one: boolean;
            /** Format: uuid */
            payable_id: string;
            /**
             * @description The quantity of each of the goods, materials, or services listed in the payable.
             * @example 1.22
             */
            quantity?: number;
            /**
             * @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units).
             * @example 1250
             */
            subtotal?: number;
            /**
             * @description VAT rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250.
             * @example 2000
             */
            tax?: number;
            /**
             * @description Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 250
             */
            tax_amount?: number;
            /**
             * @description The actual price of the product.
             * @example 1200
             */
            total?: number;
            /**
             * @description The unit of the product
             * @example meter
             */
            unit?: string;
            /**
             * @description The unit price of the product, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1500
             */
            unit_price?: number;
            /**
             * Format: uuid
             * @description ID of the user who created the tag.
             * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
             */
            was_created_by_user_id?: string;
        };
        LineItemUpdate: {
            /**
             * Format: uuid
             * @description Unique identifier of the user-defined vat rate object.
             */
            custom_vat_rate_id?: string;
            /** @description The discount for a product. */
            discount?: components["schemas"]["Discount2"];
            /** @description The actual price of the product in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            price?: number;
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity?: number;
            /** @description Specifies the display name of the tax rate. This field is applicable only when tax_rate_value is also provided. */
            tax_rate_name?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries. */
            tax_rate_value?: number;
            /**
             * Format: uuid
             * @description Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.
             */
            vat_rate_id?: string;
        };
        LineItemsRenderingSettings: {
            /** @description Settings for the discount column in the line items table. */
            discount?: components["schemas"]["LineItemColumnSettings"];
            /** @description Settings for the measure unit column in the line items table. */
            measure_unit?: components["schemas"]["LineItemColumnSettings"];
            /** @description Settings for the name column in the line items table. */
            name?: components["schemas"]["LineItemColumnSettings"];
            /** @description Settings for the price column in the line items table. */
            price?: components["schemas"]["LineItemNumericColumnSettings"];
            /** @description Settings for the price after VAT column in the line items table. */
            price_after_vat?: components["schemas"]["LineItemNumericColumnSettings"];
            /** @description Settings for the quantity column in the line items table. */
            quantity?: components["schemas"]["LineItemColumnSettings"];
            /** @description Settings for the total price column in the line items table. */
            total_price?: components["schemas"]["LineItemNumericColumnSettings"];
            /** @description Settings for the total price after VAT column in the line items table. */
            total_price_after_vat?: components["schemas"]["LineItemNumericColumnSettings"];
            /**
             * @description Settings for the VAT amount column in the line items table.
             * @default {
             *       "display": false
             *     }
             */
            vat_amount: components["schemas"]["LineItemNumericColumnSettings"];
            /** @description Settings for the VAT rate column in the line items table. */
            vat_rate?: components["schemas"]["LineItemNumericColumnSettings"];
        };
        LineItemsReplaceRequest: {
            data: components["schemas"]["LineItemInternalRequest"][];
        };
        LineItemsReplaceResponse: {
            data: components["schemas"]["LineItemResponse"][];
        };
        LineItemsResponse: {
            data: components["schemas"]["ResponseItem"][];
        };
        LineItemsValidationRequest: {
            document_type: components["schemas"]["DocumentType"];
            line_items: components["schemas"]["LineItemForValidation"][];
        };
        /** @description Contains information about a sent email. */
        MailSentEventData: {
            /**
             * Format: uuid
             * @description ID of the email sending operation. Can be used to get the email sending status from `GET /receivables/{receivable_id}/mails/{mail_id}`.
             */
            mail_id: string;
            /** @description The overall email sending status across all recipients. */
            mail_status: components["schemas"]["ReceivableMailStatusEnum"];
            /** @description Contains a list of email recipients (To, CC, BCC) and the email sending status for each recipient. */
            recipients: components["schemas"]["ReceivableMailRecipients"];
        };
        MailSettings: {
            /**
             * @description Attach documents as PDF in emails.
             * @default true
             */
            attach_documents_as_pdf: boolean;
            from_email_username?: string | null;
            from_name?: string | null;
        };
        MailboxDataResponse: {
            data?: components["schemas"]["MailboxResponse"][];
        };
        MailboxDomainRequest: {
            /** Format: uuid */
            mailbox_domain_id: string;
            mailbox_name: string;
            /** @description Related object type: payable and so on */
            related_object_type: components["schemas"]["MailboxObjectTypeEnum"];
        };
        MailboxMultipleEntitiesRequest: {
            entity_ids: string[];
        };
        /** @enum {string} */
        MailboxObjectTypeEnum: "payable" | "receipt";
        MailboxResponse: {
            /**
             * Format: uuid
             * @description Mailbox UUID
             */
            id: string;
            /** Format: uuid */
            mailbox_domain_id?: string;
            mailbox_full_address: string;
            mailbox_name: string;
            related_object_type: string;
            status: string;
        };
        ManuallySpecifiedBankAccountPayload: {
            bank_id: string;
            /** @default false */
            iframe: boolean;
            payer_account_country: components["schemas"]["YapilyCountriesCoverageCodes"];
            payer_account_holder_name?: string;
            payer_account_identification: components["schemas"]["AccountIdentification"];
            /** @description PSU identification is required for some banks (e.g. some Germany institutions). */
            psu_identification?: components["schemas"]["PsuIdentification"];
            /** @default false */
            save_to_authorized: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "manual_input";
        };
        Media: {
            /** Format: uri */
            source: string;
            type: string;
        };
        Message: {
            /**
             * Format: uuid
             * @description Unique identifier of the message
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time the message was created
             */
            created_at: string;
            /** @description Text content of the message, including charts and any other data attached with html tags */
            content: string;
            /**
             * @description Role of the message sender
             * @enum {string}
             */
            role: "user" | "assistant";
        };
        MessageFeedbackCommentaryPayload: {
            /** @description Commentary for the message */
            comment: string;
            /**
             * Format: uuid
             * @description Unique identifier of the message
             */
            message_id: string;
        };
        MessageFeedbackPayload: {
            /**
             * @description Action to mark the message as helpful or not
             * @enum {string}
             */
            action: "like" | "dislike";
            /**
             * Format: uuid
             * @description Unique identifier of the message
             */
            message_id: string;
        };
        MessageResponse: {
            message: string;
        };
        MissingFields: {
            /** @description Missing fields of counterpart. */
            counterpart?: string[];
            /** @description Missing fields of entity. */
            entity?: string[];
            /** @description Missing fields of line items. */
            products?: components["schemas"]["MissingLineItemFields"][];
            /** @description Missing fields of receivable. */
            receivable?: string[];
            /** @description List of invalid vat rates. */
            vat_rates?: string[];
        };
        MissingLineItemFields: {
            /** @description Order number of line item. */
            line_item_number: number;
            /** @description Missing fields of line item. */
            missing_fields: string[];
        };
        /** @enum {string} */
        MoniteAllPaymentMethods: "SEPA Payments" | "US ACH Payments" | "BLIK" | "Card payments" | "Bacs Direct Debit" | "Bancontact" | "Electronic Payment Standard" | "Giropay" | "iDEAL" | "Przelewy24" | "SEPA Direct Debit" | "SOFORT" | "Apple Pay" | "Google Pay" | "Affirm" | "Klarna";
        /** @enum {string} */
        MoniteAllPaymentMethodsTypes: "sepa_credit" | "us_ach" | "blik" | "card" | "bacs_direct_debit" | "bancontact" | "eps" | "giropay" | "ideal" | "p24" | "sepa_debit" | "sofort" | "applepay" | "googlepay" | "affirm" | "klarna";
        NextDocumentNumbers: {
            /**
             * @description Next credit note number
             * @default 1
             */
            credit_note: number;
            /**
             * @description Next delivery note number
             * @default 1
             */
            delivery_note: number;
            /**
             * @description Next invoice number
             * @default 1
             */
            invoice: number;
            /**
             * @description Next purchase order number
             * @default 1
             */
            purchase_order: number;
            /**
             * @description Next quote number
             * @default 1
             */
            quote: number;
        };
        /** @description In general it's compatible with CounterpartAddress model but
         *     * All fields are optional
         *     * There is an additional field original_country_name */
        OCRAddress: {
            /**
             * @description City name.
             * @example Berlin
             */
            city?: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: string;
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1?: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description Country name as it is stated in the document.
             * @example Berlin
             */
            original_country_name?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code?: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        OCRAddressDetails: {
            city?: string;
            country?: components["schemas"]["AllowedCountries"];
            postal_code?: string;
            state?: string;
            street_and_number?: string;
        };
        OCRBankDetails: {
            bank_account_number?: string;
            iban?: string;
            swift_bic?: string;
        };
        OCRCounterpartDetails: {
            address: components["schemas"]["OCRAddressDetails"];
            bank_account: components["schemas"]["OCRBankDetails"];
            email?: string;
            name?: string;
            tax_number?: string;
            vat_number?: string;
        };
        OCRCreditNote: {
            currency?: components["schemas"]["CurrencyEnum"];
            document_number?: string;
            /** Format: date */
            issue_date?: string;
            line_items: components["schemas"]["OCRLineItem"][];
            original_invoice_number?: string;
            recipient: components["schemas"]["OCRCounterpartDetails"];
            sender: components["schemas"]["OCRCounterpartDetails"];
            subtotal?: number;
            tax_amount?: number;
            tax_rate?: number;
            total_amount?: number;
            /**
             * @default credit_note
             * @enum {string}
             */
            type: "credit_note";
        };
        /** @enum {string} */
        OCRDocumentTypeEnum: "invoice" | "credit_note" | "receipt";
        OCRFileUpload: {
            /** Format: binary */
            file: Blob;
        };
        OCRInvoice: {
            amount_paid?: number;
            currency?: components["schemas"]["CurrencyEnum"];
            document_number?: string;
            /** Format: date */
            due_date?: string;
            /** Format: date */
            issue_date?: string;
            line_items?: components["schemas"]["OCRLineItem"][];
            payment_terms?: string;
            recipient: components["schemas"]["OCRCounterpartDetails"];
            sender: components["schemas"]["OCRCounterpartDetails"];
            subtotal?: number;
            tax_amount?: number;
            tax_rate?: number;
            total_amount?: number;
            /**
             * @default invoice
             * @enum {string}
             */
            type: "invoice";
        };
        OCRLineItem: {
            description?: string;
            line_reference?: string;
            name?: string;
            quantity?: number;
            subtotal?: number;
            tax_amount?: number;
            tax_rate?: number;
            total_amount?: number;
            unit?: string;
            unit_price?: number;
        };
        OCRReceipt: {
            currency?: components["schemas"]["CurrencyEnum"];
            discount?: number;
            document_number?: string;
            /** Format: date-time */
            issued_at?: string;
            line_items: components["schemas"]["OCRReceiptLineItem"][];
            sender: components["schemas"]["OCRCounterpartDetails"];
            subtotal?: number;
            tax_amount?: number;
            tax_rate?: number;
            tax_type?: string;
            total_amount?: number;
            /**
             * @default receipt
             * @enum {string}
             */
            type: "receipt";
        };
        OCRReceiptLineItem: {
            description?: string;
            discount_amount?: number;
            line_reference?: string;
            name?: string;
            quantity?: number;
            subtotal?: number;
            tax_amount?: number;
            tax_rate?: number;
            total_amount?: number;
            unit?: string;
            unit_price?: number;
        };
        OCRResponseInvoiceReceiptData: {
            /**
             * @description Counterpart bank ID
             * @example DEUTDEFF
             */
            counterpart_account_id?: string;
            /** @description The bank account number */
            counterpart_account_number?: string;
            /** @description Counterpart address */
            counterpart_address?: string;
            /** @description Counterpart address as a json object compatible with counterparts service */
            counterpart_address_object?: components["schemas"]["OCRAddress"];
            /** @description The bank branch number */
            counterpart_branch_number?: string;
            /** @description Email address of the counterpart */
            counterpart_email?: string;
            /**
             * @description Counterpart name
             * @example Monite GMbH
             */
            counterpart_name?: string;
            /** @description The bank routing number */
            counterpart_routing_number?: string;
            /**
             * @description Counterpart VAT ID
             * @example DE88939004
             */
            counterpart_vat_id?: string;
            /**
             * @description ISO 4217 currency code
             * @example EUR
             */
            currency?: string;
            /** @description Discount Raw amount */
            discount_raw?: number;
            /** @description Document due date in ISO format */
            document_due_date?: string;
            /**
             * @description Invoice/receipt ID
             * @example CST-13341
             */
            document_id?: string;
            /** @description Document issuance date in ISO format */
            document_issued_at_date?: string;
            /** @description List of line items from document raw, without minor units conversion. */
            line_items_raw?: components["schemas"]["OCRResponseInvoiceReceiptLineItemRaw"][];
            /** @description Raw payment terms parsed but not calculated. */
            payment_terms_raw?: string[];
            /**
             * @description Purchase Order Number
             * @example 1234
             */
            purchase_order_number?: string;
            /**
             * @description Tax payer ID
             * @example 12345678901
             */
            tax_payer_id?: string;
            /**
             * @description Subtotal, without minor units
             * @example 77
             */
            total_excl_vat_raw?: number;
            /**
             * @description Total paid amount
             * @default 0
             * @example 50
             */
            total_paid_amount_raw: number;
            /**
             * @description Total, without minor units
             * @example 70
             */
            total_raw?: number;
            /**
             * @description VAT amount, without minor units
             * @example 7
             */
            total_vat_amount_raw?: number;
            /**
             * @description VAT Percent raw, without minor units.
             * @example 12.5
             */
            total_vat_rate_raw?: number;
            /**
             * @default invoice
             * @enum {string}
             */
            type: "invoice";
        };
        OCRResponseInvoiceReceiptLineItemRaw: {
            /**
             * @description Human-readable line item description
             * @example Impact Players : How to Take the Lead , Play Bigger , and Multiply Your
             */
            description?: string;
            /**
             * @description Item Quantity/Unit Price adjusted
             * @default false
             */
            item_adjusted: boolean;
            /** @description OCR Id of line item */
            line_item_ocr_id?: string;
            /**
             * @description Quantity
             * @example 1.2
             */
            quantity?: number;
            /**
             * @description Total excluded VAT as parsed.
             * @example 120
             */
            total_excl_vat?: number;
            /**
             * @description Total included VAT as parsed.
             * @example 135
             */
            total_incl_vat?: number;
            /**
             * @description Unit
             * @example meters
             */
            unit?: string;
            /**
             * @description Price as parsed
             * @example 100
             */
            unit_price?: number;
            /**
             * @description VAT Amount as parsed.
             * @example 15
             */
            vat_amount?: number;
            /**
             * @description VAT Percent as parsed.
             * @example 12.5
             */
            vat_percentage?: number;
        };
        /** @enum {string} */
        OCRTaskStatus: "processing" | "success" | "error";
        /** @description A paginated list of ocr requests. */
        OCRTasksPaginationResponse: {
            data: components["schemas"]["OcrTaskResponseSchema"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        ObjectMatchTypes: "product" | "customer" | "vendor" | "receivable" | "bill" | "payment_record";
        /** @enum {string} */
        ObjectType: "account" | "approval" | "approval_request" | "approval_policy" | "approval_policy_process" | "audit_trail" | "comment" | "counterpart" | "counterpart_address" | "counterpart_bank_account" | "counterpart_contact_person" | "counterpart_partner_metadata" | "counterpart_tax_id" | "counterpart_vat_id" | "delivery_note" | "einvoicing" | "entity" | "entity_bank_account" | "entity_settings" | "entity_token" | "entity_user" | "entity_user_token" | "entity_vat_ids" | "export" | "mailbox" | "monitescript_process" | "ocr_task" | "onboarding" | "overdue_reminder" | "partner" | "partner_internal_config" | "partner_settings" | "partner_token" | "payable" | "payable_line_item" | "payables_credit_note" | "payables_purchase_order" | "payment" | "payment_intent" | "payment_link" | "payment_record" | "payment_reminder" | "person" | "product" | "project" | "receivable" | "reconciliation" | "recurrence" | "role" | "tag" | "todo_task" | "todo_task_mute" | "transaction" | "webhook" | "workflow" | "workflow_pipeline";
        /** @enum {unknown} */
        ObjectTypeAvailableComment: "payable";
        /** @enum {string} */
        ObjectTypeEnum: "receivable" | "payable";
        ObtainSecretResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            client_id: string;
            client_secret: string;
            client_secret_mask: string;
            name?: string | null;
        };
        ObtainTokenPayload: {
            /** Format: uuid */
            client_id: string;
            client_secret: string;
            entity_user_id?: string | null;
            grant_type: components["schemas"]["GrantType"];
        };
        OcrAutoTaggingSettingsRequest: {
            /** @description A switch to temporarily disable a keyword without removing it from the list. */
            enabled: boolean;
            /** @description A list of words that will be searched for assigning a tag in the recognized fields of the document after OCR processing. If at least one match is found, the tag will be assigned. Each keyword must be between 2 and 25 characters long. */
            keywords: string[];
            /**
             * Format: uuid
             * @description Tag identifier that will be assigned to the payable document if one of the words listed in keywords is found during OCR.
             */
            tag_id: string;
        };
        /** @description Contains information about all text blocks extracted from an uploaded invoice by OCR.
         *     The text blocks are grouped into `line_items` (invoice line items) and `summary` (all other information).
         *     Legacy schema used for AWS textract recognition. */
        OcrRecognitionResponse: {
            /** @description Text content of the invoice line items as recognized by OCR. */
            line_items?: components["schemas"]["LabelNValue"][];
            /** @description Invoice text content other than the line items. Such as the invoice issue and due dates, vendor name and address, and other general information. */
            summary?: components["schemas"]["LabelNValue"][];
        };
        /** @enum {string} */
        OcrStatusEnum: "processing" | "error" | "success" | "canceled";
        OcrTaskResponseSchema: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            document_type?: components["schemas"]["OCRDocumentTypeEnum"];
            recognized_data?: components["schemas"]["OCRInvoice"] | components["schemas"]["OCRCreditNote"] | components["schemas"]["OCRReceipt"];
            status: components["schemas"]["OCRTaskStatus"];
        };
        OnboardingAddress: {
            city?: components["schemas"]["OnboardingStringField"];
            country?: components["schemas"]["OnboardingCountryField"];
            line1?: components["schemas"]["OnboardingStringField"];
            line2?: components["schemas"]["OnboardingStringField"];
            postal_code?: components["schemas"]["OnboardingStringField"];
            state?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingBankAccount: {
            /** Format: uuid */
            id: string;
            account_holder_name?: components["schemas"]["OnboardingStringField"];
            account_number?: components["schemas"]["OnboardingStringField"];
            country: components["schemas"]["OnboardingCountryField"];
            currency: components["schemas"]["OnboardingCurrencyField"];
            iban?: components["schemas"]["OnboardingStringField"];
            routing_number?: components["schemas"]["OnboardingStringField"];
            sort_code?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingBankAccountMask: {
            account_holder_name?: boolean;
            account_number?: boolean;
            country?: boolean;
            currency?: boolean;
            iban?: boolean;
            routing_number?: boolean;
            sort_code?: boolean;
        };
        OnboardingBusinessProfile: {
            description_of_goods_or_services?: components["schemas"]["OnboardingStringField"];
            estimated_monthly_revenue?: components["schemas"]["OnboardingEstimatedMonthlyRevenue"];
            mcc?: components["schemas"]["OnboardingStringField"];
            operating_countries?: components["schemas"]["OnboardingListOfCountriesField"];
            url?: components["schemas"]["OnboardingUrlField"];
        };
        OnboardingCountryField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            value?: components["schemas"]["AllowedCountries"] | null;
        };
        OnboardingCurrencyField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            value?: components["schemas"]["CurrencyEnum"] | null;
        };
        OnboardingData: {
            bank_accounts?: components["schemas"]["OnboardingBankAccount"][];
            business_profile?: components["schemas"]["OnboardingBusinessProfile"];
            entity?: components["schemas"]["OnboardingEntity"];
            entity_documents?: components["schemas"]["OnboardingEntityDocuments"];
            ownership_declaration?: components["schemas"]["OnboardingOwnershipDeclaration"];
            persons?: components["schemas"]["OnboardingPerson"][];
            persons_documents?: components["schemas"]["OnboardingPersonDocuments"][];
            tos_acceptance?: components["schemas"]["OnboardingTosAcceptance"];
        };
        OnboardingDateField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            /** Format: date */
            value?: string | null;
        };
        OnboardingDocumentsDescriptions: {
            additional_verification: string[];
            entity_verification: string[];
            verification: string[];
        };
        OnboardingEmailField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            /** Format: email */
            value?: string | null;
        };
        OnboardingEntity: {
            address?: components["schemas"]["OnboardingAddress"];
            email?: components["schemas"]["OnboardingEmailField"];
            individual?: components["schemas"]["OnboardingEntityIndividual"];
            organization?: components["schemas"]["OnboardingEntityOrganization"];
            phone?: components["schemas"]["OnboardingStringField"];
            tax_id?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingEntityDocuments: {
            additional_verification_document_back?: components["schemas"]["OnboardingStringField"];
            additional_verification_document_front?: components["schemas"]["OnboardingStringField"];
            verification_document_back?: components["schemas"]["OnboardingStringField"];
            verification_document_front?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingEntityIndividual: {
            date_of_birth?: components["schemas"]["OnboardingDateField"];
            first_name?: components["schemas"]["OnboardingStringField"];
            id_number?: components["schemas"]["OnboardingStringField"];
            last_name?: components["schemas"]["OnboardingStringField"];
            ssn_last_4?: components["schemas"]["OnboardingStringField"];
            title?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingEntityOrganization: {
            legal_name?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingError: {
            message: string;
        };
        OnboardingEstimatedMonthlyRevenue: {
            amount?: components["schemas"]["OnboardingIntField"];
            currency?: components["schemas"]["OnboardingCurrencyField"];
        };
        OnboardingFloatField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            value?: number | null;
        };
        OnboardingIntField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            value?: number | null;
        };
        OnboardingLinkInternalResponse: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            entity_id: string;
            /** Format: date-time */
            expires_at: string;
            is_exhausted: boolean;
            /** @description Indicates if KYB RFI component need to be loaded. Applies only for Airwallex. */
            kyb_rfi_required: boolean;
            /** @description Indicates if KYC RFI component need to be loaded. Applies only for Airwallex. */
            kyc_rfi_required: boolean;
            /** Format: uuid */
            partner_id: string;
            phone?: string;
            /** Format: uuid */
            project_id: string;
            provider: components["schemas"]["Provider"];
            /** Format: uri */
            refresh_url: string;
            /** Format: uri */
            return_url: string;
            /** Format: uri */
            url: string;
        };
        OnboardingLinkPublicResponse: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            entity_id: string;
            /** Format: date-time */
            expires_at: string;
            /** Format: uri */
            refresh_url: string;
            /** Format: uri */
            return_url: string;
            /** Format: uri */
            url: string;
        };
        OnboardingLinkRequest: {
            /** Format: date-time */
            expires_at: string;
            /** Format: uri */
            refresh_url: string;
            /** Format: uri */
            return_url: string;
        };
        OnboardingLinkResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            expires_at: string;
            recipient: components["schemas"]["Recipient"];
            /** Format: uri */
            refresh_url: string;
            /** Format: uri */
            return_url: string;
            /** Format: uri */
            url: string;
        };
        OnboardingLinksAccessTokenResponse: {
            /** @example L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg */
            access_token: string;
            /** @example 86400 */
            expires_in: number;
            /** @example Bearer */
            token_type: string;
        };
        OnboardingLinksAddress: {
            city?: string;
            country?: components["schemas"]["AllowedCountries"];
            line1?: string;
            line2?: string;
            postal_code?: string;
            state?: string;
        };
        OnboardingLinksAirwallexComponentCodeRequest: {
            /** @description A challenge token generated together with the code_verifier with the S256 generation method */
            code_challenge: string;
        };
        OnboardingLinksAirwallexComponentCodeResponse: {
            /** @description Code that should be used to init Airwallex onboarding SDK */
            authorization_code: string;
            /** @description client ID that should be used to init Airwallex onboarding SDK */
            client_id: string;
        };
        OnboardingLinksAirwallexComponentData: {
            /** Format: date-time */
            tos_acceptance_date?: string;
        };
        OnboardingLinksAirwallexComponentDataResponse: {
            data: components["schemas"]["OnboardingLinksAirwallexComponentData"];
            requirements: components["schemas"]["OnboardingLinksRequirement"][];
        };
        OnboardingLinksBankAccount: {
            account_number?: string;
            country?: components["schemas"]["AllowedCountries"];
            currency?: components["schemas"]["CurrencyEnum"];
            iban?: string;
            sort_code?: string;
        };
        OnboardingLinksBusinessProfile: {
            mcc?: string;
            /** Format: uri */
            url?: string;
        };
        /** @enum {string} */
        OnboardingLinksBusinessType: "organization" | "individual";
        OnboardingLinksCompany: {
            address?: components["schemas"]["OnboardingLinksAddress"];
            directors_provided?: boolean;
            /** Format: email */
            email?: string;
            executives_provided?: boolean;
            name?: string;
            owners_provided?: boolean;
            phone?: string;
            representative_provided?: boolean;
            tax_id?: string;
        };
        OnboardingLinksIndividual: {
            address?: components["schemas"]["OnboardingLinksAddress"];
            /** Format: date */
            date_of_birth?: string;
            /** Format: email */
            email?: string;
            first_name?: string;
            id_number?: string;
            last_name?: string;
            phone?: string;
            ssn_last_4?: string;
        };
        OnboardingLinksPerson: {
            address?: components["schemas"]["OnboardingLinksAddress"];
            /** Format: date */
            date_of_birth?: string;
            /** Format: email */
            email?: string;
            first_name?: string;
            id_number?: string;
            last_name?: string;
            phone?: string;
            relationship?: components["schemas"]["OnboardingLinksRelationship"];
            ssn_last_4?: string;
        };
        OnboardingLinksRelationship: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: number;
            representative?: boolean;
            title?: string;
        };
        /** @enum {string} */
        OnboardingLinksRequirement: "tos_acceptance_date" | "ownership_declaration_date" | "individual" | "company" | "business_profile" | "bank_account" | "representative" | "owners" | "executives" | "directors";
        OnboardingLinksStripeData: {
            bank_account?: components["schemas"]["OnboardingLinksBankAccount"];
            business_profile?: components["schemas"]["OnboardingLinksBusinessProfile"];
            company?: components["schemas"]["OnboardingLinksCompany"];
            individual?: components["schemas"]["OnboardingLinksIndividual"];
            persons?: components["schemas"]["OnboardingLinksPerson"][];
            /** Format: date-time */
            tos_acceptance_date?: string;
        };
        OnboardingLinksStripeDataResponse: {
            business_type: components["schemas"]["OnboardingLinksBusinessType"];
            data: components["schemas"]["OnboardingLinksStripeData"];
            masks: {
                [key: string]: components["schemas"]["OnboardingLinksPerson"];
            };
            requirements: components["schemas"]["OnboardingLinksRequirement"][];
        };
        OnboardingListOfCountriesField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            value?: components["schemas"]["AllowedCountries"][] | null;
        };
        OnboardingOwnershipDeclaration: {
            date?: components["schemas"]["OnboardingDateField"];
        };
        OnboardingPaymentMethodsResponse: {
            data: components["schemas"]["PaymentMethod"][];
        };
        OnboardingPerson: {
            /** Format: uuid */
            id: string;
            address?: components["schemas"]["OnboardingAddress"];
            date_of_birth?: components["schemas"]["OnboardingDateField"];
            email: components["schemas"]["OnboardingEmailField"];
            first_name: components["schemas"]["OnboardingStringField"];
            id_number?: components["schemas"]["OnboardingStringField"];
            last_name: components["schemas"]["OnboardingStringField"];
            phone?: components["schemas"]["OnboardingStringField"];
            relationship: components["schemas"]["OnboardingPersonRelationship"];
            ssn_last_4?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingPersonAddressMask: {
            city?: boolean;
            country?: boolean;
            line1?: boolean;
            line2?: boolean;
            postal_code?: boolean;
            state?: boolean;
        };
        OnboardingPersonDocuments: {
            /** Format: uuid */
            id: string;
            additional_verification_document_back?: components["schemas"]["OnboardingStringField"];
            additional_verification_document_front?: components["schemas"]["OnboardingStringField"];
            verification_document_back?: components["schemas"]["OnboardingStringField"];
            verification_document_front?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingPersonMask: {
            address?: components["schemas"]["OnboardingPersonAddressMask"];
            date_of_birth?: boolean;
            email?: boolean;
            first_name?: boolean;
            id_number?: boolean;
            last_name?: boolean;
            phone?: boolean;
            relationship: components["schemas"]["OnboardingPersonRelationshipMask"];
            ssn_last_4?: boolean;
        };
        OnboardingPersonRelationship: {
            director: boolean;
            executive: boolean;
            owner: boolean;
            percent_ownership?: components["schemas"]["OnboardingFloatField"];
            representative: boolean;
            title?: components["schemas"]["OnboardingStringField"];
        };
        OnboardingPersonRelationshipMask: {
            director?: boolean;
            executive?: boolean;
            owner?: boolean;
            percent_ownership?: boolean;
            representative?: boolean;
            title?: boolean;
        };
        /** @enum {string} */
        OnboardingRequirement: "entity" | "business_profile" | "tos_acceptance" | "ownership_declaration" | "bank_accounts" | "representative" | "owners" | "executives" | "directors" | "persons" | "entity_documents" | "persons_documents";
        OnboardingRequirementsError: {
            code: string;
            reason: string;
            requirement: string;
        };
        OnboardingRequirementsResponse: {
            disabled_reason?: components["schemas"]["AccountDisabledReason"];
            requirements: components["schemas"]["PaymentRequirements"];
            requirements_errors: components["schemas"]["RequirementsError"][];
            verification_errors: components["schemas"]["VerificationError"][];
            verification_status: components["schemas"]["VerificationStatusEnum"];
        };
        OnboardingStringField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            value?: string | null;
        };
        OnboardingTosAcceptance: {
            date?: components["schemas"]["OnboardingDateField"];
        };
        OnboardingUrlField: {
            error?: components["schemas"]["OnboardingError"] | null;
            required: boolean;
            /** Format: uri */
            value?: string | null;
        };
        OnboardingVerificationError: {
            code: string;
            details: string;
        };
        /** @enum {string} */
        OnboardingVerificationStatusEnum: "enabled" | "disabled" | "pending";
        /** @description A schema for metadata for updating an individual */
        OptionalIndividualSchema: {
            date_of_birth?: string | null;
            /** @description A first name of an individual */
            first_name?: string | null;
            id_number?: string | null;
            /** @description A last name of an individual */
            last_name?: string | null;
            /** @description The last four digits of the individual's Social Security number */
            ssn_last_4?: string | null;
            /** @description A title of an individual */
            title?: string | null;
        };
        /** @description A schema contains metadata for updating an organization */
        OptionalOrganizationSchema: {
            /** @description Business structure of the company */
            business_structure?: components["schemas"]["EntityBusinessStructure"] | null;
            directors_provided?: boolean | null;
            executives_provided?: boolean | null;
            /** @description A code which identifies uniquely a party of a transaction worldwide */
            legal_entity_id?: string | null;
            /** @description A legal name of an organization */
            legal_name?: string | null;
            owners_provided?: boolean | null;
            representative_provided?: boolean | null;
        };
        OptionalPersonAddressRequest: {
            /** @description City, district, suburb, town, or village */
            city?: string | null;
            /** @description Two-letter country code (ISO 3166-1 alpha-2) */
            country?: components["schemas"]["AllowedCountries"] | null;
            /** @description Address line 1 (e.g., street, PO Box, or company name) */
            line1?: string | null;
            /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
            line2?: string | null;
            /** @description ZIP or postal code */
            postal_code?: string | null;
            /** @description State, county, province, or region */
            state?: string | null;
        };
        OptionalPersonRelationship: {
            /** @description Whether the person is a director of the account's legal entity */
            director?: boolean | null;
            /** @description Whether the person has significant responsibility to control, manage, or direct the organization */
            executive?: boolean | null;
            /** @description Whether the person is an owner of the account's legal entity */
            owner?: boolean | null;
            /** @description The percent owned by the person of the account's legal entity */
            percent_ownership?: number | null;
            /** @description Whether the person is authorized as the primary representative of the account */
            representative?: boolean | null;
            /** @description The person's title (e.g., CEO, Support Engineer) */
            title?: string | null;
        };
        OptionalPersonRequest: {
            /** @description The person's address */
            address?: components["schemas"]["OptionalPersonAddressRequest"] | null;
            /** @description Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any. */
            citizenship?: components["schemas"]["AllowedCountries"] | null;
            /** @description The person's date of birth */
            date_of_birth?: string | null;
            /** @description The person's email address */
            email?: string | null;
            /** @description The person's first name */
            first_name?: string | null;
            /** @description The person's ID number, as appropriate for their country */
            id_number?: string | null;
            /** @description The person's last name */
            last_name?: string | null;
            /** @description The person's phone number */
            phone?: string | null;
            /** @description Describes the person's relationship to the entity */
            relationship?: components["schemas"]["OptionalPersonRelationship"] | null;
            /** @description The last four digits of the person's Social Security number */
            ssn_last_4?: string | null;
        };
        /** @enum {string} */
        OrderEnum: "asc" | "desc";
        /** @description Contains data specific to entities of the `organization` type. */
        OrganizationResponseSchema: {
            /** @description Business structure of the company */
            business_structure?: components["schemas"]["EntityBusinessStructure"] | null;
            directors_provided?: boolean | null;
            executives_provided?: boolean | null;
            /** @description A code which identifies uniquely a party of a transaction worldwide */
            legal_entity_id?: string | null;
            /** @description The legal name of the organization. */
            legal_name: string;
            owners_provided?: boolean | null;
            representative_provided?: boolean | null;
        };
        /** @description A schema contains metadata for an organization */
        OrganizationSchema: {
            /** @description Business structure of the company */
            business_structure?: components["schemas"]["EntityBusinessStructure"] | null;
            directors_provided?: boolean | null;
            executives_provided?: boolean | null;
            /** @description A code which identifies uniquely a party of a transaction worldwide */
            legal_entity_id?: string | null;
            /** @description The legal name of the organization. If this organization will use Monite payment rails, this name must be up to 100 characters long, otherwise it can be up to 255 characters long. */
            legal_name: string;
            owners_provided?: boolean | null;
            representative_provided?: boolean | null;
        };
        /** @enum {string} */
        OriginEnum: "upload" | "einvoicing";
        OverdueReminderRequest: {
            name: string;
            recipients?: components["schemas"]["Recipients"];
            /** @description Overdue reminder terms to send for payment */
            terms?: components["schemas"]["OverdueReminderTerm"][];
        };
        OverdueReminderResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the OverdueReminder was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the OverdueReminder was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            name: string;
            recipients?: components["schemas"]["Recipients"];
            /** @description Overdue reminder terms to send for payment */
            terms?: components["schemas"]["OverdueReminderTerm"][];
        };
        OverdueReminderTerm: {
            body: string;
            days_after: number;
            subject: string;
        };
        OverdueReminderUpdateRequest: {
            name?: string;
            recipients?: components["schemas"]["Recipients"];
            /** @description Overdue reminder terms to send for payment */
            terms?: components["schemas"]["OverdueReminderTerm"][];
        };
        "OwnershipDeclaration-Input": {
            /** @description The date and time (in the ISO 8601 format) when the beneficial owner attestation was made. */
            date?: string | null;
            /** @description The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header. */
            ip?: string | null;
        };
        "OwnershipDeclaration-Output": {
            /** @description The date and time (in the ISO 8601 format) when the beneficial owner attestation was made. */
            date?: string | null;
            /** @description The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header. */
            ip?: string | null;
        };
        /** @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
         *     and saves them as PNG images. This object contains the image and metadata of a single page. */
        PageSchema: {
            /**
             * Format: uuid
             * @description A unique ID of the image.
             */
            id: string;
            /** @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types) of the image. */
            mimetype: string;
            /** @description The page number in the PDF document, from 0. */
            number: number;
            /** @description Image file size, in bytes. */
            size: number;
            /** @description The URL to download the image. */
            url: string;
        };
        /** @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
         *     and saves them as PNG images. This object contains the image and metadata of a single page. */
        PageSchema2: {
            /**
             * Format: uuid
             * @description A unique ID of the image.
             */
            id: string;
            /**
             * @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
             * @example image/png
             */
            mimetype: string;
            /**
             * @description The page number in the PDF document, from 0.
             * @example 0
             */
            number: number;
            /**
             * @description Image file size, in bytes.
             * @example 21972
             */
            size: number;
            /**
             * @description The URL to download the image.
             * @example https://bucket.s3.amazonaws.com/123/456.png
             */
            url: string;
        };
        /** @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
         *     and saves them as PNG images. This object contains the image and metadata of a single page. */
        PageSchema3: {
            /**
             * Format: uuid
             * @description A unique ID of the image.
             */
            id: string;
            /**
             * @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types) of the image.
             * @example image/png
             */
            mimetype: string;
            /**
             * @description The page number in the PDF document, from 0.
             * @example 0
             */
            number: number;
            /**
             * @description Image file size, in bytes.
             * @example 21972
             */
            size: number;
            /**
             * @description The URL to download the image.
             * @example https://bucket.s3.amazonaws.com/123/456.png
             */
            url: string;
        };
        PartiallyPaidPayload: {
            /** @description How much was paid on the invoice (in minor units). */
            amount_paid: number;
        };
        PartnerMetadata: {
            /** @description Metadata for partner needs */
            metadata: {
                [key: string]: unknown;
            };
        };
        PartnerMetadataResponse: {
            /** @description Metadata for partner needs */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        "PartnerProjectSettingsPayload-Input": {
            /** @description Default API version for partner. */
            api_version?: components["schemas"]["APIVersion"] | null;
            /** @description Commercial conditions for receivables. */
            commercial_conditions?: string[] | null;
            /** @description Custom currency exchange rates. */
            currency?: components["schemas"]["CurrencySettings-Input"] | null;
            /** @description A default role to provision upon new entity creation. */
            default_role?: {
                [key: string]: unknown;
            } | null;
            /** @description Settings for email and mailboxes. */
            mail?: components["schemas"]["MailSettings"] | null;
            /** @description Settings for the payables module. */
            payable?: components["schemas"]["PayableSettings"] | null;
            /** @description Settings for the payments module. */
            payments?: components["schemas"]["PaymentsSettings-Input"] | null;
            /** @description Settings for the receivables module. */
            receivable?: components["schemas"]["ReceivableSettings"] | null;
            /** @description Measurement units. */
            units?: components["schemas"]["Unit"][] | null;
            website?: string | null;
        };
        "PartnerProjectSettingsPayload-Output": {
            /** @description Default API version for partner. */
            api_version?: components["schemas"]["APIVersion"] | null;
            /** @description Commercial conditions for receivables. */
            commercial_conditions?: string[] | null;
            /** @description Custom currency exchange rates. */
            currency?: components["schemas"]["CurrencySettings-Output"] | null;
            /** @description A default role to provision upon new entity creation. */
            default_role?: {
                [key: string]: unknown;
            } | null;
            /** @description Settings for email and mailboxes. */
            mail?: components["schemas"]["MailSettings"] | null;
            /** @description Settings for the payables module. */
            payable?: components["schemas"]["PayableSettings"] | null;
            /** @description Settings for the payments module. */
            payments?: components["schemas"]["PaymentsSettings-Output"] | null;
            /** @description Settings for the receivables module. */
            receivable?: components["schemas"]["ReceivableSettings"] | null;
            /** @description Measurement units. */
            units?: components["schemas"]["Unit"][] | null;
            website?: string | null;
        };
        PartnersPortalProjectResponse: {
            /** Format: uuid */
            id: string;
            company: components["schemas"]["CompanyResponse"];
            /** Format: uuid */
            created_by_user_id: string;
            description?: string | null;
            /** @default EU sandbox */
            environment: components["schemas"]["EnvironmentEnum"];
            features: components["schemas"]["FeaturesResponse"][];
            name: string;
            /** @default Germany */
            region: components["schemas"]["AllowedCountriesNames"];
        };
        PartnersPortalProjectUpdateRequest: {
            description?: string | null;
            environment?: components["schemas"]["EnvironmentEnum"] | null;
            features?: string[] | null;
            name?: string | null;
            project_settings?: components["schemas"]["PartnersPortalProjectsSettingsRequest"] | null;
            region?: components["schemas"]["AllowedCountriesNames"] | null;
        };
        PartnersPortalProjectsRequest: {
            description?: string | null;
            /** @default EU sandbox */
            environment: components["schemas"]["EnvironmentEnum"];
            name: string;
            /** @default Germany */
            region: components["schemas"]["AllowedCountriesNames"];
        };
        PartnersPortalProjectsSettingsRequest: {
            currency: components["schemas"]["CurrencyEnum"];
            units?: components["schemas"]["Unit"][] | null;
        };
        PartnersPortalProjectsSettingsResponse: {
            currency?: components["schemas"]["CurrencyEnum"] | null;
            /** Format: uuid */
            project_id: string;
            units?: components["schemas"]["Unit"][] | null;
        };
        PatchSettingsPayload: {
            accounting?: components["schemas"]["AccountingSettings"] | null;
            /**
             * @description Automatically attempt to find a corresponding purchase order for all incoming payables.
             * @default true
             */
            allow_purchase_order_autolinking: boolean | null;
            currency?: components["schemas"]["CurrencySettings-Input"] | null;
            document_ids?: components["schemas"]["DocumentIDsSettingsRequest"] | null;
            /** @description Settings for rendering documents in PDF format. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings-Input"];
            /**
             * @description This setting affects how PDF is generated for paid accounts receivable invoices. If set to `true`, once an invoice is fully paid its PDF version is updated to display the amount paid and the payment-related features are removed.
             *
             *     The PDF file gets regenerated at the moment when an invoice becomes paid. It is not issued as a separate document, and the original PDF invoice is no longer available.
             *
             *     This field is deprecated and will be replaced by `document_rendering.invoice.generate_paid_invoice_pdf`.
             * @default false
             */
            generate_paid_invoice_pdf: boolean;
            language?: components["schemas"]["LanguageCodeEnum"] | null;
            /** @description Email settings for the entity */
            mail?: components["schemas"]["EntityMailSettings"] | null;
            /** @description Auto tagging settings for all incoming OCR payable documents. */
            payables_ocr_auto_tagging?: components["schemas"]["OcrAutoTaggingSettingsRequest"][] | null;
            /**
             * @description If enabled, the approval policy will be skipped and the payable will be moved to `waiting_to_be_paid` status.
             * @default false
             */
            payables_skip_approval_flow: boolean;
            /**
             * @description Payment preferences for entity to automate calculating suggested payment date based on payment terms and entity preferences.
             * @default working_capital
             */
            payment_priority: components["schemas"]["PaymentPriorityEnum"] | null;
            /**
             * @description Sets the default behavior of whether a signature is required to accept quotes.
             * @default false
             */
            quote_signature_required: boolean;
            /** @default compliant */
            receivable_edit_flow: components["schemas"]["ReceivableEditFlow"] | null;
            reminder?: components["schemas"]["RemindersSettings"] | null;
            /**
             * @description Defines whether the amount discounts (for percentage discounts it does not matter) on VAT inclusive invoices will be applied on amounts including VAT or excluding VAT.
             * @default exclusive
             */
            vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
            /**
             * @description Defines whether the prices of products in receivables will already include VAT or not.
             * @default exclusive
             */
            vat_mode: components["schemas"]["VatModeEnum"] | null;
        };
        /** @enum {string} */
        PayableActionEnum: "create" | "read" | "update" | "delete" | "pay" | "approve" | "cancel" | "submit" | "create_from_mail" | "reopen";
        PayableActionSchema: {
            /**
             * @description Action name
             * @default read
             */
            action_name: components["schemas"]["PayableActionEnum"];
            /**
             * @description Permission type
             * @default allowed
             */
            permission: components["schemas"]["PermissionEnum"];
        };
        PayableAggregatedDataResponse: {
            /** @description The total count of payables across all statuses. */
            count: number;
            /** @description A list of aggregated items, each representing a status with its associated sum of the amount field and count. */
            data: components["schemas"]["PayableAggregatedItem"][];
            /** @description The total sum of the amount field for all payables across all statuses. */
            sum_total_amount: number;
        };
        PayableAggregatedItem: {
            /** @description The total count of payables with this specific status. */
            count: number;
            /** @description The status of the payable (e.g., paid, draft, etc.). */
            status: components["schemas"]["PayableStateEnum"];
            /** @description The total sum of the amount field for all payables with this specific status. */
            sum_total_amount: number;
        };
        PayableAnalyticsResponse: {
            data: components["schemas"]["AnalyticsDataPoint"][];
        };
        PayableAttachFile: {
            /** Format: binary */
            file: Blob;
        };
        PayableCreatedEventData: {
            payable_source: components["schemas"]["PayableOriginEnum"];
        };
        PayableCreditNoteData: {
            /**
             * Format: uuid
             * @description The unique identifier of the credit note.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description The credit note's unique document number.
             * @example CN-123456
             */
            document_id?: string;
            /**
             * Format: date
             * @description The date when the credit note was issued, in the YYYY-MM-DD format
             * @example 2024-01-15
             */
            issued_at?: string;
            /**
             * @description The current status of the credit note in its lifecycle
             * @example submitted_for_approval
             */
            status: string;
            /**
             * @description Credit note total amount.
             * @example 1000
             */
            total_amount?: number;
        };
        PayableCreditNoteLinkedEventData: {
            credit_note_document_id?: string;
            credit_note_id: string;
        };
        /** @enum {string} */
        PayableCreditNoteStateEnum: "new" | "draft" | "applied" | "approved" | "rejected" | "canceled" | "submitted_for_approval";
        PayableCreditNoteUnlinkedEventData: {
            credit_note_document_id?: string;
            credit_note_id: string;
        };
        /** @enum {string} */
        PayableCursorFields: "id" | "created_at" | "issued_at";
        /** @enum {string} */
        PayableDimensionEnum: "created_at" | "status" | "counterpart_id" | "currency" | "issued_at" | "due_date" | "project_id";
        /** @description A schema represents address info of the entity */
        PayableEntityAddressSchema: {
            /** @description A city (a full name) where the entity is registered */
            city: string;
            /**
             * @description A country name (as ISO code) where the entity is registered
             * @default DE
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /** @description A street where the entity is registered */
            line1: string;
            /** @description An alternative street used by the entity */
            line2?: string;
            /** @description A postal code of the address where the entity is registered */
            postal_code: string;
            /** @description A state in a country where the entity is registered */
            state?: string;
        };
        /** @description A base for an entity response schema */
        PayableEntityIndividualResponse: {
            /**
             * Format: uuid
             * @description UUID entity ID
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            updated_at: string;
            address: components["schemas"]["PayableEntityAddressSchema"];
            /** @description An official email address of the entity */
            email?: string;
            /** @description A set of metadata describing an individual */
            individual: components["schemas"]["PayableIndividualSchema"];
            /** @description A logo image of the entity */
            logo?: components["schemas"]["FileSchema4"];
            /** @description A phone number of the entity */
            phone?: string;
            /** @description record status, 'active' by default */
            status: components["schemas"]["StatusEnum"];
            /** @description The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered. */
            tax_id?: string;
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        /** @description A base for an entity response schema */
        PayableEntityOrganizationResponse: {
            /**
             * Format: uuid
             * @description UUID entity ID
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            updated_at: string;
            address: components["schemas"]["PayableEntityAddressSchema"];
            /** @description An official email address of the entity */
            email?: string;
            /** @description A logo image of the entity */
            logo?: components["schemas"]["FileSchema4"];
            /** @description A set of metadata describing an organization */
            organization: components["schemas"]["PayableOrganizationSchema"];
            /** @description A phone number of the entity */
            phone?: string;
            /** @description record status, 'active' by default */
            status: components["schemas"]["StatusEnum"];
            /** @description The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered. */
            tax_id?: string;
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        /** @enum {string} */
        PayableHistoryCursorFields: "timestamp";
        /** @enum {string} */
        PayableHistoryEventTypeEnum: "status_changed" | "payable_created" | "payable_updated" | "credit_note_linked" | "credit_note_unlinked" | "file_attached";
        /** @description A paginated list of change history records. */
        PayableHistoryPaginationResponse: {
            data: components["schemas"]["PayableHistoryResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        PayableHistoryResponse: {
            /**
             * Format: uuid
             * @description A unique ID of the history record.
             */
            id: string;
            /**
             * Format: uuid
             * @description ID of the entity user who made the change or trigger the event, or `null` if it was done by using a partner access token.
             */
            entity_user_id?: string;
            /** @description An object containing additional information about the event or change. The object structure varies based on the `event_type`.  */
            event_data: components["schemas"]["PayableStatusChangedEventData"] | components["schemas"]["PayableUpdatedEventData"] | components["schemas"]["PayableCreatedEventData"] | components["schemas"]["PayableCreditNoteLinkedEventData"] | components["schemas"]["PayableCreditNoteUnlinkedEventData"] | components["schemas"]["FileAttachedEventData"];
            /** @description The type of the event or change. */
            event_type: components["schemas"]["PayableHistoryEventTypeEnum"];
            /**
             * Format: uuid
             * @description ID of the payable document that was changed or triggered an event.
             */
            payable_id: string;
            /**
             * Format: date-time
             * @description UTC date and time when the event or change occurred.
             */
            timestamp: string;
        };
        /** @description A schema contains metadata for an individual */
        PayableIndividualSchema: {
            /** Format: date */
            date_of_birth?: string;
            /** @description A first name of an individual */
            first_name: string;
            id_number?: string;
            /** @description A last name of an individual */
            last_name: string;
            /** @description The last four digits of the individual's Social Security number */
            ssn_last_4?: string;
            /** @description A title of an individual */
            title?: string;
        };
        /** @enum {string} */
        PayableMetricEnum: "id" | "total_amount";
        /** @description A schema contains metadata for an organization */
        PayableOrganizationSchema: {
            /** @description Business structure of the company */
            business_structure?: components["schemas"]["EntityBusinessStructure"];
            directors_provided?: boolean;
            executives_provided?: boolean;
            /** @description A code which identifies uniquely a party of a transaction worldwide */
            legal_entity_id?: string;
            /** @description A legal name of an organization */
            legal_name: string;
            owners_provided?: boolean;
            representative_provided?: boolean;
        };
        /** @enum {string} */
        PayableOriginEnum: "upload" | "email" | "einvoicing";
        /** @description A paginated list of payables. */
        PayablePaginationResponse: {
            data: components["schemas"]["PayableResponseSchema"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        PayablePaymentTermDiscount: {
            /** @description The discount percentage in minor units. E.g., 200 means 2%, 1050 means 10.5%. */
            discount: number;
            /** @description The amount of days after the invoice issue date. */
            number_of_days: number;
        };
        PayablePaymentTermFinal: {
            /** @description The amount of days after the invoice issue date. */
            number_of_days: number;
        };
        PayablePaymentTermsCreatePayload: {
            description?: string;
            name: string;
            term_1?: components["schemas"]["PayablePaymentTermDiscount"];
            term_2?: components["schemas"]["PayablePaymentTermDiscount"];
            term_final: components["schemas"]["PayablePaymentTermFinal"];
        };
        /** @description Represents an Accounts Payable document received from a vendor or supplier. */
        PayableResponseSchema: {
            /**
             * Format: uuid
             * @description A unique ID assigned to this payable.
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC date and time when this payable was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC date and time when this payable was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
             */
            updated_at: string;
            /**
             * @description How much is left to be paid on the invoice (in minor units).
             * @example 1000
             */
            amount_due?: number;
            /**
             * @description How much was paid on the invoice (in minor units).
             * @example 1000
             */
            amount_paid?: number;
            /**
             * @description How much is left to be paid on the invoice (in minor units) with discounts from payment terms.
             * @example 1000
             */
            amount_to_pay?: number;
            /**
             * Format: uuid
             * @description Id of existing approval policy that applies to this payable, if any. A policy is applied if the payable matches the policy trigger conditions.
             */
            approval_policy_id?: string;
            /** @description Object representing de-normalized counterpart data. Filled at the moment of invoice submitting for approval or payment. */
            counterpart?: components["schemas"]["CounterpartRawData"];
            /**
             * Format: uuid
             * @description The ID of counterpart address object stored in counterparts service
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description The ID of counterpart bank account object stored in counterparts service
             */
            counterpart_bank_account_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart object that represents the vendor or supplier.
             */
            counterpart_id?: string;
            /** @description Object representing counterpart data which was extracted by OCR. Used for informational purposes. */
            counterpart_raw_data?: components["schemas"]["CounterpartRawData"];
            /**
             * Format: uuid
             * @description The ID of counterpart VAT ID object stored in counterparts service
             */
            counterpart_vat_id_id?: string;
            /**
             * Format: uuid
             * @description The ID of the role that the entity user who created this payable had at that time. If the payable was created using a partner access token, the value is `null`.
             */
            created_by_role_id?: string;
            /** @description The list of linked credit notes of the payable. */
            credit_notes: components["schemas"]["PayableCreditNoteData"][];
            /**
             * @description The [currency code](https://docs.monite.com/references/currencies) of the currency used in the payable.
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            currency_exchange?: components["schemas"]["CurrencyExchangeSchema2"];
            /** @description An arbitrary description of this payable. */
            description?: string;
            /**
             * @description The value of the additional discount that will be applied to the total amount. in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 500
             */
            discount?: number;
            /**
             * @description A unique invoice number assigned by the invoice issuer for payment tracking purposes. This is different from `id` which is an internal ID created automatically by Monite.
             * @example DE2287
             */
            document_id?: string;
            /**
             * Format: date
             * @description The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date.
             */
            due_date?: string;
            /**
             * Format: uuid
             * @description The ID of the entity to which the payable was issued.
             */
            entity_id: string;
            /** @description The original file from which this payable was created. */
            file?: components["schemas"]["FileSchema"];
            /**
             * Format: uuid
             * @description File id to retrieve file info from file saver.
             */
            file_id?: string;
            /**
             * Format: date
             * @description The date when the payable was issued, in the YYYY-MM-DD format.
             */
            issued_at?: string;
            /**
             * Format: uuid
             * @description The ID of the entity user who marked this document as paid.
             * @example 71e8875a-43b3-434f-b12a-54c84c176ef3
             */
            marked_as_paid_by_entity_user_id?: string;
            /**
             * @description An arbitrary comment that describes how and when this payable was paid.
             * @example Was paid partly in the end of the month.
             */
            marked_as_paid_with_comment?: string;
            /**
             * Format: uuid
             * @description Id of OCR request to match asynchronous result of processing payable.
             */
            ocr_request_id?: string;
            /** @description The status of the data recognition process using OCR. The 'processing' status means that the data recognition is in progress and the user needs to wait for the data enrichment. The 'error' status indicates that some error occurred on the OCR side and the user can fill in the data manually. The 'success' status means the data recognition has been successfully completed, after which the user can check the data if desired and enrich or correct it. */
            ocr_status?: components["schemas"]["OcrStatusEnum"];
            /** @description Data extracted from the uploaded payable by OCR. */
            other_extracted_data?: components["schemas"]["OCRResponseInvoiceReceiptData"] | components["schemas"]["OcrRecognitionResponse"];
            /**
             * Format: date-time
             * @description The date by which the payable was paid
             */
            paid_at?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /** @description Specifies how this payable was created in Monite: `upload` - created via an API call, `email` - sent via email to the entity's mailbox. */
            payable_origin: components["schemas"]["PayableOriginEnum"];
            /** @description The number of days to pay with potential discount for options shorter than due_date */
            payment_terms?: components["schemas"]["PayablePaymentTermsCreatePayload"];
            /**
             * Format: uuid
             * @description Project id of a payable.
             */
            project_id?: string;
            /**
             * Format: uuid
             * @description The identifier of the purchase order to which this payable belongs.
             */
            purchase_order_id?: string;
            /**
             * Format: email
             * @description The email address from which the invoice was sent to the entity.
             * @example hello@example.com
             */
            sender?: string;
            /** @description Specifies how the property values of this payable were provided: `ocr` - Monite OCR service extracted the values from the provided PDF or image file, `user_specified` - values were added or updated via an API call. */
            source_of_payable_data: components["schemas"]["SourceOfPayableDataEnum"];
            /** @description The [status](https://docs.monite.com/accounts-payable/payables/index) of the payable. */
            status: components["schemas"]["PayableStateEnum"];
            /**
             * @description The subtotal amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1250
             */
            subtotal?: number;
            /** @description The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0. */
            suggested_payment_term?: components["schemas"]["SuggestedPaymentTerm"];
            /** @description A list of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable. */
            tags?: components["schemas"]["TagReadSchema"][];
            /**
             * @description Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.
             * @example 2000
             */
            tax?: number;
            /**
             * @description Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 250
             */
            tax_amount?: number;
            /**
             * @description The total amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1500
             */
            total_amount?: number;
            /** @description The total price of the payable in [minor units](https://docs.monite.com/references/currencies#minor-units), excluding all issued credit notes. */
            total_amount_with_credit_notes?: number;
            /** Format: uuid */
            was_created_by_user_id?: string;
        };
        "PayableSchema-Input": {
            /** @description List of actions */
            actions?: components["schemas"]["PayableActionSchema"][];
            /**
             * @description Object type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            object_type: "payable";
        };
        "PayableSchema-Output": {
            /** @description List of actions */
            actions?: components["schemas"]["PayableActionSchema"][];
            /**
             * @description Object type (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            object_type: "payable";
        };
        PayableSettings: {
            /** @default false */
            allow_cancel_duplicates_automatically: boolean | null;
            /** @default false */
            allow_counterpart_autocreation: boolean | null;
            /** @default false */
            allow_counterpart_autolinking: boolean | null;
            /** @default false */
            allow_credit_note_autolinking: boolean | null;
            /** Format: uri */
            approve_page_url: string;
            /** @description A state each new payable will have upon creation */
            default_state?: string | null;
            /**
             * @description Partners can set this to True or False to control line item detection in OCR flows.
             * @default true
             */
            enable_line_items: boolean;
            /** @default false */
            skip_approval_for_paid_invoice: boolean | null;
        };
        /** @enum {string} */
        PayableStateEnum: "draft" | "new" | "approve_in_progress" | "waiting_to_be_paid" | "partially_paid" | "paid" | "canceled" | "rejected";
        PayableStatusChangedEventData: {
            new_status: components["schemas"]["PayableStateEnum"];
            old_status: components["schemas"]["PayableStateEnum"];
        };
        PayableTemplatesVariable: {
            description: string;
            name: string;
        };
        PayableTemplatesVariablesObject: {
            object_subtype: components["schemas"]["PayablesVariableType"];
            object_type: components["schemas"]["ObjectType"];
            variables: components["schemas"]["PayableTemplatesVariable"][];
        };
        PayableTemplatesVariablesObjectList: {
            data: components["schemas"]["PayableTemplatesVariablesObject"][];
        };
        /** @description This schema is used to update the data of an existing payable. */
        PayableUpdateSchema: {
            /** @description How much was paid on the invoice (in minor units). */
            amount_paid?: number;
            /**
             * Format: uuid
             * @description The ID of counterpart address object stored in counterparts service
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description The ID of counterpart bank account object stored in counterparts service
             */
            counterpart_bank_account_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart object that represents the vendor or supplier.
             */
            counterpart_id?: string;
            /** @description Allows to fix some data in counterpart recognised fields to correct them in order to make autolinking happen. */
            counterpart_raw_data?: components["schemas"]["CounterpartRawDataUpdateRequest"];
            /**
             * Format: uuid
             * @description The ID of counterpart VAT ID object stored in counterparts service
             */
            counterpart_vat_id_id?: string;
            /**
             * @description The [currency code](https://docs.monite.com/references/currencies) of the currency used in the payable.
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description An arbitrary description of this payable. */
            description?: string;
            /**
             * @description The value of the additional discount that will be applied to the total amount. in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 500
             */
            discount?: number;
            /**
             * @description A unique invoice number assigned by the invoice issuer for payment tracking purposes.
             * @example DE2287
             */
            document_id?: string;
            /**
             * Format: date
             * @description The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date.
             */
            due_date?: string;
            /**
             * Format: date
             * @description The date when the payable was issued, in the YYYY-MM-DD format.
             */
            issued_at?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /** @description The number of days to pay with potential discount for options shorter than due_date */
            payment_terms?: components["schemas"]["PayablePaymentTermsCreatePayload"];
            /**
             * Format: uuid
             * @description The project ID of the payable.
             */
            project_id?: string;
            /**
             * Format: uuid
             * @description The identifier of the purchase order to which this payable belongs.
             */
            purchase_order_id?: string;
            /**
             * Format: email
             * @description The email address from which the invoice was sent to the entity.
             * @example hello@example.com
             */
            sender?: string;
            /**
             * @description The subtotal amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1250
             */
            subtotal?: number;
            /** @description The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0. */
            suggested_payment_term?: components["schemas"]["SuggestedPaymentTerm"];
            /** @description A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable. */
            tag_ids?: string[];
            /**
             * @description Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.
             * @example 2000
             */
            tax?: number;
            /**
             * @description Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 250
             */
            tax_amount?: number;
            /**
             * @description The total amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 15000
             */
            total_amount?: number;
        };
        PayableUpdatedEventData: Record<string, never>;
        PayableUploadFile: {
            /** Format: binary */
            file: Blob;
        };
        /** @description This schema is used to create a new payable by providing its data along with the original file. */
        PayableUploadWithDataSchema: {
            /** @description Base64-encoded contents of the original issued payable. The file is provided for reference purposes as the original source of the data.
             *
             *      Any file formats are allowed. The most common formats are PDF, PNG, JPEG, TIFF. */
            base64_encoded_file?: string;
            /**
             * Format: uuid
             * @description The ID of counterpart address object stored in counterparts service
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description The ID of counterpart bank account object stored in counterparts service
             */
            counterpart_bank_account_id?: string;
            /**
             * Format: uuid
             * @description The ID of the counterpart object that represents the vendor or supplier.
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description The ID of counterpart VAT ID object stored in counterparts service
             */
            counterpart_vat_id_id?: string;
            /**
             * @description The [currency code](https://docs.monite.com/references/currencies) of the currency used in the payable.
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description An arbitrary description of this payable. */
            description?: string;
            /**
             * @description The value of the additional discount that will be applied to the total amount. in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 500
             */
            discount?: number;
            /**
             * @description A unique invoice number assigned by the invoice issuer for payment tracking purposes.
             * @example DE2287
             */
            document_id?: string;
            /**
             * Format: date
             * @description The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date.
             */
            due_date?: string;
            /**
             * @description The original file name.
             * @example invoice.pdf
             */
            file_name?: string;
            /**
             * Format: date
             * @description The date when the payable was issued, in the YYYY-MM-DD format.
             */
            issued_at?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /** @description The number of days to pay with potential discount for options shorter than due_date */
            payment_terms?: components["schemas"]["PayablePaymentTermsCreatePayload"];
            /**
             * Format: uuid
             * @description The ID of a project
             */
            project_id?: string;
            /**
             * Format: uuid
             * @description The identifier of the purchase order to which this payable belongs.
             */
            purchase_order_id?: string;
            /**
             * Format: email
             * @description The email address from which the invoice was sent to the entity.
             * @example hello@example.com
             */
            sender?: string;
            /**
             * @description The subtotal amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 1250
             */
            subtotal?: number;
            /** @description The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0. */
            suggested_payment_term?: components["schemas"]["SuggestedPaymentTerm"];
            /** @description A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable. */
            tag_ids?: string[];
            /**
             * @description Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%. 1050 means 10.5%.
             * @example 2000
             */
            tax?: number;
            /**
             * @description Tax amount in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 250
             */
            tax_amount?: number;
            /**
             * @description The total amount to be paid, in [minor units](https://docs.monite.com/references/currencies#minor-units). For example, $12.50 is represented as 1250.
             * @example 15000
             */
            total_amount?: number;
        };
        PayableValidationResponse: {
            /**
             * Format: uuid
             * @description A unique ID assigned to this payable.
             */
            id: string;
            validation_errors?: Record<string, never>[];
        };
        PayableValidationsResource: {
            required_fields: components["schemas"]["PayablesFieldsAllowedForValidate"][];
        };
        PayableValidationsUpdateRequest: {
            required_fields: components["schemas"]["PayablesFieldsAllowedForValidate"][];
        };
        /** @enum {string} */
        PayablesFieldsAllowedForValidate: "currency" | "document_id" | "due_date" | "issued_at" | "tax_amount" | "total_amount" | "subtotal" | "description" | "suggested_payment_term" | "payment_terms" | "tax" | "sender" | "file_id" | "counterpart_id" | "counterpart_bank_account_id" | "counterpart_address_id" | "counterpart_vat_id_id" | "line_items" | "line_items.quantity" | "line_items.unit_price" | "line_items.tax" | "line_items.ledger_account_id" | "line_items.accounting_tax_rate_id" | "line_items.unit" | "line_items.name" | "line_items.description" | "line_items.subtotal" | "line_items.total" | "line_items.tax_amount";
        /** @enum {string} */
        PayablesVariableType: "payables_purchase_order" | "payables_notify_approver";
        PayerAccountResponse: {
            /**
             * Format: uuid
             * @description ID of a payment account
             */
            id: string;
            /** @description List of bank accounts */
            bank_accounts?: components["schemas"]["BankAccount"][];
            /** @description Display name of a payment account */
            name?: string;
            /** @description Type of a payment account. Can be `entity` or `counterpart` */
            type: components["schemas"]["PaymentAccountType"];
        };
        PayerAccountResponse2: {
            /**
             * Format: uuid
             * @description ID of a payment account
             */
            id: string;
            /** @description List of authorized bank accounts */
            authorized_bank_accounts?: components["schemas"]["AuthorizedBankAccount"][];
            /** @description List of bank accounts */
            bank_accounts?: components["schemas"]["BankAccount"][];
            /** @description Display name of a payment account */
            name?: string;
            /** @description Type of a payment account. Can be `entity` or `counterpart` */
            type: components["schemas"]["PaymentAccountType"];
        };
        PaymentAccountObject: {
            /**
             * Format: uuid
             * @description ID of a payment account
             */
            id: string;
            /** @description Type of a payment account. Can be `entity` or `counterpart` */
            type: components["schemas"]["PaymentAccountType"];
        };
        /** @enum {string} */
        PaymentAccountType: "entity" | "counterpart";
        PaymentIntent: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            updated_at: string;
            application_fee_amount?: number;
            object?: components["schemas"]["PaymentObject"];
            provider?: string;
            selected_payment_method?: string;
            status: string;
        };
        /** @enum {string} */
        PaymentIntentAccountType: "IBAN";
        /** @enum {string} */
        PaymentIntentCursorFields: "id" | "created_at";
        PaymentIntentHistory: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uuid */
            payment_intent_id: string;
            status: string;
        };
        PaymentIntentHistoryResponse: {
            /** @description Payment intent history */
            data: components["schemas"]["PaymentIntentHistory"][];
        };
        /** @enum {string} */
        PaymentIntentPayoutMethod: "bank_account" | "paper_check";
        PaymentIntentResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            updated_at: string;
            amount: number;
            application_fee_amount?: number;
            /** Format: uuid */
            batch_payment_id?: string;
            currency: string;
            invoice?: components["schemas"]["Invoice"];
            object?: components["schemas"]["PaymentObject"];
            payer?: components["schemas"]["PayerAccountResponse"];
            /** Format: uuid */
            payment_link_id?: string;
            payment_methods: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
            payment_reference?: string;
            provider?: string;
            recipient: components["schemas"]["RecipientAccountResponse"];
            selected_payment_method?: components["schemas"]["MoniteAllPaymentMethodsTypes"];
            status: string;
        };
        PaymentIntentWithSecrets: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            updated_at: string;
            airwallex_data?: components["schemas"]["AirwallexData"];
            amount: number;
            application_fee_amount?: number;
            /** Format: uuid */
            batch_payment_id?: string;
            /** @default true */
            confirm_on_backend: boolean;
            currency: string;
            invoice?: components["schemas"]["Invoice"];
            key?: components["schemas"]["StripeData"];
            object?: components["schemas"]["PaymentObject"];
            payer?: components["schemas"]["PayerAccountResponse2"];
            /** Format: uuid */
            payment_link_id?: string;
            payment_methods: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
            payment_reference?: string;
            provider?: string;
            recipient: components["schemas"]["RecipientAccountResponse2"];
            selected_payment_method?: components["schemas"]["MoniteAllPaymentMethodsTypes"];
            status: string;
            stripe_data?: components["schemas"]["StripeData"];
        };
        PaymentIntentsListResponse: {
            data: components["schemas"]["PaymentIntentResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        PaymentIntentsRecipient: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            bank_account_id?: string;
            /** @default bank_account */
            payout_method: components["schemas"]["PaymentIntentPayoutMethod"];
            /** @enum {string} */
            type: "counterpart";
        };
        PaymentMethod: {
            direction: components["schemas"]["PaymentMethodDirection"];
            name: components["schemas"]["MoniteAllPaymentMethods"];
            status: components["schemas"]["PaymentMethodStatus"];
            type: components["schemas"]["MoniteAllPaymentMethodsTypes"];
        };
        /** @enum {string} */
        PaymentMethodDirection: "receive" | "send";
        PaymentMethodRequirements: {
            /** Format: date-time */
            current_deadline?: string;
            currently_due: string[];
            eventually_due: string[];
            past_due: string[];
            pending_verification: string[];
        };
        /** @enum {string} */
        PaymentMethodStatus: "active" | "inactive";
        PaymentMethodsConfirmPaymentPayload: {
            payment_method_id: string;
        };
        PaymentMethodsConfirmResponse: {
            client_secret: string;
            is_next_action_needed: boolean;
        };
        PaymentObject: {
            /** Format: uuid */
            id: string;
            type: components["schemas"]["PaymentObjectType"];
        };
        PaymentObjectPayable: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            type: "payable";
        };
        /** @enum {string} */
        PaymentObjectType: "payable" | "receivable";
        PaymentPageFooter: {
            /** @description Url to partner logo image file. If missing, then monite logo will be used. */
            logo_url: string | null;
            /** @description Url to partner website. */
            website_url?: string | null;
        };
        PaymentPageTheme: {
            background_color?: string | null;
            border_radius?: string | null;
            button?: components["schemas"]["ButtonTheme"] | null;
            card?: components["schemas"]["CardTheme"] | null;
            font_color?: string | null;
            font_family?: string | null;
            font_link_href?: string | null;
            logo_src?: string | null;
        };
        PaymentPageThemeWithFooter: {
            background_color?: string | null;
            border_radius?: string | null;
            button?: components["schemas"]["ButtonTheme"] | null;
            card?: components["schemas"]["CardTheme"] | null;
            font_color?: string | null;
            font_family?: string | null;
            font_link_href?: string | null;
            footer?: components["schemas"]["PaymentPageFooter"] | null;
            logo_src?: string | null;
        };
        /** @enum {string} */
        PaymentPriorityEnum: "working_capital" | "balanced" | "bottom_line";
        /** @description Contains information about a payment received for an invoice. */
        PaymentReceivedEventData: {
            /** @description The remaining amount due of the invoice, in [minor units](https://docs.monite.com/references/currencies#minor-units) of the currency. For example, $12.5 is represented as 1250. */
            amount_due: number;
            /** @description The payment amount, in minor units of the currency. */
            amount_paid: number;
            /** @description A user-defined comment about this payment, or `null` if no comment was provided. Comments are available only for payments recorded via `POST /receivables/{receivable_id}/mark_as_paid` and `POST /receivables/{receivable_id}/mark_as_partially_paid`. */
            comment?: string;
        };
        /** @enum {string} */
        PaymentRecordCursorFields: "paid_at" | "amount" | "overpaid_amount";
        PaymentRecordHistoryResponse: {
            /** Format: uuid */
            entity_user_id?: string;
            status: components["schemas"]["PaymentRecordStatusEnum"];
            /**
             * Format: date-time
             * @description Timestamp of the change in a history
             */
            timestamp: string;
        };
        PaymentRecordMarkAsSucceededRequest: {
            /**
             * Format: date-time
             * @description Timestamp marking when the payment was executed.
             */
            paid_at: string;
            /** @description Raw status string of the external payment intent. */
            payment_intent_status?: string;
        };
        PaymentRecordObjectRequest: {
            /**
             * Format: uuid
             * @description ID of the invoice
             */
            id: string;
            type: components["schemas"]["ObjectTypeEnum"];
        };
        PaymentRecordObjectResponse: {
            /**
             * Format: uuid
             * @description ID of the invoice
             */
            id: string;
            /** @description Status, in which object has been moved */
            new_status: string;
            /** @description Status, in which object was before payment */
            old_status: string;
            type: components["schemas"]["ObjectTypeEnum"];
        };
        PaymentRecordRequest: {
            /** @description Positive amount in case of successful payment, negative amount in case of payment failure or refund, represented in minor currency units (e.g., cents). */
            amount: number;
            /** @description Currency code (ISO 4217) indicating the currency in which the payment was made. */
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * Format: uuid
             * @description ID of the user associated with the payment, if applicable.
             */
            entity_user_id?: string;
            /** @description Reference object linked to this payment record, indicating the type (receivable or payable) and its identifier. */
            object: components["schemas"]["PaymentRecordObjectRequest"];
            /**
             * Format: date-time
             * @description Timestamp marking when the payment was executed. Null if payment hasn't occurred yet.
             */
            paid_at?: string;
            /**
             * Format: uuid
             * @description Identifier for an payment intent.
             */
            payment_intent_id?: string;
            /** @description Raw status string of the external payment intent. */
            payment_intent_status?: string;
            /** @description Payment method used or planned for the transaction. */
            payment_method?: string;
            /**
             * Format: date
             * @description Scheduled date for future payments, required when the payment is planned but not yet executed.
             */
            planned_payment_date?: string;
            /**
             * @description Status of the payment record indicating its current stage (e.g., created, processing, succeeded).
             * @default succeeded
             * @enum {string}
             */
            status: "created" | "processing" | "succeeded";
        };
        PaymentRecordResponse: {
            /** Format: uuid */
            id: string;
            /** @description Positive amount in case of successful payment, negative amount in case of payment failure or refund, represented in minor currency units (e.g., cents). */
            amount: number;
            /** @description Currency code (ISO 4217) indicating the currency in which the payment was made. */
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * Format: uuid
             * @description ID of the user associated with the payment, if applicable.
             */
            entity_user_id?: string;
            /** @description History of the payment record. */
            history: components["schemas"]["PaymentRecordHistoryResponse"][];
            is_external: boolean;
            object: components["schemas"]["PaymentRecordObjectResponse"];
            /**
             * @description Filled in a case, if payment amount is more, than total_amount
             * @default 0
             */
            overpaid_amount: number;
            /**
             * Format: date-time
             * @description Timestamp marking when the payment was executed. Null if payment hasn't occurred yet.
             */
            paid_at?: string;
            /**
             * Format: uuid
             * @description Identifier for an payment intent.
             */
            payment_intent_id?: string;
            /** @description Raw status string of the external payment intent. */
            payment_intent_status?: string;
            /** @description Payment method used or planned for the transaction. */
            payment_method?: string;
            /**
             * Format: date
             * @description Scheduled date for future payments, required when the payment is planned but not yet executed.
             */
            planned_payment_date?: string;
            /**
             * @description The current status of the payment record. Possible values: `created`, `processing`, `succeeded`, `canceled`.
             * @default succeeded
             */
            status: string;
        };
        PaymentRecordResponseList: {
            data: components["schemas"]["PaymentRecordResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        PaymentRecordStatusEnum: "created" | "processing" | "succeeded" | "canceled";
        PaymentRecordStatusUpdateRequest: {
            /** @description Raw status string of the external payment intent. */
            payment_intent_status?: string;
        };
        PaymentRecordUpdateRequest: {
            /** @description Positive amount in case of successful payment, negative amount in case of payment failure or refund, represented in minor currency units (e.g., cents). */
            amount?: number;
            /** @description Currency code (ISO 4217) indicating the currency in which the payment was made. */
            currency?: components["schemas"]["CurrencyEnum"];
            /**
             * Format: uuid
             * @description ID of the user associated with the payment, if applicable.
             */
            entity_user_id?: string;
            /** @description Reference object linked to this payment record, indicating the type (receivable or payable) and its identifier. */
            object?: components["schemas"]["PaymentRecordObjectRequest"];
            /**
             * Format: date-time
             * @description Timestamp marking when the payment was executed. Null if payment hasn't occurred yet.
             */
            paid_at?: string;
            /**
             * Format: uuid
             * @description Identifier for an payment intent.
             */
            payment_intent_id?: string;
            /** @description Raw status string of the external payment intent. */
            payment_intent_status?: string;
            /** @description Payment method used or planned for the transaction. */
            payment_method?: string;
            /**
             * Format: date
             * @description Scheduled date for future payments, required when the payment is planned but not yet executed.
             */
            planned_payment_date?: string;
        };
        PaymentReminder: {
            name: string;
            recipients?: components["schemas"]["Recipients"];
            /** @description Reminder to send for first payment term */
            term_1_reminder?: components["schemas"]["Reminder"];
            /** @description Reminder to send for second payment term */
            term_2_reminder?: components["schemas"]["Reminder"];
            /** @description Reminder to send for final payment term */
            term_final_reminder?: components["schemas"]["Reminder"];
        };
        PaymentReminderResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the PaymentReminder was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the PaymentReminder was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** Format: uuid */
            entity_id: string;
            name: string;
            recipients?: components["schemas"]["Recipients"];
            status: components["schemas"]["StatusEnum"];
            /** @description Reminder to send for first payment term */
            term_1_reminder?: components["schemas"]["Reminder"];
            /** @description Reminder to send for second payment term */
            term_2_reminder?: components["schemas"]["Reminder"];
            /** @description Reminder to send for final payment term */
            term_final_reminder?: components["schemas"]["Reminder"];
        };
        PaymentReminderUpdateRequest: {
            name?: string;
            recipients?: components["schemas"]["Recipients"];
            /** @description Reminder to send for first payment term */
            term_1_reminder?: components["schemas"]["Reminder"];
            /** @description Reminder to send for second payment term */
            term_2_reminder?: components["schemas"]["Reminder"];
            /** @description Reminder to send for final payment term */
            term_final_reminder?: components["schemas"]["Reminder"];
        };
        PaymentRequirements: {
            /** Format: date-time */
            current_deadline?: string;
            currently_due: string[];
            eventually_due: string[];
            pending_verification: string[];
        };
        PaymentTerms: {
            /** Format: uuid */
            id?: string;
            /** @description Description of the payment term. */
            description?: string;
            name?: string;
            /** @description The first tier of the payment term. Represents the terms of the first early discount. */
            term_1?: components["schemas"]["InlineTermDiscount"];
            /** @description The second tier of the payment term. Defines the terms of the second early discount. */
            term_2?: components["schemas"]["InlineTermDiscount"];
            /** @description The final tier of the payment term. Defines the invoice due date. */
            term_final: components["schemas"]["InlineTermFinal"];
        };
        PaymentTermsCreatePayload: {
            description?: string;
            name: string;
            /** @description The first tier of the payment term. Represents the terms of the first early discount. */
            term_1?: components["schemas"]["TermDiscountDays"];
            /** @description The second tier of the payment term. Defines the terms of the second early discount. */
            term_2?: components["schemas"]["TermDiscountDays"];
            /** @description The final tier of the payment term. Defines the invoice due date. */
            term_final: components["schemas"]["TermFinalDays"];
        };
        PaymentTermsListResponse: {
            data?: components["schemas"]["PaymentTermsResponse"][];
        };
        PaymentTermsResponse: {
            /** Format: uuid */
            id: string;
            description?: string;
            name: string;
            /** @description The first tier of the payment term. Represents the terms of the first early discount. */
            term_1?: components["schemas"]["TermDiscountDays"];
            /** @description The second tier of the payment term. Defines the terms of the second early discount. */
            term_2?: components["schemas"]["TermDiscountDays"];
            /** @description The final tier of the payment term. Defines the invoice due date. */
            term_final: components["schemas"]["TermFinalDays"];
        };
        PaymentTermsUpdatePayload: {
            description?: string;
            name?: string;
            /** @description The first tier of the payment term. Represents the terms of the first early discount. */
            term_1?: components["schemas"]["TermDiscountDays"];
            /** @description The second tier of the payment term. Defines the terms of the second early discount. */
            term_2?: components["schemas"]["TermDiscountDays"];
            /** @description The final tier of the payment term. Defines the invoice due date. */
            term_final?: components["schemas"]["TermFinalDays"];
        };
        PaymentsBatchPaymentRequest: {
            /** Format: uuid */
            payer_bank_account_id: string;
            payment_intents: components["schemas"]["SinglePaymentIntent"][];
            /** @enum {string} */
            payment_method: "us_ach";
        };
        PaymentsBatchPaymentResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            error?: Record<string, never>;
            /** Format: uuid */
            payer_bank_account_id: string;
            payment_intents: components["schemas"]["SinglePaymentIntentResponse"][];
            /** @enum {string} */
            payment_method: "us_ach";
            status: components["schemas"]["PaymentsBatchPaymentStatus"];
            total_amount?: number;
        };
        /** @enum {string} */
        PaymentsBatchPaymentStatus: "created" | "processing" | "partially_successful" | "succeeded" | "failed";
        "PaymentsSettings-Input": {
            payment_page_domain?: string | null;
            payment_page_theme?: components["schemas"]["PaymentPageTheme"] | null;
            /** @description The support email address */
            support_email?: string | null;
        };
        "PaymentsSettings-Output": {
            payment_page_domain?: string | null;
            payment_page_theme?: components["schemas"]["PaymentPageTheme"] | null;
            /** @description The support email address */
            support_email?: string | null;
        };
        /** @enum {string} */
        PermissionEnum: "allowed" | "allowed_for_own" | "not_allowed";
        "PermissionSchema-Input": {
            /** @description List of actions */
            actions?: components["schemas"]["ActionSchema"][] | null;
            /**
             * @description Object type
             * @default project
             */
            object_type: components["schemas"]["PortalObjectType"];
        };
        "PermissionSchema-Output": {
            /** @description List of actions */
            actions?: components["schemas"]["ActionSchema"][] | null;
            /**
             * @description Object type
             * @default project
             */
            object_type: components["schemas"]["PortalObjectType"];
        };
        PersonAddressRequest: {
            /** @description City, district, suburb, town, or village */
            city: string;
            /** @description Two-letter country code (ISO 3166-1 alpha-2) */
            country: components["schemas"]["AllowedCountries"];
            /** @description Address line 1 (e.g., street, PO Box, or company name) */
            line1: string;
            /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
            line2?: string | null;
            /** @description ZIP or postal code */
            postal_code: string;
            /** @description State, county, province, or region */
            state?: string | null;
        };
        PersonAddressResponse: {
            /** @description City, district, suburb, town, or village */
            city: string;
            /** @description Two-letter country code (ISO 3166-1 alpha-2) */
            country: string;
            /** @description Address line 1 (e.g., street, PO Box, or company name) */
            line1: string;
            /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
            line2?: string | null;
            /** @description ZIP or postal code */
            postal_code: string;
            /** @description State, county, province, or region */
            state?: string | null;
        };
        PersonOnboardingDocumentsPayload: {
            /** Format: uuid */
            additional_verification_document_back?: string;
            /** Format: uuid */
            additional_verification_document_front?: string;
            /** Format: uuid */
            verification_document_back?: string;
            /** Format: uuid */
            verification_document_front?: string;
        };
        PersonRelationshipRequest: {
            /**
             * @description Whether the person is a director of the account's legal entity
             * @default false
             */
            director: boolean;
            /**
             * @description Whether the person has significant responsibility to control, manage, or direct the organization
             * @default false
             */
            executive: boolean;
            /**
             * @description Whether the person is an owner of the account's legal entity
             * @default false
             */
            owner: boolean;
            /** @description The percent owned by the person of the account's legal entity */
            percent_ownership?: number | null;
            /**
             * @description Whether the person is authorized as the primary representative of the account
             * @default false
             */
            representative: boolean;
            /** @description The person's title (e.g., CEO, Support Engineer) */
            title?: string | null;
        };
        PersonRelationshipResponse: {
            /**
             * @description Whether the person is a director of the account's legal entity
             * @default false
             */
            director: boolean;
            /**
             * @description Whether the person has significant responsibility to control, manage, or direct the organization
             * @default false
             */
            executive: boolean;
            /**
             * @description Whether the person is an owner of the account's legal entity
             * @default false
             */
            owner: boolean;
            /** @description The percent owned by the person of the account's legal entity */
            percent_ownership?: number | null;
            /**
             * @description Whether the person is authorized as the primary representative of the account
             * @default false
             */
            representative: boolean;
            /** @description The person's title (e.g., CEO, Support Engineer) */
            title?: string | null;
        };
        PersonRequest: {
            /** @description The person's address */
            address?: components["schemas"]["PersonAddressRequest"] | null;
            /** @description Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any. */
            citizenship?: components["schemas"]["AllowedCountries"] | null;
            /** @description The person's date of birth */
            date_of_birth?: string | null;
            /**
             * Format: email
             * @description The person's email address
             */
            email: string;
            /** @description The person's first name */
            first_name: string;
            /** @description The person's ID number, as appropriate for their country */
            id_number?: string | null;
            /** @description The person's last name */
            last_name: string;
            /** @description The person's phone number */
            phone?: string | null;
            /** @description Describes the person's relationship to the entity */
            relationship: components["schemas"]["PersonRelationshipRequest"];
            /** @description The last four digits of the person's Social Security number */
            ssn_last_4?: string | null;
        };
        PersonResponse: {
            /**
             * Format: uuid
             * @description The person's unique identifier
             */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the person was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the person was updated
             */
            updated_at: string;
            /** @description The person's address */
            address?: components["schemas"]["PersonAddressResponse"] | null;
            /** @description Required for persons of US entities. The country of the person's citizenship, as a two-letter country code (ISO 3166-1 alpha-2). In case of dual or multiple citizenship, specify any. */
            citizenship?: components["schemas"]["AllowedCountries"] | null;
            /** @description ID of the entity user who created this person, or null if the person was created using a partner access token. */
            created_by_entity_user_id: string | null;
            /** @description The person's date of birth */
            date_of_birth?: string | null;
            /**
             * Format: email
             * @description The person's email address
             */
            email: string;
            /**
             * Format: uuid
             * @description Entity ID
             */
            entity_id: string;
            /** @description The person's first name */
            first_name: string;
            /** @description The person's ID number, as appropriate for their country */
            id_number?: string | null;
            /** @description The person's last name */
            last_name: string;
            /** @description The person's phone number */
            phone?: string | null;
            /** @description Describes the person's relationship to the entity */
            relationship: components["schemas"]["PersonRelationshipResponse"];
            /** @description The last four digits of the person's Social Security number */
            ssn_last_4?: string | null;
        };
        PersonsResponse: {
            /** @description array of objects of type person */
            data: components["schemas"]["PersonResponse"][];
        };
        PhoneNumberVerificationCheckPayload: {
            /** @description Verification code received on phone number */
            code: string;
            /** @description The phone number of person attached to onboarding link */
            phone?: string;
        };
        /** @enum {string} */
        Platform: "xero" | "quickbooks" | "quickbooks_online" | "quickbooks_online_sandbox";
        /** @enum {string} */
        PortalActionEnum: "create" | "read" | "update" | "delete";
        "PortalBizObjectsSchema-Input": {
            /** @description List of objects */
            objects?: components["schemas"]["PermissionSchema-Input"][] | null;
        };
        "PortalBizObjectsSchema-Output": {
            /** @description List of objects */
            objects?: components["schemas"]["PermissionSchema-Output"][] | null;
        };
        /** @enum {string} */
        PortalObjectType: "company" | "user" | "project" | "project_settings" | "secret" | "role";
        /** @enum {string} */
        PortalPermissionEnum: "allowed" | "allowed_for_own" | "not_allowed";
        PortalUserProfileResponseWithOptionalRole: {
            /** Format: uuid */
            id: string;
            avatar?: components["schemas"]["FileSchema3"] | null;
            company: components["schemas"]["CompanyResponse"];
            /** Format: email */
            email: string;
            fullname: string;
            role_id: string | null;
            status: components["schemas"]["PortalUserStatus"];
        };
        /** @enum {string} */
        PortalUserStatus: "sent_confirmation" | "active" | "deleted" | "archived";
        /** @description A preview image generated for a file. */
        PreviewSchema: {
            /** @description The image height in pixels. */
            height: number;
            /** @description The image URL. */
            url: string;
            /** @description The image width in pixels. */
            width: number;
        };
        /** @description A preview image generated for a file. */
        PreviewSchema2: {
            /**
             * @description The image height in pixels.
             * @example 400
             */
            height: number;
            /**
             * @description The image URL.
             * @example https://bucketname.s3.amazonaws.com/1/2/3.png
             */
            url: string;
            /**
             * @description The image width in pixels.
             * @example 200
             */
            width: number;
        };
        /** @description A preview image generated for a file. */
        PreviewSchema3: {
            /**
             * @description The image height in pixels.
             * @example 400
             */
            height: number;
            /**
             * @description The image URL.
             * @example https://bucketname.s3.amazonaws.com/1/2/3.png
             */
            url: string;
            /**
             * @description The image width in pixels.
             * @example 200
             */
            width: number;
        };
        PreviewTemplateRequest: {
            /** @description Body text of the template */
            body: string;
            /** @description Document type of content */
            document_type: components["schemas"]["DocumentObjectTypeRequestEnum"];
            /** @description Lowercase ISO code of language */
            language_code: components["schemas"]["LanguageCodeEnum"];
            /** @description Subject text of the template */
            subject: string;
        };
        PreviewTemplateResponse: {
            body_preview: string;
            subject_preview: string;
        };
        Price: {
            /** @description The currency in which the price of the product is set. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The actual price of the product. */
            value: number;
        };
        Price2: {
            /** @description The currency in which the price of the product is set. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The actual price of the product. */
            value: number;
        };
        PriceFloat: {
            /** @description The currency in which the price of the product is set. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The actual price of the product. */
            value: number;
        };
        /** @description A pricing plan of a financing offer */
        PricingPlan: {
            /** @description Advance rate percentage. 10000 means 100% */
            advance_rate_percentage: number;
            /** @description Transaction fee percentage. 300 means 3.00% */
            fee_percentage: number;
            /** @description This amount of days after which the repayment duration is due. This is only applicable for FIXED_DURATION repayment type */
            repayment_duration_days?: number;
            /** @description Repayment type of the loan. */
            repayment_type: components["schemas"]["WCRepaymentType"];
        };
        ProcessResource: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: uuid */
            created_by?: string;
            /** @description The error for the process. */
            error?: Record<string, never>;
            /** @description The input for the script. */
            input: Record<string, never>;
            /** @description The metadata for the process. */
            metadata: Record<string, never>;
            /** @description The script snapshot taken when script started. */
            script_snapshot?: boolean | number | string | unknown[] | Record<string, never>;
            /** @description Tthe current status of the approval policy process. */
            status: components["schemas"]["ProcessStatusEnum"];
            /** Format: uuid */
            updated_by?: string;
        };
        /** @enum {string} */
        ProcessStatusEnum: "succeeded" | "waiting" | "failed" | "running" | "canceled" | "timed_out";
        /** @enum {string} */
        ProductCursorFields: "name";
        /** @description A paginated list of products and services */
        ProductServicePaginationResponse: {
            data: components["schemas"]["ProductServiceResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        ProductServiceRequest: {
            /** @description Description of the product. */
            description?: string;
            /** @description A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog. */
            external_reference?: string;
            /** Format: uuid */
            ledger_account_id?: string;
            /**
             * Format: uuid
             * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
             */
            measure_unit_id?: string;
            /** @description Name of the product. */
            name: string;
            price?: components["schemas"]["Price2"];
            /** @description The smallest amount allowed for this product. */
            smallest_amount?: number;
            /**
             * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
             * @default product
             */
            type: components["schemas"]["ProductServiceTypeEnum"];
        };
        ProductServiceResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the product.
             */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the product was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the product was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description Description of the product. */
            description?: string;
            /** Format: uuid */
            entity_id: string;
            /** Format: uuid */
            entity_user_id?: string;
            /** @description A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog. */
            external_reference?: string;
            /** Format: uuid */
            ledger_account_id?: string;
            /**
             * Format: uuid
             * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
             */
            measure_unit_id?: string;
            /** @description Name of the product. */
            name: string;
            price?: components["schemas"]["Price2"];
            /** @description The smallest amount allowed for this product. */
            smallest_amount?: number;
            /**
             * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
             * @default product
             */
            type: components["schemas"]["ProductServiceTypeEnum"];
        };
        /** @enum {string} */
        ProductServiceTypeEnum: "product" | "service";
        ProductServiceUpdate: {
            /** @description Description of the product. */
            description?: string;
            /** @description A user-defined identifier of the product. For example, an internal product code or SKU (stock keeping unit). Client applications can use this field to map the products in Monite to an external product catalog. */
            external_reference?: string;
            /** Format: uuid */
            ledger_account_id?: string;
            /**
             * Format: uuid
             * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
             */
            measure_unit_id?: string;
            /** @description Name of the product. */
            name?: string;
            price?: components["schemas"]["Price2"];
            /** @description The smallest amount allowed for this product. */
            smallest_amount?: number;
            /** @description Specifies whether this offering is a product or service. This may affect the applicable tax rates. */
            type?: components["schemas"]["ProductServiceTypeEnum"];
        };
        ProfileAvatarUpdateResponse: {
            avatar: components["schemas"]["FileSchema3"];
        };
        ProjectCreateRequest: {
            /** @description Project code */
            code?: string;
            /** @description Project color */
            color?: string;
            /** @description Description of project */
            description?: string;
            /**
             * Format: date
             * @description Project end date
             */
            end_date?: string;
            /**
             * @description The project name.
             * @example Marketing
             */
            name: string;
            /**
             * Format: uuid
             * @description Parent project ID
             */
            parent_id?: string;
            /** @description Project metadata */
            partner_metadata?: Record<string, never>;
            /**
             * Format: date
             * @description Project start date
             */
            start_date?: string;
            /**
             * @description A list of IDs of user-defined tags (labels) assigned to this project.
             * @default []
             */
            tag_ids: string[];
        };
        /** @enum {string} */
        ProjectCursorFields: "id" | "created_at";
        /** @description A paginated list of projects. */
        ProjectPaginationResponse: {
            data: components["schemas"]["ProjectResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        ProjectResource: {
            /**
             * Format: uuid
             * @description A unique ID assigned to this project.
             */
            id: string;
            /**
             * Format: date-time
             * @description Project created at
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last time project was updated at
             */
            updated_at: string;
            /** @description Project code */
            code?: string;
            /** @description Project color */
            color?: string;
            /**
             * Format: uuid
             * @description Project created by entity user
             */
            created_by_entity_user_id?: string;
            /** @description Description of project */
            description?: string;
            /**
             * Format: date
             * @description Project end date
             */
            end_date?: string;
            /**
             * Format: uuid
             * @description The ID of the entity to which the project was issued.
             */
            entity_id: string;
            /**
             * @description The project name.
             * @example Marketing
             */
            name: string;
            /**
             * Format: uuid
             * @description Parent project ID
             */
            parent_id?: string;
            /** @description Project metadata */
            partner_metadata?: Record<string, never>;
            /**
             * Format: date
             * @description Project start date
             */
            start_date?: string;
            /** @description A list of user-defined tags (labels) assigned to this project. */
            tags?: components["schemas"]["TagReadSchema"][];
        };
        ProjectUpdateRequest: {
            /** @description Project code */
            code?: string;
            /** @description Project color */
            color?: string;
            /** @description Description of project */
            description?: string;
            /**
             * Format: date
             * @description Project end date
             */
            end_date?: string;
            /**
             * @description The project name.
             * @example Marketing
             */
            name?: string;
            /**
             * Format: uuid
             * @description Parent project ID
             */
            parent_id?: string;
            /** @description Project metadata */
            partner_metadata?: Record<string, never>;
            /**
             * Format: date
             * @description Project start date
             */
            start_date?: string;
            /**
             * @description A list of IDs of user-defined tags (labels) assigned to this project.
             * @default []
             */
            tag_ids: string[];
        };
        PromptCreateRequest: {
            /** @description Text of the saved prompt */
            content: string;
        };
        PromptResource: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** @description Text of the saved prompt */
            content: string;
        };
        PromptResourceList: {
            /** @description List of saved prompts */
            data: components["schemas"]["PromptResource"][];
            next_pagination_token: string | null;
            prev_pagination_token: string | null;
        };
        PromptUpdateRequest: {
            /** @description Text of the saved prompt */
            content: string;
        };
        /** @enum {string} */
        Provider: "stripe" | "airwallex" | "airwallex_component";
        PsuIdentification: {
            type: components["schemas"]["PsuIdentificationType"];
            /** @description PSU identification type value. */
            value: string;
        };
        /** @enum {string} */
        PsuIdentificationType: "psu_id" | "psu_corporate_id" | "psu_ip_address";
        PublicPaymentLinkResponse: {
            /** Format: uuid */
            id: string;
            amount: number;
            currency: components["schemas"]["CurrencyEnum"];
            /** Format: date-time */
            expires_at: string;
            invoice?: components["schemas"]["Invoice"];
            payer?: components["schemas"]["PayerAccountResponse"];
            payment_intent?: components["schemas"]["PaymentIntent"];
            /** Format: uuid */
            payment_intent_id: string;
            payment_methods: string[];
            /** Format: uri */
            payment_page_url: string;
            payment_reference?: string;
            recipient: components["schemas"]["RecipientAccountResponse"];
            /**
             * @description The URL where to redirect the payer after the payment. If `return_url` is specified, then after the payment is completed the payment page will display the "Return to platform" link that navigates to this URL.
             * @example https://pay.example.com/complete
             */
            return_url?: string;
            status: string;
        };
        /** @description Address information. */
        PurchaseOrderCounterpartAddressSchema: {
            /**
             * @description City name.
             * @example Berlin
             */
            city: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        /** @description Represents counterparts that are individuals (natural persons). */
        PurchaseOrderCounterpartIndividualResponse: {
            /**
             * Format: email
             * @description The person's email address.
             * @example asingh@example.net
             */
            email?: string;
            /**
             * @description The person's first name.
             * @example Adnan
             */
            first_name: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor: boolean;
            /**
             * @description The person's last name.
             * @example Singh
             */
            last_name: string;
            /**
             * @description The person's phone number.
             * @example 5553211234
             */
            phone?: string;
            /**
             * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
             * @example Mr.
             */
            title?: string;
        };
        /** @description Represents counterparts that are individuals (natural persons). */
        PurchaseOrderCounterpartIndividualRootResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            updated_at: string;
            /**
             * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
             * @default false
             */
            created_automatically: boolean;
            /**
             * Format: uuid
             * @description Entity user ID of counterpart creator.
             */
            created_by_entity_user_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
             */
            default_billing_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the shipping address.
             */
            default_shipping_address_id?: string;
            individual: components["schemas"]["PurchaseOrderCounterpartIndividualResponse"];
            /** @description The language used to generate pdf documents for this counterpart. */
            language?: components["schemas"]["LanguageCodeEnum"];
            reminders_enabled?: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
            tax_id?: string;
            /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
            type: components["schemas"]["CounterpartType"];
        };
        /** @description Represents counterparts that are organizations (juridical persons). */
        PurchaseOrderCounterpartOrganizationResponse: {
            /**
             * Format: email
             * @description The email address of the organization
             * @example acme@example.com
             */
            email?: string;
            /** @description Indicates if the counterpart is a customer. */
            is_customer: boolean;
            /** @description Indicates if the counterpart is a vendor. */
            is_vendor: boolean;
            /**
             * @description The legal name of the organization.
             * @example Acme Inc.
             */
            legal_name: string;
            /**
             * @description The phone number of the organization
             * @example 5551231234
             */
            phone?: string;
        };
        /** @description Represents counterparts that are organizations (juridical persons). */
        PurchaseOrderCounterpartOrganizationRootResponse: {
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             */
            updated_at: string;
            /**
             * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
             * @default false
             */
            created_automatically: boolean;
            /**
             * Format: uuid
             * @description Entity user ID of counterpart creator.
             */
            created_by_entity_user_id?: string;
            /**
             * Format: uuid
             * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
             */
            default_billing_address_id?: string;
            /**
             * Format: uuid
             * @description ID of the shipping address.
             */
            default_shipping_address_id?: string;
            /** @description The language used to generate pdf documents for this counterpart. */
            language?: components["schemas"]["LanguageCodeEnum"];
            organization: components["schemas"]["PurchaseOrderCounterpartOrganizationResponse"];
            reminders_enabled?: boolean;
            /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
            tax_id?: string;
            /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
            type: components["schemas"]["CounterpartType"];
        };
        /** @description A Counterpart object contains information about an organization (juridical person) or
         *     individual (natural person) that provides goods and services to or buys them from an
         *     [SME](https://docs.monite.com/docs/glossary#sme). */
        PurchaseOrderCounterpartSchema: components["schemas"]["PurchaseOrderCounterpartIndividualRootResponse"] | components["schemas"]["PurchaseOrderCounterpartOrganizationRootResponse"];
        /** @enum {string} */
        PurchaseOrderCursorFields: "created_at" | "updated_at";
        /** @description A schema for request for preview of purchase order email */
        PurchaseOrderEmailPreviewRequest: {
            body_text: string;
            subject_text: string;
        };
        /** @description A schema for returning a response for email preview */
        PurchaseOrderEmailPreviewResponse: {
            body_preview: string;
            subject_preview: string;
        };
        /** @description A schema for returning a response an email with a link to purchase order document has been sent */
        PurchaseOrderEmailSentResponse: {
            /** Format: uuid */
            mail_id: string;
        };
        PurchaseOrderItem: {
            /** @description The currency in which the price of the product is set. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The name of the product to purchase */
            name: string;
            /** @description The subtotal cost (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            price: number;
            /** @description Number (quantity) of products */
            quantity: number;
            /** @description Units (hours, meters, unit) */
            unit: string;
            /** @description Percent minor units. Example: 12.5% is 1250 */
            vat_rate: number;
        };
        /** @description A paginated list of purchase orders. */
        PurchaseOrderPaginationResponse: {
            data: components["schemas"]["PurchaseOrderResponseSchema"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @description Represents an Accounts Purchase Order document created by entity. */
        PurchaseOrderPayloadSchema: {
            /**
             * Format: uuid
             * @description The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used.
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart unique ID.
             */
            counterpart_id: string;
            /** @description The currency in which the price of the product is set. (all items need to have the same currency) */
            currency: components["schemas"]["CurrencyEnum"];
            /**
             * Format: uuid
             * @description Entity VAT ID identifier that applied to purchase order
             */
            entity_vat_id_id?: string;
            /** @description List of item to purchase */
            items: components["schemas"]["PurchaseOrderItem"][];
            /** @description Msg which will be send to counterpart for who the purchase order is issued. */
            message: string;
            /**
             * Format: uuid
             * @description Project id of a purchase order
             */
            project_id?: string;
            /** @description Number of days for which purchase order is valid */
            valid_for_days: number;
        };
        /** @description Represents response for an Accounts Purchase Order document created by entity. */
        PurchaseOrderResponseSchema: {
            /**
             * Format: uuid
             * @description A unique ID assigned to this purchase order.
             */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description Counterpart information about an organization (juridical person) or individual (natural person) that provides goods and services to or buys them from an */
            counterpart: components["schemas"]["PurchaseOrderCounterpartSchema"];
            /** @description Counterpart address data saved on creation or update of the purchase order. */
            counterpart_address?: components["schemas"]["PurchaseOrderCounterpartAddressSchema"];
            /**
             * Format: uuid
             * @description The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used.
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart unique ID.
             */
            counterpart_id: string;
            /**
             * Format: uuid
             * @description ID of the creator of the purchase order
             */
            created_by_user_id?: string;
            /** @description The currency in which the price of the product is set. (all items need to have the same currency) */
            currency: components["schemas"]["CurrencyEnum"];
            document_id: string;
            /** @description Data of the entity (address, name, contact) */
            entity: components["schemas"]["PayableEntityIndividualResponse"] | components["schemas"]["PayableEntityOrganizationResponse"];
            /**
             * Format: uuid
             * @description The ID of the entity which issued the purchase order.
             */
            entity_id: string;
            entity_vat_id?: components["schemas"]["PurchaseOrderVatId"];
            /** Format: uuid */
            file_id?: string;
            file_url?: string;
            /**
             * Format: date
             * @description When status changed from 'draft' to 'send', so after sending purchase order
             */
            issued_at?: string;
            /** @description List of item to purchase */
            items: components["schemas"]["PurchaseOrderItem"][];
            /** @description Msg which will be send to counterpart for who the purchase order is issued. */
            message: string;
            /**
             * Format: uuid
             * @description Project id of a purchase order
             */
            project_id?: string;
            /** @description Purchase order can be in 'draft' state before sending it to counterpart. After that state is 'issued' */
            status: string;
            /** @description Number of days for which purchase order is valid */
            valid_for_days: number;
        };
        /** @enum {string} */
        PurchaseOrderStatusEnum: "draft" | "issued";
        PurchaseOrderVatId: {
            /** Format: uuid */
            id: string;
            country: string;
            /** Format: uuid */
            entity_id: string;
            type: string;
            value: string;
        };
        QuoteAcceptRequest: {
            /** @description A digital signature, if required for quote acceptance */
            signature?: components["schemas"]["Signature"];
        };
        QuoteRenderingSettings: {
            /**
             * @description If set to `true`, the entity's bank account details will be displayed on the quote PDF.
             * @default true
             */
            display_entity_bank_account: boolean;
            /**
             * @description If set to `true`, the signature field will be displayed on the quote PDF.
             * @default false
             */
            display_signature: boolean;
        };
        QuoteResponsePayload: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentResponse2"][];
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the receivable if applicable.
             */
            based_on?: string;
            /** @description The unique document ID of a previous document related to the receivable if applicable. */
            based_on_document_id?: string;
            /** @description Field with a comment on why the client declined this Quote */
            comment?: string;
            /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
            commercial_condition_description?: string;
            /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
            counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
            counterpart_business_type?: string;
            /** @description Additional information about counterpart contacts. */
            counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
            /** @description The external reference of the counterpart. */
            counterpart_external_reference?: string;
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            counterpart_id: string;
            /** @description A legal name of a counterpart it is an organization or first and last name if it is an individual */
            counterpart_name?: string;
            /** @description Address where goods were shipped / where services were provided. */
            counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /** @description The VAT/TAX ID of the counterpart. */
            counterpart_tax_id?: string;
            /** @description The type of the counterpart. */
            counterpart_type: components["schemas"]["CounterpartType"];
            counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
            /** @description The currency used in the receivable. */
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["DiscountResponse2"];
            /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/references/currencies#minor-units). */
            discounted_subtotal?: number;
            /** @description The sequential code systematically assigned to invoices. */
            document_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            /**
             * Format: date
             * @description Optional field representing date until which invoice should be paid
             */
            due_date?: string;
            /** @description E-invoice XML file that was sent to the counterpart via an e-invoicing network. Available only if `is_einvoice` is `true`. */
            einvoice_file_url?: string;
            entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
            entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
            entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount2"];
            /**
             * Format: uuid
             * @description The entity user who created this document.
             */
            entity_user_id?: string;
            entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
            /**
             * Format: date
             * @description The date (in ISO 8601 format) until which the quote is valid.
             */
            expiry_date?: string;
            /** @description The language of the customer-facing PDF file (`file_url`). The value matches the counterpart's `language` at the time when this PDF file was generated. */
            file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the counterpart's default language. */
            file_url?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * Format: date-time
             * @description Optional field for the issue of the entry.
             */
            issue_date?: string;
            line_items: components["schemas"]["ResponseItem"][];
            /** @description A note with additional information for a receivable. */
            memo?: string;
            /** @description The language of the entity's copy of the PDF file (`original_file_url`). The value matches the entity's `language` at the time when this PDF file was generated. */
            original_file_language: components["schemas"]["LanguageCodeEnum"];
            /** @description The receivable's PDF URL in the entity's default language. */
            original_file_url?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /**
             * Format: uri
             * @description Link for custom quote accept page
             */
            quote_accept_page_url?: string;
            /** @description Whether acceptance a quote requires a signature. */
            signature_required?: boolean;
            /** @description The status of the Quote inside the receivable workflow. */
            status: components["schemas"]["QuoteStateEnum"];
            /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal?: number;
            /** @description The subtotal including VAT but without invoice discount, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            subtotal_after_vat?: number;
            /**
             * @description The list of tags for this receivable.
             * @default []
             */
            tags: components["schemas"]["TagReadSchema"][];
            /**
             * @description Total price of the receivable in [minor units](https://docs.monite.com/references/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
             * @default 0
             */
            total_amount: number;
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_vat_amount: number;
            /** @description List of total vat amount for each VAT, presented in receivable */
            total_vat_amounts?: components["schemas"]["TotalVatAmountItem2"][];
            /** @description Total price of the receivable with tax withheld in minor units */
            total_withholding_tax?: number;
            /** @description Trade name of the entity */
            trade_name?: string;
            /**
             * @description The type of the document uploaded.
             * @enum {string}
             */
            type: "quote";
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /**
             * @description Indicates whether the discount is applied to the VAT-inclusive or VAT-exclusive amount.
             * @default exclusive
             */
            vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
            /**
             * @description Defines whether the prices of products in receivable will already include VAT or not.
             * @default exclusive
             */
            vat_mode: components["schemas"]["VatModeEnum"];
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        /** @enum {string} */
        QuoteStateEnum: "draft" | "issued" | "accepted" | "expired" | "declined" | "deleted";
        ReceiptAttachFile: {
            /** Format: binary */
            file: Blob;
        };
        ReceiptCreateSchema: {
            /** @description Base64-encoded contents of the original receipt file. */
            base64_encoded_file?: string;
            /**
             * @description Currency code used in the receipt.
             * @example EUR
             */
            currency?: components["schemas"]["CurrencyEnum"];
            /**
             * @description Unique receipt number assigned by the issuer.
             * @example DE2287
             */
            document_id?: string;
            /**
             * Format: date-time
             * @description Receipt issued date and time.
             */
            issued_at?: string;
            /**
             * @description Location of the merchant.
             * @example West Street, London, UK
             */
            merchant_location?: string;
            /**
             * @description Name of the merchant.
             * @example Tesco
             */
            merchant_name?: string;
            /**
             * @description Total amount for the receipt in minor units (e.g. cents).
             * @example 15000
             */
            total_amount?: number;
            /**
             * Format: uuid
             * @description Transaction ID.
             */
            transaction_id?: string;
        };
        /** @enum {string} */
        ReceiptCursorFields: "id" | "created_at";
        ReceiptLineItemCreateSchema: {
            /**
             * Format: uuid
             * @description Accounting tax rate ID.
             */
            accounting_tax_rate_id?: string;
            /**
             * Format: uuid
             * @description Cost center ID.
             */
            cost_center_id?: string;
            /**
             * Format: uuid
             * @description General ledger ID.
             */
            general_ledger_id?: string;
            /** @description Line item name/description. */
            name?: string;
            /** @description Line item total in minor units. */
            total?: number;
        };
        /** @enum {string} */
        ReceiptLineItemCursorFields: "created_at" | "updated_at";
        ReceiptLineItemResponseSchema: {
            /**
             * Format: uuid
             * @description Unique line item ID.
             */
            id: string;
            /**
             * Format: date-time
             * @description Created at.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Updated at.
             */
            updated_at: string;
            /**
             * Format: uuid
             * @description Accounting tax rate ID.
             */
            accounting_tax_rate_id?: string;
            /**
             * Format: uuid
             * @description Cost center ID.
             */
            cost_center_id?: string;
            /**
             * Format: uuid
             * @description Created by user.
             */
            created_by_entity_user_id?: string;
            /** @description Line item name. */
            name?: string;
            /**
             * Format: uuid
             * @description Receipt ID.
             */
            receipt_id: string;
            /** @description Total. */
            total?: number;
        };
        ReceiptLineItemUpdateSchema: {
            /**
             * Format: uuid
             * @description Accounting tax rate ID.
             */
            accounting_tax_rate_id?: string;
            /**
             * Format: uuid
             * @description Cost center ID.
             */
            cost_center_id?: string;
            /**
             * Format: uuid
             * @description General ledger ID.
             */
            general_ledger_id?: string;
            /** @description Line item name/description. */
            name?: string;
            /** @description Line item total in minor units. */
            total?: number;
        };
        ReceiptLineItemsPaginationResponse: {
            data: components["schemas"]["ReceiptLineItemResponseSchema"][];
            /** @description Next page token. */
            next_pagination_token?: string;
            /** @description Previous page token. */
            prev_pagination_token?: string;
        };
        ReceiptPaginationResponse: {
            data: components["schemas"]["ReceiptResponseSchema"][];
            /** @description Next page token. */
            next_pagination_token?: string;
            /** @description Previous page token. */
            prev_pagination_token?: string;
        };
        ReceiptResponseSchema: {
            /**
             * Format: uuid
             * @description Unique receipt ID.
             */
            id: string;
            /**
             * Format: date-time
             * @description Creation timestamp.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Update timestamp.
             */
            updated_at: string;
            /**
             * Format: uuid
             * @description Entity user who created.
             */
            created_by_entity_user_id?: string;
            /** @description Currency code. */
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description Currency exchange details. */
            currency_exchange?: Record<string, never>;
            /** @description Receipt number. */
            document_id?: string;
            /**
             * Format: uuid
             * @description The id of the receipt file stored in the file saver.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            file_id?: string;
            /** @description The URL of the receipt file stored in the file saver. */
            file_url?: string;
            /**
             * Format: date-time
             * @description Date when the receipt was issued.
             */
            issued_at?: string;
            /** @description Merchant location. */
            merchant_location?: string;
            /** @description Merchant name. */
            merchant_name?: string;
            /**
             * Format: uuid
             * @description OCR request id.
             */
            ocr_request_id?: string;
            /** @description OCR status. */
            ocr_status?: string;
            /** @description Partner metadata. */
            partner_metadata?: Record<string, never>;
            /** @description Source of data. */
            source_of_data?: components["schemas"]["SourceOfReceiptDataEnum"];
            /** @description Total amount in minor units. */
            total_amount?: number;
            /**
             * Format: uuid
             * @description Transaction ID.
             */
            transaction_id?: string;
        };
        ReceiptUpdateSchema: {
            /** @description Base64-encoded file contents. */
            base64_encoded_file?: string;
            /** @description Currency code. */
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description Receipt number. */
            document_id?: string;
            /**
             * Format: date-time
             * @description Date when the receipt was issued.
             */
            issued_at?: string;
            /** @description Merchant location. */
            merchant_location?: string;
            /** @description Merchant name. */
            merchant_name?: string;
            /** @description Total amount. */
            total_amount?: number;
            /**
             * Format: uuid
             * @description Transaction ID.
             */
            transaction_id?: string;
        };
        ReceiptUploadFile: {
            /** Format: binary */
            file: Blob;
        };
        ReceivableCounterpartContact: {
            /** @description The contact address of the counterpart */
            address: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress"];
            /**
             * Format: email
             * @description The contact email of the counterpart.
             * @example marge@example.org
             */
            email?: string;
            /**
             * @description The first name of the counterpart contact.
             * @example Marge
             */
            first_name: string;
            /**
             * @description The last name of the counterpart contact.
             * @example Smith
             */
            last_name: string;
            /**
             * @description The contact phone number of the counterpart.
             * @example 55512378654
             */
            phone?: string;
            /**
             * @description The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).
             * @example Dr.
             */
            title?: string;
        };
        ReceivableCounterpartContact2: {
            /** @description The contact address of the counterpart */
            address: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
            /**
             * Format: email
             * @description The contact email of the counterpart.
             * @example marge@example.org
             */
            email?: string;
            /**
             * @description The first name of the counterpart contact.
             * @example Marge
             */
            first_name: string;
            /**
             * @description The last name of the counterpart contact.
             * @example Smith
             */
            last_name: string;
            /**
             * @description The contact phone number of the counterpart.
             * @example 55512378654
             */
            phone?: string;
            /**
             * @description The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).
             * @example Dr.
             */
            title?: string;
        };
        ReceivableCounterpartVatIDResponse: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            counterpart_id: string;
            country?: components["schemas"]["AllowedCountries"];
            /**
             * @default unknown
             * @example eu_vat
             */
            type: components["schemas"]["VatIDTypeEnum"];
            /** @example 123456789 */
            value: string;
        };
        ReceivableCreateBasedOnPayload: {
            /**
             * Format: uuid
             * @description The unique ID of a previous document related to the receivable if applicable.
             */
            based_on: string;
            /**
             * @description A list of IDs of user-defined tags (labels) assigned to this receivable.
             * @default []
             */
            tag_ids: string[];
            /** @description The type of a created receivable. Currently supported transitions:quote -> invoice; invoice -> credit_note */
            type: components["schemas"]["BasedOnTransitionType"];
        };
        ReceivableCreatedEventData: Record<string, never>;
        /** @enum {string} */
        ReceivableCursorFields: "counterpart_name" | "counterpart_id" | "amount" | "total_amount" | "discounted_subtotal" | "status" | "due_date" | "issue_date" | "document_id" | "created_at" | "project_id";
        /** @enum {string} */
        ReceivableCursorFields2: "counterpart_name" | "counterpart_id" | "amount" | "total_amount" | "status" | "due_date" | "issue_date" | "document_id" | "created_at" | "project_id";
        /** @description Payload for decline a Qoute with a comment */
        ReceivableDeclinePayload: {
            /**
             * @description Field with a comment on why the client declined this Quote
             * @example The quote was declined for some reasons
             */
            comment?: string;
        };
        /** @enum {string} */
        ReceivableDimensionEnum: "created_at" | "status" | "counterpart_id" | "currency" | "issue_date" | "due_date" | "project_id" | "product_id";
        /** @enum {string} */
        ReceivableEditFlow: "compliant" | "partially_compliant" | "non_compliant";
        /** @description A schema represents address info of the entity */
        ReceivableEntityAddressSchema: {
            /** @description A city (a full name) where the entity is registered */
            city: string;
            /**
             * @description A country name (as ISO code) where the entity is registered
             * @default DE
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /** @description A street where the entity is registered */
            line1: string;
            /** @description An alternative street used by the entity */
            line2?: string;
            /** @description A postal code of the address where the entity is registered */
            postal_code: string;
            /** @description A state in a country where the entity is registered */
            state?: string;
        };
        /** @description A base schemas for an entity */
        ReceivableEntityBase: {
            /**
             * Format: email
             * @description An email of the entity
             */
            email?: string;
            /**
             * Format: uri
             * @description A link to the entity logo
             */
            logo?: string;
            /** @description A phone number of the entity */
            phone?: string;
            /** @description The registration authority of the entity */
            registration_authority?: string;
            /** @description The registration number of the entity */
            registration_number?: string;
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        /** @description A Response schema for an entity of individual type */
        ReceivableEntityIndividual: {
            /**
             * Format: email
             * @description An email of the entity
             */
            email?: string;
            /** @description The first name of the entity issuing the receivable */
            first_name: string;
            /** @description The last name of the entity issuing the receivable */
            last_name: string;
            /**
             * Format: uri
             * @description A link to the entity logo
             */
            logo?: string;
            /** @description A phone number of the entity */
            phone?: string;
            /** @description The registration authority of the entity */
            registration_authority?: string;
            /** @description The registration number of the entity */
            registration_number?: string;
            /** @description The Tax ID of the entity issuing the receivable */
            tax_id?: string;
            /**
             * @description The entity type
             * @enum {string}
             */
            type: "individual";
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        /** @description A Request schema for an entity of individual type */
        ReceivableEntityIndividualRequest: {
            /**
             * Format: email
             * @description An email of the entity
             */
            email?: string;
            /** @description The first name of the entity issuing the receivable */
            first_name: string;
            /** @description The last name of the entity issuing the receivable */
            last_name: string;
            /**
             * Format: uri
             * @description A link to the entity logo
             */
            logo?: string;
            /** @description A phone number of the entity */
            phone?: string;
            /** @description The registration authority of the entity */
            registration_authority?: string;
            /** @description The registration number of the entity */
            registration_number?: string;
            /** @description The Tax ID of the entity issuing the receivable */
            tax_id?: string;
            /**
             * @description The entity type
             * @enum {string}
             */
            type: "individual";
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        /** @description A Response schema for an entity of organization type */
        ReceivableEntityOrganization: {
            /**
             * Format: email
             * @description An email of the entity
             */
            email?: string;
            /**
             * Format: uri
             * @description A link to the entity logo
             */
            logo?: string;
            /** @description The name of the entity issuing the receivable, when it is an organization. */
            name: string;
            /** @description A phone number of the entity */
            phone?: string;
            /** @description The registration authority of the entity */
            registration_authority?: string;
            /** @description The registration number of the entity */
            registration_number?: string;
            /** @description The Tax ID of the entity issuing the receivable */
            tax_id?: string;
            /**
             * @description The entity type
             * @enum {string}
             */
            type: "organization";
            /** @description The VAT ID of the entity issuing the receivable, when it is an organization. */
            vat_id?: string;
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        /** @description A Request schema for an entity of organization type */
        ReceivableEntityOrganizationRequest: {
            /**
             * Format: email
             * @description An email of the entity
             */
            email?: string;
            /**
             * Format: uri
             * @description A link to the entity logo
             */
            logo?: string;
            /** @description The name of the entity issuing the receivable, when it is an organization. */
            name: string;
            /** @description A phone number of the entity */
            phone?: string;
            /** @description The registration authority of the entity */
            registration_authority?: string;
            /** @description The registration number of the entity */
            registration_number?: string;
            /** @description The Tax ID of the entity issuing the receivable */
            tax_id?: string;
            /**
             * @description The entity type
             * @enum {string}
             */
            type: "organization";
            /**
             * Format: uri
             * @description A website of the entity
             */
            website?: string;
        };
        ReceivableEntityVatIDResponse: {
            /** Format: uuid */
            id: string;
            country: components["schemas"]["AllowedCountries"];
            /** Format: uuid */
            entity_id: string;
            /**
             * @default unknown
             * @example eu_vat
             */
            type: components["schemas"]["VatIDTypeEnum"];
            /** @example 123456789 */
            value: string;
        };
        ReceivableFacadeCreateInvoicePayload: {
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentRequest"][];
            commercial_condition_description?: string;
            /**
             * Format: uuid
             * @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
             */
            counterpart_billing_address_id: string;
            /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
            counterpart_business_type?: string;
            /**
             * Format: uuid
             * @description E-invoicing credentials ID of the counterpart
             */
            counterpart_einvoicing_credentials_id?: string;
            /** Format: uuid */
            counterpart_id: string;
            /**
             * Format: uuid
             * @description Address where goods were shipped / where services were provided.
             */
            counterpart_shipping_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart VAT ID id
             */
            counterpart_vat_id_id?: string;
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["Discount2"];
            /** @description The document number of the receivable, which will appear in the PDF document. Can be set manually only in the [non-compliant mode](https://docs.monite.com/accounts-receivable/regulatory-compliance/invoice-compliance). Otherwise (or if omitted), it will be generated automatically based on the entity's [document number customization](https://docs.monite.com/advanced/document-number-customization) settings when the document is issued. */
            document_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            entity?: components["schemas"]["ReceivableEntityBase"];
            /**
             * Format: uuid
             * @description Entity bank account ID
             */
            entity_bank_account_id?: string;
            /**
             * Format: uuid
             * @description Entity VAT ID id
             */
            entity_vat_id_id?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * Format: date
             * @description The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
             *
             *     Some countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.
             *
             *     In countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user.
             */
            fulfillment_date?: string;
            /**
             * @description Is this Invoice will be sent through E-invoice system
             * @default false
             */
            is_einvoice: boolean;
            line_items: components["schemas"]["LineItem"][];
            /** @description A note with additional information for a receivable */
            memo?: string;
            /**
             * Format: uuid
             * @description E-invoicing credentials ID of the entity
             */
            network_credentials_id?: string;
            /** Format: uuid */
            overdue_reminder_id?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uri
             * @description Link to the invoice's payment page. Either Monite's payment links or your custom payment links.
             */
            payment_page_url?: string;
            /** Format: uuid */
            payment_reminder_id?: string;
            payment_terms?: components["schemas"]["InlinePaymentTermsRequestPayload"];
            /** Format: uuid */
            payment_terms_id?: string;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /** @description Contain purchase order number. */
            purchase_order?: string;
            /**
             * @description A list of IDs of user-defined tags (labels) assigned to this receivable.
             * @default []
             */
            tag_ids: string[];
            /** @description Trade name of the entity */
            trade_name?: string;
            /**
             * @description The type of the document uploaded.
             * @enum {string}
             */
            type: "invoice";
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /** @description Defines whether the prices of products in receivable will already include VAT or not. */
            vat_mode?: components["schemas"]["VatModeEnum"];
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        ReceivableFacadeCreatePayload: components["schemas"]["ReceivableFacadeCreateQuotePayload"] | components["schemas"]["ReceivableFacadeCreateInvoicePayload"] | components["schemas"]["ReceivableCreateBasedOnPayload"];
        ReceivableFacadeCreateQuotePayload: {
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentRequest"][];
            commercial_condition_description?: string;
            /**
             * Format: uuid
             * @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
             */
            counterpart_billing_address_id: string;
            /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
            counterpart_business_type?: string;
            /** Format: uuid */
            counterpart_id: string;
            /**
             * Format: uuid
             * @description Address where goods were shipped / where services were provided.
             */
            counterpart_shipping_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart VAT ID id
             */
            counterpart_vat_id_id?: string;
            currency: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["Discount2"];
            /** @description The document number of the receivable, which will appear in the PDF document. Can be set manually only in the [non-compliant mode](https://docs.monite.com/accounts-receivable/regulatory-compliance/invoice-compliance). Otherwise (or if omitted), it will be generated automatically based on the entity's [document number customization](https://docs.monite.com/advanced/document-number-customization) settings when the document is issued. */
            document_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            entity?: components["schemas"]["ReceivableEntityBase"];
            /**
             * Format: uuid
             * @description Entity bank account ID
             */
            entity_bank_account_id?: string;
            /**
             * Format: uuid
             * @description Entity VAT ID id
             */
            entity_vat_id_id?: string;
            /**
             * Format: date
             * @description The date (in ISO 8601 format) until which the quote is valid.
             */
            expiry_date?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            line_items: components["schemas"]["LineItem"][];
            /** @description A note with additional information for a receivable */
            memo?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /**
             * Format: uri
             * @description Link for custom quote accept page
             */
            quote_accept_page_url?: string;
            /** @description Whether acceptance a quote requires a signature. */
            signature_required?: boolean;
            /**
             * @description A list of IDs of user-defined tags (labels) assigned to this receivable.
             * @default []
             */
            tag_ids: string[];
            /** @description Trade name of the entity */
            trade_name?: string;
            /**
             * @description The type of the document uploaded.
             * @enum {string}
             */
            type: "quote";
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /** @description Defines whether the prices of products in receivable will already include VAT or not. */
            vat_mode?: components["schemas"]["VatModeEnum"];
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        ReceivableFileUrl: {
            /** @description The receivable's PDF URL in the counterpart's default language. */
            file_url?: string;
            /** @description The receivable's PDF URL in the entity's default language. */
            original_file_url?: string;
        };
        /** @enum {string} */
        ReceivableHistoryCursorFields: "timestamp";
        /** @enum {string} */
        ReceivableHistoryEventTypeEnum: "status_changed" | "receivable_created" | "receivable_updated" | "based_on_receivable_created" | "payment_received" | "mail_sent" | "payment_reminder_mail_sent" | "overdue_reminder_mail_sent";
        /** @description A paginated list of change history records. */
        ReceivableHistoryPaginationResponse: {
            data: components["schemas"]["ReceivableHistoryResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        /** @description Represents an entry in the change history of an accounts receivable document. */
        ReceivableHistoryResponse: {
            /**
             * Format: uuid
             * @description A unique ID of the history record.
             */
            id: string;
            /**
             * Format: uri
             * @description A URL of the PDF file that shows the document state after the change. Available only for the following event types: `receivable_created`, `receivable_updated`, `status_changed`, and `payment_received`. In other event types the `current_pdf_url` value is `null`.
             *
             *     In `payment_received` events, the `current_pdf_url` value is available only in case of full payments and only if the entity setting `generate_paid_invoice_pdf` is `true`.
             *
             *     Note that Monite generates PDFs asynchronously. This means that the initial value of `current_pdf_url` for the abovementioned events right after they occurred is usually `null` and the value gets populated later after the PDF document has been generated.
             */
            current_pdf_url?: string;
            /**
             * Format: uuid
             * @description ID of the entity user who made the change or trigger the event, or `null` if it was done by using a partner access token.
             */
            entity_user_id?: string;
            /** @description An object containing additional information about the event or change. The object structure varies based on the `event_type`. In `receivable_created` and `receivable_updated` events, `event_data` is an empty object `{}`. */
            event_data: components["schemas"]["StatusChangedEventData"] | components["schemas"]["ReceivableUpdatedEventData"] | components["schemas"]["ReceivableCreatedEventData"] | components["schemas"]["BasedOnReceivableCreatedEventData"] | components["schemas"]["PaymentReceivedEventData"] | components["schemas"]["MailSentEventData"] | components["schemas"]["ReminderMailSentEventData"];
            /** @description The type of the event or change. See [Event types](https://docs.monite.com/accounts-receivable/document-history#event-types). */
            event_type: components["schemas"]["ReceivableHistoryEventTypeEnum"];
            /**
             * Format: uuid
             * @description ID of the receivable document that was changed or triggered an event.
             */
            receivable_id: string;
            /**
             * Format: date-time
             * @description UTC date and time when the event or change occurred.
             */
            timestamp: string;
        };
        /** @enum {string} */
        ReceivableMailCursorFields: "status" | "created_at" | "updated_at";
        ReceivableMailPaginationResponse: {
            data: components["schemas"]["ReceivableMailResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        ReceivableMailRecipientState: {
            /**
             * Format: email
             * @description An email address of the recipient.
             */
            email: string;
            /** @description An error message in case the mailing was unsuccessful. */
            error?: string;
            /** @description Whether mail was sent successfully. */
            is_success: boolean;
        };
        ReceivableMailRecipients: {
            bcc?: components["schemas"]["ReceivableMailRecipientState"][];
            cc?: components["schemas"]["ReceivableMailRecipientState"][];
            to?: components["schemas"]["ReceivableMailRecipientState"][];
        };
        ReceivableMailResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description The time the mail task was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The time the mail task was updated
             */
            updated_at: string;
            recipients?: components["schemas"]["ReceivableMailRecipients"];
            /** @description The status of the mail sent by receivable */
            status: components["schemas"]["ReceivableMailStatusEnum"];
        };
        /** @enum {string} */
        ReceivableMailStatusEnum: "pending" | "processing" | "sent" | "partially_sent" | "failed";
        /** @enum {string} */
        ReceivableMetricEnum: "id" | "total_amount" | "product_amount" | "product_quantity";
        /** @description A paginated list of receivables */
        ReceivablePaginationResponse: {
            data: components["schemas"]["ReceivableResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string;
        };
        ReceivablePaidPayload: {
            /** @description Optional comment explaining how the payment was made. */
            comment?: string;
            /**
             * Format: date-time
             * @description Date and time when the invoice was paid.
             */
            paid_at?: string;
        };
        ReceivablePartiallyPaidPayload: {
            /** @description How much has been paid on the invoice (in minor units). */
            amount_paid: number;
            /** @description Optional comment explaining how the payment was made. */
            comment?: string;
        };
        /** @description A schema for receiving a request for previewing an email with a receivable document */
        ReceivablePreviewRequest: {
            /** @description Body text of the content */
            body_text: string;
            /**
             * @description Language code for localization purposes
             * @default en
             */
            language: components["schemas"]["LanguageCodeEnum"];
            /** @description Subject text of the content */
            subject_text: string;
            /**
             * @description The type of the preview document.
             * @default receivable
             */
            type: components["schemas"]["ReceivablesPreviewTypeEnum"];
        };
        /** @description A schema for receiving a request for previewing an email with a receivable document */
        ReceivablePreviewResponse: {
            body_preview: string;
            subject_preview: string;
        };
        ReceivableRequiredFields: {
            /**
             * @description Object describing the required fields for counterpart
             * @default {
             *       "tax_id": {
             *         "description": "The counterpart's taxpayer identification number or tax ID. For identification purposes, this field may be required for counterparts that are not VAT-registered.",
             *         "required": false
             *       },
             *       "vat_id": {
             *         "description": "The counterpart's VAT (Value Added Tax) identification number. This field is required for counterparts that are VAT-registered.",
             *         "required": false
             *       }
             *     }
             */
            counterpart: components["schemas"]["CounterpartFields"];
            /**
             * @description Object describing the required fields for entity
             * @default {
             *       "tax_id": {
             *         "description": "The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.",
             *         "required": false
             *       },
             *       "vat_id": {
             *         "description": "The entity's VAT (Value Added Tax) identification number. This field is required for entities that are VAT-registered.",
             *         "required": false
             *       }
             *     }
             */
            entity: components["schemas"]["EntityFields"];
            /**
             * @description Object describing the required fields for line items
             * @default {
             *       "measure_unit": {
             *         "description": "Unit used to measure the quantity of the product (e.g. items, meters, kilograms)",
             *         "required": false
             *       },
             *       "tax_rate_value": {
             *         "description": "Percent minor units. Example: 12.5% is 1250. This field is only required on invoices issued by entities in the US, Pakistan, and other unsupported countries.",
             *         "required": false
             *       },
             *       "vat_rate_id": {
             *         "description": "Unique identifier of the vat rate object. This field is required for all entities in supported countries except the US and Pakistan.",
             *         "required": false
             *       }
             *     }
             */
            line_item: components["schemas"]["LineItemFields"];
        };
        ReceivableResponse: components["schemas"]["QuoteResponsePayload"] | components["schemas"]["InvoiceResponsePayload"] | components["schemas"]["CreditNoteResponsePayload"];
        /** @description A schema for receiving a request for sending a receivable */
        ReceivableSendRequest: {
            /** @description Body text of the content */
            body_text: string;
            recipients?: components["schemas"]["Recipients"];
            /** @description Subject text of the content */
            subject_text: string;
        };
        /** @description A schema for returning a response an email with a link to receivable document has been sent */
        ReceivableSendResponse: {
            /** Format: uuid */
            mail_id: string;
        };
        /** @description Payload for sending a test reminder email */
        ReceivableSendTestReminderPayload: {
            recipients?: components["schemas"]["Recipients"];
            /** @description The type of the reminder to be sent. */
            reminder_type: components["schemas"]["ReminderTypeEnum"];
        };
        ReceivableSettings: {
            create_without_personal_info: boolean;
            deduction_title?: string | null;
        };
        ReceivableTemplatesVariable: {
            description: string;
            name: string;
        };
        ReceivableTemplatesVariablesObject: {
            object_subtype: components["schemas"]["VariablesType"];
            object_type: string;
            variables: components["schemas"]["ReceivableTemplatesVariable"][];
        };
        ReceivableTemplatesVariablesObjectList: {
            data: components["schemas"]["ReceivableTemplatesVariablesObject"][];
        };
        /** @enum {string} */
        ReceivableType: "quote" | "invoice" | "credit_note";
        ReceivableUncollectiblePayload: {
            /** @description Optional comment explains why the Invoice goes uncollectible. */
            comment?: string;
        };
        ReceivableUpdatePayload: components["schemas"]["UpdateQuotePayload"] | components["schemas"]["UpdateInvoicePayload"] | components["schemas"]["UpdateCreditNotePayload"] | components["schemas"]["UpdateIssuedInvoicePayload"];
        ReceivableUpdatedEventData: Record<string, never>;
        ReceivablesAnalyticsDataPoint: {
            dimension_value?: string;
            metric_value: number;
        };
        ReceivablesAnalyticsResponse: {
            data: components["schemas"]["ReceivablesAnalyticsDataPoint"][];
        };
        /** @description Address information. */
        ReceivablesCounterpartAddress: {
            /**
             * @description City name.
             * @example Berlin
             */
            city: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        /** @enum {string} */
        ReceivablesPreviewTypeEnum: "receivable" | "discount_reminder" | "final_reminder";
        ReceivablesRemindersWarningMessage: {
            /** @description Warning message for payment reminder */
            payment_reminders?: string;
        };
        ReceivablesRepresentationOfCounterpartAddress: {
            /**
             * Format: uuid
             * @description Unique ID of the address in the system
             */
            id?: string;
            /**
             * @description City name.
             * @example Berlin
             */
            city: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        ReceivablesRepresentationOfCounterpartAddress2: {
            /**
             * Format: uuid
             * @description Unique ID of the address in the system
             */
            id?: string;
            /**
             * @description City name.
             * @example Berlin
             */
            city: string;
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @description Street address.
             * @example Flughafenstrasse 52
             */
            line1: string;
            /** @description Additional address information (if any). */
            line2?: string;
            /**
             * @description ZIP or postal code.
             * @example 10115
             */
            postal_code: string;
            /** @description State, region, province, or county. */
            state?: string;
        };
        ReceivablesRepresentationOfEntityBankAccount: {
            /**
             * Format: uuid
             * @description Unique ID of the entity bank account.
             */
            id?: string;
            /** @description Account holder's name */
            account_holder_name?: string;
            /** @description Account number (required if IBAN is not provided) */
            account_number?: string;
            /** @description The name of the entity's bank account. */
            bank_name?: string;
            /** @description The BIC of the entity's bank account. */
            bic?: string;
            /** @description The IBAN of the entity's bank account. */
            iban?: string;
            /** @description Routing number (US) */
            routing_number?: string;
            /** @description Sort code (GB) */
            sort_code?: string;
        };
        ReceivablesRepresentationOfEntityBankAccount2: {
            /**
             * Format: uuid
             * @description Unique ID of the entity bank account.
             */
            id?: string;
            /** @description Account holder's name */
            account_holder_name?: string;
            /** @description Account number (required if IBAN is not provided) */
            account_number?: string;
            /** @description The name of the entity's bank account. */
            bank_name?: string;
            /** @description The BIC of the entity's bank account. */
            bic?: string;
            /** @description The IBAN of the entity's bank account. */
            iban?: string;
            /** @description Routing number (US) */
            routing_number?: string;
            /** @description Sort code (GB) */
            sort_code?: string;
        };
        ReceivablesSearchRequest: {
            /**
             * Format: uuid
             * @description This parameter accepts a quote ID or an invoice ID.
             *
             *     * Specify a quote ID to find invoices created from this quote.
             *     * Specify an invoice ID to find credit notes created for this invoice.
             *
             *     Valid but nonexistent IDs do not raise errors but produce no results.
             */
            based_on?: string;
            /**
             * Format: uuid
             * @description Return only receivables created for the counterpart with the specified ID.
             *
             *     Counterparts that have been deleted but have associated receivables will still return results here because the receivables contain a frozen copy of the counterpart data.
             *
             *     If the specified counterpart ID does not exist and never existed, no results are returned.
             */
            counterpart_id?: string;
            /** @description Return only receivables created for counterparts with the specified name (exact match, case-sensitive). For counterparts of `type` = `individual`, the full name is formatted as `first_name last_name`. */
            counterpart_name?: string;
            /** @description Return only receivables created for counterparts whose name contains the specified string (case-sensitive). */
            counterpart_name__contains?: string;
            /** @description Return only receivables created for counterparts whose name contains the specified string (case-insensitive). */
            counterpart_name__icontains?: string;
            /**
             * Format: date-time
             * @description Return only receivables created after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`.
             */
            created_at__gt?: string;
            /**
             * Format: date-time
             * @description Return only receivables created on or after the specified date and time.
             */
            created_at__gte?: string;
            /**
             * Format: date-time
             * @description Return only receivables created before the specified date and time.
             */
            created_at__lt?: string;
            /**
             * Format: date-time
             * @description Return only receivables created before or on the specified date and time.
             */
            created_at__lte?: string;
            /** @description Return only receivables with the exact specified discounted subtotal. The amount must be specified in the [minor units](https://docs.monite.com/references/currencies#minor-units) of currency. For example, $12.5 is represented as 1250. */
            discounted_subtotal?: number;
            /** @description Return only receivables whose discounted subtotal (in minor units) is greater than the specified value. */
            discounted_subtotal__gt?: number;
            /** @description Return only receivables whose discounted subtotal (in minor units) is greater than or equal to the specified value. */
            discounted_subtotal__gte?: number;
            /** @description Return only receivables whose discounted subtotal (in minor units) is less than the specified value. */
            discounted_subtotal__lt?: number;
            /** @description Return only receivables whose discounted subtotal (in minor units) is less than or equal to the specified value. */
            discounted_subtotal__lte?: number;
            /** @description Return a receivable with the exact specified document number (case-sensitive). The `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`). */
            document_id?: string;
            /** @description Return only receivables whose document number (`document_id`) contains the specified string (case-sensitive). */
            document_id__contains?: string;
            /** @description Return only receivables whose document number (`document_id`) contains the specified string (case-insensitive). */
            document_id__icontains?: string;
            /**
             * Format: date
             * @description Return invoices that are due after the specified date (exclusive, `YYYY-MM-DD`).
             *
             *     This filter excludes quotes, credit notes, and draft invoices.
             */
            due_date__gt?: string;
            /**
             * Format: date
             * @description Return invoices that are due on or after the specified date (`YYYY-MM-DD`).
             *
             *     This filter excludes quotes, credit notes, and draft invoices.
             */
            due_date__gte?: string;
            /**
             * Format: date
             * @description Return invoices that are due before the specified date (exclusive, `YYYY-MM-DD`).
             *
             *     This filter excludes quotes, credit notes, and draft invoices.
             */
            due_date__lt?: string;
            /**
             * Format: date
             * @description Return invoices that are due before or on the specified date (`YYYY-MM-DD`).
             *
             *     This filter excludes quotes, credit notes, and draft invoices.
             */
            due_date__lte?: string;
            /**
             * Format: uuid
             * @description Return only receivables created by the entity user with the specified ID. To query receivables by multiple user IDs at once, use the `entity_user_id__in` parameter instead.
             *
             *     If the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.
             *
             *     IDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results.
             */
            entity_user_id?: string;
            entity_user_id__in?: string[];
            id__in?: string[];
            /**
             * Format: date-time
             * @description Return only non-draft receivables that were issued after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`.
             */
            issue_date__gt?: string;
            /**
             * Format: date-time
             * @description Return only non-draft receivables that were issued on or after the specified date and time.
             */
            issue_date__gte?: string;
            /**
             * Format: date-time
             * @description Return only non-draft receivables that were issued before the specified date and time.
             */
            issue_date__lt?: string;
            /**
             * Format: date-time
             * @description Return only non-draft receivables that were issued before or on the specified date and time.
             */
            issue_date__lte?: string;
            /** @default 100 */
            limit: number;
            /** @default asc */
            order: components["schemas"]["OrderEnum"];
            pagination_token?: string;
            product_ids?: string[];
            product_ids__in?: string[];
            /**
             * Format: uuid
             * @description Return only receivables assigned to the project with the specified ID. Valid but nonexistent project IDs do not raise errors but return no results.
             */
            project_id?: string;
            project_id__in?: string[];
            sort?: components["schemas"]["ReceivableCursorFields2"];
            /**
             * @description Return only receivables that have the specified status. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
             *
             *     To query multiple statuses at once, use the `status__in` parameter instead.
             * @enum {string}
             */
            status?: "draft" | "issuing" | "issued" | "failed" | "accepted" | "expired" | "declined" | "recurring" | "partially_paid" | "paid" | "overdue" | "uncollectible" | "canceled";
            status__in?: string[];
            tag_ids?: string[];
            tag_ids__in?: string[];
            /** @description Return only receivables with the exact specified total amount. The amount must be specified in the [minor units](https://docs.monite.com/references/currencies#minor-units) of currency. For example, $12.5 is represented as 1250. */
            total_amount?: number;
            /** @description Return only receivables whose total amount (in minor units) exceeds the specified value. */
            total_amount__gt?: number;
            /** @description Return only receivables whose total amount (in minor units) is greater than or equal to the specified value. */
            total_amount__gte?: number;
            /** @description Return only receivables whose total amount (in minor units) is less than the specified value. */
            total_amount__lt?: number;
            /** @description Return only receivables whose total amount (in minor units) is less than or equal to the specified value. */
            total_amount__lte?: number;
            /** @description Return only receivables of the specified type. Use this parameter to get only invoices, or only quotes, or only credit notes. */
            type?: components["schemas"]["ReceivableType"];
        };
        /** @description A schema for returning a response with list of ids by which user check sending status */
        ReceivablesSendResponse: {
            mail_ids: string[];
        };
        /**
         * @description This Enum the results of combining two types of statuses from
         *     QuoteStateEnum, CreditNoteStateEnum and InvoiceStateEnum. You shouldn't use
         *     it in your scenarios if only for edge cases in workers, but ideally need to
         *     remove this shared Enum.
         * @enum {string}
         */
        ReceivablesStatusEnum: "draft" | "issuing" | "issued" | "failed" | "accepted" | "expired" | "declined" | "recurring" | "partially_paid" | "paid" | "overdue" | "uncollectible" | "canceled" | "deleted";
        /** @description A schema for returning a response with validation results */
        ReceivablesVerifyResponse: {
            /** @description Missing fields of receivable */
            errors?: components["schemas"]["MissingFields"];
            /** @description Warning message for payment reminder */
            warnings?: components["schemas"]["ReceivablesRemindersWarningMessage"];
        };
        Recipient: {
            /** Format: uuid */
            id: string;
            type: components["schemas"]["RecipientType"];
        };
        RecipientAccountResponse: {
            /**
             * Format: uuid
             * @description ID of a payment account
             */
            id: string;
            /** @description List of bank accounts */
            bank_accounts?: components["schemas"]["BankAccount"][];
            /** @description Display name of a payment account */
            name?: string;
            /** @description Type of a payment account. Can be `entity` or `counterpart` */
            type: components["schemas"]["PaymentAccountType"];
        };
        RecipientAccountResponse2: {
            /**
             * Format: uuid
             * @description ID of a payment account
             */
            id: string;
            /** @description List of authorized bank accounts */
            authorized_bank_accounts?: components["schemas"]["AuthorizedBankAccount"][];
            /** @description List of bank accounts */
            bank_accounts?: components["schemas"]["BankAccount"][];
            /** @description Display name of a payment account */
            name?: string;
            /** @description Type of a payment account. Can be `entity` or `counterpart` */
            type: components["schemas"]["PaymentAccountType"];
        };
        /** @enum {string} */
        RecipientType: "entity" | "counterpart";
        Recipients: {
            bcc?: string[];
            cc?: string[];
            to?: string[];
        };
        /** @enum {string} */
        RecurrenceFrequency: "day" | "week" | "month" | "quarter" | "year";
        RecurrenceIteration: {
            /** Format: date */
            issue_at: string;
            /** Format: uuid */
            issued_invoice_id?: string;
            /** @default 1 */
            iteration: number;
            status: components["schemas"]["IterationStatus"];
        };
        RecurrenceResponse: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date-time
             * @description Time at which the recurrence was created. Timestamps follow the ISO 8601 standard.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Time at which the recurrence was last updated. Timestamps follow the ISO 8601 standard.
             */
            updated_at: string;
            /** @description Controls how invoices are processed when generated:
             *     - "draft": Creates invoices in draft status, requiring manual review, issuing, and sending
             *     - "issue": Automatically issues invoices but requires manual sending
             *     - "issue_and_send": Fully automates the process (creates, issues, and sends invoices)
             *
             *     Default: "issue" (or "issue_and_send" if subject_text and body_text are provided)
             *
             *     Note: When using "issue_and_send", both subject_text and body_text must be provided.
             *      */
            automation_level: components["schemas"]["AutomationLevel"];
            /** @description The body text for the email that will be sent with the recurring invoice. */
            body_text?: string;
            /** @description Current iteration number */
            current_iteration: number;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            day_of_month: components["schemas"]["DayOfMonth"];
            /**
             * Format: date
             * @description The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified.
             */
            end_date?: string;
            /**
             * @deprecated
             * @description Deprecated, use `end_date` instead
             */
            end_month?: number;
            /**
             * @deprecated
             * @description Deprecated, use `end_date` instead
             */
            end_year?: number;
            /** @description How often the invoice will be created. */
            frequency: components["schemas"]["RecurrenceFrequency"];
            /** @description The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months. */
            interval: number;
            /**
             * Format: uuid
             * @description ID of the base invoice that will be used as a template for creating recurring invoices.
             */
            invoice_id: string;
            /** @description List of iterations for the recurrence */
            iterations: components["schemas"]["RecurrenceIteration"][];
            /** @description How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified. */
            max_occurrences?: number;
            /** @description An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field. */
            recipients?: components["schemas"]["Recipients"];
            /**
             * Format: date
             * @description The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`.
             */
            start_date: string;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            start_month: number;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            start_year: number;
            /** @description Status of the recurrence */
            status: components["schemas"]["RecurrenceStatus"];
            /** @description The subject for the email that will be sent with the recurring invoice. */
            subject_text?: string;
        };
        RecurrenceResponseList: {
            data: components["schemas"]["RecurrenceResponse"][];
        };
        /**
         * @description Represents the status of a recurrence
         *
         *     Allowed transitions:
         *     - active -> paused
         *     - active -> canceled
         *     - active -> completed
         *     - paused -> active
         *     - paused -> canceled
         * @enum {string}
         */
        RecurrenceStatus: "active" | "paused" | "canceled" | "completed";
        RegisterPartnerUserPayload: {
            company_name: string;
            /** Format: uri */
            company_website: string;
            /** Format: email */
            email: string;
            fullname: string;
            password: string;
        };
        RegisterResponse: {
            invited_users: string[];
            not_invited_users: string[];
        };
        RelatedDocuments: {
            credit_note_ids?: string[];
            /** Format: uuid */
            proforma_invoice_id?: string;
        };
        /** @enum {string} */
        Relationship: "representative" | "owner" | "director" | "executive";
        Reminder: {
            body: string;
            days_before: number;
            subject: string;
        };
        /** @description Contains information about an invoice reminder sent via email. */
        ReminderMailSentEventData: {
            /**
             * Format: uuid
             * @description ID of the email sending operation. Can be used to get the email sending status from `GET /receivables/{receivable_id}/mails/{mail_id}`.
             */
            mail_id: string;
            /** @description The overall email sending status across all recipients. */
            mail_status: components["schemas"]["ReceivableMailStatusEnum"];
            /** @description Contains a list of email recipients (To, CC, BCC) and the email sending status for each recipient. */
            recipients: components["schemas"]["ReceivableMailRecipients"];
            /** @description Invoice reminder type:
             *
             *     * `term_1` - [payment reminder](https://docs.monite.com/accounts-receivable/invoices/payment-reminders) sent before discount date 1,
             *     * `term_2` - payment reminder sent before discount date 2,
             *     * `term_final` - payment reminder sent before the invoice due date.
             *     * `overdue` - [overdue reminder](https://docs.monite.com/accounts-receivable/invoices/overdue-reminders) sent after the due date. */
            term: components["schemas"]["ReminderTypeEnum"];
        };
        /** @enum {string} */
        ReminderTypeEnum: "term_1" | "term_2" | "term_final" | "overdue";
        RemindersSettings: {
            /** @default true */
            enabled: boolean;
        };
        /** @description Repayment schedule model */
        RepaymentSchedule: {
            /** @description Repayment amount in minor units */
            repayment_amount: number;
            /** @description Repayment date in ISO 8601 format */
            repayment_date: string;
            /** @description Repayment fee amount in minor units */
            repayment_fee_amount: number;
            /** @description Repayment principal amount in minor units */
            repayment_principal_amount: number;
        };
        RequestResendInvite: {
            /** Format: email */
            email: string;
            old_invitation_token?: string | null;
        };
        RequirementsError: {
            code: string;
            reason: string;
            requirement: string;
        };
        ResetPasswordPayload: {
            /** Format: email */
            email: string;
        };
        ResponseItem: {
            /** @description The discount for a product. */
            discount?: components["schemas"]["Discount2"];
            product: components["schemas"]["LineItemProduct"];
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity: number;
            /** @description Total of line_item after VAT with applied line item discount in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_after_vat: number;
            /** @description Total of line_item before VAT in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            total_before_vat: number;
        };
        RevertPaymentsPayload: {
            /** @description How much was paid on the invoice (in minor units). */
            amount_paid: number;
        };
        RevokeTokenPayload: {
            /** Format: uuid */
            client_id: string;
            client_secret: string;
            token: string;
        };
        /** @enum {string} */
        RoleCursorFields: "updated_at" | "created_at";
        RolePaginationResponse: {
            /** @description array of records */
            data: components["schemas"]["RoleResponse"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string | null;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string | null;
        };
        RoleResponse: {
            /**
             * Format: uuid
             * @description UUID role ID
             */
            id: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            created_at: string;
            /**
             * Format: date-time
             * @description UTC datetime
             */
            updated_at: string;
            /** @description Role name */
            name: string;
            /** @description Access permissions */
            permissions: components["schemas"]["BizObjectsSchema-Output"];
            /** @description record status, 'active' by default */
            status: components["schemas"]["StatusEnum"];
        };
        RolesCreatePayload: {
            description?: string | null;
            name: string;
            /** @description Access permissions */
            permissions: components["schemas"]["PortalBizObjectsSchema-Input"];
        };
        RolesResponse: {
            /** Format: uuid */
            id: string;
            created_by_user_id?: string | null;
            description: string | null;
            name: string;
            /** @description Access permissions */
            permissions: components["schemas"]["PortalBizObjectsSchema-Output"];
        };
        RolesUpdatePayload: {
            description?: string | null;
            name?: string | null;
            /** @description Access permissions */
            permissions?: components["schemas"]["PortalBizObjectsSchema-Input"] | null;
        };
        "RootSchema-Input": components["schemas"]["CommonSchema-Input"] | components["schemas"]["PayableSchema-Input"];
        "RootSchema-Output": components["schemas"]["CommonSchema-Output"] | components["schemas"]["PayableSchema-Output"];
        SCAMethod: {
            id: string;
            description?: string;
            information?: string;
            type: components["schemas"]["SCAMethodType"];
        };
        /** @enum {string} */
        SCAMethodType: "SMS_OTP" | "CHIP_OTP" | "PHOTO_OTP" | "PUSH_OTP";
        SecretRequest: {
            name?: string | null;
            /** Format: uuid */
            project_id: string;
        };
        /** @enum {string} */
        SecretStatusEnum: "active" | "revoked" | "scheduled_to_revoke";
        /** @description A schema for request for sending purchase order via email */
        SendPurchaseOrderViaEmailRequest: {
            body_text: string;
            subject_text: string;
        };
        /** @enum {string} */
        ServiceProvidersEnum: "codat" | "railz";
        SetPasswordPayload: {
            new_password: string;
            token: string;
        };
        SetScaCodePayload: {
            application_user_id: string;
            /** @description Confirmation code that the user received from the bank via the selected SCA method. */
            sca_code: string;
        };
        SetScaMethodPayload: {
            application_user_id: string;
            /** @description Identifier of SCA method obtained during the initialization of the embedded session. */
            sca_method_id: string;
        };
        SettingsResponse: {
            accounting?: components["schemas"]["AccountingSettings"] | null;
            /**
             * @description Automatically attempt to find a corresponding purchase order for all incoming payables.
             * @default true
             */
            allow_purchase_order_autolinking: boolean | null;
            currency?: components["schemas"]["CurrencySettings-Output"] | null;
            document_ids?: components["schemas"]["DocumentIDsSettings"] | null;
            /** @description Settings for rendering documents in PDF format. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings-Output"];
            /**
             * @description This setting affects how PDF is generated for paid accounts receivable invoices. If set to `true`, once an invoice is fully paid its PDF version is updated to display the amount paid and the payment-related features are removed.
             *
             *     The PDF file gets regenerated at the moment when an invoice becomes paid. It is not issued as a separate document, and the original PDF invoice is no longer available.
             *
             *     This field is deprecated and will be replaced by `document_rendering.invoice.generate_paid_invoice_pdf`.
             * @default false
             */
            generate_paid_invoice_pdf: boolean;
            language?: components["schemas"]["LanguageCodeEnum"] | null;
            /** @description Email settings for the entity */
            mail?: components["schemas"]["EntityMailSettings"] | null;
            /** @description Auto tagging settings for all incoming OCR payable documents. */
            payables_ocr_auto_tagging?: components["schemas"]["OcrAutoTaggingSettingsRequest"][] | null;
            /**
             * @description If enabled, the approval policy will be skipped and the payable will be moved to `waiting_to_be_paid` status.
             * @default false
             */
            payables_skip_approval_flow: boolean;
            /**
             * @description Payment preferences for entity to automate calculating suggested payment date based on payment terms and entity preferences.
             * @default working_capital
             */
            payment_priority: components["schemas"]["PaymentPriorityEnum"] | null;
            /**
             * @description Sets the default behavior of whether a signature is required to accept quotes.
             * @default false
             */
            quote_signature_required: boolean;
            /** @default compliant */
            receivable_edit_flow: components["schemas"]["ReceivableEditFlow"] | null;
            reminder?: components["schemas"]["RemindersSettings"] | null;
            /**
             * @description Defines whether the amount discounts (for percentage discounts it does not matter) on VAT inclusive invoices will be applied on amounts including VAT or excluding VAT.
             * @default exclusive
             */
            vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
            /**
             * @description Defines whether the prices of products in receivables will already include VAT or not.
             * @default exclusive
             */
            vat_mode: components["schemas"]["VatModeEnum"] | null;
        };
        Signature: {
            /**
             * Format: email
             * @description The email of a person who signed a quote
             */
            email: string;
            /** @description The full name of a person who signed a quote */
            full_name: string;
            /** @description Base64 encoded PNG image of a signature */
            signature_image: string;
        };
        SignatureResponse: {
            /**
             * Format: email
             * @description The email of a person who signed a quote
             */
            email: string;
            /** @description The full name of a person who signed a quote */
            full_name: string;
            /** @description URL of the signature image */
            signature_image_url: string;
            /**
             * Format: date-time
             * @description Date and time when the receivable was signed
             */
            signed_at: string;
        };
        SingleOnboardingRequirementsResponse: {
            disabled_reason?: string;
            payment_method: string;
            requirements: components["schemas"]["PaymentMethodRequirements"];
            requirements_errors: components["schemas"]["OnboardingRequirementsError"][];
            verification_errors: components["schemas"]["OnboardingVerificationError"][];
            verification_status: components["schemas"]["OnboardingVerificationStatusEnum"];
        };
        SinglePaymentIntent: {
            object: components["schemas"]["PaymentObjectPayable"];
            /** @description Must be provided if payable's document id is missing. */
            payment_reference?: string;
            recipient: components["schemas"]["PaymentIntentsRecipient"];
        };
        SinglePaymentIntentResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            amount: number;
            currency: components["schemas"]["CurrencyEnum"];
            error?: Record<string, never>;
            object: components["schemas"]["PaymentObjectPayable"];
            payment_reference: string;
            recipient: components["schemas"]["PaymentIntentsRecipient"];
            status: string;
        };
        /** @enum {string} */
        SourceOfPayableDataEnum: "ocr" | "user_specified" | "einvoicing";
        /** @enum {string} */
        SourceOfReceiptDataEnum: "ocr" | "user_specified";
        /** @description Contains information about a document's status change. See the applicable
         *     [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index),
         *     [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index),
         *     and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle). */
        StatusChangedEventData: {
            /** @description The new status of a document. */
            new_status: components["schemas"]["ReceivablesStatusEnum"];
            /** @description The old status of a document. */
            old_status: components["schemas"]["ReceivablesStatusEnum"];
        };
        /** @enum {string} */
        StatusEnum: "active" | "deleted";
        /** @enum {string} */
        StorecoveEvent: "received" | "failed";
        /** @enum {string} */
        StorecoveEventGroup: "invoice" | "unknown";
        /** @enum {string} */
        StorecoveEventType: "received_document";
        StorecoveNewDocumentReceivedEventPayload: {
            /** Format: uuid */
            document_guid?: string;
            event: components["schemas"]["StorecoveEvent"];
            event_group: components["schemas"]["StorecoveEventGroup"];
            event_type: components["schemas"]["StorecoveEventType"];
            /** Format: uuid */
            receive_guid?: string;
        };
        StripeData: {
            publishable?: string;
            secret: string;
        };
        SuccessResult: {
            /** @default true */
            success: boolean;
        };
        SuggestedCounterpartPayload: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            address_id?: string;
            /** Format: uuid */
            bank_account_id?: string;
            /** Format: uuid */
            vat_id_id?: string;
        };
        /** @description Suggested payment date and corresponding discount */
        SuggestedPaymentTerm: {
            /** Format: date */
            date: string;
            discount?: number;
        };
        SuggestedResponse: {
            suggested_counterpart: components["schemas"]["SuggestedCounterpartPayload"];
        };
        /** @enum {string} */
        SupportedFieldNames: "default_account_code" | "default_tax_rate_code";
        SupportedFormatSchema: {
            available_types: {
                [key: string]: components["schemas"]["ExportFormat"][];
            };
            /** @enum {string} */
            object_type: "payable" | "receivable";
        };
        /** @enum {string} */
        SupportedPaymentAuthorizationFlow: "redirect" | "embedded";
        /** @enum {string} */
        SyncRecordCursorFields: "created_at" | "updated_at";
        SyncRecordResource: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            errors?: Record<string, never>;
            /** Format: date-time */
            last_pulled_at: string;
            /** Format: uuid */
            object_id?: string;
            object_type: components["schemas"]["ObjectMatchTypes"];
            /** Format: date-time */
            object_updated_at?: string;
            platform?: components["schemas"]["Platform"];
            platform_object_id?: string;
            /** Format: date-time */
            platform_updated_at?: string;
            provider?: components["schemas"]["ServiceProvidersEnum"];
            provider_object_id?: string;
            /** Format: date-time */
            provider_updated_at?: string;
            sync_status: components["schemas"]["SyncStatus"];
        };
        SyncRecordResourceList: {
            data: components["schemas"]["SyncRecordResource"][];
            /**
             * @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
             * @example eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9
             */
            next_pagination_token?: string;
            /**
             * @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
             * @example eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9
             */
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        SyncStatus: "pending" | "error" | "done";
        SyncStatusResponse: {
            /** Format: uuid */
            id?: string;
            sync_status?: components["schemas"]["SyncStatus"];
            type?: components["schemas"]["ObjectMatchTypes"];
        };
        SyncStatusResponseList: {
            data: components["schemas"]["SyncStatusResponse"][];
            /** Format: uuid */
            next_pagination_token?: string;
            /** Format: uuid */
            prev_pagination_token?: string;
        };
        SystemTemplateDataSchema: {
            /** @description Array of templates */
            available_templates: components["schemas"]["TemplateDataSchema"][];
            /** @description Name of the template */
            template_name: string;
        };
        SystemTemplates: {
            /** @description All pre-defined email templates */
            data: components["schemas"]["SystemTemplateDataSchema"][];
        };
        /** @enum {string} */
        TagCategory: "document_type" | "department" | "project" | "cost_center" | "vendor_type" | "payment_method" | "approval_status";
        TagCreateSchema: {
            /**
             * @description The tag category.
             * @example department
             */
            category?: components["schemas"]["TagCategory"];
            /**
             * @description The tag description.
             * @example Tag for the Marketing Department
             */
            description?: string;
            /**
             * @description The tag name. Must be unique.
             * @example Marketing
             */
            name: string;
        };
        /** @enum {string} */
        TagCursorFields: "created_at" | "updated_at";
        /** @description Represents a user-defined tag that can be assigned to resources to filter them. */
        TagReadSchema: {
            /**
             * Format: uuid
             * @description A unique ID of this tag.
             * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             * @example 2022-09-07T16:35:18.484507+00:00
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
             * @example 2022-09-07T16:35:18.484507+00:00
             */
            updated_at: string;
            /**
             * @description The tag category.
             * @example department
             */
            category?: components["schemas"]["TagCategory"];
            /**
             * Format: uuid
             * @description ID of the user who created the tag.
             * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
             */
            created_by_entity_user_id?: string;
            /**
             * @description The tag description.
             * @example Tag for the Marketing Department
             */
            description?: string;
            /**
             * @description The tag name.
             * @example Marketing
             */
            name: string;
        };
        TagUpdateSchema: {
            /**
             * @description The tag category.
             * @example department
             */
            category?: components["schemas"]["TagCategory"];
            /**
             * @description The tag description.
             * @example Tag for the Marketing Department
             */
            description?: string;
            /**
             * @description The tag name. Must be unique.
             * @example Marketing
             */
            name?: string;
        };
        /** @description A paginated list of tags. */
        TagsPaginationResponse: {
            data: components["schemas"]["TagReadSchema"][];
            /**
             * @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
             * @example eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9
             */
            next_pagination_token?: string;
            /**
             * @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
             * @example eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9
             */
            prev_pagination_token?: string;
        };
        TaxComponentResponse: {
            /** @description A flag to indicate with the tax is calculated using the principle of compounding. */
            is_compound?: boolean;
            name?: string;
            /** @description Component tax rate in percent [minor units](https://docs.monite.com/references/currencies#minor-units). Example: 12.5% is 1250. */
            rate?: number;
        };
        /** @enum {string} */
        TaxRateAccountCursorFields: "name";
        TemplateDataSchema: {
            /** @description Jinja2 compatible email body template */
            body_template: string;
            /** @description Lowercase ISO code of language */
            language: string;
            /** @description Jinja2 compatible email subject template */
            subject_template: string;
        };
        TemplateListResponse: {
            data?: components["schemas"]["TemplateReceivableResponse"][];
        };
        TemplateReceivableResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            blocks?: string[];
            document_type: components["schemas"]["DocumentTypeEnum"];
            is_default: boolean;
            language: string;
            name: string;
            preview?: components["schemas"]["FileResponse"];
            template: string;
            /** @default source_object */
            template_type: components["schemas"]["TemplateTypeEnum"];
        };
        /** @enum {string} */
        TemplateTypeEnum: "block" | "source_object";
        TermDiscountDays: {
            /** @description The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%. */
            discount: number;
            /** @description The amount of days after the invoice issue date. */
            number_of_days: number;
        };
        TermFinalDays: {
            /** @description The amount of days after the invoice issue date. */
            number_of_days: number;
        };
        "TermsOfServiceAcceptance-Input": {
            /** @description The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement. */
            date?: string | null;
            /** @description The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header. */
            ip?: string | null;
        };
        "TermsOfServiceAcceptance-Output": {
            /** @description The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement. */
            date?: string | null;
            /** @description The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header. */
            ip?: string | null;
        };
        /** @enum {string} */
        TextTemplateDocumentTypeEnum: "quote" | "invoice" | "credit_note" | "discount_reminder" | "final_reminder" | "payables_purchase_order" | "overdue_reminder";
        TextTemplateResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            document_type: components["schemas"]["TextTemplateDocumentTypeEnum"];
            is_default: boolean;
            name: string;
            template: string;
            type: components["schemas"]["TextTemplateType"];
        };
        TextTemplateResponseList: {
            data: components["schemas"]["TextTemplateResponse"][];
            next_pagination_token?: string;
            prev_pagination_token?: string;
        };
        /** @enum {string} */
        TextTemplateType: "email_header" | "email_body" | "memo";
        Token: {
            access_token: string;
            token_type: string;
        };
        /** @enum {string} */
        TokenSerializerTypeEnum: "forgot_password" | "invitation";
        TotalVatAmountItem: {
            /** Format: uuid */
            id?: string;
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            amount: number;
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["TotalVatAmountItemComponent"][];
            /** @description Display name of the vat rate. */
            name?: string;
            /** @description The amount on which this VAT is calculated, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            taxable_amount: number;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        TotalVatAmountItem2: {
            /** Format: uuid */
            id?: string;
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            amount: number;
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["TotalVatAmountItemComponent2"][];
            /** @description Display name of the vat rate. */
            name?: string;
            /** @description The amount on which this VAT is calculated, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            taxable_amount: number;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        TotalVatAmountItemComponent: {
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            amount: number;
            name: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        TotalVatAmountItemComponent2: {
            /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/references/currencies#minor-units). */
            amount: number;
            name: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        Unit: {
            designation: string;
            name: string;
        };
        UnitListResponse: {
            data: components["schemas"]["UnitResponse"][];
        };
        UnitRequest: {
            description?: string;
            name: string;
        };
        UnitResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            description?: string;
            name: string;
        };
        UnitUpdate: {
            description?: string;
            name?: string;
        };
        UpdateCounterpartBankAccount: {
            /**
             * @description The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
             * @example Bob Jones
             */
            account_holder_name?: string;
            /**
             * @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
             * @example 12345678
             */
            account_number?: string;
            /**
             * @description The BIC/SWIFT code of the bank.
             * @example DEUTDEFFXXX
             */
            bic?: string;
            country?: components["schemas"]["AllowedCountries"];
            currency?: components["schemas"]["CurrencyEnum"];
            /**
             * @description The IBAN of the bank account.
             * @example DE74500700100100000900
             */
            iban?: string;
            name?: string;
            /** @description Metadata for partner needs. */
            partner_metadata?: Record<string, never>;
            /** @description The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits. */
            routing_number?: string;
            /**
             * @description The bank's sort code.
             * @example 123456
             */
            sort_code?: string;
        };
        /** @description The contact person for an organization. */
        UpdateCounterpartContactPayload: {
            /** @description The address of a contact person. */
            address?: components["schemas"]["CounterpartAddress"];
            /**
             * Format: email
             * @description The email address of a contact person.
             * @example contact@example.org
             */
            email?: string;
            /**
             * @description The first name of a contact person.
             * @example Mary
             */
            first_name?: string;
            /**
             * @description The last name of a contact person.
             * @example O'Brien
             */
            last_name?: string;
            /**
             * @description The phone number of a contact person
             * @example 5551235476
             */
            phone?: string;
            /**
             * @description The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
             * @example Ms.
             */
            title?: string;
        };
        UpdateCounterpartEinvoicingCredentialSchema: {
            network_identifier?: string;
            network_schema?: components["schemas"]["EinvoiceSchemaTypeEnum"];
        };
        UpdateCreditNote: {
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentRequest"][];
            /**
             * Format: uuid
             * @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
             */
            counterpart_billing_address_id?: string;
            /** @description Additional information about counterpart contacts. */
            counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
            /**
             * Format: uuid
             * @description Address where goods were shipped / where services were provided.
             */
            counterpart_shipping_address_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            entity?: components["schemas"]["ReceivableEntityBase"];
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            line_items?: components["schemas"]["UpdateLineItemForCreditNote"];
            /** @description A note with additional information for a receivable */
            memo?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /** @description A list of IDs of user-defined tags (labels) assigned to this receivable. */
            tag_ids?: string[];
        };
        /** @description Helper class that provides a standard way to create an ABC using
         *     inheritance. */
        UpdateCreditNotePayload: {
            credit_note: components["schemas"]["UpdateCreditNote"];
        };
        UpdateCustomTemplateSchemaRequest: {
            /** @description Jinja2 compatible string with email body */
            body_template?: string;
            /** @description Lowercase ISO code of language */
            language?: components["schemas"]["LanguageCodeEnum"];
            /** @description Custom template name */
            name?: string;
            /** @description Jinja2 compatible string with email subject */
            subject_template?: string;
        };
        UpdateEinvoicingAddress: {
            /** @description Street address line 1 */
            address_line1: string;
            /** @description Street address line 2 */
            address_line2?: string;
            /** @description City name */
            city: string;
            /** @description Postal/ZIP code */
            postal_code: string;
            /** @description State/Province/County */
            state?: string;
        };
        UpdateEntityAddressSchema: {
            /** @description A city (a full name) where the entity is registered */
            city?: string | null;
            /** @description A street where the entity is registered */
            line1?: string | null;
            /** @description An alternative street used by the entity */
            line2?: string | null;
            /** @description A postal code of the address where the entity is registered */
            postal_code?: string | null;
            /** @description A state in a country where the entity is registered */
            state?: string | null;
        };
        /** @description Data that can be updated in existing bank accounts of an entity. */
        UpdateEntityBankAccountRequest: {
            /**
             * @description The name of the person or business that owns this bank account. If the account currency is GBP or USD, the holder name cannot be changed to an empty string.
             * @example Cayla Lloyd
             */
            account_holder_name?: string;
            /**
             * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
             * @example Primary account
             */
            display_name?: string;
        };
        /** @description A schema for a request to update an entity */
        UpdateEntityRequest: {
            /** @description An address description of the entity */
            address?: components["schemas"]["UpdateEntityAddressSchema"] | null;
            /** @description An official email address of the entity */
            email?: string | null;
            /** @description A set of meta data describing the individual */
            individual?: components["schemas"]["OptionalIndividualSchema"] | null;
            /** @description A set of meta data describing the organization */
            organization?: components["schemas"]["OptionalOrganizationSchema"] | null;
            /** @description The contact phone number of the entity. Required for US organizations to use payments. */
            phone?: string | null;
            /** @description (Germany only) The name of the local district court (_Amtsgericht_) where the entity is registered. Required if `registration_number` is provided. */
            registration_authority?: string | null;
            /** @description (Germany only) The entity's commercial register number (_Handelsregisternummer_) in the German Commercial Register, if available. */
            registration_number?: string | null;
            /** @description The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered. */
            tax_id?: string | null;
            /** @description A website of the entity */
            website?: string | null;
        };
        UpdateEntityUserRequest: {
            /** @description An entity user business email */
            email?: string | null;
            /** @description First name */
            first_name?: string | null;
            /** @description Last name */
            last_name?: string | null;
            /** @description Login */
            login?: string | null;
            /** @description An entity user phone number in the international format */
            phone?: string | null;
            /** @description UUID of the role assigned to this entity user */
            role_id?: string | null;
            /** @description Title */
            title?: string | null;
        };
        UpdateInvoice: {
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentRequest"][];
            /**
             * Format: uuid
             * @description Unique ID of the counterpart contact.
             */
            contact_id?: string;
            /**
             * Format: uuid
             * @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
             */
            counterpart_billing_address_id?: string;
            /**
             * Format: uuid
             * @description E-invoicing credentials ID of the counterpart
             */
            counterpart_einvoicing_credentials_id?: string;
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description Address where goods were shipped / where services were provided.
             */
            counterpart_shipping_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart VAT ID id
             */
            counterpart_vat_id_id?: string;
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["Discount2"];
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            entity?: components["schemas"]["ReceivableEntityBase"];
            /**
             * Format: uuid
             * @description Entity bank account ID
             */
            entity_bank_account_id?: string;
            /**
             * Format: uuid
             * @description Entity VAT ID id
             */
            entity_vat_id_id?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * Format: date
             * @description The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
             *
             *     Some countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.
             *
             *     In countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user.
             */
            fulfillment_date?: string;
            /** @description Is this Invoice will be sent through E-invoice system */
            is_einvoice?: boolean;
            line_items?: components["schemas"]["LineItemUpdate"][];
            /** @description A note with additional information for a receivable */
            memo?: string;
            /**
             * Format: uuid
             * @description E-invoicing network credentials ID of the entity
             */
            network_credentials_id?: string;
            /** Format: uuid */
            overdue_reminder_id?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /**
             * Format: uri
             * @description Link to your invoice's custom payment rails or external payment link.
             */
            payment_page_url?: string;
            /** Format: uuid */
            payment_reminder_id?: string;
            payment_terms?: components["schemas"]["InlinePaymentTermsRequestPayload"];
            /**
             * Format: uuid
             * @description Unique ID of the payment terms.
             */
            payment_terms_id?: string;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /** @description A list of IDs of user-defined tags (labels) assigned to this receivable. */
            tag_ids?: string[];
            /** @description Trade name of the entity */
            trade_name?: string;
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        /** @description Helper class that provides a standard way to create an ABC using
         *     inheritance. */
        UpdateInvoicePayload: {
            invoice: components["schemas"]["UpdateInvoice"];
        };
        UpdateIssuedInvoice: {
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentRequest"][];
            /**
             * Format: uuid
             * @description Unique ID of the counterpart contact.
             */
            contact_id?: string;
            /**
             * Format: uuid
             * @description Id of a new or updated counterpart
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description Counterpart VAT ID id
             */
            counterpart_vat_id_id?: string;
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            /**
             * Format: date
             * @description The date by which the invoice must be paid.
             */
            due_date?: string;
            entity?: components["schemas"]["ReceivableEntityOrganizationRequest"] | components["schemas"]["ReceivableEntityIndividualRequest"];
            entity_address?: components["schemas"]["ReceivableEntityAddressSchema"];
            /**
             * Format: uuid
             * @description Entity VAT ID id
             */
            entity_vat_id_id?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            /**
             * Format: date
             * @description The date when the goods are shipped or the service is provided. Can be a current, past, or future date.
             *
             *     Some countries require the fulfillment date in invoices for regulatory compliance. In this case, if the fulfillment date was not provided by the user, it is automatically set to the invoice issue date once the invoice gets issued.
             *
             *     In countries where the fulfillment date is optional, Monite does not auto-assign it if it was omitted by the user.
             */
            fulfillment_date?: string;
            /**
             * Format: date-time
             * @description The datetime when the invoice was issued
             */
            issue_date?: string;
            /** @description A note with additional information for a receivable */
            memo?: string;
            /** Format: uuid */
            overdue_reminder_id?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            /** Format: uuid */
            payment_reminder_id?: string;
            payment_terms?: components["schemas"]["InlinePaymentTermsRequestPayload"];
            /** Format: uuid */
            payment_terms_id?: string;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /**
             * @description A list of IDs of user-defined tags (labels) assigned to this receivable.
             * @default []
             */
            tag_ids: string[];
        };
        /** @description Helper class that provides a standard way to create an ABC using
         *     inheritance. */
        UpdateIssuedInvoicePayload: {
            issued_invoice: components["schemas"]["UpdateIssuedInvoice"];
        };
        /**
         * @description Line item with given product id can be changed only once
         * @example {
         *       "6639ac63-0622-4bd9-b340-31c25e2096b8": {
         *         "quantity": 5,
         *         "price_diff": 100,
         *         "old_price": 400
         *       }
         *     }
         */
        UpdateLineItemForCreditNote: {
            [key: string]: components["schemas"]["UpdateProductForCreditNote"];
        };
        UpdateLineItems: {
            data: components["schemas"]["LineItem"][];
        };
        UpdateMeEntityUserRequest: {
            /** @description An entity user business email */
            email?: string | null;
            /** @description First name */
            first_name?: string | null;
            /** @description Last name */
            last_name?: string | null;
            /** @description An entity user phone number in the international format */
            phone?: string | null;
            /** @description Title */
            title?: string | null;
        };
        UpdatePasswordPayload: {
            new_password: string;
            old_password: string;
        };
        UpdatePaymentIntentPayload: {
            amount: number;
        };
        UpdateProductForCreditNote: {
            /** @description The old price of the line item. Used to choose for which line item new price should be applied */
            old_price?: number;
            /** @description The price diff of the line item, i.e. applied discount */
            price_diff?: number;
            /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
            quantity: number;
        };
        /** @description Represents an Accounts Purchase Order document created by entity. */
        UpdatePurchaseOrderPayloadSchema: {
            /**
             * Format: uuid
             * @description The ID of counterpart address object stored in counterparts service. If not provided, counterpart's default address is used.
             */
            counterpart_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart unique ID.
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description Entity VAT ID identifier that applied to purchase order
             */
            entity_vat_id_id?: string;
            /** @description List of item to purchase */
            items?: components["schemas"]["PurchaseOrderItem"][];
            /** @description Msg which will be send to counterpart for who the purchase order is issued. */
            message?: string;
            /**
             * Format: uuid
             * @description Project id of a purchase order
             */
            project_id?: string;
            /** @description Number of days for which purchase order is valid */
            valid_for_days?: number;
        };
        UpdateQuote: {
            /** @description List of attachments to include with the receivable. Each attachment can be configured for email inclusion. If not provided, no attachments will be associated. */
            attachments?: components["schemas"]["AttachmentRequest"][];
            /**
             * Format: uuid
             * @description Unique ID of the counterpart contact.
             */
            contact_id?: string;
            /**
             * Format: uuid
             * @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company.
             */
            counterpart_billing_address_id?: string;
            /**
             * Format: uuid
             * @description Unique ID of the counterpart.
             */
            counterpart_id?: string;
            /**
             * Format: uuid
             * @description Address where goods were shipped / where services were provided.
             */
            counterpart_shipping_address_id?: string;
            /**
             * Format: uuid
             * @description Counterpart VAT ID id
             */
            counterpart_vat_id_id?: string;
            currency?: components["schemas"]["CurrencyEnum"];
            /** @description The amount of tax deducted in minor units */
            deduction_amount?: number;
            /** @description A note with additional information about a tax deduction */
            deduction_memo?: string;
            /** @description The discount for a receivable. */
            discount?: components["schemas"]["Discount2"];
            /** @description Settings for rendering documents in PDF format, including settings for line items and specific document types. */
            document_rendering?: components["schemas"]["DocumentRenderingSettings"];
            entity?: components["schemas"]["ReceivableEntityBase"];
            /**
             * Format: uuid
             * @description Entity bank account ID
             */
            entity_bank_account_id?: string;
            /**
             * Format: uuid
             * @description Entity VAT ID id
             */
            entity_vat_id_id?: string;
            /**
             * Format: date
             * @description The date (in ISO 8601 format) until which the quote is valid.
             */
            expiry_date?: string;
            /** @description Optional text displayed below the line items table in the PDF. */
            footer?: string;
            line_items?: components["schemas"]["LineItemUpdate"][];
            /** @description A note with additional information for a receivable */
            memo?: string;
            /** @description Metadata for partner needs */
            partner_metadata?: Record<string, never>;
            payment_terms?: components["schemas"]["InlinePaymentTermsRequestPayload"];
            /**
             * Format: uuid
             * @description Unique ID of the payment terms.
             */
            payment_terms_id?: string;
            /**
             * Format: uuid
             * @description A project related to current receivable
             */
            project_id?: string;
            /**
             * Format: uri
             * @description Link for custom quote accept page
             */
            quote_accept_page_url?: string;
            /** @description Whether acceptance a quote requires a signature. */
            signature_required?: boolean;
            /** @description A list of IDs of user-defined tags (labels) assigned to this receivable. */
            tag_ids?: string[];
            /** @description Trade name of the entity */
            trade_name?: string;
            /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
            vat_exempt?: boolean;
            /** @description The reason for the VAT exemption, if applicable. */
            vat_exemption_rationale?: string;
            /** @description The amount of tax withheld in percent minor units */
            withholding_tax_rate?: number;
        };
        /** @description Helper class that provides a standard way to create an ABC using
         *     inheritance. */
        UpdateQuotePayload: {
            quote: components["schemas"]["UpdateQuote"];
        };
        UpdateRecurrencePayload: {
            /** @description Controls how invoices are processed when generated:
             *     - "draft": Creates invoices in draft status, requiring manual review, issuing, and sending
             *     - "issue": Automatically issues invoices but requires manual sending
             *     - "issue_and_send": Fully automates the process (creates, issues, and sends invoices)
             *
             *     Default: "issue" (or "issue_and_send" if subject_text and body_text are provided)
             *
             *     Note: When using "issue_and_send", both subject_text and body_text must be provided.
             *      */
            automation_level?: components["schemas"]["AutomationLevel"];
            /** @description The body text for the email that will be sent with the recurring invoice. */
            body_text?: string;
            /**
             * @deprecated
             * @description Deprecated, use `start_date` instead
             */
            day_of_month?: components["schemas"]["DayOfMonth"];
            /**
             * Format: date
             * @description The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified.
             */
            end_date?: string;
            /**
             * @deprecated
             * @description Deprecated, use `end_date` instead
             */
            end_month?: number;
            /**
             * @deprecated
             * @description Deprecated, use `end_date` instead
             */
            end_year?: number;
            /** @description How often the invoice will be created. */
            frequency?: components["schemas"]["RecurrenceFrequency"];
            /** @description The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months. */
            interval?: number;
            /** @description How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified. */
            max_occurrences?: number;
            /** @description An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field. */
            recipients?: components["schemas"]["Recipients"];
            /**
             * Format: date
             * @description The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`.
             */
            start_date?: string;
            /** @description The subject for the email that will be sent with the recurring invoice. */
            subject_text?: string;
        };
        UpdateRoleRequest: {
            /** @description Role name */
            name?: string | null;
            /** @description Access permissions */
            permissions?: components["schemas"]["BizObjectsSchema-Input"] | null;
        };
        UpdateTextTemplatePayload: {
            name?: string;
            template?: string;
        };
        UpdateUserProfilePayload: {
            fullname?: string | null;
            password?: components["schemas"]["UpdatePasswordPayload"] | null;
        };
        UpdateWebhookSubscriptionRequest: {
            event_types?: string[] | null;
            object_type?: components["schemas"]["WebhookObjectType"] | null;
            url?: string | null;
        };
        UploadFile: {
            /** Format: binary */
            file: Blob;
            file_type: components["schemas"]["AllowedFileTypes"];
        };
        UserUpdatePayload: {
            fullname?: string | null;
            password?: string | null;
            role_id?: string | null;
        };
        UsersInviteRequest: {
            /** Format: email */
            email: string;
            /** Format: uuid */
            role_id: string;
        };
        ValidationError: {
            loc: (string | number)[];
            msg: string;
            type: string;
        };
        Variable: {
            description: string;
            name: string;
        };
        VariablesObject: {
            object_subtype: components["schemas"]["DocumentTypeEnum"];
            object_type: string;
            variables: components["schemas"]["Variable"][];
        };
        VariablesObjectList: {
            data: components["schemas"]["VariablesObject"][];
        };
        /** @enum {string} */
        VariablesType: "quote" | "invoice" | "credit_note" | "discount_reminder" | "final_reminder" | "overdue_reminder";
        /** @enum {string} */
        VatIDTypeEnum: "ae_trn" | "au_abn" | "au_arn" | "bg_uic" | "br_cnpj" | "br_cpf" | "ca_bn" | "ca_gst_hst" | "ca_pst_bc" | "ca_pst_mb" | "ca_pst_sk" | "ca_qst" | "ch_vat" | "cl_tin" | "es_cif" | "eu_oss_vat" | "eu_vat" | "gb_vat" | "ge_vat" | "hk_br" | "hu_tin" | "id_npwp" | "il_vat" | "in_gst" | "is_vat" | "jp_cn" | "jp_rn" | "kr_brn" | "li_uid" | "mx_rfc" | "my_frp" | "my_itn" | "my_sst" | "no_vat" | "nz_gst" | "ru_inn" | "ru_kpp" | "sa_vat" | "sg_gst" | "sg_uen" | "si_tin" | "th_vat" | "tw_vat" | "ua_vat" | "us_ein" | "za_vat" | "unknown";
        /** @enum {string} */
        VatModeEnum: "exclusive" | "inclusive";
        VatRateComponent: {
            /** @description Display name of the Tax. */
            name: string;
            /** @description Percent multiplied by a 100. Example: 12.125% is 1212.5. Will be rounded to 2 decimal places */
            value: number;
        };
        VatRateComponent2: {
            /** @description Display name of the Tax. */
            name: string;
            /** @description Percent multiplied by a 100. Example: 12.125% is 1212.5. Will be rounded to 2 decimal places */
            value: number;
        };
        /** @enum {string} */
        VatRateCreator: "monite" | "accounting";
        VatRateListResponse: {
            data: components["schemas"]["VatRateResponse"][];
        };
        VatRateRequest: {
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["VatRateComponent2"][];
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * Format: date
             * @description Date starting from when this rate can be used.
             */
            valid_from?: string;
            /**
             * Format: date
             * @description Date when this rate was depreciated, after this date rate cannot be used.
             */
            valid_until?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value?: number;
        };
        VatRateResponse: {
            /**
             * Format: uuid
             * @description Unique identifier of the vat rate object.
             */
            id: string;
            /**
             * Format: date-time
             * @description Date/time when this rate was recorded in the table.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date/time when this rate was updated in the table.
             */
            updated_at: string;
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["VatRateComponent2"][];
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country: components["schemas"]["AllowedCountries"];
            /**
             * @deprecated
             * @description By whom this rate was recorded: monite employee | accounting system.
             * @default monite
             */
            created_by: components["schemas"]["VatRateCreator"];
            /** @description Status for this vat rate: active | inactive. */
            status?: components["schemas"]["VatRateStatusEnum"];
            /**
             * Format: date
             * @description Date starting from when this rate can be used.
             */
            valid_from?: string;
            /**
             * Format: date
             * @description Date when this rate was depreciated, after this date rate cannot be used.
             */
            valid_until?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value: number;
        };
        /** @enum {string} */
        VatRateStatusEnum: "active" | "inactive";
        VatRateUpdate: {
            /** @description Sub-taxes included in the VAT. */
            components?: components["schemas"]["VatRateComponent2"][];
            /**
             * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
             * @example DE
             */
            country?: components["schemas"]["AllowedCountries"];
            /** @description Status for this vat rate: active | inactive. */
            status?: components["schemas"]["VatRateStatusEnum"];
            /**
             * Format: date
             * @description Date starting from when this rate can be used.
             */
            valid_from?: string;
            /**
             * Format: date
             * @description Date when this rate was depreciated, after this date rate cannot be used.
             */
            valid_until?: string;
            /** @description Percent minor units. Example: 12.5% is 1250. */
            value?: number;
        };
        VerificationAirwallexPlaidRequest: {
            /** @description The name of your application to be displayed in Plaid Modal */
            client_name: string;
            /** @description The name of the Link customization configured on the Plaid Dashboard. If not specified, the default customization will be applied */
            link_customization_name?: string;
            /**
             * Format: uri
             * @description URL to handle the OAuth verification flow
             */
            redirect_url: string;
        };
        VerificationAirwallexPlaidResponse: {
            /** @description Client name from the request */
            client_name: string;
            /** Format: date-time */
            expires_at: string;
            /** @description Customization name from the request */
            link_customization_name?: string;
            /** @description Link token that should be used to init Plaid SDK */
            link_token: string;
            /**
             * Format: uri
             * @description URL from the request
             */
            redirect_url: string;
        };
        VerificationError: {
            code: string;
            details: string;
        };
        VerificationRequest: {
            airwallex_plaid: components["schemas"]["VerificationAirwallexPlaidRequest"];
            type: components["schemas"]["BankAccountVerificationType"];
        };
        VerificationResponse: {
            airwallex_plaid: components["schemas"]["VerificationAirwallexPlaidResponse"];
            type: components["schemas"]["BankAccountVerificationType"];
        };
        /** @enum {string} */
        VerificationStatusEnum: "enabled" | "disabled" | "pending";
        VerifyPhoneNumberPayload: {
            /** @description The phone number of person attached to onboarding link */
            phone?: string;
        };
        VerifyResponse: {
            /**
             * Format: uuid
             * @description Entry UUID
             */
            id: string;
            /**
             * Format: hostname
             * @description The domain name.
             */
            domain: string;
            status: string;
        };
        /**
         * @description - NEW: A business has been created within Kanmon
         *     - ONBOARDED: A business has completed all of the onboarding steps within Kanmon and is now awaiting underwriting.
         *     - INPUT_REQUIRED: A business will be asked to provide required data
         * @enum {string}
         */
        WCBusinessStatus: "NEW" | "INPUT_REQUIRED" | "ONBOARDED";
        /**
         * @description - DRAFT: The invoice is in draft state. The business has not submitted the invoice for funding.
         *     - NEW: The business has submitted an invoice and it is under review.
         *     - FUNDED: The funds for the invoice have been disbursed. The business is now expected to pay back the funds.
         *     - PAID: A payment was made that fully paid off an outstanding invoice.
         *     - LATE: A payment was not made towards an outstanding invoice.
         *     - REJECTED: An invoice was rejected during the funding step.
         *     - DEFAULTED: A payment was not made towards an outstanding invoice.
         * @enum {string}
         */
        WCInvoiceStatus: "DRAFT" | "NEW" | "FUNDED" | "PAID" | "LATE" | "REJECTED" | "DEFAULTED";
        /**
         * @description - NEW: A new offer has been extended to the business.
         *     - ACCEPTED: Business has accepted an offer and is waiting on the closing process.
         *     - EXPIRED: Business has not accepted the offer, and the offer has expired.
         *     - CURRENT: A loan has been originated and does not currently have any outstanding delayed payments.
         *     - LATE: One or more repayments on the issued product have failed.
         *     - CLOSED: The issued product is no longer available to the business.
         *     - DEFAULTED: The business has failed to meet agreed-upon terms of the loan agreement.
         * @enum {string}
         */
        WCOfferStatus: "NEW" | "ACCEPTED" | "EXPIRED" | "CURRENT" | "LATE" | "CLOSED" | "DEFAULTED";
        /**
         * @description - MULTIPLE_DURATION: The business can repay the loan over multiple durations.
         *     - FIXED_DURATION: The business must repay the loan over a fixed duration.
         *     - FIXED_DATE: The business must repay the loan on a fixed date.
         * @enum {string}
         */
        WCRepaymentType: "MULTIPLE_DURATION" | "FIXED_DURATION" | "FIXED_DATE";
        /** @enum {string} */
        WebhookDeliveryCursorFields: "created_at" | "updated_at";
        WebhookDeliveryPaginationResource: {
            /** @description A set of webhooks returned per page */
            data: components["schemas"]["WebhookDeliveryResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string | null;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string | null;
        };
        WebhookDeliveryResource: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            event_id: string;
            requests_made_count: number;
            response?: string | null;
            response_status_code?: number | null;
            /** Format: uri */
            url: string;
            was_successful?: boolean | null;
        };
        /** @enum {string} */
        WebhookObjectType: "account" | "accounting_connection" | "approval" | "approval_request" | "approval_policy" | "approval_policy_process" | "batch_payment" | "comment" | "counterpart" | "counterpart_address" | "counterpart_bank_account" | "counterpart_contact_person" | "counterpart_partner_metadata" | "counterpart_tax_id" | "entity" | "entity_bank_account" | "entity_settings" | "entity_user" | "export" | "overdue_reminder" | "partner_settings" | "payable" | "payables_credit_note" | "payables_purchase_order" | "payable.line_item" | "payment" | "payment_intent" | "payment_link" | "payment_reminder" | "product" | "project" | "receivable" | "recurrence" | "role" | "tag" | "todo_task" | "workflow" | "workflow_pipeline" | "ocr_task" | "delivery_note" | "receipt" | "transaction";
        /** @enum {string} */
        WebhookSubscriptionCursorFields: "created_at" | "updated_at";
        WebhookSubscriptionPaginationResource: {
            /** @description A set of webhook settings of different types returned per page */
            data: components["schemas"]["WebhookSubscriptionResource"][];
            /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
            next_pagination_token?: string | null;
            /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
            prev_pagination_token?: string | null;
        };
        WebhookSubscriptionResource: {
            /** Format: uuid */
            id: string;
            event_types: string[];
            object_type: components["schemas"]["WebhookObjectType"];
            status: components["schemas"]["WebhookSubscriptionStatus"];
            /** Format: uri */
            url: string;
        };
        WebhookSubscriptionResourceWithSecret: {
            /** Format: uuid */
            id: string;
            event_types: string[];
            object_type: components["schemas"]["WebhookObjectType"];
            secret: string;
            status: components["schemas"]["WebhookSubscriptionStatus"];
            /** Format: uri */
            url: string;
        };
        /** @enum {string} */
        WebhookSubscriptionStatus: "enabled" | "disabled";
        /** @enum {string} */
        YapilyCountriesCoverageCodes: "BE" | "GB" | "IT" | "IE" | "NL" | "DE" | "AT";
        portal_v1_companies_id_logo: {
            /** Format: binary */
            file: Blob;
        };
        portal_v1_profile_avatar: {
            /** Format: binary */
            file: Blob;
        };
        portal_v1_users_id_avatar: {
            /** Format: binary */
            file: Blob;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
type $defs = Record<string, never>;
interface operations {
    get_accounting_payables: {
        parameters: {
            query?: {
                /** @description Number of results per page. */
                limit?: number;
                /** @description Number of results to skip before selecting items to return. */
                offset?: number;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingPayableList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_payables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description An internal ID of the payable invoice (bill) in the accounting system. You can get these IDs from `GET /accounting/payables`. */
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingPayable"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_receivables: {
        parameters: {
            query?: {
                /** @description Number of results per page. */
                limit?: number;
                /** @description Number of results to skip before selecting items to return. */
                offset?: number;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingReceivableList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_receivables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description An internal ID of the invoice in the accounting system. You can get these IDs from `GET /accounting/receivables`. */
                invoice_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingReceivable"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_connections: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingConnectionList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_accounting_connections: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingConnectionResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_connections_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                connection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingConnectionResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_accounting_connections_id_disconnect: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                connection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingConnectionResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_accounting_connections_id_sync: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                connection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingMessageResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_synced_records: {
        parameters: {
            query: {
                object_type: components["schemas"]["ObjectMatchTypes"];
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page.
                 *
                 *     When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["SyncRecordCursorFields"];
                object_id?: string;
                object_id__in?: string[];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                updated_at__gt?: string;
                updated_at__lt?: string;
                updated_at__gte?: string;
                updated_at__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncRecordResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_synced_records_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                synced_record_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncRecordResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_accounting_synced_records_id_push: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                synced_record_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncRecordResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_tax_rates: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page.
                 *
                 *     When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["TaxRateAccountCursorFields"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingTaxRateListResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_accounting_tax_rates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                tax_rate_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingTaxRateResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ai_conversations: {
        parameters: {
            query?: {
                limit?: number;
                title__icontains?: string | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ai_conversations: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ai_conversations_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationResource"];
                };
            };
            /** @description Conversation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ai_conversations_id_messages: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                "x-entity-name"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientMessage"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ai_message_feedbacks: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageFeedbackPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ai_message_feedbacks_commentary: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageFeedbackCommentaryPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ai_prompts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ai_prompts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ai_prompts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                prompt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptResource"];
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_ai_prompts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                prompt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_ai_prompts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                prompt_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_analytics_credit_notes: {
        parameters: {
            query: {
                dimension?: components["schemas"]["CreditNoteDimensionEnum"];
                metric: components["schemas"]["CreditNoteMetricEnum"];
                aggregation_function: components["schemas"]["AggregationFunctionEnum"];
                date_dimension_breakdown?: components["schemas"]["DateDimensionBreakdownEnum"];
                /** @description The number of items (0 .. 400) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                issued_at?: string;
                issued_at__gt?: string;
                issued_at__lt?: string;
                issued_at__gte?: string;
                issued_at__lte?: string;
                document_id?: string;
                document_id__iexact?: string;
                document_id__contains?: string;
                document_id__icontains?: string;
                has_file?: boolean;
                total_amount__gt?: number;
                total_amount__lt?: number;
                total_amount__gte?: number;
                total_amount__lte?: number;
                subtotal__gt?: number;
                subtotal__lt?: number;
                subtotal__gte?: number;
                subtotal__lte?: number;
                based_on?: string;
                counterpart_id?: string;
                created_by_entity_user_id?: string;
                status?: components["schemas"]["PayableCreditNoteStateEnum"];
                status__in?: components["schemas"]["PayableCreditNoteStateEnum"][];
                status__not_in?: components["schemas"]["PayableCreditNoteStateEnum"][];
                origin?: components["schemas"]["OriginEnum"];
                currency?: components["schemas"]["CurrencyEnum"];
                project_id?: string;
                project_id__in?: string[];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableAnalyticsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_analytics_payables: {
        parameters: {
            query: {
                dimension?: components["schemas"]["PayableDimensionEnum"];
                metric: components["schemas"]["PayableMetricEnum"];
                aggregation_function: components["schemas"]["AggregationFunctionEnum"];
                date_dimension_breakdown?: components["schemas"]["DateDimensionBreakdownEnum"];
                /** @description The number of items (0 .. 400) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description Return only payables created in Monite after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]. */
                created_at__gt?: string;
                /** @description Return only payables created in Monite before the specified date and time. */
                created_at__lt?: string;
                /** @description Return only payables created in Monite on or after the specified date and time. */
                created_at__gte?: string;
                /** @description Return only payables created in Monite before or on the specified date and time. */
                created_at__lte?: string;
                /** @description Return only payables that have the specified [status](https://docs.monite.com/accounts-payable/payables/index).
                 *
                 *     To query multiple statuses at once, use the `status__in` parameter instead. */
                status?: components["schemas"]["PayableStateEnum"];
                /** @description Return only payables that have the specified [statuses](https://docs.monite.com/accounts-payable/payables/index).
                 *
                 *     To specify multiple statuses, repeat this parameter for each value: `status__in=draft&status__in=new` */
                status__in?: components["schemas"]["PayableStateEnum"][];
                /** @description Return only payables with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
                 *
                 *     To specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>` */
                id__in?: string[];
                /** @description Return only payables with the exact specified total amount. The amount must be specified in the minor units of currency. For example, $12.5 is represented as 1250. */
                total_amount?: number;
                /** @description Return only payables whose total amount (in minor units) exceeds the specified value. */
                total_amount__gt?: number;
                /** @description Return only payables whose total amount (in minor units) is less than the specified value. */
                total_amount__lt?: number;
                /** @description Return only payables whose total amount (in minor units) is greater than or equal to the specified value. */
                total_amount__gte?: number;
                /** @description Return only payables whose total amount (in minor units) is less than or equal to the specified value. */
                total_amount__lte?: number;
                /** @description Return only payables with the specified amount. */
                amount?: number;
                /** @description Return only payables whose amount (in minor units) exceeds the specified value. */
                amount__gt?: number;
                /** @description Return only payables whose amount (in minor units) is less than the specified value. */
                amount__lt?: number;
                /** @description Return only payables whose amount (in minor units) is greater than or equal to the specified value. */
                amount__gte?: number;
                /** @description Return only payables whose amount (in minor units) is less than or equal to the specified value. */
                amount__lte?: number;
                /** @description Return only payables that use the specified currency. */
                currency?: components["schemas"]["CurrencyEnum"];
                /** @description Return only payables received from counterparts with the specified name (exact match, case-sensitive).
                 *
                 *     For counterparts of `type = individual`, the full name is formatted as `first_name last_name`. */
                counterpart_name?: string;
                /** @description Return only payables received from counterparts whose name contains the specified string (case-sensitive). */
                counterpart_name__contains?: string;
                /** @description Return only payables received from counterparts whose name contains the specified string (case-insensitive). */
                counterpart_name__icontains?: string;
                /** @description Apply the `icontains` condition to search for the specified text in the `document_id` and `counterpart_name` fields in the payables. */
                search_text?: string;
                /** @description Return payables that are due on the specified date (YYYY-MM-DD) */
                due_date?: string;
                /** @description Return payables that are due after the specified date (exclusive, YYYY-MM-DD). */
                due_date__gt?: string;
                /** @description Return payables that are due before the specified date (exclusive, YYYY-MM-DD). */
                due_date__lt?: string;
                /** @description Return payables that are due on or after the specified date (YYYY-MM-DD). */
                due_date__gte?: string;
                /** @description Return payables that are due before or on the specified date (YYYY-MM-DD). */
                due_date__lte?: string;
                /** @description Return payables that are issued at the specified date (YYYY-MM-DD) */
                issued_at?: string;
                /** @description Return payables that are issued after the specified date (exclusive, YYYY-MM-DD). */
                issued_at__gt?: string;
                /** @description Return payables that are issued before the specified date (exclusive, YYYY-MM-DD). */
                issued_at__lt?: string;
                /** @description Return payables that are issued on or after the specified date (YYYY-MM-DD). */
                issued_at__gte?: string;
                /** @description Return payables that are issued before or on the specified date (YYYY-MM-DD). */
                issued_at__lte?: string;
                /** @description Return a payable with the exact specified document number (case-sensitive).
                 *
                 *     The `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`). */
                document_id?: string;
                /** @description Return only payables whose document number (`document_id`) contains the specified string (case-sensitive). */
                document_id__contains?: string;
                /** @description Return only payables whose document number (`document_id`) contains the specified string (case-insensitive). */
                document_id__icontains?: string;
                /** @description Return only payables created in Monite by the entity user with the specified ID. */
                was_created_by_user_id?: string;
                /** @description Return only payables received from the counterpart with the specified ID.
                 *
                 *     Counterparts that have been deleted but have associated payables will still return results here because the payables contain a frozen copy of the counterpart data.
                 *
                 *     If the specified counterpart ID does not exist and never existed, no results are returned. */
                counterpart_id?: string;
                /** @description Return only payables coming from the specified source. */
                source_of_payable_data?: components["schemas"]["SourceOfPayableDataEnum"];
                /** @description Return only payables with specific OCR statuses. */
                ocr_status?: components["schemas"]["OcrStatusEnum"];
                /** @description Search for a payable by the identifier of the line item associated with it. */
                line_item_id?: string;
                /** @description Search for a payable by the identifier of the purchase order associated with it. */
                purchase_order_id?: string;
                /** @description Return only payables assigned to the project with the specified ID.
                 *
                 *     Valid but nonexistent project IDs do not raise errors but return no results. */
                project_id?: string;
                /** @description Return only payables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results. */
                project_id__in?: string[];
                /** @description Return only payables whose `tags` include at least one of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce no results. */
                tag_ids?: string[];
                /** @description Return only payables whose `tags` do not include any of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce the results. */
                tag_ids__not_in?: string[];
                /** @description Filter objects based on whether they have tags. If true, only objects with tags are returned. If false, only objects without tags are returned. */
                has_tags?: boolean;
                /** @description Return only payables from a given origin ['einvoice', 'upload', 'email'] */
                origin?: components["schemas"]["PayableOriginEnum"];
                /** @description Return only payables with or without attachments (files) */
                has_file?: boolean;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableAnalyticsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_analytics_receivables: {
        parameters: {
            query: {
                dimension?: components["schemas"]["ReceivableDimensionEnum"];
                metric: components["schemas"]["ReceivableMetricEnum"];
                aggregation_function: components["schemas"]["AggregationFunctionEnum"];
                date_dimension_breakdown?: components["schemas"]["DateDimensionBreakdownEnum"];
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page.
                 *
                 *     When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description Return only receivables with the specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
                 *
                 *     To specify multiple IDs, repeat this parameter for each value:
                 *     `id__in=<id1>&id__in=<id2>` */
                id__in?: string[];
                /** @description Return only receivables that have the specified statuses. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
                 *
                 *     To specify multiple statuses, repeat this parameter for each value:
                 *     `status__in=draft&status__in=issued` */
                status__in?: ("draft" | "issuing" | "issued" | "failed" | "accepted" | "expired" | "declined" | "recurring" | "partially_paid" | "paid" | "overdue" | "uncollectible" | "canceled")[];
                /** @description Return only receivables created by the entity users with the specified IDs.To specify multiple user IDs, repeat this parameter for each ID:
                 *     `entity_user_id__in=<user1>&entity_user_id__in=<user2>`
                 *
                 *     If the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.
                 *
                 *     IDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results. */
                entity_user_id__in?: string[];
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ReceivableCursorFields"];
                /** @description Return only receivables whose [tags](https://docs.monite.com/common/tags) include at least one of the tags with the specified IDs.
                 *
                 *     For example, given receivables with the following tags:
                 *     1. tagA
                 *     2. tagB
                 *     3. tagA, tagB
                 *     4. tagC
                 *     5. tagB, tagC
                 *
                 *
                 *     `tag_ids__in=<tagA>&tag_ids__in=<tagB>` will return receivables 1, 2, 3, and 5.
                 *
                 *     Valid but nonexistent tag IDs do not raise errors but produce no results. */
                tag_ids__in?: string[];
                /** @description Return only receivables whose [tags](https://docs.monite.com/common/tags) include all of the tags with the specified IDs and optionally other tags that are not specified.
                 *
                 *     For example, given receivables with the following tags:
                 *     1. tagA
                 *     2. tagB
                 *     3. tagA, tagB
                 *     4. tagC
                 *     5. tagA, tagB, tagC
                 *
                 *
                 *     `tag_ids=<tagA>&tag_ids=<tagB>` will return receivables 3 and 5. */
                tag_ids?: string[];
                /** @description Return only receivables whose line items include at least one of the product IDs with the specified IDs.
                 *
                 *     To specify multiple product IDs, repeat this parameter for each ID:
                 *     `product_ids__in=<product1>&product_ids__in=<product2>`
                 *
                 *     For example, given receivables with the following product IDs:
                 *     1. productA
                 *     2. productB
                 *     3. productA, productB
                 *     4. productC
                 *     5. productB, productC
                 *
                 *
                 *     `product_ids__in=<productA>&product_ids__in=<productB>` will return receivables 1, 2, 3, and 5.Valid but nonexistent product IDs do not raise errors but produce no results. */
                product_ids__in?: string[];
                /** @description Return only receivables whose line items include all of the product IDs with the specified IDs and optionally other products that are not specified.
                 *
                 *     To specify multiple product IDs, repeat this parameter for each ID:
                 *     `product_ids=<product1>&product_ids=<product2>`
                 *
                 *     For example, given receivables with the following product IDs:
                 *     1. productA
                 *     2. productB
                 *     3. productA, productB
                 *     4. productC
                 *     5. productA, productB, productC
                 *
                 *
                 *     `product_ids=<productA>&product_ids=<productB>` will return receivables 3 and 5.
                 *
                 *      */
                product_ids?: string[];
                /** @description Return only receivables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results. */
                project_id__in?: string[];
                type?: components["schemas"]["ReceivableType"];
                document_id?: string;
                document_id__contains?: string;
                document_id__icontains?: string;
                issue_date__gt?: string;
                issue_date__lt?: string;
                issue_date__gte?: string;
                issue_date__lte?: string;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                counterpart_id?: string;
                counterpart_name?: string;
                counterpart_name__contains?: string;
                counterpart_name__icontains?: string;
                total_amount?: number;
                total_amount__gt?: number;
                total_amount__lt?: number;
                total_amount__gte?: number;
                total_amount__lte?: number;
                discounted_subtotal?: number;
                discounted_subtotal__gt?: number;
                discounted_subtotal__lt?: number;
                discounted_subtotal__gte?: number;
                discounted_subtotal__lte?: number;
                status?: "draft" | "issuing" | "issued" | "failed" | "accepted" | "expired" | "declined" | "recurring" | "partially_paid" | "paid" | "overdue" | "uncollectible" | "canceled";
                entity_user_id?: string;
                based_on?: string;
                due_date__gt?: string;
                due_date__lt?: string;
                due_date__gte?: string;
                due_date__lte?: string;
                project_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivablesAnalyticsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_policies: {
        parameters: {
            query?: {
                process_id?: string;
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ApprovalPolicyCursorFields"];
                id__in?: string[];
                status?: "active" | "pending";
                status__in?: ("active" | "pending")[];
                name?: string;
                name__contains?: string;
                name__ncontains?: string;
                created_by?: string;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                updated_at__gt?: string;
                updated_at__lt?: string;
                updated_at__gte?: string;
                updated_at__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalPolicyResourceList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_approval_policies: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalPolicyCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalPolicyResource"];
                };
            };
            /** @description Possible responses: `Script validation error: {errors}.` */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_policies_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalPolicyResource"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_approval_policies_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_approval_policies_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalPolicyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalPolicyResource"];
                };
            };
            /** @description Possible responses: `Script validation error: {errors}.` */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_policies_id_processes: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalProcessResourceList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_policies_id_processes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
                process_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessResource"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.` */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_approval_policies_id_processes_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
                process_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessResource"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.` */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action is not allowed for approval policy process with id {id} because it is not in one of the following statuses: {possible_statuses}` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_policies_id_processes_id_steps: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_policy_id: string;
                process_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalProcessStepResourceList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.` */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_requests: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ApprovalRequestCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                updated_at__gt?: string;
                updated_at__lt?: string;
                updated_at__gte?: string;
                updated_at__lte?: string;
                object_id?: string;
                object_id__in?: string[];
                status?: components["schemas"]["ApprovalRequestStatus"];
                status__in?: components["schemas"]["ApprovalRequestStatus"][];
                user_id?: string;
                role_id?: string;
                object_type?: components["schemas"]["ObjectType"];
                object_type__in?: components["schemas"]["ObjectType"][];
                created_by?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalRequestResourceList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_approval_requests: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApprovalRequestCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalRequestResourceWithMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_approval_requests_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalRequestResourceWithMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_approval_requests_id_approve: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalRequestResourceWithMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_approval_requests_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalRequestResourceWithMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_approval_requests_id_reject: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                approval_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApprovalRequestResourceWithMetadata"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_auth_revoke: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RevokeTokenPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_auth_token: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ObtainTokenPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessTokenResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_bank_accounts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityBankAccountPaginationResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_bank_accounts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEntityBankAccountRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityBankAccountResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_bank_accounts_complete_verification: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteVerificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteVerificationResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_bank_accounts_start_verification: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerificationResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_bank_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityBankAccountResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_bank_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_bank_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEntityBankAccountRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityBankAccountResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_bank_accounts_id_complete_verification: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteRefreshVerificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteRefreshVerificationResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_bank_accounts_id_make_default: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityBankAccountResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_bank_accounts_id_refresh_verification: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerificationResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_bank_accounts_id_verifications: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankAccountVerifications"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_batch_payments: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentsBatchPaymentRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentsBatchPaymentResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_batch_payments_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                batch_payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentsBatchPaymentResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_comments: {
        parameters: {
            query: {
                object_type: components["schemas"]["ObjectTypeAvailableComment"];
                object_id: string;
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["CommentCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentResourceList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_comments: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Could not notify groups: {not_valid_recipients}. Recipients dont exists`, `groups with ids: {','.join(missed_ids)} dont exists`, `Could not notify groups: {missed_groups}. Only {available_groups} are available`, `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_comments_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                comment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_comments_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                comment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_comments_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                comment_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts: {
        parameters: {
            query?: {
                /** @description The IBAN of the counterpart's bank account. */
                iban?: string;
                /**
                 * @description The bank's sort code.
                 * @example 123456
                 */
                sort_code?: string;
                /** @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits. */
                account_number?: string;
                /** @description The tax ID of the counterpart. */
                tax_id?: string;
                /** @description The VAT ID of the counterpart. */
                vat_id?: string;
                /** @description A list of counterpart IDs to search through. */
                id__in?: string[];
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["CounterpartCursorFields"];
                type?: components["schemas"]["CounterpartType"];
                counterpart_name?: string;
                counterpart_name__iexact?: string;
                counterpart_name__contains?: string;
                counterpart_name__icontains?: string;
                is_vendor?: boolean;
                is_customer?: boolean;
                email?: string;
                email__contains?: string;
                email__icontains?: string;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                "address.country"?: string;
                "address.city"?: string;
                "address.postal_code"?: string;
                "address.state"?: string;
                "address.line1"?: string;
                "address.line2"?: string;
                tag_ids__in?: string[];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartPaginationResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_counterparts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_counterparts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_addresses: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartAddressResourceList"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_addresses: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartAddress"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartAddressResponseWithCounterpartID"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_addresses_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                address_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartAddressResponseWithCounterpartID"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_counterparts_id_addresses_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                address_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_counterparts_id_addresses_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                address_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartUpdateAddress"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartAddressResponseWithCounterpartID"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_bank_accounts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartBankAccountResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_bank_accounts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCounterpartBankAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartBankAccountResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_bank_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartBankAccountResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_counterparts_id_bank_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_counterparts_id_bank_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCounterpartBankAccount"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartBankAccountResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_bank_accounts_id_make_default: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                bank_account_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_contacts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartContactsResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_contacts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCounterpartContactPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartContactResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_contacts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                contact_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartContactResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_counterparts_id_contacts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                contact_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_counterparts_id_contacts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                contact_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCounterpartContactPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartContactResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_contacts_id_make_default: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                contact_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartContactResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_einvoicing_credentials: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartEinvoicingCredentialResponseList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_einvoicing_credentials: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCounterpartEinvoicingCredentialPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartEinvoicingCredentialResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_einvoicing_credentials_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credential_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartEinvoicingCredentialResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_counterparts_id_einvoicing_credentials_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credential_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_counterparts_id_einvoicing_credentials_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credential_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCounterpartEinvoicingCredentialSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartEinvoicingCredentialResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_partner_metadata: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerMetadataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    put_counterparts_id_partner_metadata: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartnerMetadata"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerMetadataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_vat_ids: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartVatIDResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_counterparts_id_vat_ids: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartVatID"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartVatIDResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_counterparts_id_vat_ids_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                vat_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartVatIDResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_counterparts_id_vat_ids_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                vat_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_counterparts_id_vat_ids_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                vat_id: string;
                counterpart_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CounterpartUpdateVatID"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartVatIDResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_custom_vat_rates: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomVatRateResponseList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_custom_vat_rates: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomVatRateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomVatRateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_custom_vat_rates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                custom_vat_rate_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomVatRateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_custom_vat_rates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                custom_vat_rate_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_custom_vat_rates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                custom_vat_rate_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomVatRateUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomVatRateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_data_exports: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["DataExportCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                created_by_entity_user_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllDocumentExportResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_data_exports: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportPayloadSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateExportTaskResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Not all statuses are available: {missed_statuses}. Available ones: {object_statuses},`{missed_objects} are not allowed. Available only {objects}` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_data_exports_extra_data: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ExportSettingCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                updated_at__gt?: string;
                updated_at__lt?: string;
                updated_at__gte?: string;
                updated_at__lte?: string;
                object_id?: string;
                field_name?: string;
                field_value?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraDataResourceList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_data_exports_extra_data: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraDataCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraDataResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_data_exports_extra_data_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                extra_data_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraDataResource"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_data_exports_extra_data_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                extra_data_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraDataResource"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_data_exports_extra_data_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                extra_data_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtraDataUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExtraDataResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_data_exports_supported_formats: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SupportedFormatSchema"][];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_data_exports_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                document_export_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentExportResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_delivery_notes: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["DeliveryNoteCursorFields"];
                id__in?: string[];
                status?: components["schemas"]["DeliveryNoteStatusEnum"];
                status__in?: components["schemas"]["DeliveryNoteStatusEnum"][];
                document_id?: string;
                document_id__contains?: string;
                document_id__icontains?: string;
                created_by_entity_user_id?: string;
                counterpart_id?: string;
                based_on?: string;
                based_on_document_id?: string;
                based_on_document_id__contains?: string;
                based_on_document_id__icontains?: string;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                delivery_date__gt?: string;
                delivery_date__lt?: string;
                delivery_date__gte?: string;
                delivery_date__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNoteResourceList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_delivery_notes: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeliveryNoteCreateRequest"] | components["schemas"]["DeliveryNoteCreateBasedOnRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNoteResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_delivery_notes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                delivery_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNoteResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_delivery_notes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                delivery_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_delivery_notes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                delivery_note_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeliveryNoteUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNoteResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_delivery_notes_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                delivery_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNoteResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_delivery_notes_id_mark_as_delivered: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                delivery_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryNoteResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_document_templates: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateListResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_document_templates_system: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateListResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_document_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                document_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateReceivableResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_document_templates_id_make_default: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                document_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateReceivableResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_document_templates_id_preview: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                document_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": unknown;
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_einvoice_search: {
        parameters: {
            query: {
                network_identifier: string;
                network_schema: components["schemas"]["EinvoiceSchemaTypeEnum"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartEinvoicingCredentialExistenceResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_einvoicing_connections: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EInvoicingRetrieveListData"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_einvoicing_connections: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EinvoicingConnectionCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EinvoicingConnectionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_einvoicing_connections_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                einvoicing_connection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EinvoicingConnectionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_einvoicing_connections_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                einvoicing_connection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_einvoicing_connections_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                einvoicing_connection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EinvoicingConnectionUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EinvoicingConnectionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_einvoicing_connections_id_network_credentials: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                einvoicing_connection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EinvoicingNetworkCredentialsCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EinvoicingNetworkCredentialsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string | null;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["EntityCursorFields"] | null;
                type?: components["schemas"]["EntityTypeEnum"] | null;
                created_at__gt?: string | null;
                created_at__lt?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
                id__in?: string[] | null;
                id__not_in?: string[] | null;
                email?: string | null;
                email__in?: string[] | null;
                email__not_in?: string[] | null;
                status?: components["schemas"]["EntityStatusEnum"] | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_entities: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEntityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_me: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entities_me: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEntityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entities_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEntityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_entities_id_activate: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_entities_id_deactivate: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_entities_id_documents: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    put_entities_id_logo: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_put_entities_id_logo"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileSchema2"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_entities_id_logo: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_onboarding_data: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityOnboardingDataResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    put_entities_id_onboarding_data: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityOnboardingDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityOnboardingDataResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entities_id_onboarding_data: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityOnboardingDataRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityOnboardingDataResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_onboarding_requirements: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingRequirementsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_partner_metadata: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerMetadataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    put_entities_id_partner_metadata: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartnerMetadata"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerMetadataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_payment_methods: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingPaymentMethodsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    put_entities_id_payment_methods: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnabledPaymentMethods"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingPaymentMethodsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_settings: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entities_id_settings: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description A unique ID to specify the entity. */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchSettingsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_settings_next_document_numbers: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description Unique ID of the entity */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NextDocumentNumbers"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_vat_ids: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityVatIDResourceList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_entities_id_vat_ids: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityVatID"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityVatIDResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entities_id_vat_ids_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                id: string;
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityVatIDResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_entities_id_vat_ids_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                id: string;
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entities_id_vat_ids_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                id: string;
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityUpdateVatID"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityVatIDResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entity_users: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string | null;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["EntityUserCursorFields"] | null;
                id__in?: string[] | null;
                id__not_in?: string[] | null;
                role_id?: string | null;
                role_id__in?: string[] | null;
                login?: string | null;
                status?: string | null;
                first_name?: string | null;
                name__istartswith?: string | null;
                created_at__gt?: string | null;
                created_at__lt?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityUserPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_entity_users: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEntityUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entity_users_me: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entity_users_me: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMeEntityUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entity_users_my_entity: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entity_users_my_entity: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEntityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entity_users_my_role: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_entity_users_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                entity_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_entity_users_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                entity_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_entity_users_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                entity_user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEntityUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_events: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string | null;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["EventCursorFields"] | null;
                object_type?: components["schemas"]["WebhookObjectType"] | null;
                created_at__gt?: string | null;
                created_at__lt?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
            };
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventPaginationResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_events_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                /** @description ID of the webhook event. This is the `id` value you might have received in a webhook or retrieved from `GET /events`. */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_files: {
        parameters: {
            query?: {
                id__in?: string[] | null;
                file_type?: components["schemas"]["AllowedFileTypes"] | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilesResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_files: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadFile"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_files_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_files_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_financing_invoices: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["FinancingInvoiceCursorFields"];
                /** @description ID of a payable or receivable invoice.  */
                invoice_id?: string;
                /** @description List of invoice IDs.  */
                invoice_id__in?: string[];
                /** @description Status of the invoice.  */
                status?: components["schemas"]["WCInvoiceStatus"];
                /** @description List of invoice statuses.  */
                status__in?: components["schemas"]["WCInvoiceStatus"][];
                /** @description Type of the invoice. payable or receivable.  */
                type?: components["schemas"]["FinancingInvoiceType"];
                /** @description List of invoice types.  */
                type__in?: components["schemas"]["FinancingInvoiceType"][];
                /** @description Document ID of the invoice.  */
                document_id?: string;
                /** @description List of document IDs.  */
                document_id__in?: string[];
                /** @description Issue date greater than.  */
                issue_date__gt?: string;
                /** @description Issue date less than.  */
                issue_date__lt?: string;
                /** @description Issue date greater than or equal.  */
                issue_date__gte?: string;
                /** @description Issue date less than or equal.  */
                issue_date__lte?: string;
                /** @description Due date greater than.  */
                due_date__gt?: string;
                /** @description Due date less than.  */
                due_date__lt?: string;
                /** @description Due date greater than or equal.  */
                due_date__gte?: string;
                /** @description Due date less than or equal.  */
                due_date__lte?: string;
                /** @description Created date greater than.  */
                created_at__gt?: string;
                /** @description Created date less than.  */
                created_at__lt?: string;
                /** @description Created date greater than or equal.  */
                created_at__gte?: string;
                /** @description Created date less than or equal.  */
                created_at__lte?: string;
                /** @description Total amount of the invoice in minor units.  */
                total_amount?: number;
                /** @description Total amount greater than.  */
                total_amount__gt?: number;
                /** @description Total amount less than.  */
                total_amount__lt?: number;
                /** @description Total amount greater than or equal.  */
                total_amount__gte?: number;
                /** @description Total amount less than or equal.  */
                total_amount__lte?: number;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancingInvoiceListResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_financing_invoices: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinancingPushInvoicesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancingPushInvoicesResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_financing_offers: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancingOffersResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_financing_tokens: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FinancingTokenResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_frontend_bank_account_masks: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["OnboardingBankAccountMask"];
                    };
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_frontend_bank_accounts_currency_to_supported_countries: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["AllowedCountries"][];
                    };
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_frontend_document_type_descriptions: {
        parameters: {
            query: {
                country: components["schemas"]["AllowedCountries"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingDocumentsDescriptions"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_frontend_onboarding_requirements: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalOnboardingRequirementsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_frontend_person_mask: {
        parameters: {
            query: {
                relationships: components["schemas"]["Relationship"][];
                country?: components["schemas"]["AllowedCountries"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingPersonMask"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_accounting_connections_id_sync_status: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page.
                 *
                 *     When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["SyncRecordCursorFields"];
                sync_status?: components["schemas"]["SyncStatus"];
                type?: components["schemas"]["ObjectMatchTypes"];
            };
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                connection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SyncStatusResponseList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_counterparts_ai_suggestions: {
        parameters: {
            query: {
                /** @description The address of the counterpart. */
                address?: string;
                /** @description The bank account of the counterpart. */
                bank_account?: string;
                /** @description The name of the counterpart. */
                name: string;
                /** @description The VAT ID of the counterpart. */
                vat?: string;
            };
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterpartAiSuggestionsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_currencies: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["CurrencyDetails"];
                    };
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_entities_id_logo: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_onboarding_links_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinkInternalResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_onboarding_links_id_airwallex_component: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinksAirwallexComponentDataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_internal_onboarding_links_id_airwallex_component: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OnboardingLinksAirwallexComponentData"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinksAirwallexComponentDataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_onboarding_links_id_airwallex_component_auth: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OnboardingLinksAirwallexComponentCodeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinksAirwallexComponentCodeResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_onboarding_links_id_request_otp: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyPhoneNumberPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_onboarding_links_id_stripe: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinksStripeDataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_internal_onboarding_links_id_stripe: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OnboardingLinksStripeData"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinksStripeDataResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_onboarding_links_id_verify_otp: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                onboarding_link_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PhoneNumberVerificationCheckPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinksAccessTokenResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payables_id_revert_payment: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RevertPaymentsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_internal_payment_intents_id_authorize: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthPaymentIntentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthPaymentIntentResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payment_intents_id_authorize_embedded: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbeddedAuthPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddedAuthorizationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_payment_intents_id_authorize_embedded_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
                consent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddedAuthorizationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payment_intents_id_authorize_embedded_id_set_sca_code: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
                consent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetScaCodePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddedAuthorizationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Payment consent rejected. You need to reinitialize session to start again */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payment_intents_id_authorize_embedded_id_set_sca_method: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
                consent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetScaMethodPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddedAuthorizationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_payment_intents_id_banks: {
        parameters: {
            query?: {
                auth_flow?: components["schemas"]["SupportedPaymentAuthorizationFlow"][];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BanksResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payment_intents_id_confirm_payment: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                "user-agent"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentMethodsConfirmPaymentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodsConfirmResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payment_intents_id_payments: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConsentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_payment_links_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalPaymentLinkResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_payment_links_id_regenerate: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                payment_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalPaymentLinkResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_payment_page_theme: {
        parameters: {
            query: {
                partner_id: string;
                project_id: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentPageThemeWithFooter"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_quotes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalQuoteResponsePayload"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_quotes_id_accept: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteAcceptRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_quotes_id_decline: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReceivableDeclinePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_settings: {
        parameters: {
            query: {
                partner_id: string;
                project_id: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerProjectSettingsPayload-Output"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_validators_line_items: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItemsValidationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_internal_vat_rates: {
        parameters: {
            query?: {
                status?: components["schemas"]["VatRateStatusEnum"];
                /** @example 2023-06-04 */
                valid_from?: string;
                /** @example 2023-06-04 */
                valid_until?: string;
                /** @description Country code */
                country?: components["schemas"]["AllowedCountries"];
            };
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VatRateListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_internal_vat_rates: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VatRateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VatRateResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_internal_vat_rates_id: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                vat_rate_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_internal_vat_rates_id: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                vat_rate_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VatRateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ledger_accounts: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page.
                 *
                 *     When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["LedgerAccountCursorFields"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerAccountListResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ledger_accounts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                ledger_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LedgerAccountResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_mail_templates: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["CustomTemplatesCursorFields"];
                type?: components["schemas"]["DocumentObjectTypeRequestEnum"];
                type__in?: components["schemas"]["DocumentObjectTypeRequestEnum"][];
                type__not_in?: components["schemas"]["DocumentObjectTypeRequestEnum"][];
                is_default?: boolean;
                name?: string;
                name__iexact?: string;
                name__contains?: string;
                name__icontains?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTemplatesPaginationResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mail_templates: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCustomTemplateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTemplateDataSchema"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mail_templates_preview: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PreviewTemplateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PreviewTemplateResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_mail_templates_system: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemTemplates"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_mail_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTemplateDataSchema"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_mail_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_mail_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCustomTemplateSchemaRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTemplateDataSchema"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mail_templates_id_make_default: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTemplateDataSchema"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_mailbox_domains: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mailbox_domains: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DomainRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DomainResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_mailbox_domains_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                domain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mailbox_domains_id_verify: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                domain_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_mailboxes: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailboxDataResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mailboxes: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailboxDomainRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailboxResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_mailboxes_search: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailboxMultipleEntitiesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailboxDataResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_mailboxes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                mailbox_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_measure_units: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_measure_units: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_measure_units_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_measure_units_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_measure_units_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UnitUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ocr_tasks: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["CursorFields"];
                /** @description Return only ocr tasks created after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]. */
                created_at__gt?: string;
                /** @description Return only ocr tasks created in Monite before the specified date and time. */
                created_at__lt?: string;
                /** @description Return only ocr tasks created on or after the specified date and time. */
                created_at__gte?: string;
                /** @description Return only ocr tasks created before or on the specified date and time. */
                created_at__lte?: string;
                /** @description Return only ocr tasks that have the specified status. */
                status?: components["schemas"]["OCRTaskStatus"];
                /** @description Return only OCR tasks related to documents of a specific type. */
                document_type?: components["schemas"]["OCRDocumentTypeEnum"];
                /** @description Return only ocr tasks with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
                 *
                 *     To specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>` */
                id__in?: string[];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OCRTasksPaginationResponse"];
                };
            };
            /** @description OCR request is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ocr_tasks: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOCRRequestPayload"];
            };
        };
        responses: {
            /** @description OCR task has been accepted for execution. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OcrTaskResponseSchema"];
                };
            };
            /** @description OCR previously tried to recognize this file and failed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description File size exceeds the limit for OCR processing. */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported file format. OCR supports only PNG, JPG, and PDF. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The specified file URL is not reachable. */
            421: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description The specified file URL is reachable but returned an HTTP error status code. */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_ocr_tasks_upload_from_file: {
        parameters: {
            query?: {
                document_type?: components["schemas"]["OCRDocumentTypeEnum"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["OCRFileUpload"];
            };
        };
        responses: {
            /** @description OCR task has been accepted for execution. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OcrTaskResponseSchema"];
                };
            };
            /** @description OCR failed to process the specified file. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description File size exceeds the limit for OCR processing. */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unsupported file format. OCR supports only PNG, JPG, and PDF. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File name is too long. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_ocr_tasks_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OcrTaskResponseSchema"];
                };
            };
            /** @description OCR task with the specified ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_onboarding_documents: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EntityOnboardingDocumentsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_onboarding_links: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OnboardingLinkRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinkPublicResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_onboarding_requirements: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOnboardingRequirementsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_overdue_reminders: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllOverdueRemindersResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_overdue_reminders: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OverdueReminderRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverdueReminderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_overdue_reminders_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                overdue_reminder_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverdueReminderResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_overdue_reminders_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                overdue_reminder_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_overdue_reminders_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                overdue_reminder_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OverdueReminderUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverdueReminderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payable_credit_notes: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["CreditNoteCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                issued_at?: string;
                issued_at__gt?: string;
                issued_at__lt?: string;
                issued_at__gte?: string;
                issued_at__lte?: string;
                document_id?: string;
                document_id__iexact?: string;
                document_id__contains?: string;
                document_id__icontains?: string;
                has_file?: boolean;
                total_amount__gt?: number;
                total_amount__lt?: number;
                total_amount__gte?: number;
                total_amount__lte?: number;
                subtotal__gt?: number;
                subtotal__lt?: number;
                subtotal__gte?: number;
                subtotal__lte?: number;
                based_on?: string;
                counterpart_id?: string;
                created_by_entity_user_id?: string;
                status?: components["schemas"]["PayableCreditNoteStateEnum"];
                status__in?: components["schemas"]["PayableCreditNoteStateEnum"][];
                status__not_in?: components["schemas"]["PayableCreditNoteStateEnum"][];
                origin?: components["schemas"]["OriginEnum"];
                currency?: components["schemas"]["CurrencyEnum"];
                project_id?: string;
                project_id__in?: string[];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNotePaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNoteCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_upload_from_file: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreditNoteUploadFile"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Error uploading the file. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_credit_notes_validations: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteValidationsResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    put_payable_credit_notes_validations: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNoteValidationsResource"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteValidationsResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_validations_reset: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteValidationsResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_credit_notes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_payable_credit_notes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_payable_credit_notes_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNoteUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_id_approve: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_id_cancel_ocr: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Credit Note couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_credit_notes_id_line_items: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["CreditNoteLineItemCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                name?: string;
                name__iexact?: string;
                name__contains?: string;
                name__icontains?: string;
                description?: string;
                description__contains?: string;
                description__icontains?: string;
                total__gt?: number;
                total__lt?: number;
                total__gte?: number;
                total__lte?: number;
                subtotal__gt?: number;
                subtotal__lt?: number;
                subtotal__gte?: number;
                subtotal__lte?: number;
                unit_price__gt?: number;
                unit_price__lt?: number;
                unit_price__gte?: number;
                unit_price__lte?: number;
                quantity__gt?: number;
                quantity__lt?: number;
                quantity__gte?: number;
                quantity__lte?: number;
                tax__gt?: number;
                tax__lt?: number;
                tax__gte?: number;
                tax__lte?: number;
                tax_amount__gt?: number;
                tax_amount__lt?: number;
                tax_amount__gte?: number;
                tax_amount__lte?: number;
                created_by_user_id?: string;
                unit?: string;
                unit__iexact?: string;
                source?: string;
                source_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteLineItemPaginationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    put_payable_credit_notes_id_line_items: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNoteLineItemReplaceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteLineItemPaginationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_id_line_items: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNoteLineItemCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteLineItemResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_credit_notes_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
                line_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteLineItemResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_payable_credit_notes_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
                line_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteLineItemPaginationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_payable_credit_notes_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
                line_item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNoteLineItemUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteLineItemResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_id_reject: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_credit_notes_id_submit_for_approval: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_credit_notes_id_validate: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                credit_note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNoteValidationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_purchase_orders: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["PurchaseOrderCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                updated_at__gt?: string;
                updated_at__lt?: string;
                updated_at__gte?: string;
                updated_at__lte?: string;
                issued_at__gt?: string;
                issued_at__lt?: string;
                issued_at__gte?: string;
                issued_at__lte?: string;
                status?: components["schemas"]["PurchaseOrderStatusEnum"];
                document_id?: string;
                document_id__in?: string[];
                created_by?: string;
                counterpart_id?: string;
                counterpart_id__in?: string[];
                "counterpart.name"?: string;
                currency?: components["schemas"]["CurrencyEnum"];
                currency__in?: components["schemas"]["CurrencyEnum"][];
                project_id?: string;
            };
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_purchase_orders: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PurchaseOrderPayloadSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_purchase_orders_variables: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariablesObjectList"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payable_purchase_orders_id: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                purchase_order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_payable_purchase_orders_id: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                purchase_order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_payable_purchase_orders_id: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                purchase_order_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePurchaseOrderPayloadSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_purchase_orders_id_preview: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                purchase_order_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PurchaseOrderEmailPreviewRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderEmailPreviewResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payable_purchase_orders_id_send: {
        parameters: {
            query?: never;
            header: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id": string;
            };
            path: {
                purchase_order_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendPurchaseOrderViaEmailRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrderEmailSentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["PayableCursorFields"];
                /** @description Return only payables created in Monite after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]. */
                created_at__gt?: string;
                /** @description Return only payables created in Monite before the specified date and time. */
                created_at__lt?: string;
                /** @description Return only payables created in Monite on or after the specified date and time. */
                created_at__gte?: string;
                /** @description Return only payables created in Monite before or on the specified date and time. */
                created_at__lte?: string;
                /** @description Return only payables that have the specified [status](https://docs.monite.com/accounts-payable/payables/index).
                 *
                 *     To query multiple statuses at once, use the `status__in` parameter instead. */
                status?: components["schemas"]["PayableStateEnum"];
                /** @description Return only payables that have the specified [statuses](https://docs.monite.com/accounts-payable/payables/index).
                 *
                 *     To specify multiple statuses, repeat this parameter for each value: `status__in=draft&status__in=new` */
                status__in?: components["schemas"]["PayableStateEnum"][];
                /** @description Return only payables with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
                 *
                 *     To specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>` */
                id__in?: string[];
                /** @description Return only payables with the exact specified total amount. The amount must be specified in the minor units of currency. For example, $12.5 is represented as 1250. */
                total_amount?: number;
                /** @description Return only payables whose total amount (in minor units) exceeds the specified value. */
                total_amount__gt?: number;
                /** @description Return only payables whose total amount (in minor units) is less than the specified value. */
                total_amount__lt?: number;
                /** @description Return only payables whose total amount (in minor units) is greater than or equal to the specified value. */
                total_amount__gte?: number;
                /** @description Return only payables whose total amount (in minor units) is less than or equal to the specified value. */
                total_amount__lte?: number;
                /** @description Return only payables with the specified amount. */
                amount?: number;
                /** @description Return only payables whose amount (in minor units) exceeds the specified value. */
                amount__gt?: number;
                /** @description Return only payables whose amount (in minor units) is less than the specified value. */
                amount__lt?: number;
                /** @description Return only payables whose amount (in minor units) is greater than or equal to the specified value. */
                amount__gte?: number;
                /** @description Return only payables whose amount (in minor units) is less than or equal to the specified value. */
                amount__lte?: number;
                /** @description Return only payables that use the specified currency. */
                currency?: components["schemas"]["CurrencyEnum"];
                /** @description Return only payables received from counterparts with the specified name (exact match, case-sensitive).
                 *
                 *     For counterparts of `type = individual`, the full name is formatted as `first_name last_name`. */
                counterpart_name?: string;
                /** @description Return only payables received from counterparts whose name contains the specified string (case-sensitive). */
                counterpart_name__contains?: string;
                /** @description Return only payables received from counterparts whose name contains the specified string (case-insensitive). */
                counterpart_name__icontains?: string;
                /** @description Apply the `icontains` condition to search for the specified text in the `document_id` and `counterpart_name` fields in the payables. */
                search_text?: string;
                /** @description Return payables that are due on the specified date (YYYY-MM-DD) */
                due_date?: string;
                /** @description Return payables that are due after the specified date (exclusive, YYYY-MM-DD). */
                due_date__gt?: string;
                /** @description Return payables that are due before the specified date (exclusive, YYYY-MM-DD). */
                due_date__lt?: string;
                /** @description Return payables that are due on or after the specified date (YYYY-MM-DD). */
                due_date__gte?: string;
                /** @description Return payables that are due before or on the specified date (YYYY-MM-DD). */
                due_date__lte?: string;
                /** @description Return payables that are issued at the specified date (YYYY-MM-DD) */
                issued_at?: string;
                /** @description Return payables that are issued after the specified date (exclusive, YYYY-MM-DD). */
                issued_at__gt?: string;
                /** @description Return payables that are issued before the specified date (exclusive, YYYY-MM-DD). */
                issued_at__lt?: string;
                /** @description Return payables that are issued on or after the specified date (YYYY-MM-DD). */
                issued_at__gte?: string;
                /** @description Return payables that are issued before or on the specified date (YYYY-MM-DD). */
                issued_at__lte?: string;
                /** @description Return a payable with the exact specified document number (case-sensitive).
                 *
                 *     The `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`). */
                document_id?: string;
                /** @description Return only payables whose document number (`document_id`) contains the specified string (case-sensitive). */
                document_id__contains?: string;
                /** @description Return only payables whose document number (`document_id`) contains the specified string (case-insensitive). */
                document_id__icontains?: string;
                /** @description Return only payables created in Monite by the entity user with the specified ID. */
                was_created_by_user_id?: string;
                /** @description Return only payables received from the counterpart with the specified ID.
                 *
                 *     Counterparts that have been deleted but have associated payables will still return results here because the payables contain a frozen copy of the counterpart data.
                 *
                 *     If the specified counterpart ID does not exist and never existed, no results are returned. */
                counterpart_id?: string;
                /** @description Return only payables coming from the specified source. */
                source_of_payable_data?: components["schemas"]["SourceOfPayableDataEnum"];
                /** @description Return only payables with specific OCR statuses. */
                ocr_status?: components["schemas"]["OcrStatusEnum"];
                /** @description Search for a payable by the identifier of the line item associated with it. */
                line_item_id?: string;
                /** @description Search for a payable by the identifier of the purchase order associated with it. */
                purchase_order_id?: string;
                /** @description Return only payables assigned to the project with the specified ID.
                 *
                 *     Valid but nonexistent project IDs do not raise errors but return no results. */
                project_id?: string;
                /** @description Return only payables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results. */
                project_id__in?: string[];
                /** @description Return only payables whose `tags` include at least one of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce no results. */
                tag_ids?: string[];
                /** @description Return only payables whose `tags` do not include any of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce the results. */
                tag_ids__not_in?: string[];
                /** @description Filter objects based on whether they have tags. If true, only objects with tags are returned. If false, only objects without tags are returned. */
                has_tags?: boolean;
                /** @description Return only payables from a given origin ['einvoice', 'upload', 'email'] */
                origin?: components["schemas"]["PayableOriginEnum"];
                /** @description Return only payables with or without attachments (files) */
                has_file?: boolean;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayablePaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PayableUploadWithDataSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_analytics: {
        parameters: {
            query?: {
                /** @description Return only payables created in Monite after the specified date and time. The value must be in the ISO 8601 format YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]. */
                created_at__gt?: string;
                /** @description Return only payables created in Monite before the specified date and time. */
                created_at__lt?: string;
                /** @description Return only payables created in Monite on or after the specified date and time. */
                created_at__gte?: string;
                /** @description Return only payables created in Monite before or on the specified date and time. */
                created_at__lte?: string;
                /** @description Return only payables that have the specified [status](https://docs.monite.com/accounts-payable/payables/index).
                 *
                 *     To query multiple statuses at once, use the `status__in` parameter instead. */
                status?: components["schemas"]["PayableStateEnum"];
                /** @description Return only payables that have the specified [statuses](https://docs.monite.com/accounts-payable/payables/index).
                 *
                 *     To specify multiple statuses, repeat this parameter for each value: `status__in=draft&status__in=new` */
                status__in?: components["schemas"]["PayableStateEnum"][];
                /** @description Return only payables with specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
                 *
                 *     To specify multiple IDs, repeat this parameter for each value: `id__in=<id1>&id__in=<id2>` */
                id__in?: string[];
                /** @description Return only payables with the exact specified total amount. The amount must be specified in the minor units of currency. For example, $12.5 is represented as 1250. */
                total_amount?: number;
                /** @description Return only payables whose total amount (in minor units) exceeds the specified value. */
                total_amount__gt?: number;
                /** @description Return only payables whose total amount (in minor units) is less than the specified value. */
                total_amount__lt?: number;
                /** @description Return only payables whose total amount (in minor units) is greater than or equal to the specified value. */
                total_amount__gte?: number;
                /** @description Return only payables whose total amount (in minor units) is less than or equal to the specified value. */
                total_amount__lte?: number;
                /** @description Return only payables with the specified amount. */
                amount?: number;
                /** @description Return only payables whose amount (in minor units) exceeds the specified value. */
                amount__gt?: number;
                /** @description Return only payables whose amount (in minor units) is less than the specified value. */
                amount__lt?: number;
                /** @description Return only payables whose amount (in minor units) is greater than or equal to the specified value. */
                amount__gte?: number;
                /** @description Return only payables whose amount (in minor units) is less than or equal to the specified value. */
                amount__lte?: number;
                /** @description Return only payables that use the specified currency. */
                currency?: components["schemas"]["CurrencyEnum"];
                /** @description Return only payables received from counterparts with the specified name (exact match, case-sensitive).
                 *
                 *     For counterparts of `type = individual`, the full name is formatted as `first_name last_name`. */
                counterpart_name?: string;
                /** @description Return only payables received from counterparts whose name contains the specified string (case-sensitive). */
                counterpart_name__contains?: string;
                /** @description Return only payables received from counterparts whose name contains the specified string (case-insensitive). */
                counterpart_name__icontains?: string;
                /** @description Apply the `icontains` condition to search for the specified text in the `document_id` and `counterpart_name` fields in the payables. */
                search_text?: string;
                /** @description Return payables that are due on the specified date (YYYY-MM-DD) */
                due_date?: string;
                /** @description Return payables that are due after the specified date (exclusive, YYYY-MM-DD). */
                due_date__gt?: string;
                /** @description Return payables that are due before the specified date (exclusive, YYYY-MM-DD). */
                due_date__lt?: string;
                /** @description Return payables that are due on or after the specified date (YYYY-MM-DD). */
                due_date__gte?: string;
                /** @description Return payables that are due before or on the specified date (YYYY-MM-DD). */
                due_date__lte?: string;
                /** @description Return payables that are issued at the specified date (YYYY-MM-DD) */
                issued_at?: string;
                /** @description Return payables that are issued after the specified date (exclusive, YYYY-MM-DD). */
                issued_at__gt?: string;
                /** @description Return payables that are issued before the specified date (exclusive, YYYY-MM-DD). */
                issued_at__lt?: string;
                /** @description Return payables that are issued on or after the specified date (YYYY-MM-DD). */
                issued_at__gte?: string;
                /** @description Return payables that are issued before or on the specified date (YYYY-MM-DD). */
                issued_at__lte?: string;
                /** @description Return a payable with the exact specified document number (case-sensitive).
                 *
                 *     The `document_id` is the user-facing document number such as INV-00042, not to be confused with Monite resource IDs (`id`). */
                document_id?: string;
                /** @description Return only payables whose document number (`document_id`) contains the specified string (case-sensitive). */
                document_id__contains?: string;
                /** @description Return only payables whose document number (`document_id`) contains the specified string (case-insensitive). */
                document_id__icontains?: string;
                /** @description Return only payables created in Monite by the entity user with the specified ID. */
                was_created_by_user_id?: string;
                /** @description Return only payables received from the counterpart with the specified ID.
                 *
                 *     Counterparts that have been deleted but have associated payables will still return results here because the payables contain a frozen copy of the counterpart data.
                 *
                 *     If the specified counterpart ID does not exist and never existed, no results are returned. */
                counterpart_id?: string;
                /** @description Return only payables coming from the specified source. */
                source_of_payable_data?: components["schemas"]["SourceOfPayableDataEnum"];
                /** @description Return only payables with specific OCR statuses. */
                ocr_status?: components["schemas"]["OcrStatusEnum"];
                /** @description Search for a payable by the identifier of the line item associated with it. */
                line_item_id?: string;
                /** @description Search for a payable by the identifier of the purchase order associated with it. */
                purchase_order_id?: string;
                /** @description Return only payables assigned to the project with the specified ID.
                 *
                 *     Valid but nonexistent project IDs do not raise errors but return no results. */
                project_id?: string;
                /** @description Return only payables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results. */
                project_id__in?: string[];
                /** @description Return only payables whose `tags` include at least one of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce no results. */
                tag_ids?: string[];
                /** @description Return only payables whose `tags` do not include any of the tags with the specified IDs. Valid but nonexistent tag IDs do not raise errors but produce the results. */
                tag_ids__not_in?: string[];
                /** @description Filter objects based on whether they have tags. If true, only objects with tags are returned. If false, only objects without tags are returned. */
                has_tags?: boolean;
                /** @description Return only payables from a given origin ['einvoice', 'upload', 'email'] */
                origin?: components["schemas"]["PayableOriginEnum"];
                /** @description Return only payables with or without attachments (files) */
                has_file?: boolean;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableAggregatedDataResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_storecove: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StorecoveNewDocumentReceivedEventPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse2"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse2"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse2"];
                };
            };
        };
    };
    post_payables_upload_from_file: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["PayableUploadFile"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Error uploading the file. You can check the upload
             *         [limitations in the documentation](https://docs.monite.com/accounts-payable/payables/collect#about-monite-ocr). */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_validations: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableValidationsResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    put_payables_validations: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PayableValidationsUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableValidationsResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_validations_reset: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableValidationsResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_variables: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableTemplatesVariablesObjectList"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_payables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_payables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PayableUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_approve_payment_operation: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_attach_file: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["PayableAttachFile"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_cancel_ocr: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_id_history: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["PayableHistoryCursorFields"];
                /** @description Return only the specified event types */
                event_type__in?: components["schemas"]["PayableHistoryEventTypeEnum"][];
                /** @description Return only events caused by the entity users with the specified IDs. To specify multiple user IDs, repeat this parameter for each ID:
                 *     `entity_user_id__in=<user1>&entity_user_id__in=<user2>` */
                entity_user_id__in?: string[];
                /** @description Return only events that occurred after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`. */
                timestamp__gt?: string;
                /** @description Return only events that occurred before the specified date and time. */
                timestamp__lt?: string;
                /** @description Return only events that occurred on or after the specified date and time. */
                timestamp__gte?: string;
                /** @description Return only events that occurred before or on the specified date and time. */
                timestamp__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableHistoryPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_id_line_items: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["LineItemCursorFields"];
                was_created_by_user_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    put_payables_id_line_items: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItemsReplaceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemsReplaceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_line_items: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItemRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                line_item_id: string;
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_payables_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                line_item_id: string;
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_payables_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                line_item_id: string;
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItemRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_mark_as_paid: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CommentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_mark_as_partially_paid: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartiallyPaidPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_reject: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_reopen: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_submit_for_approval: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payables_id_suggestions: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuggestedResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_payables_id_suggestions: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_payables_id_validate: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayableValidationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_payment_intents: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["PaymentIntentCursorFields"];
                /** @description ID of a payable or receivable invoice. If provided, returns only payment intents associated with the specified invoice. */
                object_id?: string;
                /** @description A list of payable IDs and/or receivable IDs. If provided, returns only payment intents associated with the specified payable and receivable invoices. Valid but nonexistent IDs do not raise errors but produce no results. */
                object_id__in?: string[];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentsListResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_intents_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_payment_intents_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePaymentIntentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_intents_id_history: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_intent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentIntentHistoryResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_links: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePaymentLinkRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicPaymentLinkResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_links_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicPaymentLinkResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_links_id_expire: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicPaymentLinkResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_onboarding_links: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOnboardingLinkRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingLinkResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_records: {
        parameters: {
            query?: {
                /** @description Order by */
                order?: components["schemas"]["OrderEnum"];
                /** @description Max is 100 */
                limit?: number;
                /** @description A token, obtained from previous page. Prior over other filters */
                pagination_token?: string;
                /** @description Allowed sort fields */
                sort?: components["schemas"]["PaymentRecordCursorFields"];
                /** @description Identifies whether payment is from our rails or external system */
                is_external?: boolean;
                /** @description ID of the object, that is connected to payment */
                object_id?: string;
                /** @description List of IDs of the objects, that are connected to payments */
                object_id__in?: string[];
                /** @description Type of an object, which is connected with payment */
                object_type?: components["schemas"]["ObjectTypeEnum"];
                /** @description Created after this datetime (exclusive) */
                created_at__gt?: string;
                /** @description Created before this datetime (exclusive) */
                created_at__lt?: string;
                /** @description Updated after this datetime (exclusive) */
                updated_at__gt?: string;
                /** @description Updated before this datetime (exclusive) */
                updated_at__lt?: string;
                /** @description Paid after this datetime (exclusive) */
                paid_at__gt?: string;
                /** @description Paid before this datetime (exclusive) */
                paid_at__lt?: string;
                /** @description Optional date of the upcoming payment (equality) */
                planned_payment_date?: string;
                /** @description Planned after this date (exclusive) */
                planned_payment_date__gt?: string;
                /** @description Planned before this date (exclusive) */
                planned_payment_date__lt?: string;
                /** @description Planned at or after this date (inclusive) */
                planned_payment_date__gte?: string;
                /** @description Planned at or before this date (inclusive) */
                planned_payment_date__lte?: string;
                /** @description One of the payment record statuses */
                status?: components["schemas"]["PaymentRecordStatusEnum"];
                /** @description Payment intent status as a raw string */
                payment_intent_status?: string;
                /** @description Payment method used for the transaction */
                payment_method?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponseList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_records: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRecordRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_records_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_record_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_payment_records_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_record_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRecordUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_records_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_record_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRecordStatusUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_records_id_mark_as_succeeded: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_record_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRecordMarkAsSucceededRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_records_id_start_processing: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_record_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRecordStatusUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentRecordResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_reminders: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllPaymentReminders"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_reminders: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentReminder"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentReminderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_reminders_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_reminder_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentReminderResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_payment_reminders_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_reminder_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_payment_reminders_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_reminder_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentReminderUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentReminderResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_terms: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentTermsListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_payment_terms: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTermsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentTermsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_payment_terms_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_terms_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentTermsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_payment_terms_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_terms_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_payment_terms_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                payment_terms_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTermsUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentTermsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_persons: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonsResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_persons: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_persons_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                person_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_persons_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                person_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_persons_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                person_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OptionalPersonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_persons_id_documents: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                person_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_persons_id_onboarding_documents: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                person_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonOnboardingDocumentsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_products: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ProductCursorFields"];
                id__in?: string[];
                name?: string;
                name__contains?: string;
                name__icontains?: string;
                type?: components["schemas"]["ProductServiceTypeEnum"];
                price?: number;
                price__gt?: number;
                price__lt?: number;
                price__gte?: number;
                price__lte?: number;
                currency?: components["schemas"]["CurrencyEnum"];
                currency__in?: components["schemas"]["CurrencyEnum"][];
                measure_unit_id?: string;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductServicePaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_products: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductServiceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductServiceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_products_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductServiceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_products_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_products_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductServiceUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductServiceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_projects: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ProjectCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                start_date?: string;
                start_date__gt?: string;
                start_date__lt?: string;
                start_date__gte?: string;
                start_date__lte?: string;
                end_date?: string;
                end_date__gt?: string;
                end_date__lt?: string;
                end_date__gte?: string;
                end_date__lte?: string;
                name?: string;
                name__iexact?: string;
                name__contains?: string;
                name__icontains?: string;
                code?: string;
                created_by_entity_user_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_projects: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_projects_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_projects_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_projects_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectResource"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_receipts: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ReceiptCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                id__in?: string[];
                currency?: components["schemas"]["CurrencyEnum"];
                document_id?: string;
                document_id__contains?: string;
                document_id__icontains?: string;
                total_amount__gt?: number;
                total_amount__lt?: number;
                total_amount__gte?: number;
                total_amount__lte?: number;
                has_file?: boolean;
                has_transaction?: boolean;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptPaginationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_receipts: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceiptCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_receipts_upload_from_file: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ReceiptUploadFile"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Error uploading the file. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_receipts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptResponseSchema"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_receipts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_receipts_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceiptUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptResponseSchema"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_receipts_id_attach_file: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ReceiptAttachFile"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_receipts_id_line_items: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ReceiptLineItemCursorFields"];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                name?: string;
                name__iexact?: string;
                name__contains?: string;
                name__icontains?: string;
                total__gt?: number;
                total__lt?: number;
                total__gte?: number;
                total__lte?: number;
                created_by_user_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptLineItemsPaginationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_receipts_id_line_items: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceiptLineItemCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptLineItemResponseSchema"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_receipts_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
                line_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_receipts_id_line_items_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receipt_id: string;
                line_item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceiptLineItemUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceiptLineItemResponseSchema"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_receivables: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 250) to return in a single page of the response. Default is 100. The response may contain fewer items if it is the last or only page.
                 *
                 *     When using pagination with a non-default `limit`, you must provide the `limit` value alongside `pagination_token` in all subsequent pagination requests. Unlike other query parameters, `limit` is not inferred from `pagination_token`. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters except `limit` are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description Return only receivables with the specified IDs. Valid but nonexistent IDs do not raise errors but produce no results.
                 *
                 *     To specify multiple IDs, repeat this parameter for each value:
                 *     `id__in=<id1>&id__in=<id2>` */
                id__in?: string[];
                /** @description Return only receivables that have the specified statuses. See the applicable [invoice statuses](https://docs.monite.com/accounts-receivable/invoices/index), [quote statuses](https://docs.monite.com/accounts-receivable/quotes/index), and [credit note statuses](https://docs.monite.com/accounts-receivable/credit-notes#credit-note-lifecycle).
                 *
                 *     To specify multiple statuses, repeat this parameter for each value:
                 *     `status__in=draft&status__in=issued` */
                status__in?: ("draft" | "issuing" | "issued" | "failed" | "accepted" | "expired" | "declined" | "recurring" | "partially_paid" | "paid" | "overdue" | "uncollectible" | "canceled")[];
                /** @description Return only receivables created by the entity users with the specified IDs.To specify multiple user IDs, repeat this parameter for each ID:
                 *     `entity_user_id__in=<user1>&entity_user_id__in=<user2>`
                 *
                 *     If the request is authenticated using an entity user token, this user must have the `receivable.read.allowed` (rather than `allowed_for_own`) permission to be able to query receivables created by other users.
                 *
                 *     IDs of deleted users will still produce results here if those users had associated receivables. Valid but nonexistent user IDs do not raise errors but produce no results. */
                entity_user_id__in?: string[];
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ReceivableCursorFields"];
                /** @description Return only receivables whose [tags](https://docs.monite.com/common/tags) include at least one of the tags with the specified IDs.
                 *
                 *     For example, given receivables with the following tags:
                 *     1. tagA
                 *     2. tagB
                 *     3. tagA, tagB
                 *     4. tagC
                 *     5. tagB, tagC
                 *
                 *
                 *     `tag_ids__in=<tagA>&tag_ids__in=<tagB>` will return receivables 1, 2, 3, and 5.
                 *
                 *     Valid but nonexistent tag IDs do not raise errors but produce no results. */
                tag_ids__in?: string[];
                /** @description Return only receivables whose [tags](https://docs.monite.com/common/tags) include all of the tags with the specified IDs and optionally other tags that are not specified.
                 *
                 *     For example, given receivables with the following tags:
                 *     1. tagA
                 *     2. tagB
                 *     3. tagA, tagB
                 *     4. tagC
                 *     5. tagA, tagB, tagC
                 *
                 *
                 *     `tag_ids=<tagA>&tag_ids=<tagB>` will return receivables 3 and 5. */
                tag_ids?: string[];
                /** @description Return only receivables whose line items include at least one of the product IDs with the specified IDs.
                 *
                 *     To specify multiple product IDs, repeat this parameter for each ID:
                 *     `product_ids__in=<product1>&product_ids__in=<product2>`
                 *
                 *     For example, given receivables with the following product IDs:
                 *     1. productA
                 *     2. productB
                 *     3. productA, productB
                 *     4. productC
                 *     5. productB, productC
                 *
                 *
                 *     `product_ids__in=<productA>&product_ids__in=<productB>` will return receivables 1, 2, 3, and 5.Valid but nonexistent product IDs do not raise errors but produce no results. */
                product_ids__in?: string[];
                /** @description Return only receivables whose line items include all of the product IDs with the specified IDs and optionally other products that are not specified.
                 *
                 *     To specify multiple product IDs, repeat this parameter for each ID:
                 *     `product_ids=<product1>&product_ids=<product2>`
                 *
                 *     For example, given receivables with the following product IDs:
                 *     1. productA
                 *     2. productB
                 *     3. productA, productB
                 *     4. productC
                 *     5. productA, productB, productC
                 *
                 *
                 *     `product_ids=<productA>&product_ids=<productB>` will return receivables 3 and 5.
                 *
                 *      */
                product_ids?: string[];
                /** @description Return only receivables whose `project_id` include at least one of the project_id with the specified IDs. Valid but nonexistent project IDs do not raise errors but produce no results. */
                project_id__in?: string[];
                type?: components["schemas"]["ReceivableType"];
                document_id?: string;
                document_id__contains?: string;
                document_id__icontains?: string;
                issue_date__gt?: string;
                issue_date__lt?: string;
                issue_date__gte?: string;
                issue_date__lte?: string;
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
                counterpart_id?: string;
                counterpart_name?: string;
                counterpart_name__contains?: string;
                counterpart_name__icontains?: string;
                total_amount?: number;
                total_amount__gt?: number;
                total_amount__lt?: number;
                total_amount__gte?: number;
                total_amount__lte?: number;
                discounted_subtotal?: number;
                discounted_subtotal__gt?: number;
                discounted_subtotal__lt?: number;
                discounted_subtotal__gte?: number;
                discounted_subtotal__lte?: number;
                status?: "draft" | "issuing" | "issued" | "failed" | "accepted" | "expired" | "declined" | "recurring" | "partially_paid" | "paid" | "overdue" | "uncollectible" | "canceled";
                entity_user_id?: string;
                based_on?: string;
                due_date__gt?: string;
                due_date__lt?: string;
                due_date__gte?: string;
                due_date__lte?: string;
                project_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivablePaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`,`Object type at permissions not found: {object_type}`,`Action {action} for {object_type} not allowed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivableFacadeCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_required_fields: {
        parameters: {
            query?: {
                counterpart_id?: string;
                counterpart_billing_address_id?: string;
                counterpart_country?: components["schemas"]["AllowedCountries"];
                counterpart_type?: components["schemas"]["CounterpartType"];
                entity_vat_id_id?: string;
                counterpart_vat_id_id?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableRequiredFields"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_search: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivablesSearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivablePaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`,`Object type at permissions not found: {object_type}`,`Action {action} for {object_type} not allowed` */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_variables: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableTemplatesVariablesObjectList"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_receivables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_receivables_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivableUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_accept: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteAcceptRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_clone: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_decline: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReceivableDeclinePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResult"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_id_history: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ReceivableHistoryCursorFields"];
                /** @description Return only the specified [event types](https://docs.monite.com/accounts-receivable/document-history#event-types). To include multiple types, repeat this parameter for each value:
                 *     `event_type__in=receivable_updated&event_type__in=status_changed` */
                event_type__in?: components["schemas"]["ReceivableHistoryEventTypeEnum"][];
                /** @description Return only events caused by the entity users with the specified IDs. To specify multiple user IDs, repeat this parameter for each ID:
                 *     `entity_user_id__in=<user1>&entity_user_id__in=<user2>` */
                entity_user_id__in?: string[];
                /** @description Return only events that occurred after the specified date and time. The value must be in the ISO 8601 format `YYYY-MM-DDThh:mm[:ss[.ffffff]][Z|±hh:mm]`. */
                timestamp__gt?: string;
                /** @description Return only events that occurred before the specified date and time. */
                timestamp__lt?: string;
                /** @description Return only events that occurred on or after the specified date and time. */
                timestamp__gte?: string;
                /** @description Return only events that occurred before or on the specified date and time. */
                timestamp__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description ID of the accounts receivable document whose history you want to get. */
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableHistoryPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_id_history_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description ID of the history record to return. You can get these IDs from `GET /receivables/{receivable_id}/history`. */
                receivable_history_id: string;
                /** @description ID of the accounts receivable document whose history you want to get. */
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableHistoryResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_issue: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    put_receivables_id_line_items: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLineItems"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LineItemsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_id_mails: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["ReceivableMailCursorFields"];
                status?: components["schemas"]["ReceivableMailStatusEnum"];
                status__in?: components["schemas"]["ReceivableMailStatusEnum"][];
                created_at__gt?: string;
                created_at__lt?: string;
                created_at__gte?: string;
                created_at__lte?: string;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableMailPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_id_mails_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
                mail_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableMailResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_mark_as_paid: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReceivablePaidPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_mark_as_partially_paid: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivablePartiallyPaidPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_mark_as_uncollectible: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReceivableUncollectiblePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_receivables_id_pdf_link: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableFileUrl"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_preview: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivablePreviewRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivablePreviewResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_send: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivableSendRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivableSendResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_send_test_reminder: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceivableSendTestReminderPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivablesSendResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_receivables_id_verify: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                receivable_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceivablesVerifyResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_recurrences: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurrenceResponseList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_recurrences: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRecurrencePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurrenceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_recurrences_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                recurrence_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurrenceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_recurrences_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                recurrence_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecurrencePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurrenceResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_recurrences_id_cancel: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                recurrence_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_recurrences_id_pause: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                recurrence_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_recurrences_id_resume: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                recurrence_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_roles: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string | null;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["RoleCursorFields"] | null;
                id__in?: string[] | null;
                name?: string | null;
                created_at?: string | null;
                created_at__gt?: string | null;
                created_at__lt?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_roles: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_roles_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_roles_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Business logic error */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_roles_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_settings: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerProjectSettingsPayload-Output"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_settings: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartnerProjectSettingsPayload-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerProjectSettingsPayload-Output"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_tags: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["TagCursorFields"];
                created_by_entity_user_id?: string;
                name__in?: string[];
                id__in?: string[];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagsPaginationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    post_tags: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagReadSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_tags_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagReadSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    delete_tags_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    patch_tags_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagUpdateSchema"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagReadSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Not Acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse3"];
                };
            };
        };
    };
    get_text_templates: {
        parameters: {
            query?: {
                type?: components["schemas"]["TextTemplateType"];
                document_type?: components["schemas"]["TextTemplateDocumentTypeEnum"];
                is_default?: boolean;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextTemplateResponseList"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_text_templates: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTextTemplatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextTemplateResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_text_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                text_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextTemplateResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_text_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description UUID text_template ID */
                text_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_text_templates_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description UUID text_template ID */
                text_template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTextTemplatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextTemplateResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_text_templates_id_make_default: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path: {
                /** @description UUID text_template ID */
                text_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextTemplateResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_vat_rates: {
        parameters: {
            query?: {
                counterpart_address_id?: string;
                counterpart_id?: string;
                counterpart_vat_id_id?: string;
                entity_vat_id_id?: string;
                product_type?: components["schemas"]["ProductServiceTypeEnum"];
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VatRateListResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_webhook_deliveries: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string | null;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["WebhookDeliveryCursorFields"] | null;
                event_id?: string | null;
                object_type?: components["schemas"]["WebhookObjectType"] | null;
                event_action?: string | null;
                created_at__gt?: string | null;
                created_at__lt?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
                /** @description The ID of the entity that owns the requested resource. */
                "x-monite-entity-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookDeliveryPaginationResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_webhook_subscriptions: {
        parameters: {
            query?: {
                /** @description Sort order (ascending by default). Typically used together with the `sort` parameter. */
                order?: components["schemas"]["OrderEnum"];
                /** @description The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page. */
                limit?: number;
                /** @description A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.
                 *
                 *     If not specified, the first page of results will be returned. */
                pagination_token?: string | null;
                /** @description The field to sort the results by. Typically used together with the `order` parameter. */
                sort?: components["schemas"]["WebhookSubscriptionCursorFields"] | null;
                object_type?: components["schemas"]["WebhookObjectType"] | null;
                created_at__gt?: string | null;
                created_at__lt?: string | null;
                created_at__gte?: string | null;
                created_at__lte?: string | null;
            };
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionPaginationResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_webhook_subscriptions: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWebhookSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionResourceWithSecret"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    get_webhook_subscriptions_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                webhook_subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    delete_webhook_subscriptions_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                webhook_subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    patch_webhook_subscriptions_id: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                webhook_subscription_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWebhookSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_webhook_subscriptions_id_disable: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                webhook_subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_webhook_subscriptions_id_enable: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                webhook_subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionResource"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
    post_webhook_subscriptions_id_regenerate_secret: {
        parameters: {
            query?: never;
            header?: {
                /** @example 2024-05-25 */
                "x-monite-version"?: string;
            };
            path: {
                webhook_subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookSubscriptionResourceWithSecret"];
                };
            };
            /** @description Method Not Allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorSchemaResponse"];
                };
            };
        };
    };
}

type schema_$defs = $defs;
type schema_components = components;
type schema_operations = operations;
type schema_paths = paths;
type schema_webhooks = webhooks;
declare namespace schema {
  export type { schema_$defs as $defs, schema_components as components, schema_operations as operations, schema_paths as paths, schema_webhooks as webhooks };
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AccountingConnectionsService {
    /**
     * @summary Get accounting connections
     * @description Get all connections
     */
    getAccountingConnections: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting_connections';
        security: ['HTTPBearer'];
    }, paths['/accounting_connections']['get']['responses']['200']['content']['application/json'], paths['/accounting_connections']['get']['parameters'], paths['/accounting_connections']['get']['responses']['405']['content']['application/json'] | paths['/accounting_connections']['get']['responses']['422']['content']['application/json'] | paths['/accounting_connections']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Connect to an accounting system
     * @description Create new connection
     */
    postAccountingConnections: ServiceOperationMutation<{
        method: 'post';
        url: '/accounting_connections';
        security: ['HTTPBearer'];
    }, undefined, paths['/accounting_connections']['post']['responses']['201']['content']['application/json'], paths['/accounting_connections']['post']['parameters'], paths['/accounting_connections']['post']['responses']['405']['content']['application/json'] | paths['/accounting_connections']['post']['responses']['422']['content']['application/json'] | paths['/accounting_connections']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an accounting connection by ID
     * @description Get connection by id
     */
    getAccountingConnectionsId: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting_connections/{connection_id}';
        security: ['HTTPBearer'];
    }, paths['/accounting_connections/{connection_id}']['get']['responses']['200']['content']['application/json'], paths['/accounting_connections/{connection_id}']['get']['parameters'], paths['/accounting_connections/{connection_id}']['get']['responses']['405']['content']['application/json'] | paths['/accounting_connections/{connection_id}']['get']['responses']['422']['content']['application/json'] | paths['/accounting_connections/{connection_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Disconnect from an accounting system
     * @description Disconnect
     */
    postAccountingConnectionsIdDisconnect: ServiceOperationMutation<{
        method: 'post';
        url: '/accounting_connections/{connection_id}/disconnect';
        security: ['HTTPBearer'];
    }, undefined, paths['/accounting_connections/{connection_id}/disconnect']['post']['responses']['200']['content']['application/json'], paths['/accounting_connections/{connection_id}/disconnect']['post']['parameters'], paths['/accounting_connections/{connection_id}/disconnect']['post']['responses']['405']['content']['application/json'] | paths['/accounting_connections/{connection_id}/disconnect']['post']['responses']['422']['content']['application/json'] | paths['/accounting_connections/{connection_id}/disconnect']['post']['responses']['500']['content']['application/json']>;
    /** @summary Force Sync */
    postAccountingConnectionsIdSync: ServiceOperationMutation<{
        method: 'post';
        url: '/accounting_connections/{connection_id}/sync';
        security: ['HTTPBearer'];
    }, undefined, paths['/accounting_connections/{connection_id}/sync']['post']['responses']['202']['content']['application/json'], paths['/accounting_connections/{connection_id}/sync']['post']['parameters'], paths['/accounting_connections/{connection_id}/sync']['post']['responses']['405']['content']['application/json'] | paths['/accounting_connections/{connection_id}/sync']['post']['responses']['422']['content']['application/json'] | paths['/accounting_connections/{connection_id}/sync']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AccountingService {
    /**
     * @summary Get payables list from accounting system
     * @description Returns a list of accounts payable invoices (bills) that exist in the entity's accounting system. This requires that an accounting connection has been previously established. Refer to the [Accounting integration guide](https://docs.monite.com/accounting/integration/index) for details.
     *
     * This endpoint only provides read-only access to the accounting system's data but does not pull those payables into Monite. You can use it to review the data in the accounting system and find out which of those payables already exist or do not exist in Monite.
     *
     * Data is actual as of the date and time of the last accounting synchronization, which is specified by the `last_pull` value in the response from `GET /accounting_connections/{connection_id}`. To make sure you are accessing the most up-to-date accounting data, you can use `POST /accounting_connections/{connection_id}/sync` to trigger on-demand synchronization before getting the list of payables.
     */
    getAccountingPayables: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting/payables';
        security: ['HTTPBearer'];
    }, paths['/accounting/payables']['get']['responses']['200']['content']['application/json'], paths['/accounting/payables']['get']['parameters'], paths['/accounting/payables']['get']['responses']['405']['content']['application/json'] | paths['/accounting/payables']['get']['responses']['422']['content']['application/json'] | paths['/accounting/payables']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get payable details from accounting system
     * @description Returns information about an individual payable invoice (bill) that exists in the entity's accounting system. This payable may or may not also exist in Monite.
     */
    getAccountingPayablesId: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting/payables/{payable_id}';
        security: ['HTTPBearer'];
    }, paths['/accounting/payables/{payable_id}']['get']['responses']['200']['content']['application/json'], paths['/accounting/payables/{payable_id}']['get']['parameters'], paths['/accounting/payables/{payable_id}']['get']['responses']['405']['content']['application/json'] | paths['/accounting/payables/{payable_id}']['get']['responses']['422']['content']['application/json'] | paths['/accounting/payables/{payable_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get invoice list from accounting system
     * @description Returns a list of invoices that exist in the entity's accounting system. This requires that an accounting connection has been previously established. Refer to the [Accounting integration guide](https://docs.monite.com/accounting/integration/index) for details.
     *
     * This endpoint only provides read-only access to the accounting system's data but does not pull those invoices into Monite. You can use it to review the data in the accounting system and find out which of those invoices already exist or do not exist in Monite.
     *
     * Data is actual as of the date and time of the last accounting synchronization, which is specified by the `last_pull` value in the response from `GET /accounting_connections/{connection_id}`. To make sure you are accessing the most up-to-date accounting data, you can use `POST /accounting_connections/{connection_id}/sync` to trigger on-demand synchronization before getting the invoice list.
     */
    getAccountingReceivables: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting/receivables';
        security: ['HTTPBearer'];
    }, paths['/accounting/receivables']['get']['responses']['200']['content']['application/json'], paths['/accounting/receivables']['get']['parameters'], paths['/accounting/receivables']['get']['responses']['405']['content']['application/json'] | paths['/accounting/receivables']['get']['responses']['422']['content']['application/json'] | paths['/accounting/receivables']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get invoice details from accounting system
     * @description Returns information about an individual invoice that exists in the entity's accounting system. This invoice may or may not also exist in Monite.
     */
    getAccountingReceivablesId: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting/receivables/{invoice_id}';
        security: ['HTTPBearer'];
    }, paths['/accounting/receivables/{invoice_id}']['get']['responses']['200']['content']['application/json'], paths['/accounting/receivables/{invoice_id}']['get']['parameters'], paths['/accounting/receivables/{invoice_id}']['get']['responses']['405']['content']['application/json'] | paths['/accounting/receivables/{invoice_id}']['get']['responses']['422']['content']['application/json'] | paths['/accounting/receivables/{invoice_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AccountingSyncedRecordsService {
    /**
     * @summary Get Synced Records
     * @description Get synchronized records
     */
    getAccountingSyncedRecords: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting_synced_records';
        security: ['HTTPBearer'];
    }, paths['/accounting_synced_records']['get']['responses']['200']['content']['application/json'], paths['/accounting_synced_records']['get']['parameters'], paths['/accounting_synced_records']['get']['responses']['405']['content']['application/json'] | paths['/accounting_synced_records']['get']['responses']['422']['content']['application/json'] | paths['/accounting_synced_records']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get Single Synced Record
     * @description Get synchronized record by id
     */
    getAccountingSyncedRecordsId: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting_synced_records/{synced_record_id}';
        security: ['HTTPBearer'];
    }, paths['/accounting_synced_records/{synced_record_id}']['get']['responses']['200']['content']['application/json'], paths['/accounting_synced_records/{synced_record_id}']['get']['parameters'], paths['/accounting_synced_records/{synced_record_id}']['get']['responses']['405']['content']['application/json'] | paths['/accounting_synced_records/{synced_record_id}']['get']['responses']['422']['content']['application/json'] | paths['/accounting_synced_records/{synced_record_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Push Object
     * @description Push object to the accounting system manually
     */
    postAccountingSyncedRecordsIdPush: ServiceOperationMutation<{
        method: 'post';
        url: '/accounting_synced_records/{synced_record_id}/push';
        security: ['HTTPBearer'];
    }, undefined, paths['/accounting_synced_records/{synced_record_id}/push']['post']['responses']['200']['content']['application/json'], paths['/accounting_synced_records/{synced_record_id}/push']['post']['parameters'], paths['/accounting_synced_records/{synced_record_id}/push']['post']['responses']['405']['content']['application/json'] | paths['/accounting_synced_records/{synced_record_id}/push']['post']['responses']['422']['content']['application/json'] | paths['/accounting_synced_records/{synced_record_id}/push']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AccountingTaxRatesService {
    /**
     * @summary Get tax rate accounts
     * @description Get all tax rate accounts
     */
    getAccountingTaxRates: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting_tax_rates';
        security: ['HTTPBearer'];
    }, paths['/accounting_tax_rates']['get']['responses']['200']['content']['application/json'], paths['/accounting_tax_rates']['get']['parameters'], paths['/accounting_tax_rates']['get']['responses']['405']['content']['application/json'] | paths['/accounting_tax_rates']['get']['responses']['422']['content']['application/json'] | paths['/accounting_tax_rates']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a tax rate account by ID
     * @description Get tax rate account by id
     */
    getAccountingTaxRatesId: ServiceOperationQuery<{
        method: 'get';
        url: '/accounting_tax_rates/{tax_rate_id}';
        security: ['HTTPBearer'];
    }, paths['/accounting_tax_rates/{tax_rate_id}']['get']['responses']['200']['content']['application/json'], paths['/accounting_tax_rates/{tax_rate_id}']['get']['parameters'], paths['/accounting_tax_rates/{tax_rate_id}']['get']['responses']['405']['content']['application/json'] | paths['/accounting_tax_rates/{tax_rate_id}']['get']['responses']['422']['content']['application/json'] | paths['/accounting_tax_rates/{tax_rate_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AiService {
    /**
     * @summary Get conversations
     * @description Retrieve all historical conversations for the authenticated user.
     *
     *     This endpoint returns a paginated list of conversations sorted by recency.
     *     Each conversation includes basic metadata such as ID, title, and creation timestamp.
     *
     *     You can control the number of results using the `limit` parameter.
     */
    getAiConversations: ServiceOperationQuery<{
        method: 'get';
        url: '/ai/conversations';
        security: ['HTTPBearer'];
    }, paths['/ai/conversations']['get']['responses']['200']['content']['application/json'], paths['/ai/conversations']['get']['parameters'], paths['/ai/conversations']['get']['responses']['405']['content']['application/json'] | paths['/ai/conversations']['get']['responses']['422']['content']['application/json'] | paths['/ai/conversations']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create conversation
     * @description Create a new empty conversation for the authenticated user.
     *
     *     This endpoint initializes a conversation record that can be used with the chat endpoint.
     *     The response includes the new conversation's unique ID which should be used in subsequent
     *     chat API calls.
     */
    postAiConversations: ServiceOperationMutation<{
        method: 'post';
        url: '/ai/conversations';
        security: ['HTTPBearer'];
    }, undefined, paths['/ai/conversations']['post']['responses']['200']['content']['application/json'], paths['/ai/conversations']['post']['parameters'], paths['/ai/conversations']['post']['responses']['405']['content']['application/json'] | paths['/ai/conversations']['post']['responses']['422']['content']['application/json'] | paths['/ai/conversations']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get conversation by ID
     * @description Retrieve a specific conversation and its messages by ID.
     *
     *     This endpoint returns the conversation metadata along with all messages exchanged
     *     between the user and the assistant. Messages are ordered chronologically.
     *     The conversation is only accessible to the user who created it.
     */
    getAiConversationsId: ServiceOperationQuery<{
        method: 'get';
        url: '/ai/conversations/{conversation_id}';
        security: ['HTTPBearer'];
    }, paths['/ai/conversations/{conversation_id}']['get']['responses']['200']['content']['application/json'], paths['/ai/conversations/{conversation_id}']['get']['parameters'], paths['/ai/conversations/{conversation_id}']['get']['responses']['405']['content']['application/json'] | paths['/ai/conversations/{conversation_id}']['get']['responses']['422']['content']['application/json'] | paths['/ai/conversations/{conversation_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Chat with the Argon assistant
     * @description Send a message to the Argon assistant to start a new chat or continue an existing conversation.
     *
     *     This endpoint allows:
     *     - Continuing an existing conversation by providing a valid conversation_id
     *     - Sending user messages to receive AI-generated responses
     *     - Streaming responses back to the client in real-time
     *
     *     The response is a StreamingResponse that delivers chunks of the assistant's
     *     message as they are generated. The stream contains JSON-formatted message parts,
     *     token usage statistics, and completion indicators.
     */
    postAiConversationsIdMessages: ServiceOperationMutation<{
        method: 'post';
        url: '/ai/conversations/{conversation_id}/messages';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ai/conversations/{conversation_id}/messages']['post']['requestBody']>['content']['application/json'], unknown, paths['/ai/conversations/{conversation_id}/messages']['post']['parameters'], paths['/ai/conversations/{conversation_id}/messages']['post']['responses']['405']['content']['application/json'] | paths['/ai/conversations/{conversation_id}/messages']['post']['responses']['422']['content']['application/json'] | paths['/ai/conversations/{conversation_id}/messages']['post']['responses']['500']['content']['application/json']>;
    /** @summary Mark a message as helpful or not */
    postAiMessageFeedbacks: ServiceOperationMutation<{
        method: 'post';
        url: '/ai/message_feedbacks';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ai/message_feedbacks']['post']['requestBody']>['content']['application/json'], unknown, paths['/ai/message_feedbacks']['post']['parameters'], paths['/ai/message_feedbacks']['post']['responses']['405']['content']['application/json'] | paths['/ai/message_feedbacks']['post']['responses']['422']['content']['application/json'] | paths['/ai/message_feedbacks']['post']['responses']['500']['content']['application/json']>;
    /** @summary Post feedback commentary for a message */
    postAiMessageFeedbacksCommentary: ServiceOperationMutation<{
        method: 'post';
        url: '/ai/message_feedbacks/commentary';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ai/message_feedbacks/commentary']['post']['requestBody']>['content']['application/json'], unknown, paths['/ai/message_feedbacks/commentary']['post']['parameters'], paths['/ai/message_feedbacks/commentary']['post']['responses']['405']['content']['application/json'] | paths['/ai/message_feedbacks/commentary']['post']['responses']['422']['content']['application/json'] | paths['/ai/message_feedbacks/commentary']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get user prompts
     * @description Retrieve all saved prompts for the authenticated user. This endpoint returns a list of prompts saved by the user. Each prompt includes its ID, content, and creation timestamp.
     */
    getAiPrompts: ServiceOperationQuery<{
        method: 'get';
        url: '/ai/prompts';
        security: ['HTTPBearer'];
    }, paths['/ai/prompts']['get']['responses']['200']['content']['application/json'], paths['/ai/prompts']['get']['parameters'], paths['/ai/prompts']['get']['responses']['405']['content']['application/json'] | paths['/ai/prompts']['get']['responses']['422']['content']['application/json'] | paths['/ai/prompts']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a prompt
     * @description Save a new prompt to the user's prompt library.
     *
     *     This endpoint allows users to save frequently used prompts for later reuse.
     */
    postAiPrompts: ServiceOperationMutation<{
        method: 'post';
        url: '/ai/prompts';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ai/prompts']['post']['requestBody']>['content']['application/json'], paths['/ai/prompts']['post']['responses']['201']['content']['application/json'], paths['/ai/prompts']['post']['parameters'], paths['/ai/prompts']['post']['responses']['405']['content']['application/json'] | paths['/ai/prompts']['post']['responses']['422']['content']['application/json'] | paths['/ai/prompts']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get prompt by ID
     * @description Retrieve a specific prompt of entity user by prompt ID.
     */
    getAiPromptsId: ServiceOperationQuery<{
        method: 'get';
        url: '/ai/prompts/{prompt_id}';
        security: ['HTTPBearer'];
    }, paths['/ai/prompts/{prompt_id}']['get']['responses']['200']['content']['application/json'], paths['/ai/prompts/{prompt_id}']['get']['parameters'], paths['/ai/prompts/{prompt_id}']['get']['responses']['405']['content']['application/json'] | paths['/ai/prompts/{prompt_id}']['get']['responses']['422']['content']['application/json'] | paths['/ai/prompts/{prompt_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete prompt by ID
     * @description Delete a specific prompt of entity user by prompt ID.
     */
    deleteAiPromptsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/ai/prompts/{prompt_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/ai/prompts/{prompt_id}']['delete']['parameters'], paths['/ai/prompts/{prompt_id}']['delete']['responses']['405']['content']['application/json'] | paths['/ai/prompts/{prompt_id}']['delete']['responses']['422']['content']['application/json'] | paths['/ai/prompts/{prompt_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update prompt by ID
     * @description Update a specific prompt of entity user by prompt ID.
     */
    patchAiPromptsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/ai/prompts/{prompt_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ai/prompts/{prompt_id}']['patch']['requestBody']>['content']['application/json'], unknown, paths['/ai/prompts/{prompt_id}']['patch']['parameters'], paths['/ai/prompts/{prompt_id}']['patch']['responses']['405']['content']['application/json'] | paths['/ai/prompts/{prompt_id}']['patch']['responses']['422']['content']['application/json'] | paths['/ai/prompts/{prompt_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AnalyticsService {
    /**
     * @summary Get credit notes analytics
     * @description Retrieve aggregated statistics for payables with different breakdowns.
     */
    getAnalyticsCreditNotes: ServiceOperationQuery<{
        method: 'get';
        url: '/analytics/credit_notes';
        security: ['HTTPBearer'];
    }, paths['/analytics/credit_notes']['get']['responses']['200']['content']['application/json'], paths['/analytics/credit_notes']['get']['parameters'], paths['/analytics/credit_notes']['get']['responses']['401']['content']['application/json'] | paths['/analytics/credit_notes']['get']['responses']['403']['content']['application/json'] | paths['/analytics/credit_notes']['get']['responses']['405']['content']['application/json'] | paths['/analytics/credit_notes']['get']['responses']['422']['content']['application/json'] | paths['/analytics/credit_notes']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get payables analytics
     * @description Retrieve aggregated statistics for payables with different breakdowns.
     */
    getAnalyticsPayables: ServiceOperationQuery<{
        method: 'get';
        url: '/analytics/payables';
        security: ['HTTPBearer'];
    }, paths['/analytics/payables']['get']['responses']['200']['content']['application/json'], paths['/analytics/payables']['get']['parameters'], paths['/analytics/payables']['get']['responses']['401']['content']['application/json'] | paths['/analytics/payables']['get']['responses']['403']['content']['application/json'] | paths['/analytics/payables']['get']['responses']['405']['content']['application/json'] | paths['/analytics/payables']['get']['responses']['422']['content']['application/json'] | paths['/analytics/payables']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get receivables analytics
     * @description Retrieve aggregated statistics for receivables with different breakdowns.
     */
    getAnalyticsReceivables: ServiceOperationQuery<{
        method: 'get';
        url: '/analytics/receivables';
        security: ['HTTPBearer'];
    }, paths['/analytics/receivables']['get']['responses']['200']['content']['application/json'], paths['/analytics/receivables']['get']['parameters'], paths['/analytics/receivables']['get']['responses']['400']['content']['application/json'] | paths['/analytics/receivables']['get']['responses']['401']['content']['application/json'] | paths['/analytics/receivables']['get']['responses']['403']['content']['application/json'] | paths['/analytics/receivables']['get']['responses']['405']['content']['application/json'] | paths['/analytics/receivables']['get']['responses']['422']['content']['application/json'] | paths['/analytics/receivables']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface ApprovalPoliciesService {
    /**
     * @summary Get approval policies
     * @description Retrieve a list of all approval policies with pagination.
     */
    getApprovalPolicies: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_policies';
        security: ['HTTPBearer'];
    }, paths['/approval_policies']['get']['responses']['200']['content']['application/json'], paths['/approval_policies']['get']['parameters'], paths['/approval_policies']['get']['responses']['401']['content']['application/json'] | paths['/approval_policies']['get']['responses']['405']['content']['application/json'] | paths['/approval_policies']['get']['responses']['409']['content']['application/json'] | paths['/approval_policies']['get']['responses']['422']['content']['application/json'] | paths['/approval_policies']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create an approval policy
     * @description Create a new approval policy.
     */
    postApprovalPolicies: ServiceOperationMutation<{
        method: 'post';
        url: '/approval_policies';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/approval_policies']['post']['requestBody']>['content']['application/json'], paths['/approval_policies']['post']['responses']['201']['content']['application/json'], paths['/approval_policies']['post']['parameters'], paths['/approval_policies']['post']['responses']['400']['content']['application/json'] | paths['/approval_policies']['post']['responses']['401']['content']['application/json'] | paths['/approval_policies']['post']['responses']['405']['content']['application/json'] | paths['/approval_policies']['post']['responses']['409']['content']['application/json'] | paths['/approval_policies']['post']['responses']['422']['content']['application/json'] | paths['/approval_policies']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an approval policy by ID
     * @description Retrieve a specific approval policy.
     */
    getApprovalPoliciesId: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_policies/{approval_policy_id}';
        security: ['HTTPBearer'];
    }, paths['/approval_policies/{approval_policy_id}']['get']['responses']['200']['content']['application/json'], paths['/approval_policies/{approval_policy_id}']['get']['parameters'], paths['/approval_policies/{approval_policy_id}']['get']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['get']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['get']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['get']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['get']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete an approval policy
     * @description Delete an existing approval policy.
     */
    deleteApprovalPoliciesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/approval_policies/{approval_policy_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/approval_policies/{approval_policy_id}']['delete']['parameters'], paths['/approval_policies/{approval_policy_id}']['delete']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['delete']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['delete']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['delete']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['delete']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update an approval policy
     * @description Update an existing approval policy.
     */
    patchApprovalPoliciesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/approval_policies/{approval_policy_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/approval_policies/{approval_policy_id}']['patch']['requestBody']>['content']['application/json'], paths['/approval_policies/{approval_policy_id}']['patch']['responses']['200']['content']['application/json'], paths['/approval_policies/{approval_policy_id}']['patch']['parameters'], paths['/approval_policies/{approval_policy_id}']['patch']['responses']['400']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['patch']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['patch']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['patch']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['patch']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['patch']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get approval processes created from a policy
     * @description Retrieve a list of all approval policy processes.
     */
    getApprovalPoliciesIdProcesses: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_policies/{approval_policy_id}/processes';
        security: ['HTTPBearer'];
    }, paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['200']['content']['application/json'], paths['/approval_policies/{approval_policy_id}/processes']['get']['parameters'], paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an approval process by ID
     * @description Retrieve a specific approval policy process.
     */
    getApprovalPoliciesIdProcessesId: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_policies/{approval_policy_id}/processes/{process_id}';
        security: ['HTTPBearer'];
    }, paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['200']['content']['application/json'], paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['parameters'], paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Cancel an approval process
     * @description Cancel an ongoing approval process for a specific approval policy.
     */
    postApprovalPoliciesIdProcessesIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/approval_policies/{approval_policy_id}/processes/{process_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['200']['content']['application/json'], paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['parameters'], paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get the steps of an approval process
     * @description Retrieve a list of approval policy process steps.
     */
    getApprovalPoliciesIdProcessesIdSteps: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_policies/{approval_policy_id}/processes/{process_id}/steps';
        security: ['HTTPBearer'];
    }, paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['200']['content']['application/json'], paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['parameters'], paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['401']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['404']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['405']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['409']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['422']['content']['application/json'] | paths['/approval_policies/{approval_policy_id}/processes/{process_id}/steps']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface ApprovalRequestsService {
    /** @summary Get approval requests */
    getApprovalRequests: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_requests';
        security: ['HTTPBearer'];
    }, paths['/approval_requests']['get']['responses']['200']['content']['application/json'], paths['/approval_requests']['get']['parameters'], paths['/approval_requests']['get']['responses']['400']['content']['application/json'] | paths['/approval_requests']['get']['responses']['401']['content']['application/json'] | paths['/approval_requests']['get']['responses']['403']['content']['application/json'] | paths['/approval_requests']['get']['responses']['405']['content']['application/json'] | paths['/approval_requests']['get']['responses']['406']['content']['application/json'] | paths['/approval_requests']['get']['responses']['422']['content']['application/json'] | paths['/approval_requests']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create an approval request */
    postApprovalRequests: ServiceOperationMutation<{
        method: 'post';
        url: '/approval_requests';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/approval_requests']['post']['requestBody']>['content']['application/json'], paths['/approval_requests']['post']['responses']['201']['content']['application/json'], paths['/approval_requests']['post']['parameters'], paths['/approval_requests']['post']['responses']['400']['content']['application/json'] | paths['/approval_requests']['post']['responses']['401']['content']['application/json'] | paths['/approval_requests']['post']['responses']['403']['content']['application/json'] | paths['/approval_requests']['post']['responses']['404']['content']['application/json'] | paths['/approval_requests']['post']['responses']['405']['content']['application/json'] | paths['/approval_requests']['post']['responses']['406']['content']['application/json'] | paths['/approval_requests']['post']['responses']['422']['content']['application/json'] | paths['/approval_requests']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get an approval request by ID */
    getApprovalRequestsId: ServiceOperationQuery<{
        method: 'get';
        url: '/approval_requests/{approval_request_id}';
        security: ['HTTPBearer'];
    }, paths['/approval_requests/{approval_request_id}']['get']['responses']['200']['content']['application/json'], paths['/approval_requests/{approval_request_id}']['get']['parameters'], paths['/approval_requests/{approval_request_id}']['get']['responses']['400']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['401']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['403']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['404']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['405']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['406']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['422']['content']['application/json'] | paths['/approval_requests/{approval_request_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Approve an approval request */
    postApprovalRequestsIdApprove: ServiceOperationMutation<{
        method: 'post';
        url: '/approval_requests/{approval_request_id}/approve';
        security: ['HTTPBearer'];
    }, undefined, paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['200']['content']['application/json'], paths['/approval_requests/{approval_request_id}/approve']['post']['parameters'], paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['400']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['401']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['403']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['404']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['405']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['409']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['422']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/approve']['post']['responses']['500']['content']['application/json']>;
    /** @summary Cancel an approval request */
    postApprovalRequestsIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/approval_requests/{approval_request_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['200']['content']['application/json'], paths['/approval_requests/{approval_request_id}/cancel']['post']['parameters'], paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['400']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['403']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /** @summary Reject an approval request */
    postApprovalRequestsIdReject: ServiceOperationMutation<{
        method: 'post';
        url: '/approval_requests/{approval_request_id}/reject';
        security: ['HTTPBearer'];
    }, undefined, paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['200']['content']['application/json'], paths['/approval_requests/{approval_request_id}/reject']['post']['parameters'], paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['400']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['401']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['403']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['404']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['405']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['409']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['422']['content']['application/json'] | paths['/approval_requests/{approval_request_id}/reject']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface AuthService {
    /**
     * @summary Revoke a token
     * @description Revoke an existing token immediately.
     */
    postAuthRevoke: ServiceOperationMutation<{
        method: 'post';
        url: '/auth/revoke';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/auth/revoke']['post']['requestBody']>['content']['application/json'], paths['/auth/revoke']['post']['responses']['200']['content']['application/json'], paths['/auth/revoke']['post']['parameters'], paths['/auth/revoke']['post']['responses']['405']['content']['application/json'] | paths['/auth/revoke']['post']['responses']['422']['content']['application/json'] | paths['/auth/revoke']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a token
     * @description Create a new access token based on client ID and client secret.
     */
    postAuthToken: ServiceOperationMutation<{
        method: 'post';
        url: '/auth/token';
        mediaType: 'application/json';
    }, NonNullable<paths['/auth/token']['post']['requestBody']>['content']['application/json'], paths['/auth/token']['post']['responses']['200']['content']['application/json'], paths['/auth/token']['post']['parameters'], paths['/auth/token']['post']['responses']['401']['content']['application/json'] | paths['/auth/token']['post']['responses']['405']['content']['application/json'] | paths['/auth/token']['post']['responses']['422']['content']['application/json'] | paths['/auth/token']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface BankAccountsService {
    /**
     * @summary Get an entity's bank accounts
     * @description Get all bank accounts of this entity.
     */
    getBankAccounts: ServiceOperationQuery<{
        method: 'get';
        url: '/bank_accounts';
        security: ['HTTPBearer'];
    }, paths['/bank_accounts']['get']['responses']['200']['content']['application/json'], paths['/bank_accounts']['get']['parameters'], paths['/bank_accounts']['get']['responses']['405']['content']['application/json'] | paths['/bank_accounts']['get']['responses']['409']['content']['application/json'] | paths['/bank_accounts']['get']['responses']['422']['content']['application/json'] | paths['/bank_accounts']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create an entity bank account
     * @description Adds a new bank account for the specified entity.
     *
     * The minimum required fields are `currency` and `country`. Other required fields depend on the currency and country.
     *
     * Bank accounts in African countries can use any fields or combinations of fields.
     *
     * For other countries:
     * * EUR accounts require `iban`.
     * * GBP accounts require `account_holder_name`, `account_number`, and `sort_code`.
     * * USD accounts require `account_holder_name`, `account_number`, and `routing_number`.
     * * Accounts in other currencies require one of:
     *   * `iban`
     *   * `account_number` and `sort_code`
     *   * `account_number` and `routing_number`
     */
    postBankAccounts: ServiceOperationMutation<{
        method: 'post';
        url: '/bank_accounts';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/bank_accounts']['post']['requestBody']>['content']['application/json'], paths['/bank_accounts']['post']['responses']['201']['content']['application/json'], paths['/bank_accounts']['post']['parameters'], paths['/bank_accounts']['post']['responses']['405']['content']['application/json'] | paths['/bank_accounts']['post']['responses']['409']['content']['application/json'] | paths['/bank_accounts']['post']['responses']['422']['content']['application/json'] | paths['/bank_accounts']['post']['responses']['500']['content']['application/json']>;
    /** @summary Complete entity bank account verification */
    postBankAccountsCompleteVerification: ServiceOperationMutation<{
        method: 'post';
        url: '/bank_accounts/complete_verification';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/bank_accounts/complete_verification']['post']['requestBody']>['content']['application/json'], paths['/bank_accounts/complete_verification']['post']['responses']['200']['content']['application/json'], paths['/bank_accounts/complete_verification']['post']['parameters'], paths['/bank_accounts/complete_verification']['post']['responses']['405']['content']['application/json'] | paths['/bank_accounts/complete_verification']['post']['responses']['422']['content']['application/json'] | paths['/bank_accounts/complete_verification']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Start entity bank account verification
     * @description Start entity bank account verification. The flow depends on verification type.
     * For airwallex_plaid it generates Plaid Link token to init the Plaid SDK.
     */
    postBankAccountsStartVerification: ServiceOperationMutation<{
        method: 'post';
        url: '/bank_accounts/start_verification';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/bank_accounts/start_verification']['post']['requestBody']>['content']['application/json'], paths['/bank_accounts/start_verification']['post']['responses']['200']['content']['application/json'], paths['/bank_accounts/start_verification']['post']['parameters'], paths['/bank_accounts/start_verification']['post']['responses']['405']['content']['application/json'] | paths['/bank_accounts/start_verification']['post']['responses']['422']['content']['application/json'] | paths['/bank_accounts/start_verification']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an entity's bank account
     * @description Retrieve a bank account by its ID.
     */
    getBankAccountsId: ServiceOperationQuery<{
        method: 'get';
        url: '/bank_accounts/{bank_account_id}';
        security: ['HTTPBearer'];
    }, paths['/bank_accounts/{bank_account_id}']['get']['responses']['200']['content']['application/json'], paths['/bank_accounts/{bank_account_id}']['get']['parameters'], paths['/bank_accounts/{bank_account_id}']['get']['responses']['404']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['get']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['get']['responses']['409']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['get']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete an entity's bank account
     * @description Delete the bank account specified by its ID.
     */
    deleteBankAccountsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/bank_accounts/{bank_account_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/bank_accounts/{bank_account_id}']['delete']['parameters'], paths['/bank_accounts/{bank_account_id}']['delete']['responses']['404']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['delete']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['delete']['responses']['409']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['delete']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update an entity's bank account
     * @description Change the specified fields with the provided values.
     */
    patchBankAccountsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/bank_accounts/{bank_account_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/bank_accounts/{bank_account_id}']['patch']['requestBody']>['content']['application/json'], paths['/bank_accounts/{bank_account_id}']['patch']['responses']['200']['content']['application/json'], paths['/bank_accounts/{bank_account_id}']['patch']['parameters'], paths['/bank_accounts/{bank_account_id}']['patch']['responses']['404']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['patch']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['patch']['responses']['409']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['patch']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Complete verification of the provided entity bank account */
    postBankAccountsIdCompleteVerification: ServiceOperationMutation<{
        method: 'post';
        url: '/bank_accounts/{bank_account_id}/complete_verification';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/bank_accounts/{bank_account_id}/complete_verification']['post']['requestBody']>['content']['application/json'], paths['/bank_accounts/{bank_account_id}/complete_verification']['post']['responses']['200']['content']['application/json'], paths['/bank_accounts/{bank_account_id}/complete_verification']['post']['parameters'], paths['/bank_accounts/{bank_account_id}/complete_verification']['post']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/complete_verification']['post']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/complete_verification']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Set an entity's bank account as the default for its currency
     * @description Set a bank account as the default for this entity per currency.
     */
    postBankAccountsIdMakeDefault: ServiceOperationMutation<{
        method: 'post';
        url: '/bank_accounts/{bank_account_id}/make_default';
        security: ['HTTPBearer'];
    }, undefined, paths['/bank_accounts/{bank_account_id}/make_default']['post']['responses']['200']['content']['application/json'], paths['/bank_accounts/{bank_account_id}/make_default']['post']['parameters'], paths['/bank_accounts/{bank_account_id}/make_default']['post']['responses']['404']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/make_default']['post']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/make_default']['post']['responses']['409']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/make_default']['post']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/make_default']['post']['responses']['500']['content']['application/json']>;
    /** @summary Refresh verification of the provided entity bank account */
    postBankAccountsIdRefreshVerification: ServiceOperationMutation<{
        method: 'post';
        url: '/bank_accounts/{bank_account_id}/refresh_verification';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/bank_accounts/{bank_account_id}/refresh_verification']['post']['requestBody']>['content']['application/json'], paths['/bank_accounts/{bank_account_id}/refresh_verification']['post']['responses']['200']['content']['application/json'], paths['/bank_accounts/{bank_account_id}/refresh_verification']['post']['parameters'], paths['/bank_accounts/{bank_account_id}/refresh_verification']['post']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/refresh_verification']['post']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/refresh_verification']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a bank account verifications */
    getBankAccountsIdVerifications: ServiceOperationQuery<{
        method: 'get';
        url: '/bank_accounts/{bank_account_id}/verifications';
        security: ['HTTPBearer'];
    }, paths['/bank_accounts/{bank_account_id}/verifications']['get']['responses']['200']['content']['application/json'], paths['/bank_accounts/{bank_account_id}/verifications']['get']['parameters'], paths['/bank_accounts/{bank_account_id}/verifications']['get']['responses']['405']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/verifications']['get']['responses']['422']['content']['application/json'] | paths['/bank_accounts/{bank_account_id}/verifications']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface BatchPaymentsService {
    /** @summary Create a batch payment */
    postBatchPayments: ServiceOperationMutation<{
        method: 'post';
        url: '/batch_payments';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/batch_payments']['post']['requestBody']>['content']['application/json'], paths['/batch_payments']['post']['responses']['200']['content']['application/json'], paths['/batch_payments']['post']['parameters'], paths['/batch_payments']['post']['responses']['405']['content']['application/json'] | paths['/batch_payments']['post']['responses']['422']['content']['application/json'] | paths['/batch_payments']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get batch payment by ID */
    getBatchPaymentsId: ServiceOperationQuery<{
        method: 'get';
        url: '/batch_payments/{batch_payment_id}';
        security: ['HTTPBearer'];
    }, paths['/batch_payments/{batch_payment_id}']['get']['responses']['200']['content']['application/json'], paths['/batch_payments/{batch_payment_id}']['get']['parameters'], paths['/batch_payments/{batch_payment_id}']['get']['responses']['405']['content']['application/json'] | paths['/batch_payments/{batch_payment_id}']['get']['responses']['422']['content']['application/json'] | paths['/batch_payments/{batch_payment_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface CommentsService {
    /**
     * @summary Get comments
     * @description Get comments
     */
    getComments: ServiceOperationQuery<{
        method: 'get';
        url: '/comments';
        security: ['HTTPBearer'];
    }, paths['/comments']['get']['responses']['200']['content']['application/json'], paths['/comments']['get']['parameters'], paths['/comments']['get']['responses']['400']['content']['application/json'] | paths['/comments']['get']['responses']['403']['content']['application/json'] | paths['/comments']['get']['responses']['405']['content']['application/json'] | paths['/comments']['get']['responses']['409']['content']['application/json'] | paths['/comments']['get']['responses']['422']['content']['application/json'] | paths['/comments']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a comment
     * @description Create new comment
     */
    postComments: ServiceOperationMutation<{
        method: 'post';
        url: '/comments';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/comments']['post']['requestBody']>['content']['application/json'], paths['/comments']['post']['responses']['201']['content']['application/json'], paths['/comments']['post']['parameters'], paths['/comments']['post']['responses']['400']['content']['application/json'] | paths['/comments']['post']['responses']['403']['content']['application/json'] | paths['/comments']['post']['responses']['404']['content']['application/json'] | paths['/comments']['post']['responses']['405']['content']['application/json'] | paths['/comments']['post']['responses']['409']['content']['application/json'] | paths['/comments']['post']['responses']['422']['content']['application/json'] | paths['/comments']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a comment by ID
     * @description Get comment
     */
    getCommentsId: ServiceOperationQuery<{
        method: 'get';
        url: '/comments/{comment_id}';
        security: ['HTTPBearer'];
    }, paths['/comments/{comment_id}']['get']['responses']['200']['content']['application/json'], paths['/comments/{comment_id}']['get']['parameters'], paths['/comments/{comment_id}']['get']['responses']['400']['content']['application/json'] | paths['/comments/{comment_id}']['get']['responses']['403']['content']['application/json'] | paths['/comments/{comment_id}']['get']['responses']['404']['content']['application/json'] | paths['/comments/{comment_id}']['get']['responses']['405']['content']['application/json'] | paths['/comments/{comment_id}']['get']['responses']['409']['content']['application/json'] | paths['/comments/{comment_id}']['get']['responses']['422']['content']['application/json'] | paths['/comments/{comment_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a comment
     * @description Delete comment
     */
    deleteCommentsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/comments/{comment_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/comments/{comment_id}']['delete']['parameters'], paths['/comments/{comment_id}']['delete']['responses']['400']['content']['application/json'] | paths['/comments/{comment_id}']['delete']['responses']['403']['content']['application/json'] | paths['/comments/{comment_id}']['delete']['responses']['404']['content']['application/json'] | paths['/comments/{comment_id}']['delete']['responses']['405']['content']['application/json'] | paths['/comments/{comment_id}']['delete']['responses']['409']['content']['application/json'] | paths['/comments/{comment_id}']['delete']['responses']['422']['content']['application/json'] | paths['/comments/{comment_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a comment
     * @description Update comment
     */
    patchCommentsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/comments/{comment_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/comments/{comment_id}']['patch']['requestBody']>['content']['application/json'], paths['/comments/{comment_id}']['patch']['responses']['200']['content']['application/json'], paths['/comments/{comment_id}']['patch']['parameters'], paths['/comments/{comment_id}']['patch']['responses']['400']['content']['application/json'] | paths['/comments/{comment_id}']['patch']['responses']['403']['content']['application/json'] | paths['/comments/{comment_id}']['patch']['responses']['404']['content']['application/json'] | paths['/comments/{comment_id}']['patch']['responses']['405']['content']['application/json'] | paths['/comments/{comment_id}']['patch']['responses']['409']['content']['application/json'] | paths['/comments/{comment_id}']['patch']['responses']['422']['content']['application/json'] | paths['/comments/{comment_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface CounterpartsService {
    /** @summary Get all counterparts */
    getCounterparts: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts';
        security: ['HTTPBearer'];
    }, paths['/counterparts']['get']['responses']['200']['content']['application/json'], paths['/counterparts']['get']['parameters'], paths['/counterparts']['get']['responses']['404']['content']['application/json'] | paths['/counterparts']['get']['responses']['405']['content']['application/json'] | paths['/counterparts']['get']['responses']['422']['content']['application/json'] | paths['/counterparts']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a counterpart */
    postCounterparts: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts']['post']['requestBody']>['content']['application/json'], paths['/counterparts']['post']['responses']['201']['content']['application/json'], paths['/counterparts']['post']['parameters'], paths['/counterparts']['post']['responses']['405']['content']['application/json'] | paths['/counterparts']['post']['responses']['422']['content']['application/json'] | paths['/counterparts']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart */
    getCounterpartsId: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}']['get']['parameters'], paths['/counterparts/{counterpart_id}']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a counterpart */
    deleteCounterpartsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/counterparts/{counterpart_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/counterparts/{counterpart_id}']['delete']['parameters'], paths['/counterparts/{counterpart_id}']['delete']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['delete']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['delete']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a counterpart */
    patchCounterpartsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/counterparts/{counterpart_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}']['patch']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}']['patch']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}']['patch']['parameters'], paths['/counterparts/{counterpart_id}']['patch']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['patch']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['patch']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's addresses */
    getCounterpartsIdAddresses: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/addresses';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/addresses']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/addresses']['get']['parameters'], paths['/counterparts/{counterpart_id}/addresses']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a counterpart address */
    postCounterpartsIdAddresses: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/addresses';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/addresses']['post']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/addresses']['post']['responses']['201']['content']['application/json'], paths['/counterparts/{counterpart_id}/addresses']['post']['parameters'], paths['/counterparts/{counterpart_id}/addresses']['post']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's address */
    getCounterpartsIdAddressesId: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/addresses/{address_id}';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/addresses/{address_id}']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/addresses/{address_id}']['get']['parameters'], paths['/counterparts/{counterpart_id}/addresses/{address_id}']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a counterpart's address */
    deleteCounterpartsIdAddressesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/counterparts/{counterpart_id}/addresses/{address_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/counterparts/{counterpart_id}/addresses/{address_id}']['delete']['parameters'], paths['/counterparts/{counterpart_id}/addresses/{address_id}']['delete']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['delete']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['delete']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a counterpart's address */
    patchCounterpartsIdAddressesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/counterparts/{counterpart_id}/addresses/{address_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['parameters'], paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/addresses/{address_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's bank accounts */
    getCounterpartsIdBankAccounts: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/bank_accounts';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/bank_accounts']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts']['get']['parameters'], paths['/counterparts/{counterpart_id}/bank_accounts']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a counterpart bank account */
    postCounterpartsIdBankAccounts: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/bank_accounts';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/bank_accounts']['post']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts']['post']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts']['post']['parameters'], paths['/counterparts/{counterpart_id}/bank_accounts']['post']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's bank account */
    getCounterpartsIdBankAccountsId: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['get']['parameters'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a counterpart's bank account */
    deleteCounterpartsIdBankAccountsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['delete']['parameters'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['delete']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['delete']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['delete']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a counterpart's bank account */
    patchCounterpartsIdBankAccountsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['parameters'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Set a counterpart's bank account as default for its currency */
    postCounterpartsIdBankAccountsIdMakeDefault: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default';
        security: ['HTTPBearer'];
    }, undefined, paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default']['post']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default']['post']['parameters'], paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's contacts */
    getCounterpartsIdContacts: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/contacts';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/contacts']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts']['get']['parameters'], paths['/counterparts/{counterpart_id}/contacts']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a counterpart contact */
    postCounterpartsIdContacts: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/contacts';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/contacts']['post']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts']['post']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts']['post']['parameters'], paths['/counterparts/{counterpart_id}/contacts']['post']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's contact */
    getCounterpartsIdContactsId: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/contacts/{contact_id}';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['get']['parameters'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a counterpart's contact */
    deleteCounterpartsIdContactsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/counterparts/{counterpart_id}/contacts/{contact_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['delete']['parameters'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['delete']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['delete']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['delete']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a counterpart's contact */
    patchCounterpartsIdContactsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/counterparts/{counterpart_id}/contacts/{contact_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['parameters'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Set a counterpart's default contact */
    postCounterpartsIdContactsIdMakeDefault: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/contacts/{contact_id}/make_default';
        security: ['HTTPBearer'];
    }, undefined, paths['/counterparts/{counterpart_id}/contacts/{contact_id}/make_default']['post']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}/make_default']['post']['parameters'], paths['/counterparts/{counterpart_id}/contacts/{contact_id}/make_default']['post']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}/make_default']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}/make_default']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/contacts/{contact_id}/make_default']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a list of a counterpart's e-invoicing credentials */
    getCounterpartsIdEinvoicingCredentials: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/einvoicing_credentials';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/einvoicing_credentials']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/einvoicing_credentials']['get']['parameters'], paths['/counterparts/{counterpart_id}/einvoicing_credentials']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials']['get']['responses']['409']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials']['get']['responses']['500']['content']['application/json']>;
    /** @summary Add e-invoicing credentials for a counterpart */
    postCounterpartsIdEinvoicingCredentials: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/einvoicing_credentials';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['responses']['201']['content']['application/json'], paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['parameters'], paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['responses']['409']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's e-invoicing credentials by ID */
    getCounterpartsIdEinvoicingCredentialsId: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['get']['parameters'], paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a counterpart's e-invoicing credentials */
    deleteCounterpartsIdEinvoicingCredentialsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['delete']['parameters'], paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['delete']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['delete']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['delete']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a counterpart's e-invoicing credentials */
    patchCounterpartsIdEinvoicingCredentialsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['parameters'], paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/einvoicing_credentials/{credential_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get counterpart metadata */
    getCounterpartsIdPartnerMetadata: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/partner_metadata';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/partner_metadata']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/partner_metadata']['get']['parameters'], paths['/counterparts/{counterpart_id}/partner_metadata']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/partner_metadata']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/partner_metadata']['get']['responses']['500']['content']['application/json']>;
    /** @summary Replace counterpart metadata */
    putCounterpartsIdPartnerMetadata: ServiceOperationMutation<{
        method: 'put';
        url: '/counterparts/{counterpart_id}/partner_metadata';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/partner_metadata']['put']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/partner_metadata']['put']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/partner_metadata']['put']['parameters'], paths['/counterparts/{counterpart_id}/partner_metadata']['put']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/partner_metadata']['put']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/partner_metadata']['put']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's VAT IDs */
    getCounterpartsIdVatIds: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/vat_ids';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/vat_ids']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/vat_ids']['get']['parameters'], paths['/counterparts/{counterpart_id}/vat_ids']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a counterpart VAT ID */
    postCounterpartsIdVatIds: ServiceOperationMutation<{
        method: 'post';
        url: '/counterparts/{counterpart_id}/vat_ids';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/vat_ids']['post']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/vat_ids']['post']['responses']['201']['content']['application/json'], paths['/counterparts/{counterpart_id}/vat_ids']['post']['parameters'], paths['/counterparts/{counterpart_id}/vat_ids']['post']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids']['post']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids']['post']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a counterpart's VAT ID */
    getCounterpartsIdVatIdsId: ServiceOperationQuery<{
        method: 'get';
        url: '/counterparts/{counterpart_id}/vat_ids/{vat_id}';
        security: ['HTTPBearer'];
    }, paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['get']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['get']['parameters'], paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['get']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['get']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['get']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a counterpart's VAT ID */
    deleteCounterpartsIdVatIdsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/counterparts/{counterpart_id}/vat_ids/{vat_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['delete']['parameters'], paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['delete']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['delete']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['delete']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a counterpart's VAT ID */
    patchCounterpartsIdVatIdsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/counterparts/{counterpart_id}/vat_ids/{vat_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['requestBody']>['content']['application/json'], paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['responses']['200']['content']['application/json'], paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['parameters'], paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['responses']['404']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['responses']['405']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['responses']['422']['content']['application/json'] | paths['/counterparts/{counterpart_id}/vat_ids/{vat_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface CustomVatRatesService {
    /** @summary Get custom VAT rates */
    getCustomVatRates: ServiceOperationQuery<{
        method: 'get';
        url: '/custom_vat_rates';
        security: ['HTTPBearer'];
    }, paths['/custom_vat_rates']['get']['responses']['200']['content']['application/json'], paths['/custom_vat_rates']['get']['parameters'], paths['/custom_vat_rates']['get']['responses']['400']['content']['application/json'] | paths['/custom_vat_rates']['get']['responses']['401']['content']['application/json'] | paths['/custom_vat_rates']['get']['responses']['403']['content']['application/json'] | paths['/custom_vat_rates']['get']['responses']['405']['content']['application/json'] | paths['/custom_vat_rates']['get']['responses']['422']['content']['application/json'] | paths['/custom_vat_rates']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a custom VAT rate */
    postCustomVatRates: ServiceOperationMutation<{
        method: 'post';
        url: '/custom_vat_rates';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/custom_vat_rates']['post']['requestBody']>['content']['application/json'], paths['/custom_vat_rates']['post']['responses']['201']['content']['application/json'], paths['/custom_vat_rates']['post']['parameters'], paths['/custom_vat_rates']['post']['responses']['400']['content']['application/json'] | paths['/custom_vat_rates']['post']['responses']['401']['content']['application/json'] | paths['/custom_vat_rates']['post']['responses']['403']['content']['application/json'] | paths['/custom_vat_rates']['post']['responses']['405']['content']['application/json'] | paths['/custom_vat_rates']['post']['responses']['422']['content']['application/json'] | paths['/custom_vat_rates']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a custom VAT rate by ID */
    getCustomVatRatesId: ServiceOperationQuery<{
        method: 'get';
        url: '/custom_vat_rates/{custom_vat_rate_id}';
        security: ['HTTPBearer'];
    }, paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['200']['content']['application/json'], paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['parameters'], paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['400']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['401']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['403']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['404']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['405']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['422']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a custom VAT rate */
    deleteCustomVatRatesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/custom_vat_rates/{custom_vat_rate_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['parameters'], paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['400']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['401']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['403']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['404']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['405']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['422']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a custom VAT rate */
    patchCustomVatRatesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/custom_vat_rates/{custom_vat_rate_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['requestBody']>['content']['application/json'], paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['200']['content']['application/json'], paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['parameters'], paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['400']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['401']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['403']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['404']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['405']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['422']['content']['application/json'] | paths['/custom_vat_rates/{custom_vat_rate_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface DataExportsService {
    /** @summary Get all export jobs */
    getDataExports: ServiceOperationQuery<{
        method: 'get';
        url: '/data_exports';
        security: ['HTTPBearer'];
    }, paths['/data_exports']['get']['responses']['200']['content']['application/json'], paths['/data_exports']['get']['parameters'], paths['/data_exports']['get']['responses']['400']['content']['application/json'] | paths['/data_exports']['get']['responses']['401']['content']['application/json'] | paths['/data_exports']['get']['responses']['403']['content']['application/json'] | paths['/data_exports']['get']['responses']['405']['content']['application/json'] | paths['/data_exports']['get']['responses']['406']['content']['application/json'] | paths['/data_exports']['get']['responses']['422']['content']['application/json'] | paths['/data_exports']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create an export job
     * @description Request the export of payable and receivable documents with the specified statuses.
     */
    postDataExports: ServiceOperationMutation<{
        method: 'post';
        url: '/data_exports';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/data_exports']['post']['requestBody']>['content']['application/json'], paths['/data_exports']['post']['responses']['200']['content']['application/json'], paths['/data_exports']['post']['parameters'], paths['/data_exports']['post']['responses']['400']['content']['application/json'] | paths['/data_exports']['post']['responses']['401']['content']['application/json'] | paths['/data_exports']['post']['responses']['403']['content']['application/json'] | paths['/data_exports']['post']['responses']['404']['content']['application/json'] | paths['/data_exports']['post']['responses']['405']['content']['application/json'] | paths['/data_exports']['post']['responses']['409']['content']['application/json'] | paths['/data_exports']['post']['responses']['422']['content']['application/json'] | paths['/data_exports']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get extra fields included in data export */
    getDataExportsExtraData: ServiceOperationQuery<{
        method: 'get';
        url: '/data_exports/extra_data';
        security: ['HTTPBearer'];
    }, paths['/data_exports/extra_data']['get']['responses']['200']['content']['application/json'], paths['/data_exports/extra_data']['get']['parameters'], paths['/data_exports/extra_data']['get']['responses']['401']['content']['application/json'] | paths['/data_exports/extra_data']['get']['responses']['403']['content']['application/json'] | paths['/data_exports/extra_data']['get']['responses']['405']['content']['application/json'] | paths['/data_exports/extra_data']['get']['responses']['422']['content']['application/json'] | paths['/data_exports/extra_data']['get']['responses']['500']['content']['application/json']>;
    /** @summary Add a field to be included in data export */
    postDataExportsExtraData: ServiceOperationMutation<{
        method: 'post';
        url: '/data_exports/extra_data';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/data_exports/extra_data']['post']['requestBody']>['content']['application/json'], paths['/data_exports/extra_data']['post']['responses']['201']['content']['application/json'], paths['/data_exports/extra_data']['post']['parameters'], paths['/data_exports/extra_data']['post']['responses']['400']['content']['application/json'] | paths['/data_exports/extra_data']['post']['responses']['401']['content']['application/json'] | paths['/data_exports/extra_data']['post']['responses']['403']['content']['application/json'] | paths['/data_exports/extra_data']['post']['responses']['405']['content']['application/json'] | paths['/data_exports/extra_data']['post']['responses']['422']['content']['application/json'] | paths['/data_exports/extra_data']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get an extra field by ID */
    getDataExportsExtraDataId: ServiceOperationQuery<{
        method: 'get';
        url: '/data_exports/extra_data/{extra_data_id}';
        security: ['HTTPBearer'];
    }, paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['200']['content']['application/json'], paths['/data_exports/extra_data/{extra_data_id}']['get']['parameters'], paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['401']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['403']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['404']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['405']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['422']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete an extra field */
    deleteDataExportsExtraDataId: ServiceOperationMutation<{
        method: 'delete';
        url: '/data_exports/extra_data/{extra_data_id}';
        security: ['HTTPBearer'];
    }, undefined, paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['200']['content']['application/json'], paths['/data_exports/extra_data/{extra_data_id}']['delete']['parameters'], paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['401']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['403']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['404']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['405']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['422']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update the configuration of an extra field */
    patchDataExportsExtraDataId: ServiceOperationMutation<{
        method: 'patch';
        url: '/data_exports/extra_data/{extra_data_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/data_exports/extra_data/{extra_data_id}']['patch']['requestBody']>['content']['application/json'], paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['200']['content']['application/json'], paths['/data_exports/extra_data/{extra_data_id}']['patch']['parameters'], paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['400']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['401']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['403']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['404']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['405']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['422']['content']['application/json'] | paths['/data_exports/extra_data/{extra_data_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get supported export formats */
    getDataExportsSupportedFormats: ServiceOperationQuery<{
        method: 'get';
        url: '/data_exports/supported_formats';
        security: ['HTTPBearer'];
    }, paths['/data_exports/supported_formats']['get']['responses']['200']['content']['application/json'], paths['/data_exports/supported_formats']['get']['parameters'], paths['/data_exports/supported_formats']['get']['responses']['405']['content']['application/json'] | paths['/data_exports/supported_formats']['get']['responses']['422']['content']['application/json'] | paths['/data_exports/supported_formats']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get the export job status by ID */
    getDataExportsId: ServiceOperationQuery<{
        method: 'get';
        url: '/data_exports/{document_export_id}';
        security: ['HTTPBearer'];
    }, paths['/data_exports/{document_export_id}']['get']['responses']['200']['content']['application/json'], paths['/data_exports/{document_export_id}']['get']['parameters'], paths['/data_exports/{document_export_id}']['get']['responses']['400']['content']['application/json'] | paths['/data_exports/{document_export_id}']['get']['responses']['401']['content']['application/json'] | paths['/data_exports/{document_export_id}']['get']['responses']['403']['content']['application/json'] | paths['/data_exports/{document_export_id}']['get']['responses']['404']['content']['application/json'] | paths['/data_exports/{document_export_id}']['get']['responses']['405']['content']['application/json'] | paths['/data_exports/{document_export_id}']['get']['responses']['422']['content']['application/json'] | paths['/data_exports/{document_export_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface DeliveryNotesService {
    /**
     * @summary Get delivery notes
     * @description Get all delivery notes with filtering and pagination.
     */
    getDeliveryNotes: ServiceOperationQuery<{
        method: 'get';
        url: '/delivery_notes';
        security: ['HTTPBearer'];
    }, paths['/delivery_notes']['get']['responses']['200']['content']['application/json'], paths['/delivery_notes']['get']['parameters'], paths['/delivery_notes']['get']['responses']['400']['content']['application/json'] | paths['/delivery_notes']['get']['responses']['401']['content']['application/json'] | paths['/delivery_notes']['get']['responses']['403']['content']['application/json'] | paths['/delivery_notes']['get']['responses']['405']['content']['application/json'] | paths['/delivery_notes']['get']['responses']['422']['content']['application/json'] | paths['/delivery_notes']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a delivery note */
    postDeliveryNotes: ServiceOperationMutation<{
        method: 'post';
        url: '/delivery_notes';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/delivery_notes']['post']['requestBody']>['content']['application/json'], paths['/delivery_notes']['post']['responses']['201']['content']['application/json'], paths['/delivery_notes']['post']['parameters'], paths['/delivery_notes']['post']['responses']['400']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['401']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['403']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['404']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['405']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['409']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['422']['content']['application/json'] | paths['/delivery_notes']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a delivery note by ID */
    getDeliveryNotesId: ServiceOperationQuery<{
        method: 'get';
        url: '/delivery_notes/{delivery_note_id}';
        security: ['HTTPBearer'];
    }, paths['/delivery_notes/{delivery_note_id}']['get']['responses']['200']['content']['application/json'], paths['/delivery_notes/{delivery_note_id}']['get']['parameters'], paths['/delivery_notes/{delivery_note_id}']['get']['responses']['400']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['get']['responses']['401']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['get']['responses']['403']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['get']['responses']['404']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['get']['responses']['405']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['get']['responses']['422']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a delivery note */
    deleteDeliveryNotesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/delivery_notes/{delivery_note_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/delivery_notes/{delivery_note_id}']['delete']['parameters'], paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['400']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['401']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['403']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['404']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['405']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['422']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a delivery note */
    patchDeliveryNotesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/delivery_notes/{delivery_note_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/delivery_notes/{delivery_note_id}']['patch']['requestBody']>['content']['application/json'], paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['200']['content']['application/json'], paths['/delivery_notes/{delivery_note_id}']['patch']['parameters'], paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['400']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['401']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['403']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['404']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['405']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['409']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['422']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Cancel a delivery note */
    postDeliveryNotesIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/delivery_notes/{delivery_note_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['200']['content']['application/json'], paths['/delivery_notes/{delivery_note_id}/cancel']['post']['parameters'], paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['400']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['403']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /** @summary Mark a delivery note as delivered */
    postDeliveryNotesIdMarkAsDelivered: ServiceOperationMutation<{
        method: 'post';
        url: '/delivery_notes/{delivery_note_id}/mark_as_delivered';
        security: ['HTTPBearer'];
    }, undefined, paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['200']['content']['application/json'], paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['parameters'], paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['400']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['401']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['403']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['404']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['405']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['409']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['422']['content']['application/json'] | paths['/delivery_notes/{delivery_note_id}/mark_as_delivered']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface DocumentTemplatesService {
    /**
     * @summary Get PDF templates
     * @description This API call returns all supported templates with language codes.
     */
    getDocumentTemplates: ServiceOperationQuery<{
        method: 'get';
        url: '/document_templates';
        security: ['HTTPBearer'];
    }, paths['/document_templates']['get']['responses']['200']['content']['application/json'], paths['/document_templates']['get']['parameters'], paths['/document_templates']['get']['responses']['405']['content']['application/json'] | paths['/document_templates']['get']['responses']['422']['content']['application/json'] | paths['/document_templates']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get built-in PDF templates
     * @description This API call returns all supported system templates with language codes.
     */
    getDocumentTemplatesSystem: ServiceOperationQuery<{
        method: 'get';
        url: '/document_templates/system';
        security: ['HTTPBearer'];
    }, paths['/document_templates/system']['get']['responses']['200']['content']['application/json'], paths['/document_templates/system']['get']['parameters'], paths['/document_templates/system']['get']['responses']['405']['content']['application/json'] | paths['/document_templates/system']['get']['responses']['422']['content']['application/json'] | paths['/document_templates/system']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get a PDF template by ID */
    getDocumentTemplatesId: ServiceOperationQuery<{
        method: 'get';
        url: '/document_templates/{document_template_id}';
        security: ['HTTPBearer'];
    }, paths['/document_templates/{document_template_id}']['get']['responses']['200']['content']['application/json'], paths['/document_templates/{document_template_id}']['get']['parameters'], paths['/document_templates/{document_template_id}']['get']['responses']['405']['content']['application/json'] | paths['/document_templates/{document_template_id}']['get']['responses']['422']['content']['application/json'] | paths['/document_templates/{document_template_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Set the default PDF template */
    postDocumentTemplatesIdMakeDefault: ServiceOperationMutation<{
        method: 'post';
        url: '/document_templates/{document_template_id}/make_default';
        security: ['HTTPBearer'];
    }, undefined, paths['/document_templates/{document_template_id}/make_default']['post']['responses']['200']['content']['application/json'], paths['/document_templates/{document_template_id}/make_default']['post']['parameters'], paths['/document_templates/{document_template_id}/make_default']['post']['responses']['405']['content']['application/json'] | paths['/document_templates/{document_template_id}/make_default']['post']['responses']['422']['content']['application/json'] | paths['/document_templates/{document_template_id}/make_default']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Preview a PDF template
     * @description Returns a sample PDF invoice generated using the specified template.
     */
    getDocumentTemplatesIdPreview: ServiceOperationQuery<{
        method: 'get';
        url: '/document_templates/{document_template_id}/preview';
        security: ['HTTPBearer'];
    }, unknown, paths['/document_templates/{document_template_id}/preview']['get']['parameters'], paths['/document_templates/{document_template_id}/preview']['get']['responses']['405']['content']['application/json'] | paths['/document_templates/{document_template_id}/preview']['get']['responses']['422']['content']['application/json'] | paths['/document_templates/{document_template_id}/preview']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface EinvoiceSearchService {
    /** @summary Check if e-invoicing credentials exist in the network. */
    getEinvoiceSearch: ServiceOperationQuery<{
        method: 'get';
        url: '/einvoice_search';
        security: ['HTTPBearer'];
    }, paths['/einvoice_search']['get']['responses']['200']['content']['application/json'], paths['/einvoice_search']['get']['parameters'], paths['/einvoice_search']['get']['responses']['405']['content']['application/json'] | paths['/einvoice_search']['get']['responses']['409']['content']['application/json'] | paths['/einvoice_search']['get']['responses']['422']['content']['application/json'] | paths['/einvoice_search']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface EinvoicingConnectionsService {
    /** @summary Get all e-invoicing connections */
    getEinvoicingConnections: ServiceOperationQuery<{
        method: 'get';
        url: '/einvoicing_connections';
        security: ['HTTPBearer'];
    }, paths['/einvoicing_connections']['get']['responses']['200']['content']['application/json'], paths['/einvoicing_connections']['get']['parameters'], paths['/einvoicing_connections']['get']['responses']['400']['content']['application/json'] | paths['/einvoicing_connections']['get']['responses']['401']['content']['application/json'] | paths['/einvoicing_connections']['get']['responses']['403']['content']['application/json'] | paths['/einvoicing_connections']['get']['responses']['405']['content']['application/json'] | paths['/einvoicing_connections']['get']['responses']['422']['content']['application/json'] | paths['/einvoicing_connections']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create an e-invoicing connection */
    postEinvoicingConnections: ServiceOperationMutation<{
        method: 'post';
        url: '/einvoicing_connections';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/einvoicing_connections']['post']['requestBody']>['content']['application/json'], paths['/einvoicing_connections']['post']['responses']['201']['content']['application/json'], paths['/einvoicing_connections']['post']['parameters'], paths['/einvoicing_connections']['post']['responses']['400']['content']['application/json'] | paths['/einvoicing_connections']['post']['responses']['401']['content']['application/json'] | paths['/einvoicing_connections']['post']['responses']['403']['content']['application/json'] | paths['/einvoicing_connections']['post']['responses']['405']['content']['application/json'] | paths['/einvoicing_connections']['post']['responses']['409']['content']['application/json'] | paths['/einvoicing_connections']['post']['responses']['422']['content']['application/json'] | paths['/einvoicing_connections']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get an e-invoicing connection by ID */
    getEinvoicingConnectionsId: ServiceOperationQuery<{
        method: 'get';
        url: '/einvoicing_connections/{einvoicing_connection_id}';
        security: ['HTTPBearer'];
    }, paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['200']['content']['application/json'], paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['parameters'], paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['400']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['401']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['403']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['404']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['405']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['422']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete an e-invoicing connection */
    deleteEinvoicingConnectionsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/einvoicing_connections/{einvoicing_connection_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['parameters'], paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['400']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['401']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['403']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['404']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['405']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['422']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update an e-invoicing connection */
    patchEinvoicingConnectionsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/einvoicing_connections/{einvoicing_connection_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['requestBody']>['content']['application/json'], paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['200']['content']['application/json'], paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['parameters'], paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['400']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['401']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['403']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['404']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['405']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['409']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['422']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Create an e-invoicing credential */
    postEinvoicingConnectionsIdNetworkCredentials: ServiceOperationMutation<{
        method: 'post';
        url: '/einvoicing_connections/{einvoicing_connection_id}/network_credentials';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['requestBody']>['content']['application/json'], paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['201']['content']['application/json'], paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['parameters'], paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['400']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['401']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['403']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['404']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['405']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['409']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['422']['content']['application/json'] | paths['/einvoicing_connections/{einvoicing_connection_id}/network_credentials']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface EntitiesService {
    /**
     * @summary Create an entity
     * @description Create a new entity from the specified values.
     */
    postEntities: ServiceOperationMutation<{
        method: 'post';
        url: '/entities';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities']['post']['requestBody']>['content']['application/json'], paths['/entities']['post']['responses']['201']['content']['application/json'], paths['/entities']['post']['parameters'], paths['/entities']['post']['responses']['400']['content']['application/json'] | paths['/entities']['post']['responses']['403']['content']['application/json'] | paths['/entities']['post']['responses']['405']['content']['application/json'] | paths['/entities']['post']['responses']['422']['content']['application/json'] | paths['/entities']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get all entities
     * @description Retrieve a list of all entities.
     */
    getEntities: ServiceOperationQuery<{
        method: 'get';
        url: '/entities';
        security: ['HTTPBearer'];
    }, paths['/entities']['get']['responses']['200']['content']['application/json'], paths['/entities']['get']['parameters'], paths['/entities']['get']['responses']['400']['content']['application/json'] | paths['/entities']['get']['responses']['401']['content']['application/json'] | paths['/entities']['get']['responses']['403']['content']['application/json'] | paths['/entities']['get']['responses']['405']['content']['application/json'] | paths['/entities']['get']['responses']['406']['content']['application/json'] | paths['/entities']['get']['responses']['422']['content']['application/json'] | paths['/entities']['get']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Get the current entity
     * @description Deprecated. Use `GET /entity_users/my_entity` instead.
     */
    getEntitiesMe: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/me';
        security: ['HTTPBearer'];
    }, paths['/entities/me']['get']['responses']['200']['content']['application/json'], paths['/entities/me']['get']['parameters'], paths['/entities/me']['get']['responses']['400']['content']['application/json'] | paths['/entities/me']['get']['responses']['405']['content']['application/json'] | paths['/entities/me']['get']['responses']['422']['content']['application/json'] | paths['/entities/me']['get']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Update the current entity
     * @description Deprecated. Use `PATCH /entity_users/my_entity` instead.
     */
    patchEntitiesMe: ServiceOperationMutation<{
        method: 'patch';
        url: '/entities/me';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/me']['patch']['requestBody']>['content']['application/json'], paths['/entities/me']['patch']['responses']['200']['content']['application/json'], paths['/entities/me']['patch']['parameters'], paths['/entities/me']['patch']['responses']['400']['content']['application/json'] | paths['/entities/me']['patch']['responses']['405']['content']['application/json'] | paths['/entities/me']['patch']['responses']['422']['content']['application/json'] | paths['/entities/me']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an entity
     * @description Retrieve an entity by its ID.
     */
    getEntitiesId: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}']['get']['parameters'], paths['/entities/{entity_id}']['get']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update an entity
     * @description Change the specified fields with the provided values.
     */
    patchEntitiesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/entities/{entity_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}']['patch']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}']['patch']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}']['patch']['parameters'], paths['/entities/{entity_id}']['patch']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}']['patch']['responses']['403']['content']['application/json'] | paths['/entities/{entity_id}']['patch']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}']['patch']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Activate an entity
     * @description Activate an entity to allow it to perform any operations.
     */
    postEntitiesIdActivate: ServiceOperationMutation<{
        method: 'post';
        url: '/entities/{entity_id}/activate';
        security: ['HTTPBearer'];
    }, undefined, paths['/entities/{entity_id}/activate']['post']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/activate']['post']['parameters'], paths['/entities/{entity_id}/activate']['post']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}/activate']['post']['responses']['403']['content']['application/json'] | paths['/entities/{entity_id}/activate']['post']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/activate']['post']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/activate']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Deactivate an entity
     * @description Deactivate an entity to stop it from performing any operations.
     */
    postEntitiesIdDeactivate: ServiceOperationMutation<{
        method: 'post';
        url: '/entities/{entity_id}/deactivate';
        security: ['HTTPBearer'];
    }, undefined, paths['/entities/{entity_id}/deactivate']['post']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/deactivate']['post']['parameters'], paths['/entities/{entity_id}/deactivate']['post']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}/deactivate']['post']['responses']['403']['content']['application/json'] | paths['/entities/{entity_id}/deactivate']['post']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/deactivate']['post']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/deactivate']['post']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Update entity onboarding documents
     * @description Deprecated. Use `POST /onboarding_documents` instead. Update the onboarding documents of an entity.
     */
    postEntitiesIdDocuments: ServiceOperationMutation<{
        method: 'post';
        url: '/entities/{entity_id}/documents';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/entities/{entity_id}/documents']['post']['parameters'], paths['/entities/{entity_id}/documents']['post']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/documents']['post']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/documents']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Upload an entity logo
     * @description Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.
     */
    putEntitiesIdLogo: ServiceOperationMutation<{
        method: 'put';
        url: '/entities/{entity_id}/logo';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/logo']['put']['requestBody']>['content']['multipart/form-data'], paths['/entities/{entity_id}/logo']['put']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/logo']['put']['parameters'], paths['/entities/{entity_id}/logo']['put']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}/logo']['put']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/logo']['put']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/logo']['put']['responses']['500']['content']['application/json']>;
    /** @summary Delete an entity's logo */
    deleteEntitiesIdLogo: ServiceOperationMutation<{
        method: 'delete';
        url: '/entities/{entity_id}/logo';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/entities/{entity_id}/logo']['delete']['parameters'], paths['/entities/{entity_id}/logo']['delete']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/logo']['delete']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/logo']['delete']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/logo']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Update entity onboarding data
     * @description Deprecated. Use `PATCH /entities/{entity_id}/onboarding_data` instead. Update entity onboarding data.
     */
    putEntitiesIdOnboardingData: ServiceOperationMutation<{
        method: 'put';
        url: '/entities/{entity_id}/onboarding_data';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/onboarding_data']['put']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/onboarding_data']['put']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/onboarding_data']['put']['parameters'], paths['/entities/{entity_id}/onboarding_data']['put']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['put']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['put']['responses']['409']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['put']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['put']['responses']['500']['content']['application/json']>;
    /** @summary Patch entity onboarding data */
    patchEntitiesIdOnboardingData: ServiceOperationMutation<{
        method: 'patch';
        url: '/entities/{entity_id}/onboarding_data';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/onboarding_data']['patch']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/onboarding_data']['patch']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/onboarding_data']['patch']['parameters'], paths['/entities/{entity_id}/onboarding_data']['patch']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['patch']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['patch']['responses']['409']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['patch']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get entity onboarding data */
    getEntitiesIdOnboardingData: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/onboarding_data';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/onboarding_data']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/onboarding_data']['get']['parameters'], paths['/entities/{entity_id}/onboarding_data']['get']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['get']['responses']['409']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_data']['get']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Get onboarding requirements
     * @description Deprecated. Use `GET /onboarding_requirements` instead. Check the information required to complete the onboarding process.
     */
    getEntitiesIdOnboardingRequirements: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/onboarding_requirements';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/onboarding_requirements']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/onboarding_requirements']['get']['parameters'], paths['/entities/{entity_id}/onboarding_requirements']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_requirements']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/onboarding_requirements']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get entity metadata
     * @description Retrieve a metadata object associated with this entity, usually in a JSON format.
     */
    getEntitiesIdPartnerMetadata: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/partner_metadata';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/partner_metadata']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/partner_metadata']['get']['parameters'], paths['/entities/{entity_id}/partner_metadata']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/partner_metadata']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/partner_metadata']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Replace entity metadata
     * @description Fully replace the current metadata object with the specified instance.
     */
    putEntitiesIdPartnerMetadata: ServiceOperationMutation<{
        method: 'put';
        url: '/entities/{entity_id}/partner_metadata';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/partner_metadata']['put']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/partner_metadata']['put']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/partner_metadata']['put']['parameters'], paths['/entities/{entity_id}/partner_metadata']['put']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/partner_metadata']['put']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/partner_metadata']['put']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get Enabled Payment Methods
     * @description Get all enabled payment methods.
     */
    getEntitiesIdPaymentMethods: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/payment_methods';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/payment_methods']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/payment_methods']['get']['parameters'], paths['/entities/{entity_id}/payment_methods']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/payment_methods']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/payment_methods']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Enable Payment Methods
     * @description Set which payment methods should be enabled.
     */
    putEntitiesIdPaymentMethods: ServiceOperationMutation<{
        method: 'put';
        url: '/entities/{entity_id}/payment_methods';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/payment_methods']['put']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/payment_methods']['put']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/payment_methods']['put']['parameters'], paths['/entities/{entity_id}/payment_methods']['put']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/payment_methods']['put']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/payment_methods']['put']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update entity settings
     * @description Change the specified fields with the provided values.
     */
    patchEntitiesIdSettings: ServiceOperationMutation<{
        method: 'patch';
        url: '/entities/{entity_id}/settings';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/settings']['patch']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/settings']['patch']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/settings']['patch']['parameters'], paths['/entities/{entity_id}/settings']['patch']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}/settings']['patch']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/settings']['patch']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/settings']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get entity settings
     * @description Retrieve all settings for this entity.
     */
    getEntitiesIdSettings: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/settings';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/settings']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/settings']['get']['parameters'], paths['/entities/{entity_id}/settings']['get']['responses']['400']['content']['application/json'] | paths['/entities/{entity_id}/settings']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/settings']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/settings']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get the next document numbers for an entity */
    getEntitiesIdSettingsNextDocumentNumbers: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/settings/next_document_numbers';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/settings/next_document_numbers']['get']['parameters'], paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['401']['content']['application/json'] | paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['403']['content']['application/json'] | paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/settings/next_document_numbers']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create an entity VAT ID */
    postEntitiesIdVatIds: ServiceOperationMutation<{
        method: 'post';
        url: '/entities/{entity_id}/vat_ids';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/vat_ids']['post']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/vat_ids']['post']['responses']['201']['content']['application/json'], paths['/entities/{entity_id}/vat_ids']['post']['parameters'], paths['/entities/{entity_id}/vat_ids']['post']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids']['post']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids']['post']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get an entity's VAT IDs */
    getEntitiesIdVatIds: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/vat_ids';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/vat_ids']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/vat_ids']['get']['parameters'], paths['/entities/{entity_id}/vat_ids']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update an entity's VAT ID */
    patchEntitiesIdVatIdsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/entities/{entity_id}/vat_ids/{id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entities/{entity_id}/vat_ids/{id}']['patch']['requestBody']>['content']['application/json'], paths['/entities/{entity_id}/vat_ids/{id}']['patch']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/vat_ids/{id}']['patch']['parameters'], paths['/entities/{entity_id}/vat_ids/{id}']['patch']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['patch']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['patch']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get an entity's VAT ID */
    getEntitiesIdVatIdsId: ServiceOperationQuery<{
        method: 'get';
        url: '/entities/{entity_id}/vat_ids/{id}';
        security: ['HTTPBearer'];
    }, paths['/entities/{entity_id}/vat_ids/{id}']['get']['responses']['200']['content']['application/json'], paths['/entities/{entity_id}/vat_ids/{id}']['get']['parameters'], paths['/entities/{entity_id}/vat_ids/{id}']['get']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['get']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['get']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete an entity's VAT ID */
    deleteEntitiesIdVatIdsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/entities/{entity_id}/vat_ids/{id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/entities/{entity_id}/vat_ids/{id}']['delete']['parameters'], paths['/entities/{entity_id}/vat_ids/{id}']['delete']['responses']['404']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['delete']['responses']['405']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['delete']['responses']['422']['content']['application/json'] | paths['/entities/{entity_id}/vat_ids/{id}']['delete']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface EntityUsersService {
    /**
     * @summary Create an entity user
     * @description Create a new entity user from the specified values.
     */
    postEntityUsers: ServiceOperationMutation<{
        method: 'post';
        url: '/entity_users';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entity_users']['post']['requestBody']>['content']['application/json'], paths['/entity_users']['post']['responses']['200']['content']['application/json'], paths['/entity_users']['post']['parameters'], paths['/entity_users']['post']['responses']['400']['content']['application/json'] | paths['/entity_users']['post']['responses']['405']['content']['application/json'] | paths['/entity_users']['post']['responses']['422']['content']['application/json'] | paths['/entity_users']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get all entity users
     * @description Retrieve a list of all entity users.
     */
    getEntityUsers: ServiceOperationQuery<{
        method: 'get';
        url: '/entity_users';
        security: ['HTTPBearer'];
    }, paths['/entity_users']['get']['responses']['200']['content']['application/json'], paths['/entity_users']['get']['parameters'], paths['/entity_users']['get']['responses']['400']['content']['application/json'] | paths['/entity_users']['get']['responses']['401']['content']['application/json'] | paths['/entity_users']['get']['responses']['403']['content']['application/json'] | paths['/entity_users']['get']['responses']['405']['content']['application/json'] | paths['/entity_users']['get']['responses']['406']['content']['application/json'] | paths['/entity_users']['get']['responses']['422']['content']['application/json'] | paths['/entity_users']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get current entity user
     * @description Retrieve an entity user by its ID.
     */
    getEntityUsersMe: ServiceOperationQuery<{
        method: 'get';
        url: '/entity_users/me';
        security: ['HTTPBearer'];
    }, paths['/entity_users/me']['get']['responses']['200']['content']['application/json'], paths['/entity_users/me']['get']['parameters'], paths['/entity_users/me']['get']['responses']['400']['content']['application/json'] | paths['/entity_users/me']['get']['responses']['405']['content']['application/json'] | paths['/entity_users/me']['get']['responses']['422']['content']['application/json'] | paths['/entity_users/me']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update current entity user
     * @description Change the specified fields with provided values.
     */
    patchEntityUsersMe: ServiceOperationMutation<{
        method: 'patch';
        url: '/entity_users/me';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entity_users/me']['patch']['requestBody']>['content']['application/json'], paths['/entity_users/me']['patch']['responses']['200']['content']['application/json'], paths['/entity_users/me']['patch']['parameters'], paths['/entity_users/me']['patch']['responses']['400']['content']['application/json'] | paths['/entity_users/me']['patch']['responses']['405']['content']['application/json'] | paths['/entity_users/me']['patch']['responses']['422']['content']['application/json'] | paths['/entity_users/me']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an entity of this user
     * @description Retrieves information of an entity, which this entity user belongs to.
     */
    getEntityUsersMyEntity: ServiceOperationQuery<{
        method: 'get';
        url: '/entity_users/my_entity';
        security: ['HTTPBearer'];
    }, paths['/entity_users/my_entity']['get']['responses']['200']['content']['application/json'], paths['/entity_users/my_entity']['get']['parameters'], paths['/entity_users/my_entity']['get']['responses']['400']['content']['application/json'] | paths['/entity_users/my_entity']['get']['responses']['405']['content']['application/json'] | paths['/entity_users/my_entity']['get']['responses']['422']['content']['application/json'] | paths['/entity_users/my_entity']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update an entity of this user
     * @description Update information of an entity, which this entity user belongs to.
     */
    patchEntityUsersMyEntity: ServiceOperationMutation<{
        method: 'patch';
        url: '/entity_users/my_entity';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entity_users/my_entity']['patch']['requestBody']>['content']['application/json'], paths['/entity_users/my_entity']['patch']['responses']['200']['content']['application/json'], paths['/entity_users/my_entity']['patch']['parameters'], paths['/entity_users/my_entity']['patch']['responses']['400']['content']['application/json'] | paths['/entity_users/my_entity']['patch']['responses']['405']['content']['application/json'] | paths['/entity_users/my_entity']['patch']['responses']['422']['content']['application/json'] | paths['/entity_users/my_entity']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a role of this entity user
     * @description Retrieves information of a role assigned to this entity user.
     */
    getEntityUsersMyRole: ServiceOperationQuery<{
        method: 'get';
        url: '/entity_users/my_role';
        security: ['HTTPBearer'];
    }, paths['/entity_users/my_role']['get']['responses']['200']['content']['application/json'], paths['/entity_users/my_role']['get']['parameters'], paths['/entity_users/my_role']['get']['responses']['405']['content']['application/json'] | paths['/entity_users/my_role']['get']['responses']['422']['content']['application/json'] | paths['/entity_users/my_role']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an entity user
     * @description Retrieve an entity user by its ID.
     */
    getEntityUsersId: ServiceOperationQuery<{
        method: 'get';
        url: '/entity_users/{entity_user_id}';
        security: ['HTTPBearer'];
    }, paths['/entity_users/{entity_user_id}']['get']['responses']['200']['content']['application/json'], paths['/entity_users/{entity_user_id}']['get']['parameters'], paths['/entity_users/{entity_user_id}']['get']['responses']['400']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['get']['responses']['405']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['get']['responses']['422']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update an entity user
     * @description Change the specified fields with provided values.
     */
    patchEntityUsersId: ServiceOperationMutation<{
        method: 'patch';
        url: '/entity_users/{entity_user_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/entity_users/{entity_user_id}']['patch']['requestBody']>['content']['application/json'], paths['/entity_users/{entity_user_id}']['patch']['responses']['200']['content']['application/json'], paths['/entity_users/{entity_user_id}']['patch']['parameters'], paths['/entity_users/{entity_user_id}']['patch']['responses']['400']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['patch']['responses']['405']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['patch']['responses']['422']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Delete an entity user */
    deleteEntityUsersId: ServiceOperationMutation<{
        method: 'delete';
        url: '/entity_users/{entity_user_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/entity_users/{entity_user_id}']['delete']['parameters'], paths['/entity_users/{entity_user_id}']['delete']['responses']['400']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['delete']['responses']['405']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['delete']['responses']['422']['content']['application/json'] | paths['/entity_users/{entity_user_id}']['delete']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface EventsService {
    /**
     * @summary Get events
     * @description Returns all webhook events that were triggered for the specified entity based on your enabled webhook subscriptions. These are the same events that were sent to your configured webhook listener endpoints, aggregated into a single list. Results can be filtered by the related object type or time period.
     *
     * You can use this to get the missed events for the time periods when your webhook listener was temporarily unavailable.
     *
     * We guarantee access to event data only from the last three months. Earlier events may be unavailable.
     */
    getEvents: ServiceOperationQuery<{
        method: 'get';
        url: '/events';
        security: ['HTTPBearer'];
    }, paths['/events']['get']['responses']['200']['content']['application/json'], paths['/events']['get']['parameters'], paths['/events']['get']['responses']['405']['content']['application/json'] | paths['/events']['get']['responses']['422']['content']['application/json'] | paths['/events']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get an event by ID
     * @description Get a webhook event by its ID. The data is the same as you might have previously received in a webhook sent by Monite to your server.
     */
    getEventsId: ServiceOperationQuery<{
        method: 'get';
        url: '/events/{event_id}';
        security: ['HTTPBearer'];
    }, paths['/events/{event_id}']['get']['responses']['200']['content']['application/json'], paths['/events/{event_id}']['get']['parameters'], paths['/events/{event_id}']['get']['responses']['405']['content']['application/json'] | paths['/events/{event_id}']['get']['responses']['422']['content']['application/json'] | paths['/events/{event_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface FilesService {
    /** @summary Upload a file */
    postFiles: ServiceOperationMutation<{
        method: 'post';
        url: '/files';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/files']['post']['requestBody']>['content']['multipart/form-data'], paths['/files']['post']['responses']['201']['content']['application/json'], paths['/files']['post']['parameters'], paths['/files']['post']['responses']['405']['content']['application/json'] | paths['/files']['post']['responses']['422']['content']['application/json'] | paths['/files']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get files */
    getFiles: ServiceOperationQuery<{
        method: 'get';
        url: '/files';
        security: ['HTTPBearer'];
    }, paths['/files']['get']['responses']['200']['content']['application/json'], paths['/files']['get']['parameters'], paths['/files']['get']['responses']['405']['content']['application/json'] | paths['/files']['get']['responses']['422']['content']['application/json'] | paths['/files']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a file */
    deleteFilesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/files/{file_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/files/{file_id}']['delete']['parameters'], paths['/files/{file_id}']['delete']['responses']['405']['content']['application/json'] | paths['/files/{file_id}']['delete']['responses']['422']['content']['application/json'] | paths['/files/{file_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Get a file by ID */
    getFilesId: ServiceOperationQuery<{
        method: 'get';
        url: '/files/{file_id}';
        security: ['HTTPBearer'];
    }, paths['/files/{file_id}']['get']['responses']['200']['content']['application/json'], paths['/files/{file_id}']['get']['parameters'], paths['/files/{file_id}']['get']['responses']['405']['content']['application/json'] | paths['/files/{file_id}']['get']['responses']['422']['content']['application/json'] | paths['/files/{file_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface FinancingInvoicesService {
    /**
     * @summary Get invoices
     * @description Returns a list of invoices requested for financing
     */
    getFinancingInvoices: ServiceOperationQuery<{
        method: 'get';
        url: '/financing_invoices';
        security: ['HTTPBearer'];
    }, paths['/financing_invoices']['get']['responses']['200']['content']['application/json'], paths['/financing_invoices']['get']['parameters'], paths['/financing_invoices']['get']['responses']['405']['content']['application/json'] | paths['/financing_invoices']['get']['responses']['422']['content']['application/json'] | paths['/financing_invoices']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Request financing for invoices
     * @description Returns a session token and a connect token to open Kanmon SDK for confirming invoice details.
     */
    postFinancingInvoices: ServiceOperationMutation<{
        method: 'post';
        url: '/financing_invoices';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/financing_invoices']['post']['requestBody']>['content']['application/json'], paths['/financing_invoices']['post']['responses']['201']['content']['application/json'], paths['/financing_invoices']['post']['parameters'], paths['/financing_invoices']['post']['responses']['405']['content']['application/json'] | paths['/financing_invoices']['post']['responses']['422']['content']['application/json'] | paths['/financing_invoices']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface FinancingOffersService {
    /**
     * @summary Get financing offers and the business status
     * @description Returns a list of financing offers and the business's onboarding status
     */
    getFinancingOffers: ServiceOperationQuery<{
        method: 'get';
        url: '/financing_offers';
        security: ['HTTPBearer'];
    }, paths['/financing_offers']['get']['responses']['200']['content']['application/json'], paths['/financing_offers']['get']['parameters'], paths['/financing_offers']['get']['responses']['405']['content']['application/json'] | paths['/financing_offers']['get']['responses']['422']['content']['application/json'] | paths['/financing_offers']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface FinancingTokensService {
    /**
     * @summary Create a token for Kanmon SDK
     * @description Returns a token for Kanmon SDK. Creates a business and user on Kanmon if not already exist.
     */
    postFinancingTokens: ServiceOperationMutation<{
        method: 'post';
        url: '/financing_tokens';
        security: ['HTTPBearer'];
    }, undefined, paths['/financing_tokens']['post']['responses']['201']['content']['application/json'], paths['/financing_tokens']['post']['parameters'], paths['/financing_tokens']['post']['responses']['405']['content']['application/json'] | paths['/financing_tokens']['post']['responses']['422']['content']['application/json'] | paths['/financing_tokens']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface FrontendService {
    /**
     * @summary Get bank account masks for supported currencies
     * @description Get bank account masks for supported currencies
     */
    getFrontendBankAccountMasks: ServiceOperationQuery<{
        method: 'get';
        url: '/frontend/bank_account_masks';
        security: ['HTTPBearer'];
    }, paths['/frontend/bank_account_masks']['get']['responses']['200']['content']['application/json'], paths['/frontend/bank_account_masks']['get']['parameters'], paths['/frontend/bank_account_masks']['get']['responses']['405']['content']['application/json'] | paths['/frontend/bank_account_masks']['get']['responses']['422']['content']['application/json'] | paths['/frontend/bank_account_masks']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get currency to allowed countries mapping
     * @description Get currency to allowed countries mapping
     */
    getFrontendBankAccountsCurrencyToSupportedCountries: ServiceOperationQuery<{
        method: 'get';
        url: '/frontend/bank_accounts_currency_to_supported_countries';
        security: ['HTTPBearer'];
    }, paths['/frontend/bank_accounts_currency_to_supported_countries']['get']['responses']['200']['content']['application/json'], paths['/frontend/bank_accounts_currency_to_supported_countries']['get']['parameters'], paths['/frontend/bank_accounts_currency_to_supported_countries']['get']['responses']['405']['content']['application/json'] | paths['/frontend/bank_accounts_currency_to_supported_countries']['get']['responses']['422']['content']['application/json'] | paths['/frontend/bank_accounts_currency_to_supported_countries']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get descriptions of allowed verification documents by country
     * @description Get descriptions of allowed verification documents by country
     */
    getFrontendDocumentTypeDescriptions: ServiceOperationQuery<{
        method: 'get';
        url: '/frontend/document_type_descriptions';
        security: ['HTTPBearer'];
    }, paths['/frontend/document_type_descriptions']['get']['responses']['200']['content']['application/json'], paths['/frontend/document_type_descriptions']['get']['parameters'], paths['/frontend/document_type_descriptions']['get']['responses']['405']['content']['application/json'] | paths['/frontend/document_type_descriptions']['get']['responses']['422']['content']['application/json'] | paths['/frontend/document_type_descriptions']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get onboarding requirements
     * @description Get onboarding requirements for the entity
     */
    getFrontendOnboardingRequirements: ServiceOperationQuery<{
        method: 'get';
        url: '/frontend/onboarding_requirements';
        security: ['HTTPBearer'];
    }, paths['/frontend/onboarding_requirements']['get']['responses']['200']['content']['application/json'], paths['/frontend/onboarding_requirements']['get']['parameters'], paths['/frontend/onboarding_requirements']['get']['responses']['405']['content']['application/json'] | paths['/frontend/onboarding_requirements']['get']['responses']['422']['content']['application/json'] | paths['/frontend/onboarding_requirements']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get person mask based on relationships
     * @description Get person mask based on relationships
     */
    getFrontendPersonMask: ServiceOperationQuery<{
        method: 'get';
        url: '/frontend/person_mask';
        security: ['HTTPBearer'];
    }, paths['/frontend/person_mask']['get']['responses']['200']['content']['application/json'], paths['/frontend/person_mask']['get']['parameters'], paths['/frontend/person_mask']['get']['responses']['405']['content']['application/json'] | paths['/frontend/person_mask']['get']['responses']['422']['content']['application/json'] | paths['/frontend/person_mask']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface InternalService {
    /**
     * @summary Get Sync Status
     * @description Get all sync statuses
     * Not production ready
     * For test purposes only, internal use only
     * Api could be changed
     */
    getInternalAccountingConnectionsIdSyncStatus: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/accounting_connections/{connection_id}/sync_status';
        security: ['HTTPBearer'];
    }, paths['/internal/accounting_connections/{connection_id}/sync_status']['get']['responses']['200']['content']['application/json'], paths['/internal/accounting_connections/{connection_id}/sync_status']['get']['parameters'], paths['/internal/accounting_connections/{connection_id}/sync_status']['get']['responses']['405']['content']['application/json'] | paths['/internal/accounting_connections/{connection_id}/sync_status']['get']['responses']['422']['content']['application/json'] | paths['/internal/accounting_connections/{connection_id}/sync_status']['get']['responses']['500']['content']['application/json']>;
    /** @summary Find similar counterparts */
    getInternalCounterpartsAiSuggestions: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/counterparts/ai_suggestions';
        security: ['HTTPBearer'];
    }, paths['/internal/counterparts/ai_suggestions']['get']['responses']['200']['content']['application/json'], paths['/internal/counterparts/ai_suggestions']['get']['parameters'], paths['/internal/counterparts/ai_suggestions']['get']['responses']['405']['content']['application/json'] | paths['/internal/counterparts/ai_suggestions']['get']['responses']['422']['content']['application/json'] | paths['/internal/counterparts/ai_suggestions']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get Currencies */
    getInternalCurrencies: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/currencies';
        security: ['HTTPBearer'];
    }, paths['/internal/currencies']['get']['responses']['200']['content']['application/json'], paths['/internal/currencies']['get']['parameters'], paths['/internal/currencies']['get']['responses']['405']['content']['application/json'] | paths['/internal/currencies']['get']['responses']['422']['content']['application/json'] | paths['/internal/currencies']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get entity logo
     * @description Retrieve info about entity logo.
     */
    getInternalEntitiesIdLogo: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/entities/{entity_id}/logo';
        security: ['HTTPBearer'];
    }, paths['/internal/entities/{entity_id}/logo']['get']['responses']['200']['content']['application/json'], paths['/internal/entities/{entity_id}/logo']['get']['parameters'], paths['/internal/entities/{entity_id}/logo']['get']['responses']['405']['content']['application/json'] | paths['/internal/entities/{entity_id}/logo']['get']['responses']['422']['content']['application/json'] | paths['/internal/entities/{entity_id}/logo']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get Onboarding Link */
    getInternalOnboardingLinksId: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/onboarding_links/{onboarding_link_id}';
        security: ['HTTPBearer'];
    }, paths['/internal/onboarding_links/{onboarding_link_id}']['get']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}']['get']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}']['get']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}']['get']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get Onboarding Link Airwallex Component Data */
    getInternalOnboardingLinksIdAirwallexComponent: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/onboarding_links/{onboarding_link_id}/airwallex_component';
        security: ['HTTPBearer'];
    }, paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['get']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['get']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['get']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['get']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update Onboarding Link Airwallex Component Data */
    patchInternalOnboardingLinksIdAirwallexComponent: ServiceOperationMutation<{
        method: 'patch';
        url: '/internal/onboarding_links/{onboarding_link_id}/airwallex_component';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['patch']['requestBody']>['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['patch']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['patch']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['patch']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['patch']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Generate Authorization Code */
    postInternalOnboardingLinksIdAirwallexComponentAuth: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth']['post']['requestBody']>['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth']['post']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth']['post']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth']['post']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth']['post']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/airwallex_component/auth']['post']['responses']['500']['content']['application/json']>;
    /** @summary Request Otp */
    postInternalOnboardingLinksIdRequestOtp: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/onboarding_links/{onboarding_link_id}/request_otp';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/onboarding_links/{onboarding_link_id}/request_otp']['post']['requestBody']>['content']['application/json'], unknown, paths['/internal/onboarding_links/{onboarding_link_id}/request_otp']['post']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/request_otp']['post']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/request_otp']['post']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/request_otp']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get Onboarding Link Stripe Data */
    getInternalOnboardingLinksIdStripe: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/onboarding_links/{onboarding_link_id}/stripe';
        security: ['HTTPBearer'];
    }, paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['get']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['get']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['get']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['get']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update Onboarding Link Stripe Data */
    patchInternalOnboardingLinksIdStripe: ServiceOperationMutation<{
        method: 'patch';
        url: '/internal/onboarding_links/{onboarding_link_id}/stripe';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['patch']['requestBody']>['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['patch']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['patch']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['patch']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['patch']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/stripe']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Verify Otp */
    postInternalOnboardingLinksIdVerifyOtp: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/onboarding_links/{onboarding_link_id}/verify_otp';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/onboarding_links/{onboarding_link_id}/verify_otp']['post']['requestBody']>['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/verify_otp']['post']['responses']['200']['content']['application/json'], paths['/internal/onboarding_links/{onboarding_link_id}/verify_otp']['post']['parameters'], paths['/internal/onboarding_links/{onboarding_link_id}/verify_otp']['post']['responses']['405']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/verify_otp']['post']['responses']['422']['content']['application/json'] | paths['/internal/onboarding_links/{onboarding_link_id}/verify_otp']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Reverts all payments made to a payable
     * @description This internal endpoint used in reconciliation service to revert payments made to a payable
     */
    postInternalPayablesIdRevertPayment: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payables/{payable_id}/revert_payment';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payables/{payable_id}/revert_payment']['post']['requestBody']>['content']['application/json'], paths['/internal/payables/{payable_id}/revert_payment']['post']['responses']['200']['content']['application/json'], paths['/internal/payables/{payable_id}/revert_payment']['post']['parameters'], paths['/internal/payables/{payable_id}/revert_payment']['post']['responses']['400']['content']['application/json'] | paths['/internal/payables/{payable_id}/revert_payment']['post']['responses']['405']['content']['application/json'] | paths['/internal/payables/{payable_id}/revert_payment']['post']['responses']['409']['content']['application/json'] | paths['/internal/payables/{payable_id}/revert_payment']['post']['responses']['422']['content']['application/json'] | paths['/internal/payables/{payable_id}/revert_payment']['post']['responses']['500']['content']['application/json']>;
    /** @summary Authorize Payment Link */
    postInternalPaymentIntentsIdAuthorize: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_intents/{payment_intent_id}/authorize';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payment_intents/{payment_intent_id}/authorize']['post']['requestBody']>['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize']['post']['responses']['200']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize']['post']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/authorize']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize']['post']['responses']['500']['content']['application/json']>;
    /** @summary Authorize Payment Link Embedded */
    postInternalPaymentIntentsIdAuthorizeEmbedded: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_intents/{payment_intent_id}/authorize_embedded';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['requestBody']>['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['responses']['200']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['responses']['400']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get Consent Data */
    getInternalPaymentIntentsIdAuthorizeEmbeddedId: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}';
        security: ['HTTPBearer'];
    }, paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['200']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['400']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['401']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['403']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Authorize Payment Link Embedded Set Sca Code */
    postInternalPaymentIntentsIdAuthorizeEmbeddedIdSetScaCode: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['requestBody']>['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['responses']['201']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['responses']['400']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['responses']['401']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_code']['post']['responses']['500']['content']['application/json']>;
    /** @summary Authorize Payment Link Embedded Set Sca Method */
    postInternalPaymentIntentsIdAuthorizeEmbeddedIdSetScaMethod: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['requestBody']>['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['responses']['201']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['responses']['400']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/authorize_embedded/{consent_id}/set_sca_method']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get Banks For Payment Intent */
    getInternalPaymentIntentsIdBanks: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/payment_intents/{payment_intent_id}/banks';
        security: ['HTTPBearer'];
    }, paths['/internal/payment_intents/{payment_intent_id}/banks']['get']['responses']['200']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/banks']['get']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/banks']['get']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/banks']['get']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/banks']['get']['responses']['500']['content']['application/json']>;
    /** @summary Confirm Payment */
    postInternalPaymentIntentsIdConfirmPayment: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_intents/{payment_intent_id}/confirm_payment';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payment_intents/{payment_intent_id}/confirm_payment']['post']['requestBody']>['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/confirm_payment']['post']['responses']['200']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/confirm_payment']['post']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/confirm_payment']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/confirm_payment']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/confirm_payment']['post']['responses']['500']['content']['application/json']>;
    /** @summary Create Yapily Payment */
    postInternalPaymentIntentsIdPayments: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_intents/{payment_intent_id}/payments';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/payment_intents/{payment_intent_id}/payments']['post']['requestBody']>['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/payments']['post']['responses']['200']['content']['application/json'], paths['/internal/payment_intents/{payment_intent_id}/payments']['post']['parameters'], paths['/internal/payment_intents/{payment_intent_id}/payments']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/payments']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_intents/{payment_intent_id}/payments']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get Payment Link */
    getInternalPaymentLinksId: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/payment_links/{payment_link_id}';
        security: ['HTTPBearer'];
    }, paths['/internal/payment_links/{payment_link_id}']['get']['responses']['200']['content']['application/json'], paths['/internal/payment_links/{payment_link_id}']['get']['parameters'], paths['/internal/payment_links/{payment_link_id}']['get']['responses']['405']['content']['application/json'] | paths['/internal/payment_links/{payment_link_id}']['get']['responses']['422']['content']['application/json'] | paths['/internal/payment_links/{payment_link_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Regenerate Payment Link */
    postInternalPaymentLinksIdRegenerate: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/payment_links/{payment_link_id}/regenerate';
        security: ['HTTPBearer'];
    }, undefined, paths['/internal/payment_links/{payment_link_id}/regenerate']['post']['responses']['200']['content']['application/json'], paths['/internal/payment_links/{payment_link_id}/regenerate']['post']['parameters'], paths['/internal/payment_links/{payment_link_id}/regenerate']['post']['responses']['405']['content']['application/json'] | paths['/internal/payment_links/{payment_link_id}/regenerate']['post']['responses']['422']['content']['application/json'] | paths['/internal/payment_links/{payment_link_id}/regenerate']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get partner payment page theme settings for frontend */
    getInternalPaymentPageTheme: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/payment_page_theme';
        security: ['HTTPBearer'];
    }, paths['/internal/payment_page_theme']['get']['responses']['200']['content']['application/json'], paths['/internal/payment_page_theme']['get']['parameters'], paths['/internal/payment_page_theme']['get']['responses']['400']['content']['application/json'] | paths['/internal/payment_page_theme']['get']['responses']['405']['content']['application/json'] | paths['/internal/payment_page_theme']['get']['responses']['422']['content']['application/json'] | paths['/internal/payment_page_theme']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get Quote By Id */
    getInternalQuotesId: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/quotes/{receivable_id}';
        security: ['HTTPBearer'];
    }, paths['/internal/quotes/{receivable_id}']['get']['responses']['200']['content']['application/json'], paths['/internal/quotes/{receivable_id}']['get']['parameters'], paths['/internal/quotes/{receivable_id}']['get']['responses']['404']['content']['application/json'] | paths['/internal/quotes/{receivable_id}']['get']['responses']['405']['content']['application/json'] | paths['/internal/quotes/{receivable_id}']['get']['responses']['422']['content']['application/json'] | paths['/internal/quotes/{receivable_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Accept Quote */
    postInternalQuotesIdAccept: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/quotes/{receivable_id}/accept';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/quotes/{receivable_id}/accept']['post']['requestBody']>['content']['application/json'], paths['/internal/quotes/{receivable_id}/accept']['post']['responses']['200']['content']['application/json'], paths['/internal/quotes/{receivable_id}/accept']['post']['parameters'], paths['/internal/quotes/{receivable_id}/accept']['post']['responses']['404']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/accept']['post']['responses']['405']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/accept']['post']['responses']['409']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/accept']['post']['responses']['422']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/accept']['post']['responses']['500']['content']['application/json']>;
    /** @summary Decline Quote */
    postInternalQuotesIdDecline: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/quotes/{receivable_id}/decline';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/quotes/{receivable_id}/decline']['post']['requestBody']>['content']['application/json'], paths['/internal/quotes/{receivable_id}/decline']['post']['responses']['200']['content']['application/json'], paths['/internal/quotes/{receivable_id}/decline']['post']['parameters'], paths['/internal/quotes/{receivable_id}/decline']['post']['responses']['404']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/decline']['post']['responses']['405']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/decline']['post']['responses']['409']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/decline']['post']['responses']['422']['content']['application/json'] | paths['/internal/quotes/{receivable_id}/decline']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get partner settings for frontend
     * @description Retrieve settings necessary for frontend for this partner.
     */
    getInternalSettings: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/settings';
        security: ['HTTPBearer'];
    }, paths['/internal/settings']['get']['responses']['200']['content']['application/json'], paths['/internal/settings']['get']['parameters'], paths['/internal/settings']['get']['responses']['400']['content']['application/json'] | paths['/internal/settings']['get']['responses']['405']['content']['application/json'] | paths['/internal/settings']['get']['responses']['422']['content']['application/json'] | paths['/internal/settings']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Validate Line Items
     * @description Validate if line items for bill/invoice may be pushed to accounting
     */
    postInternalValidatorsLineItems: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/validators/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/validators/line_items']['post']['requestBody']>['content']['application/json'], unknown, paths['/internal/validators/line_items']['post']['parameters'], paths['/internal/validators/line_items']['post']['responses']['405']['content']['application/json'] | paths['/internal/validators/line_items']['post']['responses']['422']['content']['application/json'] | paths['/internal/validators/line_items']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get All Vat Rates */
    getInternalVatRates: ServiceOperationQuery<{
        method: 'get';
        url: '/internal/vat_rates';
        security: ['HTTPBearer'];
    }, paths['/internal/vat_rates']['get']['responses']['200']['content']['application/json'], paths['/internal/vat_rates']['get']['parameters'], paths['/internal/vat_rates']['get']['responses']['400']['content']['application/json'] | paths['/internal/vat_rates']['get']['responses']['401']['content']['application/json'] | paths['/internal/vat_rates']['get']['responses']['403']['content']['application/json'] | paths['/internal/vat_rates']['get']['responses']['404']['content']['application/json'] | paths['/internal/vat_rates']['get']['responses']['405']['content']['application/json'] | paths['/internal/vat_rates']['get']['responses']['422']['content']['application/json'] | paths['/internal/vat_rates']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create Vat Rates */
    postInternalVatRates: ServiceOperationMutation<{
        method: 'post';
        url: '/internal/vat_rates';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/vat_rates']['post']['requestBody']>['content']['application/json'], paths['/internal/vat_rates']['post']['responses']['200']['content']['application/json'], paths['/internal/vat_rates']['post']['parameters'], paths['/internal/vat_rates']['post']['responses']['400']['content']['application/json'] | paths['/internal/vat_rates']['post']['responses']['401']['content']['application/json'] | paths['/internal/vat_rates']['post']['responses']['403']['content']['application/json'] | paths['/internal/vat_rates']['post']['responses']['404']['content']['application/json'] | paths['/internal/vat_rates']['post']['responses']['405']['content']['application/json'] | paths['/internal/vat_rates']['post']['responses']['422']['content']['application/json'] | paths['/internal/vat_rates']['post']['responses']['500']['content']['application/json']>;
    /** @summary Delete Vat Rates */
    deleteInternalVatRatesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/internal/vat_rates/{vat_rate_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/internal/vat_rates/{vat_rate_id}']['delete']['parameters'], paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['400']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['401']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['403']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['404']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['405']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['422']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update Vat Rates */
    patchInternalVatRatesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/internal/vat_rates/{vat_rate_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/internal/vat_rates/{vat_rate_id}']['patch']['requestBody']>['content']['application/json'], paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['200']['content']['application/json'], paths['/internal/vat_rates/{vat_rate_id}']['patch']['parameters'], paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['400']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['401']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['403']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['404']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['405']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['422']['content']['application/json'] | paths['/internal/vat_rates/{vat_rate_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface LedgerAccountsService {
    /**
     * @summary Get ledger accounts
     * @description Get all ledger accounts
     */
    getLedgerAccounts: ServiceOperationQuery<{
        method: 'get';
        url: '/ledger_accounts';
        security: ['HTTPBearer'];
    }, paths['/ledger_accounts']['get']['responses']['200']['content']['application/json'], paths['/ledger_accounts']['get']['parameters'], paths['/ledger_accounts']['get']['responses']['405']['content']['application/json'] | paths['/ledger_accounts']['get']['responses']['422']['content']['application/json'] | paths['/ledger_accounts']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a ledger account by ID
     * @description Get ledger account by id
     */
    getLedgerAccountsId: ServiceOperationQuery<{
        method: 'get';
        url: '/ledger_accounts/{ledger_account_id}';
        security: ['HTTPBearer'];
    }, paths['/ledger_accounts/{ledger_account_id}']['get']['responses']['200']['content']['application/json'], paths['/ledger_accounts/{ledger_account_id}']['get']['parameters'], paths['/ledger_accounts/{ledger_account_id}']['get']['responses']['405']['content']['application/json'] | paths['/ledger_accounts/{ledger_account_id}']['get']['responses']['422']['content']['application/json'] | paths['/ledger_accounts/{ledger_account_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface MailTemplatesService {
    /**
     * @summary Get All With Filters
     * @description Get all custom templates
     */
    getMailTemplates: ServiceOperationQuery<{
        method: 'get';
        url: '/mail_templates';
        security: ['HTTPBearer'];
    }, paths['/mail_templates']['get']['responses']['200']['content']['application/json'], paths['/mail_templates']['get']['parameters'], paths['/mail_templates']['get']['responses']['405']['content']['application/json'] | paths['/mail_templates']['get']['responses']['422']['content']['application/json'] | paths['/mail_templates']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create
     * @description Create custom template
     */
    postMailTemplates: ServiceOperationMutation<{
        method: 'post';
        url: '/mail_templates';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/mail_templates']['post']['requestBody']>['content']['application/json'], paths['/mail_templates']['post']['responses']['200']['content']['application/json'], paths['/mail_templates']['post']['parameters'], paths['/mail_templates']['post']['responses']['405']['content']['application/json'] | paths['/mail_templates']['post']['responses']['422']['content']['application/json'] | paths['/mail_templates']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Preview
     * @description Preview rendered template
     */
    postMailTemplatesPreview: ServiceOperationMutation<{
        method: 'post';
        url: '/mail_templates/preview';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/mail_templates/preview']['post']['requestBody']>['content']['application/json'], paths['/mail_templates/preview']['post']['responses']['200']['content']['application/json'], paths['/mail_templates/preview']['post']['parameters'], paths['/mail_templates/preview']['post']['responses']['405']['content']['application/json'] | paths['/mail_templates/preview']['post']['responses']['422']['content']['application/json'] | paths['/mail_templates/preview']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get All System Templates
     * @description Get all system templates
     */
    getMailTemplatesSystem: ServiceOperationQuery<{
        method: 'get';
        url: '/mail_templates/system';
        security: ['HTTPBearer'];
    }, paths['/mail_templates/system']['get']['responses']['200']['content']['application/json'], paths['/mail_templates/system']['get']['parameters'], paths['/mail_templates/system']['get']['responses']['405']['content']['application/json'] | paths['/mail_templates/system']['get']['responses']['422']['content']['application/json'] | paths['/mail_templates/system']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get
     * @description Get custom template by ID
     */
    getMailTemplatesId: ServiceOperationQuery<{
        method: 'get';
        url: '/mail_templates/{template_id}';
        security: ['HTTPBearer'];
    }, paths['/mail_templates/{template_id}']['get']['responses']['200']['content']['application/json'], paths['/mail_templates/{template_id}']['get']['parameters'], paths['/mail_templates/{template_id}']['get']['responses']['405']['content']['application/json'] | paths['/mail_templates/{template_id}']['get']['responses']['422']['content']['application/json'] | paths['/mail_templates/{template_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete
     * @description Delete custom template bt ID
     */
    deleteMailTemplatesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/mail_templates/{template_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/mail_templates/{template_id}']['delete']['parameters'], paths['/mail_templates/{template_id}']['delete']['responses']['405']['content']['application/json'] | paths['/mail_templates/{template_id}']['delete']['responses']['422']['content']['application/json'] | paths['/mail_templates/{template_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update
     * @description Update custom template by ID
     */
    patchMailTemplatesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/mail_templates/{template_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/mail_templates/{template_id}']['patch']['requestBody']>['content']['application/json'], paths['/mail_templates/{template_id}']['patch']['responses']['200']['content']['application/json'], paths['/mail_templates/{template_id}']['patch']['parameters'], paths['/mail_templates/{template_id}']['patch']['responses']['405']['content']['application/json'] | paths['/mail_templates/{template_id}']['patch']['responses']['422']['content']['application/json'] | paths['/mail_templates/{template_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Make Default
     * @description Make template default
     */
    postMailTemplatesIdMakeDefault: ServiceOperationMutation<{
        method: 'post';
        url: '/mail_templates/{template_id}/make_default';
        security: ['HTTPBearer'];
    }, undefined, paths['/mail_templates/{template_id}/make_default']['post']['responses']['200']['content']['application/json'], paths['/mail_templates/{template_id}/make_default']['post']['parameters'], paths['/mail_templates/{template_id}/make_default']['post']['responses']['405']['content']['application/json'] | paths['/mail_templates/{template_id}/make_default']['post']['responses']['422']['content']['application/json'] | paths['/mail_templates/{template_id}/make_default']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface MailboxDomainsService {
    /**
     * @summary Get mailbox domains
     * @description Get all domains owned by partner_id
     */
    getMailboxDomains: ServiceOperationQuery<{
        method: 'get';
        url: '/mailbox_domains';
        security: ['HTTPBearer'];
    }, paths['/mailbox_domains']['get']['responses']['200']['content']['application/json'], paths['/mailbox_domains']['get']['parameters'], paths['/mailbox_domains']['get']['responses']['401']['content']['application/json'] | paths['/mailbox_domains']['get']['responses']['403']['content']['application/json'] | paths['/mailbox_domains']['get']['responses']['405']['content']['application/json'] | paths['/mailbox_domains']['get']['responses']['422']['content']['application/json'] | paths['/mailbox_domains']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a mailbox domain
     * @description Create domain for the partner_id
     */
    postMailboxDomains: ServiceOperationMutation<{
        method: 'post';
        url: '/mailbox_domains';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/mailbox_domains']['post']['requestBody']>['content']['application/json'], paths['/mailbox_domains']['post']['responses']['201']['content']['application/json'], paths['/mailbox_domains']['post']['parameters'], paths['/mailbox_domains']['post']['responses']['400']['content']['application/json'] | paths['/mailbox_domains']['post']['responses']['401']['content']['application/json'] | paths['/mailbox_domains']['post']['responses']['403']['content']['application/json'] | paths['/mailbox_domains']['post']['responses']['405']['content']['application/json'] | paths['/mailbox_domains']['post']['responses']['409']['content']['application/json'] | paths['/mailbox_domains']['post']['responses']['422']['content']['application/json'] | paths['/mailbox_domains']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a mailbox domain
     * @description Delete domain for the partner_id
     */
    deleteMailboxDomainsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/mailbox_domains/{domain_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/mailbox_domains/{domain_id}']['delete']['parameters'], paths['/mailbox_domains/{domain_id}']['delete']['responses']['401']['content']['application/json'] | paths['/mailbox_domains/{domain_id}']['delete']['responses']['403']['content']['application/json'] | paths['/mailbox_domains/{domain_id}']['delete']['responses']['404']['content']['application/json'] | paths['/mailbox_domains/{domain_id}']['delete']['responses']['405']['content']['application/json'] | paths['/mailbox_domains/{domain_id}']['delete']['responses']['422']['content']['application/json'] | paths['/mailbox_domains/{domain_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Verify a mailbox domain
     * @description Verify domain for the partner_id
     */
    postMailboxDomainsIdVerify: ServiceOperationMutation<{
        method: 'post';
        url: '/mailbox_domains/{domain_id}/verify';
        security: ['HTTPBearer'];
    }, undefined, paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['200']['content']['application/json'], paths['/mailbox_domains/{domain_id}/verify']['post']['parameters'], paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['400']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['401']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['403']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['404']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['405']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['409']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['422']['content']['application/json'] | paths['/mailbox_domains/{domain_id}/verify']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface MailboxesService {
    /**
     * @summary Get mailboxes
     * @description Get all mailboxes owned by Entity
     */
    getMailboxes: ServiceOperationQuery<{
        method: 'get';
        url: '/mailboxes';
        security: ['HTTPBearer'];
    }, paths['/mailboxes']['get']['responses']['200']['content']['application/json'], paths['/mailboxes']['get']['parameters'], paths['/mailboxes']['get']['responses']['401']['content']['application/json'] | paths['/mailboxes']['get']['responses']['403']['content']['application/json'] | paths['/mailboxes']['get']['responses']['405']['content']['application/json'] | paths['/mailboxes']['get']['responses']['422']['content']['application/json'] | paths['/mailboxes']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a mailbox
     * @description Create a new mailbox
     */
    postMailboxes: ServiceOperationMutation<{
        method: 'post';
        url: '/mailboxes';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/mailboxes']['post']['requestBody']>['content']['application/json'], paths['/mailboxes']['post']['responses']['201']['content']['application/json'], paths['/mailboxes']['post']['parameters'], paths['/mailboxes']['post']['responses']['401']['content']['application/json'] | paths['/mailboxes']['post']['responses']['403']['content']['application/json'] | paths['/mailboxes']['post']['responses']['405']['content']['application/json'] | paths['/mailboxes']['post']['responses']['409']['content']['application/json'] | paths['/mailboxes']['post']['responses']['422']['content']['application/json'] | paths['/mailboxes']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get mailboxes by IDs
     * @description Get all mailboxes owned by Entity
     */
    postMailboxesSearch: ServiceOperationMutation<{
        method: 'post';
        url: '/mailboxes/search';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/mailboxes/search']['post']['requestBody']>['content']['application/json'], paths['/mailboxes/search']['post']['responses']['200']['content']['application/json'], paths['/mailboxes/search']['post']['parameters'], paths['/mailboxes/search']['post']['responses']['401']['content']['application/json'] | paths['/mailboxes/search']['post']['responses']['403']['content']['application/json'] | paths['/mailboxes/search']['post']['responses']['405']['content']['application/json'] | paths['/mailboxes/search']['post']['responses']['422']['content']['application/json'] | paths['/mailboxes/search']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a mailbox
     * @description Delete mailbox
     */
    deleteMailboxesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/mailboxes/{mailbox_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/mailboxes/{mailbox_id}']['delete']['parameters'], paths['/mailboxes/{mailbox_id}']['delete']['responses']['401']['content']['application/json'] | paths['/mailboxes/{mailbox_id}']['delete']['responses']['403']['content']['application/json'] | paths['/mailboxes/{mailbox_id}']['delete']['responses']['404']['content']['application/json'] | paths['/mailboxes/{mailbox_id}']['delete']['responses']['405']['content']['application/json'] | paths['/mailboxes/{mailbox_id}']['delete']['responses']['422']['content']['application/json'] | paths['/mailboxes/{mailbox_id}']['delete']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface MeasureUnitsService {
    /** @summary Get measure units */
    getMeasureUnits: ServiceOperationQuery<{
        method: 'get';
        url: '/measure_units';
        security: ['HTTPBearer'];
    }, paths['/measure_units']['get']['responses']['200']['content']['application/json'], paths['/measure_units']['get']['parameters'], paths['/measure_units']['get']['responses']['400']['content']['application/json'] | paths['/measure_units']['get']['responses']['401']['content']['application/json'] | paths['/measure_units']['get']['responses']['403']['content']['application/json'] | paths['/measure_units']['get']['responses']['405']['content']['application/json'] | paths['/measure_units']['get']['responses']['422']['content']['application/json'] | paths['/measure_units']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a measure unit */
    postMeasureUnits: ServiceOperationMutation<{
        method: 'post';
        url: '/measure_units';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/measure_units']['post']['requestBody']>['content']['application/json'], paths['/measure_units']['post']['responses']['201']['content']['application/json'], paths['/measure_units']['post']['parameters'], paths['/measure_units']['post']['responses']['400']['content']['application/json'] | paths['/measure_units']['post']['responses']['401']['content']['application/json'] | paths['/measure_units']['post']['responses']['403']['content']['application/json'] | paths['/measure_units']['post']['responses']['405']['content']['application/json'] | paths['/measure_units']['post']['responses']['422']['content']['application/json'] | paths['/measure_units']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a measure unit by ID */
    getMeasureUnitsId: ServiceOperationQuery<{
        method: 'get';
        url: '/measure_units/{unit_id}';
        security: ['HTTPBearer'];
    }, paths['/measure_units/{unit_id}']['get']['responses']['200']['content']['application/json'], paths['/measure_units/{unit_id}']['get']['parameters'], paths['/measure_units/{unit_id}']['get']['responses']['400']['content']['application/json'] | paths['/measure_units/{unit_id}']['get']['responses']['401']['content']['application/json'] | paths['/measure_units/{unit_id}']['get']['responses']['403']['content']['application/json'] | paths['/measure_units/{unit_id}']['get']['responses']['404']['content']['application/json'] | paths['/measure_units/{unit_id}']['get']['responses']['405']['content']['application/json'] | paths['/measure_units/{unit_id}']['get']['responses']['422']['content']['application/json'] | paths['/measure_units/{unit_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a measure unit */
    deleteMeasureUnitsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/measure_units/{unit_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/measure_units/{unit_id}']['delete']['parameters'], paths['/measure_units/{unit_id}']['delete']['responses']['400']['content']['application/json'] | paths['/measure_units/{unit_id}']['delete']['responses']['401']['content']['application/json'] | paths['/measure_units/{unit_id}']['delete']['responses']['403']['content']['application/json'] | paths['/measure_units/{unit_id}']['delete']['responses']['404']['content']['application/json'] | paths['/measure_units/{unit_id}']['delete']['responses']['405']['content']['application/json'] | paths['/measure_units/{unit_id}']['delete']['responses']['422']['content']['application/json'] | paths['/measure_units/{unit_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a measure unit */
    patchMeasureUnitsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/measure_units/{unit_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/measure_units/{unit_id}']['patch']['requestBody']>['content']['application/json'], paths['/measure_units/{unit_id}']['patch']['responses']['200']['content']['application/json'], paths['/measure_units/{unit_id}']['patch']['parameters'], paths['/measure_units/{unit_id}']['patch']['responses']['400']['content']['application/json'] | paths['/measure_units/{unit_id}']['patch']['responses']['401']['content']['application/json'] | paths['/measure_units/{unit_id}']['patch']['responses']['403']['content']['application/json'] | paths['/measure_units/{unit_id}']['patch']['responses']['404']['content']['application/json'] | paths['/measure_units/{unit_id}']['patch']['responses']['405']['content']['application/json'] | paths['/measure_units/{unit_id}']['patch']['responses']['422']['content']['application/json'] | paths['/measure_units/{unit_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface OcrTasksService {
    /** @summary Get OCR tasks */
    getOcrTasks: ServiceOperationQuery<{
        method: 'get';
        url: '/ocr_tasks';
        security: ['HTTPBearer'];
    }, paths['/ocr_tasks']['get']['responses']['200']['content']['application/json'], paths['/ocr_tasks']['get']['parameters'], paths['/ocr_tasks']['get']['responses']['405']['content']['application/json'] | paths['/ocr_tasks']['get']['responses']['422']['content']['application/json'] | paths['/ocr_tasks']['get']['responses']['500']['content']['application/json']>;
    /** @summary OCR a file from URL */
    postOcrTasks: ServiceOperationMutation<{
        method: 'post';
        url: '/ocr_tasks';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ocr_tasks']['post']['requestBody']>['content']['application/json'], paths['/ocr_tasks']['post']['responses']['202']['content']['application/json'], paths['/ocr_tasks']['post']['parameters'], paths['/ocr_tasks']['post']['responses']['405']['content']['application/json'] | paths['/ocr_tasks']['post']['responses']['422']['content']['application/json'] | paths['/ocr_tasks']['post']['responses']['500']['content']['application/json']>;
    /** @summary Upload a file for OCR */
    postOcrTasksUploadFromFile: ServiceOperationMutation<{
        method: 'post';
        url: '/ocr_tasks/upload_from_file';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/ocr_tasks/upload_from_file']['post']['requestBody']>['content']['multipart/form-data'], paths['/ocr_tasks/upload_from_file']['post']['responses']['202']['content']['application/json'], paths['/ocr_tasks/upload_from_file']['post']['parameters'], paths['/ocr_tasks/upload_from_file']['post']['responses']['405']['content']['application/json'] | paths['/ocr_tasks/upload_from_file']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get an OCR task by ID */
    getOcrTasksId: ServiceOperationQuery<{
        method: 'get';
        url: '/ocr_tasks/{task_id}';
        security: ['HTTPBearer'];
    }, paths['/ocr_tasks/{task_id}']['get']['responses']['200']['content']['application/json'], paths['/ocr_tasks/{task_id}']['get']['parameters'], paths['/ocr_tasks/{task_id}']['get']['responses']['405']['content']['application/json'] | paths['/ocr_tasks/{task_id}']['get']['responses']['422']['content']['application/json'] | paths['/ocr_tasks/{task_id}']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface OnboardingDocumentsService {
    /**
     * @summary Provide files for entity onboarding verification
     * @description Provide files for entity onboarding verification
     */
    postOnboardingDocuments: ServiceOperationMutation<{
        method: 'post';
        url: '/onboarding_documents';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/onboarding_documents']['post']['requestBody']>['content']['application/json'], unknown, paths['/onboarding_documents']['post']['parameters'], paths['/onboarding_documents']['post']['responses']['405']['content']['application/json'] | paths['/onboarding_documents']['post']['responses']['422']['content']['application/json'] | paths['/onboarding_documents']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface OnboardingLinksService {
    /** @summary Create Onboarding Link */
    postOnboardingLinks: ServiceOperationMutation<{
        method: 'post';
        url: '/onboarding_links';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/onboarding_links']['post']['requestBody']>['content']['application/json'], paths['/onboarding_links']['post']['responses']['200']['content']['application/json'], paths['/onboarding_links']['post']['parameters'], paths['/onboarding_links']['post']['responses']['405']['content']['application/json'] | paths['/onboarding_links']['post']['responses']['422']['content']['application/json'] | paths['/onboarding_links']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface OnboardingRequirementsService {
    /**
     * @summary Get onboarding requirements
     * @description Get onboarding requirements for the entity
     */
    getOnboardingRequirements: ServiceOperationQuery<{
        method: 'get';
        url: '/onboarding_requirements';
        security: ['HTTPBearer'];
    }, paths['/onboarding_requirements']['get']['responses']['200']['content']['application/json'], paths['/onboarding_requirements']['get']['parameters'], paths['/onboarding_requirements']['get']['responses']['405']['content']['application/json'] | paths['/onboarding_requirements']['get']['responses']['422']['content']['application/json'] | paths['/onboarding_requirements']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface OverdueRemindersService {
    /** @summary Get overdue reminder configurations */
    getOverdueReminders: ServiceOperationQuery<{
        method: 'get';
        url: '/overdue_reminders';
        security: ['HTTPBearer'];
    }, paths['/overdue_reminders']['get']['responses']['200']['content']['application/json'], paths['/overdue_reminders']['get']['parameters'], paths['/overdue_reminders']['get']['responses']['401']['content']['application/json'] | paths['/overdue_reminders']['get']['responses']['403']['content']['application/json'] | paths['/overdue_reminders']['get']['responses']['405']['content']['application/json'] | paths['/overdue_reminders']['get']['responses']['422']['content']['application/json'] | paths['/overdue_reminders']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create an overdue reminder configuration */
    postOverdueReminders: ServiceOperationMutation<{
        method: 'post';
        url: '/overdue_reminders';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/overdue_reminders']['post']['requestBody']>['content']['application/json'], paths['/overdue_reminders']['post']['responses']['201']['content']['application/json'], paths['/overdue_reminders']['post']['parameters'], paths['/overdue_reminders']['post']['responses']['400']['content']['application/json'] | paths['/overdue_reminders']['post']['responses']['401']['content']['application/json'] | paths['/overdue_reminders']['post']['responses']['403']['content']['application/json'] | paths['/overdue_reminders']['post']['responses']['405']['content']['application/json'] | paths['/overdue_reminders']['post']['responses']['422']['content']['application/json'] | paths['/overdue_reminders']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get an overdue reminder configuration by ID */
    getOverdueRemindersId: ServiceOperationQuery<{
        method: 'get';
        url: '/overdue_reminders/{overdue_reminder_id}';
        security: ['HTTPBearer'];
    }, paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['200']['content']['application/json'], paths['/overdue_reminders/{overdue_reminder_id}']['get']['parameters'], paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['401']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['403']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['404']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['405']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['422']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete an overdue reminder configuration */
    deleteOverdueRemindersId: ServiceOperationMutation<{
        method: 'delete';
        url: '/overdue_reminders/{overdue_reminder_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/overdue_reminders/{overdue_reminder_id}']['delete']['parameters'], paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['400']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['401']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['403']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['404']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['405']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['422']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update an overdue reminder configuration */
    patchOverdueRemindersId: ServiceOperationMutation<{
        method: 'patch';
        url: '/overdue_reminders/{overdue_reminder_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/overdue_reminders/{overdue_reminder_id}']['patch']['requestBody']>['content']['application/json'], paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['200']['content']['application/json'], paths['/overdue_reminders/{overdue_reminder_id}']['patch']['parameters'], paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['400']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['401']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['403']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['404']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['405']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['422']['content']['application/json'] | paths['/overdue_reminders/{overdue_reminder_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PayableCreditNotesService {
    /** @summary Get credit notes */
    getPayableCreditNotes: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_credit_notes';
        security: ['HTTPBearer'];
    }, paths['/payable_credit_notes']['get']['responses']['200']['content']['application/json'], paths['/payable_credit_notes']['get']['parameters'], paths['/payable_credit_notes']['get']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes']['get']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes']['get']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes']['get']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes']['get']['responses']['406']['content']['application/json'] | paths['/payable_credit_notes']['get']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a credit note */
    postPayableCreditNotes: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes']['post']['requestBody']>['content']['application/json'], paths['/payable_credit_notes']['post']['responses']['201']['content']['application/json'], paths['/payable_credit_notes']['post']['parameters'], paths['/payable_credit_notes']['post']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Upload a credit note from a file
     * @description Upload an incoming credit note (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
     */
    postPayableCreditNotesUploadFromFile: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/upload_from_file';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes/upload_from_file']['post']['requestBody']>['content']['multipart/form-data'], paths['/payable_credit_notes/upload_from_file']['post']['responses']['201']['content']['application/json'], paths['/payable_credit_notes/upload_from_file']['post']['parameters'], paths['/payable_credit_notes/upload_from_file']['post']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes/upload_from_file']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/upload_from_file']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/upload_from_file']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/upload_from_file']['post']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/upload_from_file']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/upload_from_file']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get credit note validations
     * @description Get credit notes validations.
     */
    getPayableCreditNotesValidations: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_credit_notes/validations';
        security: ['HTTPBearer'];
    }, paths['/payable_credit_notes/validations']['get']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/validations']['get']['parameters'], paths['/payable_credit_notes/validations']['get']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes/validations']['get']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/validations']['get']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/validations']['get']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/validations']['get']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/validations']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update credit note validations
     * @description Update credit notes validations.
     */
    putPayableCreditNotesValidations: ServiceOperationMutation<{
        method: 'put';
        url: '/payable_credit_notes/validations';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes/validations']['put']['requestBody']>['content']['application/json'], paths['/payable_credit_notes/validations']['put']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/validations']['put']['parameters'], paths['/payable_credit_notes/validations']['put']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes/validations']['put']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/validations']['put']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/validations']['put']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/validations']['put']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/validations']['put']['responses']['500']['content']['application/json']>;
    /**
     * @summary Reset credit note validations
     * @description Reset credit notes validations.
     */
    postPayableCreditNotesValidationsReset: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/validations/reset';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/validations/reset']['post']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/validations/reset']['post']['parameters'], paths['/payable_credit_notes/validations/reset']['post']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes/validations/reset']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/validations/reset']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/validations/reset']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/validations/reset']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/validations/reset']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a credit note by ID */
    getPayableCreditNotesId: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_credit_notes/{credit_note_id}';
        security: ['HTTPBearer'];
    }, paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}']['get']['parameters'], paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a credit note */
    deletePayableCreditNotesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payable_credit_notes/{credit_note_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/payable_credit_notes/{credit_note_id}']['delete']['parameters'], paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a credit note */
    patchPayableCreditNotesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payable_credit_notes/{credit_note_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes/{credit_note_id}']['patch']['requestBody']>['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}']['patch']['parameters'], paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Approve a credit note
     * @description Approve the credit note for appliance.
     */
    postPayableCreditNotesIdApprove: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/{credit_note_id}/approve';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/approve']['post']['parameters'], paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/approve']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Cancel a credit note
     * @description Cancel the credit note that was not confirmed during the review.
     */
    postPayableCreditNotesIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/{credit_note_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['parameters'], paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Cancel OCR of a credit note
     * @description Request to cancel the OCR processing of the specified credit note.
     */
    postPayableCreditNotesIdCancelOcr: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/{credit_note_id}/cancel_ocr';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['parameters'], paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/cancel_ocr']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get all line items of a credit note */
    getPayableCreditNotesIdLineItems: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_credit_notes/{credit_note_id}/line_items';
        security: ['HTTPBearer'];
    }, paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['parameters'], paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['get']['responses']['500']['content']['application/json']>;
    /** @summary Replace all line items of a credit note */
    putPayableCreditNotesIdLineItems: ServiceOperationMutation<{
        method: 'put';
        url: '/payable_credit_notes/{credit_note_id}/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['requestBody']>['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['parameters'], paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['put']['responses']['500']['content']['application/json']>;
    /** @summary Add a new line item to a credit note */
    postPayableCreditNotesIdLineItems: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/{credit_note_id}/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['requestBody']>['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['201']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['parameters'], paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a single line item of a credit note */
    getPayableCreditNotesIdLineItemsId: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}';
        security: ['HTTPBearer'];
    }, paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['parameters'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a line item from a credit note */
    deletePayableCreditNotesIdLineItemsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['parameters'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a line item of a credit note */
    patchPayableCreditNotesIdLineItemsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['requestBody']>['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['parameters'], paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/line_items/{line_item_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Reject a credit note
     * @description Decline the credit note when an approver finds any mismatch or discrepancies.
     */
    postPayableCreditNotesIdReject: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/{credit_note_id}/reject';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/reject']['post']['parameters'], paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/reject']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Submit a credit note for approval
     * @description Start the approval process once the uploaded credit note is validated.
     */
    postPayableCreditNotesIdSubmitForApproval: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_credit_notes/{credit_note_id}/submit_for_approval';
        security: ['HTTPBearer'];
    }, undefined, paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['parameters'], paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['404']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['409']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/submit_for_approval']['post']['responses']['500']['content']['application/json']>;
    /** @summary Validate a credit note */
    getPayableCreditNotesIdValidate: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_credit_notes/{credit_note_id}/validate';
        security: ['HTTPBearer'];
    }, paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['200']['content']['application/json'], paths['/payable_credit_notes/{credit_note_id}/validate']['get']['parameters'], paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['400']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['401']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['403']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['405']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['422']['content']['application/json'] | paths['/payable_credit_notes/{credit_note_id}/validate']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PayablePurchaseOrdersService {
    /** @summary Get purchase orders */
    getPayablePurchaseOrders: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_purchase_orders';
        security: ['HTTPBearer'];
    }, paths['/payable_purchase_orders']['get']['responses']['200']['content']['application/json'], paths['/payable_purchase_orders']['get']['parameters'], paths['/payable_purchase_orders']['get']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders']['get']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders']['get']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders']['get']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a purchase order */
    postPayablePurchaseOrders: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_purchase_orders';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_purchase_orders']['post']['requestBody']>['content']['application/json'], paths['/payable_purchase_orders']['post']['responses']['201']['content']['application/json'], paths['/payable_purchase_orders']['post']['parameters'], paths['/payable_purchase_orders']['post']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders']['post']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders']['post']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders']['post']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get the available variables for purchase orders
     * @description Get a list of placeholders allowed to insert into an email template for customization
     */
    getPayablePurchaseOrdersVariables: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_purchase_orders/variables';
        security: ['HTTPBearer'];
    }, paths['/payable_purchase_orders/variables']['get']['responses']['200']['content']['application/json'], paths['/payable_purchase_orders/variables']['get']['parameters'], paths['/payable_purchase_orders/variables']['get']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders/variables']['get']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders/variables']['get']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders/variables']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get a purchase order by ID */
    getPayablePurchaseOrdersId: ServiceOperationQuery<{
        method: 'get';
        url: '/payable_purchase_orders/{purchase_order_id}';
        security: ['HTTPBearer'];
    }, paths['/payable_purchase_orders/{purchase_order_id}']['get']['responses']['200']['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}']['get']['parameters'], paths['/payable_purchase_orders/{purchase_order_id}']['get']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['get']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['get']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['get']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a purchase order */
    deletePayablePurchaseOrdersId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payable_purchase_orders/{purchase_order_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/payable_purchase_orders/{purchase_order_id}']['delete']['parameters'], paths['/payable_purchase_orders/{purchase_order_id}']['delete']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a purchase order */
    patchPayablePurchaseOrdersId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payable_purchase_orders/{purchase_order_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_purchase_orders/{purchase_order_id}']['patch']['requestBody']>['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}']['patch']['responses']['200']['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}']['patch']['parameters'], paths['/payable_purchase_orders/{purchase_order_id}']['patch']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Preview a purchase order's email message */
    postPayablePurchaseOrdersIdPreview: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_purchase_orders/{purchase_order_id}/preview';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['requestBody']>['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['201']['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['parameters'], paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['401']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['403']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/preview']['post']['responses']['500']['content']['application/json']>;
    /** @summary Send a purchase order via email */
    postPayablePurchaseOrdersIdSend: ServiceOperationMutation<{
        method: 'post';
        url: '/payable_purchase_orders/{purchase_order_id}/send';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['requestBody']>['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['200']['content']['application/json'], paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['parameters'], paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['400']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['401']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['403']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['404']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['405']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['409']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['422']['content']['application/json'] | paths['/payable_purchase_orders/{purchase_order_id}/send']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PayablesService {
    /**
     * @summary Get payables
     * @description Lists all payables from the connected entity.
     *
     * If you already have the data of the payable (amount in [minor units](
     * https://docs.monite.com/references/currencies#minor-units), currency, vendor information, and other details)
     * stored somewhere as individual attributes, you can create a payable with these attributes by calling [POST
     * /payables](https://docs.monite.com/api/payables/post-payables) and providing the [base64-encoded](
     * https://en.wikipedia.org/wiki/Base64) contents of the original invoice file in the field `base64_encoded_file`.
     *
     * A payable is a financial document given by an entity`s supplier itemizing the purchase of a good or a service and
     * demanding payment.
     *
     * The `file_name` field is optional. If omitted, it defaults to “default_file_name”. If the settings are configured
     * to automatically set `suggested_payment_term`, this object can be omitted from the request body.
     *
     * The `id` generated for this payable can be used in other API calls to update the data of this payable or trigger [
     * status transitions](https://docs.monite.com/accounts-payable/approvals/manual-transition), for example. essential data
     * fields to move from `draft` to `new`
     *
     * Related guide: [Create a payable from data](https://docs.monite.com/accounts-payable/payables/collect#create-a-payable-from-data)
     *
     * See also:
     *
     *
     * [Automatic calculation of due date](https://docs.monite.com/accounts-payable/payables/collect#automatic-calculation-of-due-date)
     *
     * [Suggested payment date](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)
     *
     * [Attach file](https://docs.monite.com/accounts-payable/payables/collect#attach-file)
     *
     * [Collect payables by email](https://docs.monite.com/accounts-payable/payables/collect#send-payables-by-email)
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     */
    getPayables: ServiceOperationQuery<{
        method: 'get';
        url: '/payables';
        security: ['HTTPBearer'];
    }, paths['/payables']['get']['responses']['200']['content']['application/json'], paths['/payables']['get']['parameters'], paths['/payables']['get']['responses']['400']['content']['application/json'] | paths['/payables']['get']['responses']['401']['content']['application/json'] | paths['/payables']['get']['responses']['403']['content']['application/json'] | paths['/payables']['get']['responses']['405']['content']['application/json'] | paths['/payables']['get']['responses']['406']['content']['application/json'] | paths['/payables']['get']['responses']['422']['content']['application/json'] | paths['/payables']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a payable
     * @description Add a new payable by providing the amount, currency, vendor name, and other details.
     * You can provide the base64_encoded contents of the original invoice file in the field `base64_encoded_file`.
     *
     * You can use this endpoint to bypass the Monite OCR service and provide the data directly
     * (for example, if you already have the data in place).
     *
     * A newly created payable has the the `draft` [status](https://docs.monite.com/accounts-payable/payables/index).
     */
    postPayables: ServiceOperationMutation<{
        method: 'post';
        url: '/payables';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables']['post']['requestBody']>['content']['application/json'], paths['/payables']['post']['responses']['200']['content']['application/json'], paths['/payables']['post']['parameters'], paths['/payables']['post']['responses']['400']['content']['application/json'] | paths['/payables']['post']['responses']['401']['content']['application/json'] | paths['/payables']['post']['responses']['403']['content']['application/json'] | paths['/payables']['post']['responses']['405']['content']['application/json'] | paths['/payables']['post']['responses']['422']['content']['application/json'] | paths['/payables']['post']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Get payables analytics
     * @description Retrieve aggregated statistics for payables, including total amount and count, both overall and by status.
     *
     * For more flexible configuration and retrieval of other data types, use `GET /analytics/payables`.
     */
    getPayablesAnalytics: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/analytics';
        security: ['HTTPBearer'];
    }, paths['/payables/analytics']['get']['responses']['200']['content']['application/json'], paths['/payables/analytics']['get']['parameters'], paths['/payables/analytics']['get']['responses']['401']['content']['application/json'] | paths['/payables/analytics']['get']['responses']['403']['content']['application/json'] | paths['/payables/analytics']['get']['responses']['405']['content']['application/json'] | paths['/payables/analytics']['get']['responses']['422']['content']['application/json'] | paths['/payables/analytics']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Webhook to receive e-invoicing events from Storecove for new documents
     * @description A webhook endpoint designed to handle e-invoicing events from Storecove. It listens for events about newly received documents and validates them for further processing in a background. More information about Storecove webhooks is [here](https://www.storecove.com/docs#_receiving_documents).
     */
    postPayablesStorecove: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/storecove';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/storecove']['post']['requestBody']>['content']['application/json'], paths['/payables/storecove']['post']['responses']['200']['content']['application/json'], paths['/payables/storecove']['post']['parameters'], paths['/payables/storecove']['post']['responses']['401']['content']['application/json'] | paths['/payables/storecove']['post']['responses']['405']['content']['application/json'] | paths['/payables/storecove']['post']['responses']['422']['content']['application/json'] | paths['/payables/storecove']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Upload a payable from a file
     * @description Upload an incoming invoice (payable) in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
     */
    postPayablesUploadFromFile: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/upload_from_file';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/upload_from_file']['post']['requestBody']>['content']['multipart/form-data'], paths['/payables/upload_from_file']['post']['responses']['201']['content']['application/json'], paths['/payables/upload_from_file']['post']['parameters'], paths['/payables/upload_from_file']['post']['responses']['400']['content']['application/json'] | paths['/payables/upload_from_file']['post']['responses']['401']['content']['application/json'] | paths['/payables/upload_from_file']['post']['responses']['403']['content']['application/json'] | paths['/payables/upload_from_file']['post']['responses']['405']['content']['application/json'] | paths['/payables/upload_from_file']['post']['responses']['409']['content']['application/json'] | paths['/payables/upload_from_file']['post']['responses']['422']['content']['application/json'] | paths['/payables/upload_from_file']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get payables validations
     * @description Get payable validations.
     */
    getPayablesValidations: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/validations';
        security: ['HTTPBearer'];
    }, paths['/payables/validations']['get']['responses']['200']['content']['application/json'], paths['/payables/validations']['get']['parameters'], paths['/payables/validations']['get']['responses']['400']['content']['application/json'] | paths['/payables/validations']['get']['responses']['401']['content']['application/json'] | paths['/payables/validations']['get']['responses']['403']['content']['application/json'] | paths['/payables/validations']['get']['responses']['405']['content']['application/json'] | paths['/payables/validations']['get']['responses']['422']['content']['application/json'] | paths['/payables/validations']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update payables validations
     * @description Update payable validations.
     */
    putPayablesValidations: ServiceOperationMutation<{
        method: 'put';
        url: '/payables/validations';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/validations']['put']['requestBody']>['content']['application/json'], paths['/payables/validations']['put']['responses']['200']['content']['application/json'], paths['/payables/validations']['put']['parameters'], paths['/payables/validations']['put']['responses']['400']['content']['application/json'] | paths['/payables/validations']['put']['responses']['401']['content']['application/json'] | paths['/payables/validations']['put']['responses']['403']['content']['application/json'] | paths['/payables/validations']['put']['responses']['405']['content']['application/json'] | paths['/payables/validations']['put']['responses']['422']['content']['application/json'] | paths['/payables/validations']['put']['responses']['500']['content']['application/json']>;
    /**
     * @summary Reset payables validations
     * @description Reset payable validations to default ones.
     */
    postPayablesValidationsReset: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/validations/reset';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/validations/reset']['post']['responses']['200']['content']['application/json'], paths['/payables/validations/reset']['post']['parameters'], paths['/payables/validations/reset']['post']['responses']['400']['content']['application/json'] | paths['/payables/validations/reset']['post']['responses']['401']['content']['application/json'] | paths['/payables/validations/reset']['post']['responses']['403']['content']['application/json'] | paths['/payables/validations/reset']['post']['responses']['405']['content']['application/json'] | paths['/payables/validations/reset']['post']['responses']['422']['content']['application/json'] | paths['/payables/validations/reset']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get the available variables for payable email templates
     * @description Get a list of placeholders allowed to insert into an email template for customization
     */
    getPayablesVariables: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/variables';
        security: ['HTTPBearer'];
    }, paths['/payables/variables']['get']['responses']['200']['content']['application/json'], paths['/payables/variables']['get']['parameters'], paths['/payables/variables']['get']['responses']['404']['content']['application/json'] | paths['/payables/variables']['get']['responses']['405']['content']['application/json'] | paths['/payables/variables']['get']['responses']['422']['content']['application/json'] | paths['/payables/variables']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a payable by ID
     * @description Retrieves information about a specific payable with the given ID.
     */
    getPayablesId: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/{payable_id}';
        security: ['HTTPBearer'];
    }, paths['/payables/{payable_id}']['get']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}']['get']['parameters'], paths['/payables/{payable_id}']['get']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}']['get']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}']['get']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}']['get']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}']['get']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}']['get']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a payable
     * @description Deletes a specific payable.
     */
    deletePayablesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payables/{payable_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/payables/{payable_id}']['delete']['parameters'], paths['/payables/{payable_id}']['delete']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}']['delete']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}']['delete']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a payable
     * @description Updates the information about a specific payable.
     */
    patchPayablesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payables/{payable_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}']['patch']['requestBody']>['content']['application/json'], paths['/payables/{payable_id}']['patch']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}']['patch']['parameters'], paths['/payables/{payable_id}']['patch']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}']['patch']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}']['patch']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Approve a payable for payment
     * @description Confirms that the payable is ready to be paid.
     */
    postPayablesIdApprovePaymentOperation: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/approve_payment_operation';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/approve_payment_operation']['post']['parameters'], paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/approve_payment_operation']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Attach a file to a payable
     * @description Attach file to payable without existing attachment.
     */
    postPayablesIdAttachFile: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/attach_file';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}/attach_file']['post']['requestBody']>['content']['multipart/form-data'], paths['/payables/{payable_id}/attach_file']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/attach_file']['post']['parameters'], paths['/payables/{payable_id}/attach_file']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/attach_file']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/attach_file']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/attach_file']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/attach_file']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/attach_file']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/attach_file']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Cancel a payable
     * @description Cancels the payable that was not confirmed during the review.
     */
    postPayablesIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/cancel']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/cancel']['post']['parameters'], paths['/payables/{payable_id}/cancel']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Cancel OCR of a payable
     * @description Request to cancel the OCR processing of the specified payable.
     */
    postPayablesIdCancelOcr: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/cancel_ocr';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/cancel_ocr']['post']['parameters'], paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/cancel_ocr']['post']['responses']['500']['content']['application/json']>;
    /** @summary Returns the history of the specified accounts payable document. */
    getPayablesIdHistory: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/{payable_id}/history';
        security: ['HTTPBearer'];
    }, paths['/payables/{payable_id}/history']['get']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/history']['get']['parameters'], paths['/payables/{payable_id}/history']['get']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/history']['get']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/history']['get']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/history']['get']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/history']['get']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/history']['get']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/history']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get the line items of a payable
     * @description Get a list of all line items related to a specific payable.
     * Related guide: [List all payable line items](https://docs.monite.com/accounts-payable/payables/line-items#list-all-line-items-of-a-payable)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     *
     * [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
     */
    getPayablesIdLineItems: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/{payable_id}/line_items';
        security: ['HTTPBearer'];
    }, paths['/payables/{payable_id}/line_items']['get']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/line_items']['get']['parameters'], paths['/payables/{payable_id}/line_items']['get']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['get']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['get']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['get']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['get']['responses']['406']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['get']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Replaces the lines items in a payable
     * @description Replaces the information of all line items of a specific payable.
     *
     * Related guide: [Replace all line items](https://docs.monite.com/accounts-payable/payables/line-items#replace-all-line-items)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     *
     * [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
     */
    putPayablesIdLineItems: ServiceOperationMutation<{
        method: 'put';
        url: '/payables/{payable_id}/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}/line_items']['put']['requestBody']>['content']['application/json'], paths['/payables/{payable_id}/line_items']['put']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/line_items']['put']['parameters'], paths['/payables/{payable_id}/line_items']['put']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['406']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['put']['responses']['500']['content']['application/json']>;
    /**
     * @summary Add a line item to a payable
     * @description Add a new line item to a specific payable.
     *
     * The `subtotal` and `total` fields of line items are automatically calculated based on the `unit_price`,
     *  `quantity`, and `tax` fields, therefore, are read-only and appear only in the response schema. The field
     *   `ledger_account_id` is required **only** for account integration, otherwise, it is optional.
     *
     * Related guide: [Add line items to a payable](https://docs.monite.com/accounts-payable/payables/line-items#add-line-items-to-a-payable)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     *
     * [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
     */
    postPayablesIdLineItems: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}/line_items']['post']['requestBody']>['content']['application/json'], paths['/payables/{payable_id}/line_items']['post']['responses']['201']['content']['application/json'], paths['/payables/{payable_id}/line_items']['post']['parameters'], paths['/payables/{payable_id}/line_items']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['406']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/line_items']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a single line item of a payable
     * @description Get information about a specific line item with a given ID.
     *
     * Related guide: [Retrieve a line item](https://docs.monite.com/accounts-payable/payables/line-items#retrieve-a-line-item)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     *
     * [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
     */
    getPayablesIdLineItemsId: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/{payable_id}/line_items/{line_item_id}';
        security: ['HTTPBearer'];
    }, paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['parameters'], paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['406']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a line item from a payable
     * @description Delete the line item with the given ID.
     *
     * Related guide: [Remove a line item](https://docs.monite.com/accounts-payable/payables/line-items#remove-a-line-item)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     *
     * [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
     */
    deletePayablesIdLineItemsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payables/{payable_id}/line_items/{line_item_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['parameters'], paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['406']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a line item in a payable
     * @description Edits the information of a specific line item.
     *
     * Related guide: [Update a line item](https://docs.monite.com/accounts-payable/payables/line-items#update-a-line-item)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/accounts-payable/payables/line-items)
     *
     * [Collect payables](https://docs.monite.com/accounts-payable/payables/collect)
     */
    patchPayablesIdLineItemsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payables/{payable_id}/line_items/{line_item_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['requestBody']>['content']['application/json'], paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['parameters'], paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['406']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/line_items/{line_item_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Mark a payable as paid
     * @description Mark a payable as paid.
     *
     * Payables can be paid using the payment channels offered by Monite or through external payment channels. In the latter
     *  case, the invoice is not automatically marked as paid in the system and needs to be converted to the paid status
     *  manually.
     *
     * Optionally, it is possible to pass the `comment` field in the request body, to describe how and when the invoice was
     * paid.
     *
     * Notes:
     * - To use this endpoint with an entity user token, this entity user must have a role that includes the `pay` permission
     * for payables.
     * - The `amount_to_pay` field is automatically calculated based on the `amount_due` less the percentage described
     * in the `payment_terms.discount` value.
     *
     * Related guide: [Mark a payable as paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-paid)
     *
     * See also:
     *
     * [Payables lifecycle](https://docs.monite.com/accounts-payable/payables/index)
     *
     * [Payables status transitions](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)
     */
    postPayablesIdMarkAsPaid: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/mark_as_paid';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}/mark_as_paid']['post']['requestBody']>['content']['application/json'], paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/mark_as_paid']['post']['parameters'], paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_paid']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Mark a payable as partially paid
     * @description Mark a payable as partially paid.
     *
     * If the payable is partially paid, its status is moved to `partially_paid`. The value of the `amount_paid` field must be
     *  the sum of all payments made, not only the last one.
     *
     * Notes:
     * - This endpoint can be used for payables in the `waiting_to_be_paid` status.
     * - The `amount_paid` must be greater than 0 and less than the total payable amount specified by the `amount` field.
     * - You can use this endpoint multiple times for the same payable to reflect multiple partial payments, always setting the
     *  sum of all payments made.
     * - To use this endpoint with an entity user token, this entity user must have a role that includes the `pay`
     * permission for payables.
     * - The `amount_to_pay` field is automatically calculated based on the `amount_due` less the percentage described
     * in the `payment_terms.discount` value.
     *
     * Related guide: [Mark a payable as partially paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-partially-paid)
     *
     * See also:
     *
     * [Payables lifecycle](https://docs.monite.com/accounts-payable/payables/index)
     *
     * [Payables status transitions](https://docs.monite.com/accounts-payable/payables/collect#suggested-payment-date)
     *
     * [Mark a payable as paid](https://docs.monite.com/accounts-payable/approvals/manual-transition#mark-as-paid)
     */
    postPayablesIdMarkAsPartiallyPaid: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/mark_as_partially_paid';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payables/{payable_id}/mark_as_partially_paid']['post']['requestBody']>['content']['application/json'], paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/mark_as_partially_paid']['post']['parameters'], paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/mark_as_partially_paid']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Reject a payable
     * @description Declines the payable when an approver finds any mismatch or discrepancies.
     */
    postPayablesIdReject: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/reject';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/reject']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/reject']['post']['parameters'], paths['/payables/{payable_id}/reject']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/reject']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Reopen a rejected or waiting_to_be_paid payable
     * @description Reset payable state from rejected or waiting_to_be_paid to new.
     */
    postPayablesIdReopen: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/reopen';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/reopen']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/reopen']['post']['parameters'], paths['/payables/{payable_id}/reopen']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/reopen']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Submit a payable for approval
     * @description Starts the approval process once the uploaded payable is validated.
     */
    postPayablesIdSubmitForApproval: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/submit_for_approval';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/submit_for_approval']['post']['parameters'], paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/submit_for_approval']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get suggestions
     * @description Get AI suggestions
     */
    getPayablesIdSuggestions: ServiceOperationQuery<{
        method: 'get';
        url: '/payables/{payable_id}/suggestions';
        security: ['HTTPBearer'];
    }, paths['/payables/{payable_id}/suggestions']['get']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/suggestions']['get']['parameters'], paths['/payables/{payable_id}/suggestions']['get']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['get']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['get']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['get']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['get']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete suggestions
     * @description Remove AI suggestions
     */
    deletePayablesIdSuggestions: ServiceOperationMutation<{
        method: 'delete';
        url: '/payables/{payable_id}/suggestions';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/suggestions']['delete']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/suggestions']['delete']['parameters'], paths['/payables/{payable_id}/suggestions']['delete']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['delete']['responses']['401']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['delete']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['delete']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['delete']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/suggestions']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Validate a payable
     * @description Check the invoice for compliance with the requirements for movement from draft to new status.
     */
    postPayablesIdValidate: ServiceOperationMutation<{
        method: 'post';
        url: '/payables/{payable_id}/validate';
        security: ['HTTPBearer'];
    }, undefined, paths['/payables/{payable_id}/validate']['post']['responses']['200']['content']['application/json'], paths['/payables/{payable_id}/validate']['post']['parameters'], paths['/payables/{payable_id}/validate']['post']['responses']['400']['content']['application/json'] | paths['/payables/{payable_id}/validate']['post']['responses']['403']['content']['application/json'] | paths['/payables/{payable_id}/validate']['post']['responses']['404']['content']['application/json'] | paths['/payables/{payable_id}/validate']['post']['responses']['405']['content']['application/json'] | paths['/payables/{payable_id}/validate']['post']['responses']['409']['content']['application/json'] | paths['/payables/{payable_id}/validate']['post']['responses']['422']['content']['application/json'] | paths['/payables/{payable_id}/validate']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PaymentIntentsService {
    /** @summary Get payment intents */
    getPaymentIntents: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_intents';
        security: ['HTTPBearer'];
    }, paths['/payment_intents']['get']['responses']['200']['content']['application/json'], paths['/payment_intents']['get']['parameters'], paths['/payment_intents']['get']['responses']['405']['content']['application/json'] | paths['/payment_intents']['get']['responses']['422']['content']['application/json'] | paths['/payment_intents']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get payment intent by ID */
    getPaymentIntentsId: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_intents/{payment_intent_id}';
        security: ['HTTPBearer'];
    }, paths['/payment_intents/{payment_intent_id}']['get']['responses']['200']['content']['application/json'], paths['/payment_intents/{payment_intent_id}']['get']['parameters'], paths['/payment_intents/{payment_intent_id}']['get']['responses']['405']['content']['application/json'] | paths['/payment_intents/{payment_intent_id}']['get']['responses']['422']['content']['application/json'] | paths['/payment_intents/{payment_intent_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update the payment intent amount */
    patchPaymentIntentsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payment_intents/{payment_intent_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_intents/{payment_intent_id}']['patch']['requestBody']>['content']['application/json'], paths['/payment_intents/{payment_intent_id}']['patch']['responses']['200']['content']['application/json'], paths['/payment_intents/{payment_intent_id}']['patch']['parameters'], paths['/payment_intents/{payment_intent_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payment_intents/{payment_intent_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payment_intents/{payment_intent_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Get the payment intent history */
    getPaymentIntentsIdHistory: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_intents/{payment_intent_id}/history';
        security: ['HTTPBearer'];
    }, paths['/payment_intents/{payment_intent_id}/history']['get']['responses']['200']['content']['application/json'], paths['/payment_intents/{payment_intent_id}/history']['get']['parameters'], paths['/payment_intents/{payment_intent_id}/history']['get']['responses']['405']['content']['application/json'] | paths['/payment_intents/{payment_intent_id}/history']['get']['responses']['422']['content']['application/json'] | paths['/payment_intents/{payment_intent_id}/history']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PaymentLinksService {
    /** @summary Create a payment link */
    postPaymentLinks: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_links';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_links']['post']['requestBody']>['content']['application/json'], paths['/payment_links']['post']['responses']['201']['content']['application/json'], paths['/payment_links']['post']['parameters'], paths['/payment_links']['post']['responses']['405']['content']['application/json'] | paths['/payment_links']['post']['responses']['422']['content']['application/json'] | paths['/payment_links']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get payment link by ID */
    getPaymentLinksId: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_links/{payment_link_id}';
        security: ['HTTPBearer'];
    }, paths['/payment_links/{payment_link_id}']['get']['responses']['200']['content']['application/json'], paths['/payment_links/{payment_link_id}']['get']['parameters'], paths['/payment_links/{payment_link_id}']['get']['responses']['405']['content']['application/json'] | paths['/payment_links/{payment_link_id}']['get']['responses']['422']['content']['application/json'] | paths['/payment_links/{payment_link_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Expire a payment link */
    postPaymentLinksIdExpire: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_links/{payment_link_id}/expire';
        security: ['HTTPBearer'];
    }, undefined, paths['/payment_links/{payment_link_id}/expire']['post']['responses']['200']['content']['application/json'], paths['/payment_links/{payment_link_id}/expire']['post']['parameters'], paths['/payment_links/{payment_link_id}/expire']['post']['responses']['405']['content']['application/json'] | paths['/payment_links/{payment_link_id}/expire']['post']['responses']['422']['content']['application/json'] | paths['/payment_links/{payment_link_id}/expire']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PaymentOnboardingLinksService {
    /** @summary Create an onboarding link */
    postPaymentOnboardingLinks: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_onboarding_links';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_onboarding_links']['post']['requestBody']>['content']['application/json'], paths['/payment_onboarding_links']['post']['responses']['200']['content']['application/json'], paths['/payment_onboarding_links']['post']['parameters'], paths['/payment_onboarding_links']['post']['responses']['405']['content']['application/json'] | paths['/payment_onboarding_links']['post']['responses']['422']['content']['application/json'] | paths['/payment_onboarding_links']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PaymentRecordsService {
    /** @summary Get payment records */
    getPaymentRecords: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_records';
        security: ['HTTPBearer'];
    }, paths['/payment_records']['get']['responses']['200']['content']['application/json'], paths['/payment_records']['get']['parameters'], paths['/payment_records']['get']['responses']['405']['content']['application/json'] | paths['/payment_records']['get']['responses']['422']['content']['application/json'] | paths['/payment_records']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a payment record */
    postPaymentRecords: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_records';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_records']['post']['requestBody']>['content']['application/json'], paths['/payment_records']['post']['responses']['201']['content']['application/json'], paths['/payment_records']['post']['parameters'], paths['/payment_records']['post']['responses']['405']['content']['application/json'] | paths['/payment_records']['post']['responses']['422']['content']['application/json'] | paths['/payment_records']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a payment record */
    getPaymentRecordsId: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_records/{payment_record_id}';
        security: ['HTTPBearer'];
    }, paths['/payment_records/{payment_record_id}']['get']['responses']['200']['content']['application/json'], paths['/payment_records/{payment_record_id}']['get']['parameters'], paths['/payment_records/{payment_record_id}']['get']['responses']['405']['content']['application/json'] | paths['/payment_records/{payment_record_id}']['get']['responses']['422']['content']['application/json'] | paths['/payment_records/{payment_record_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update a payment record */
    patchPaymentRecordsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payment_records/{payment_record_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_records/{payment_record_id}']['patch']['requestBody']>['content']['application/json'], paths['/payment_records/{payment_record_id}']['patch']['responses']['200']['content']['application/json'], paths['/payment_records/{payment_record_id}']['patch']['parameters'], paths['/payment_records/{payment_record_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payment_records/{payment_record_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payment_records/{payment_record_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Cancel a payment record */
    postPaymentRecordsIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_records/{payment_record_id}/cancel';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_records/{payment_record_id}/cancel']['post']['requestBody']>['content']['application/json'], paths['/payment_records/{payment_record_id}/cancel']['post']['responses']['200']['content']['application/json'], paths['/payment_records/{payment_record_id}/cancel']['post']['parameters'], paths['/payment_records/{payment_record_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/payment_records/{payment_record_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/payment_records/{payment_record_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /** @summary Mark a payment record as succeeded */
    postPaymentRecordsIdMarkAsSucceeded: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_records/{payment_record_id}/mark_as_succeeded';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_records/{payment_record_id}/mark_as_succeeded']['post']['requestBody']>['content']['application/json'], paths['/payment_records/{payment_record_id}/mark_as_succeeded']['post']['responses']['200']['content']['application/json'], paths['/payment_records/{payment_record_id}/mark_as_succeeded']['post']['parameters'], paths['/payment_records/{payment_record_id}/mark_as_succeeded']['post']['responses']['405']['content']['application/json'] | paths['/payment_records/{payment_record_id}/mark_as_succeeded']['post']['responses']['422']['content']['application/json'] | paths['/payment_records/{payment_record_id}/mark_as_succeeded']['post']['responses']['500']['content']['application/json']>;
    /** @summary Start processing a payment record */
    postPaymentRecordsIdStartProcessing: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_records/{payment_record_id}/start_processing';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_records/{payment_record_id}/start_processing']['post']['requestBody']>['content']['application/json'], paths['/payment_records/{payment_record_id}/start_processing']['post']['responses']['200']['content']['application/json'], paths['/payment_records/{payment_record_id}/start_processing']['post']['parameters'], paths['/payment_records/{payment_record_id}/start_processing']['post']['responses']['405']['content']['application/json'] | paths['/payment_records/{payment_record_id}/start_processing']['post']['responses']['422']['content']['application/json'] | paths['/payment_records/{payment_record_id}/start_processing']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PaymentRemindersService {
    /** @summary Get payment reminder configurations */
    getPaymentReminders: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_reminders';
        security: ['HTTPBearer'];
    }, paths['/payment_reminders']['get']['responses']['200']['content']['application/json'], paths['/payment_reminders']['get']['parameters'], paths['/payment_reminders']['get']['responses']['401']['content']['application/json'] | paths['/payment_reminders']['get']['responses']['403']['content']['application/json'] | paths['/payment_reminders']['get']['responses']['405']['content']['application/json'] | paths['/payment_reminders']['get']['responses']['422']['content']['application/json'] | paths['/payment_reminders']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a payment reminder configuration */
    postPaymentReminders: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_reminders';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_reminders']['post']['requestBody']>['content']['application/json'], paths['/payment_reminders']['post']['responses']['201']['content']['application/json'], paths['/payment_reminders']['post']['parameters'], paths['/payment_reminders']['post']['responses']['400']['content']['application/json'] | paths['/payment_reminders']['post']['responses']['401']['content']['application/json'] | paths['/payment_reminders']['post']['responses']['403']['content']['application/json'] | paths['/payment_reminders']['post']['responses']['405']['content']['application/json'] | paths['/payment_reminders']['post']['responses']['422']['content']['application/json'] | paths['/payment_reminders']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a payment reminder configuration by ID */
    getPaymentRemindersId: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_reminders/{payment_reminder_id}';
        security: ['HTTPBearer'];
    }, paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['200']['content']['application/json'], paths['/payment_reminders/{payment_reminder_id}']['get']['parameters'], paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['401']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['403']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['404']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['405']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['422']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a payment reminder configuration */
    deletePaymentRemindersId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payment_reminders/{payment_reminder_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/payment_reminders/{payment_reminder_id}']['delete']['parameters'], paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['400']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['401']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['403']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a payment reminder configuration */
    patchPaymentRemindersId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payment_reminders/{payment_reminder_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_reminders/{payment_reminder_id}']['patch']['requestBody']>['content']['application/json'], paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['200']['content']['application/json'], paths['/payment_reminders/{payment_reminder_id}']['patch']['parameters'], paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['400']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['401']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['403']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payment_reminders/{payment_reminder_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PaymentTermsService {
    /** @summary Get payment terms */
    getPaymentTerms: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_terms';
        security: ['HTTPBearer'];
    }, paths['/payment_terms']['get']['responses']['200']['content']['application/json'], paths['/payment_terms']['get']['parameters'], paths['/payment_terms']['get']['responses']['401']['content']['application/json'] | paths['/payment_terms']['get']['responses']['403']['content']['application/json'] | paths['/payment_terms']['get']['responses']['405']['content']['application/json'] | paths['/payment_terms']['get']['responses']['422']['content']['application/json'] | paths['/payment_terms']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a payment term */
    postPaymentTerms: ServiceOperationMutation<{
        method: 'post';
        url: '/payment_terms';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_terms']['post']['requestBody']>['content']['application/json'], paths['/payment_terms']['post']['responses']['201']['content']['application/json'], paths['/payment_terms']['post']['parameters'], paths['/payment_terms']['post']['responses']['400']['content']['application/json'] | paths['/payment_terms']['post']['responses']['401']['content']['application/json'] | paths['/payment_terms']['post']['responses']['403']['content']['application/json'] | paths['/payment_terms']['post']['responses']['405']['content']['application/json'] | paths['/payment_terms']['post']['responses']['422']['content']['application/json'] | paths['/payment_terms']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a payment term by ID */
    getPaymentTermsId: ServiceOperationQuery<{
        method: 'get';
        url: '/payment_terms/{payment_terms_id}';
        security: ['HTTPBearer'];
    }, paths['/payment_terms/{payment_terms_id}']['get']['responses']['200']['content']['application/json'], paths['/payment_terms/{payment_terms_id}']['get']['parameters'], paths['/payment_terms/{payment_terms_id}']['get']['responses']['401']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['get']['responses']['403']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['get']['responses']['404']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['get']['responses']['405']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['get']['responses']['422']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a payment term */
    deletePaymentTermsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/payment_terms/{payment_terms_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/payment_terms/{payment_terms_id}']['delete']['parameters'], paths['/payment_terms/{payment_terms_id}']['delete']['responses']['400']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['delete']['responses']['401']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['delete']['responses']['403']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['delete']['responses']['404']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['delete']['responses']['405']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['delete']['responses']['422']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a payment term */
    patchPaymentTermsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/payment_terms/{payment_terms_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/payment_terms/{payment_terms_id}']['patch']['requestBody']>['content']['application/json'], paths['/payment_terms/{payment_terms_id}']['patch']['responses']['200']['content']['application/json'], paths['/payment_terms/{payment_terms_id}']['patch']['parameters'], paths['/payment_terms/{payment_terms_id}']['patch']['responses']['400']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['patch']['responses']['401']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['patch']['responses']['403']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['patch']['responses']['404']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['patch']['responses']['405']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['patch']['responses']['422']['content']['application/json'] | paths['/payment_terms/{payment_terms_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface PersonsService {
    /** @summary Create a person */
    postPersons: ServiceOperationMutation<{
        method: 'post';
        url: '/persons';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/persons']['post']['requestBody']>['content']['application/json'], paths['/persons']['post']['responses']['200']['content']['application/json'], paths['/persons']['post']['parameters'], paths['/persons']['post']['responses']['405']['content']['application/json'] | paths['/persons']['post']['responses']['409']['content']['application/json'] | paths['/persons']['post']['responses']['422']['content']['application/json'] | paths['/persons']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get all persons */
    getPersons: ServiceOperationQuery<{
        method: 'get';
        url: '/persons';
        security: ['HTTPBearer'];
    }, paths['/persons']['get']['responses']['200']['content']['application/json'], paths['/persons']['get']['parameters'], paths['/persons']['get']['responses']['405']['content']['application/json'] | paths['/persons']['get']['responses']['422']['content']['application/json'] | paths['/persons']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get a person */
    getPersonsId: ServiceOperationQuery<{
        method: 'get';
        url: '/persons/{person_id}';
        security: ['HTTPBearer'];
    }, paths['/persons/{person_id}']['get']['responses']['200']['content']['application/json'], paths['/persons/{person_id}']['get']['parameters'], paths['/persons/{person_id}']['get']['responses']['404']['content']['application/json'] | paths['/persons/{person_id}']['get']['responses']['405']['content']['application/json'] | paths['/persons/{person_id}']['get']['responses']['422']['content']['application/json'] | paths['/persons/{person_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update a person */
    patchPersonsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/persons/{person_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/persons/{person_id}']['patch']['requestBody']>['content']['application/json'], paths['/persons/{person_id}']['patch']['responses']['200']['content']['application/json'], paths['/persons/{person_id}']['patch']['parameters'], paths['/persons/{person_id}']['patch']['responses']['404']['content']['application/json'] | paths['/persons/{person_id}']['patch']['responses']['405']['content']['application/json'] | paths['/persons/{person_id}']['patch']['responses']['409']['content']['application/json'] | paths['/persons/{person_id}']['patch']['responses']['422']['content']['application/json'] | paths['/persons/{person_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Delete a person */
    deletePersonsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/persons/{person_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/persons/{person_id}']['delete']['parameters'], paths['/persons/{person_id}']['delete']['responses']['404']['content']['application/json'] | paths['/persons/{person_id}']['delete']['responses']['405']['content']['application/json'] | paths['/persons/{person_id}']['delete']['responses']['409']['content']['application/json'] | paths['/persons/{person_id}']['delete']['responses']['422']['content']['application/json'] | paths['/persons/{person_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Update person onboarding documents
     * @description Deprecated. Use `POST /persons/{person_id}/onboarding_documents` instead. Update the onboarding documents of a person.
     */
    postPersonsIdDocuments: ServiceOperationMutation<{
        method: 'post';
        url: '/persons/{person_id}/documents';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/persons/{person_id}/documents']['post']['parameters'], paths['/persons/{person_id}/documents']['post']['responses']['405']['content']['application/json'] | paths['/persons/{person_id}/documents']['post']['responses']['422']['content']['application/json'] | paths['/persons/{person_id}/documents']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Provide files for person onboarding verification
     * @description Provide files for person onboarding verification
     */
    postPersonsIdOnboardingDocuments: ServiceOperationMutation<{
        method: 'post';
        url: '/persons/{person_id}/onboarding_documents';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/persons/{person_id}/onboarding_documents']['post']['requestBody']>['content']['application/json'], unknown, paths['/persons/{person_id}/onboarding_documents']['post']['parameters'], paths['/persons/{person_id}/onboarding_documents']['post']['responses']['405']['content']['application/json'] | paths['/persons/{person_id}/onboarding_documents']['post']['responses']['422']['content']['application/json'] | paths['/persons/{person_id}/onboarding_documents']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface ProductsService {
    /** @summary Get products */
    getProducts: ServiceOperationQuery<{
        method: 'get';
        url: '/products';
        security: ['HTTPBearer'];
    }, paths['/products']['get']['responses']['200']['content']['application/json'], paths['/products']['get']['parameters'], paths['/products']['get']['responses']['400']['content']['application/json'] | paths['/products']['get']['responses']['401']['content']['application/json'] | paths['/products']['get']['responses']['403']['content']['application/json'] | paths['/products']['get']['responses']['405']['content']['application/json'] | paths['/products']['get']['responses']['422']['content']['application/json'] | paths['/products']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a product */
    postProducts: ServiceOperationMutation<{
        method: 'post';
        url: '/products';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/products']['post']['requestBody']>['content']['application/json'], paths['/products']['post']['responses']['201']['content']['application/json'], paths['/products']['post']['parameters'], paths['/products']['post']['responses']['400']['content']['application/json'] | paths['/products']['post']['responses']['401']['content']['application/json'] | paths['/products']['post']['responses']['403']['content']['application/json'] | paths['/products']['post']['responses']['405']['content']['application/json'] | paths['/products']['post']['responses']['422']['content']['application/json'] | paths['/products']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a product by ID */
    getProductsId: ServiceOperationQuery<{
        method: 'get';
        url: '/products/{product_id}';
        security: ['HTTPBearer'];
    }, paths['/products/{product_id}']['get']['responses']['200']['content']['application/json'], paths['/products/{product_id}']['get']['parameters'], paths['/products/{product_id}']['get']['responses']['400']['content']['application/json'] | paths['/products/{product_id}']['get']['responses']['401']['content']['application/json'] | paths['/products/{product_id}']['get']['responses']['403']['content']['application/json'] | paths['/products/{product_id}']['get']['responses']['404']['content']['application/json'] | paths['/products/{product_id}']['get']['responses']['405']['content']['application/json'] | paths['/products/{product_id}']['get']['responses']['422']['content']['application/json'] | paths['/products/{product_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a product */
    deleteProductsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/products/{product_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/products/{product_id}']['delete']['parameters'], paths['/products/{product_id}']['delete']['responses']['400']['content']['application/json'] | paths['/products/{product_id}']['delete']['responses']['401']['content']['application/json'] | paths['/products/{product_id}']['delete']['responses']['403']['content']['application/json'] | paths['/products/{product_id}']['delete']['responses']['404']['content']['application/json'] | paths['/products/{product_id}']['delete']['responses']['405']['content']['application/json'] | paths['/products/{product_id}']['delete']['responses']['422']['content']['application/json'] | paths['/products/{product_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a product */
    patchProductsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/products/{product_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/products/{product_id}']['patch']['requestBody']>['content']['application/json'], paths['/products/{product_id}']['patch']['responses']['200']['content']['application/json'], paths['/products/{product_id}']['patch']['parameters'], paths['/products/{product_id}']['patch']['responses']['400']['content']['application/json'] | paths['/products/{product_id}']['patch']['responses']['401']['content']['application/json'] | paths['/products/{product_id}']['patch']['responses']['403']['content']['application/json'] | paths['/products/{product_id}']['patch']['responses']['404']['content']['application/json'] | paths['/products/{product_id}']['patch']['responses']['405']['content']['application/json'] | paths['/products/{product_id}']['patch']['responses']['422']['content']['application/json'] | paths['/products/{product_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface ProjectsService {
    /**
     * @summary Get all projects for entity
     * @description Get all projects for an entity
     */
    getProjects: ServiceOperationQuery<{
        method: 'get';
        url: '/projects';
        security: ['HTTPBearer'];
    }, paths['/projects']['get']['responses']['200']['content']['application/json'], paths['/projects']['get']['parameters'], paths['/projects']['get']['responses']['400']['content']['application/json'] | paths['/projects']['get']['responses']['401']['content']['application/json'] | paths['/projects']['get']['responses']['403']['content']['application/json'] | paths['/projects']['get']['responses']['404']['content']['application/json'] | paths['/projects']['get']['responses']['405']['content']['application/json'] | paths['/projects']['get']['responses']['406']['content']['application/json'] | paths['/projects']['get']['responses']['422']['content']['application/json'] | paths['/projects']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a project
     * @description Create a new project.
     */
    postProjects: ServiceOperationMutation<{
        method: 'post';
        url: '/projects';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/projects']['post']['requestBody']>['content']['application/json'], paths['/projects']['post']['responses']['201']['content']['application/json'], paths['/projects']['post']['parameters'], paths['/projects']['post']['responses']['400']['content']['application/json'] | paths['/projects']['post']['responses']['401']['content']['application/json'] | paths['/projects']['post']['responses']['403']['content']['application/json'] | paths['/projects']['post']['responses']['405']['content']['application/json'] | paths['/projects']['post']['responses']['422']['content']['application/json'] | paths['/projects']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a project by ID
     * @description Get a project with the given ID.
     */
    getProjectsId: ServiceOperationQuery<{
        method: 'get';
        url: '/projects/{project_id}';
        security: ['HTTPBearer'];
    }, paths['/projects/{project_id}']['get']['responses']['200']['content']['application/json'], paths['/projects/{project_id}']['get']['parameters'], paths['/projects/{project_id}']['get']['responses']['400']['content']['application/json'] | paths['/projects/{project_id}']['get']['responses']['401']['content']['application/json'] | paths['/projects/{project_id}']['get']['responses']['403']['content']['application/json'] | paths['/projects/{project_id}']['get']['responses']['404']['content']['application/json'] | paths['/projects/{project_id}']['get']['responses']['405']['content']['application/json'] | paths['/projects/{project_id}']['get']['responses']['422']['content']['application/json'] | paths['/projects/{project_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a project
     * @description Delete a project.
     */
    deleteProjectsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/projects/{project_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/projects/{project_id}']['delete']['parameters'], paths['/projects/{project_id}']['delete']['responses']['400']['content']['application/json'] | paths['/projects/{project_id}']['delete']['responses']['401']['content']['application/json'] | paths['/projects/{project_id}']['delete']['responses']['403']['content']['application/json'] | paths['/projects/{project_id}']['delete']['responses']['404']['content']['application/json'] | paths['/projects/{project_id}']['delete']['responses']['405']['content']['application/json'] | paths['/projects/{project_id}']['delete']['responses']['422']['content']['application/json'] | paths['/projects/{project_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a project
     * @description Update a project.
     */
    patchProjectsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/projects/{project_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/projects/{project_id}']['patch']['requestBody']>['content']['application/json'], paths['/projects/{project_id}']['patch']['responses']['200']['content']['application/json'], paths['/projects/{project_id}']['patch']['parameters'], paths['/projects/{project_id}']['patch']['responses']['400']['content']['application/json'] | paths['/projects/{project_id}']['patch']['responses']['401']['content']['application/json'] | paths['/projects/{project_id}']['patch']['responses']['403']['content']['application/json'] | paths['/projects/{project_id}']['patch']['responses']['404']['content']['application/json'] | paths['/projects/{project_id}']['patch']['responses']['405']['content']['application/json'] | paths['/projects/{project_id}']['patch']['responses']['422']['content']['application/json'] | paths['/projects/{project_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface ReceiptsService {
    /** @summary Lists all receipts from the connected entity. */
    getReceipts: ServiceOperationQuery<{
        method: 'get';
        url: '/receipts';
        security: ['HTTPBearer'];
    }, paths['/receipts']['get']['responses']['200']['content']['application/json'], paths['/receipts']['get']['parameters'], paths['/receipts']['get']['responses']['401']['content']['application/json'] | paths['/receipts']['get']['responses']['403']['content']['application/json'] | paths['/receipts']['get']['responses']['404']['content']['application/json'] | paths['/receipts']['get']['responses']['405']['content']['application/json'] | paths['/receipts']['get']['responses']['422']['content']['application/json'] | paths['/receipts']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a receipt */
    postReceipts: ServiceOperationMutation<{
        method: 'post';
        url: '/receipts';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receipts']['post']['requestBody']>['content']['application/json'], paths['/receipts']['post']['responses']['201']['content']['application/json'], paths['/receipts']['post']['parameters'], paths['/receipts']['post']['responses']['400']['content']['application/json'] | paths['/receipts']['post']['responses']['401']['content']['application/json'] | paths['/receipts']['post']['responses']['403']['content']['application/json'] | paths['/receipts']['post']['responses']['405']['content']['application/json'] | paths['/receipts']['post']['responses']['422']['content']['application/json'] | paths['/receipts']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Upload a receipt from a file
     * @description Upload an incoming receipt in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.
     */
    postReceiptsUploadFromFile: ServiceOperationMutation<{
        method: 'post';
        url: '/receipts/upload_from_file';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receipts/upload_from_file']['post']['requestBody']>['content']['multipart/form-data'], paths['/receipts/upload_from_file']['post']['responses']['201']['content']['application/json'], paths['/receipts/upload_from_file']['post']['parameters'], paths['/receipts/upload_from_file']['post']['responses']['400']['content']['application/json'] | paths['/receipts/upload_from_file']['post']['responses']['401']['content']['application/json'] | paths['/receipts/upload_from_file']['post']['responses']['403']['content']['application/json'] | paths['/receipts/upload_from_file']['post']['responses']['405']['content']['application/json'] | paths['/receipts/upload_from_file']['post']['responses']['409']['content']['application/json'] | paths['/receipts/upload_from_file']['post']['responses']['422']['content']['application/json'] | paths['/receipts/upload_from_file']['post']['responses']['500']['content']['application/json']>;
    /** @summary Retrieves information about a specific receipt with the given ID. */
    getReceiptsId: ServiceOperationQuery<{
        method: 'get';
        url: '/receipts/{receipt_id}';
        security: ['HTTPBearer'];
    }, paths['/receipts/{receipt_id}']['get']['responses']['200']['content']['application/json'], paths['/receipts/{receipt_id}']['get']['parameters'], paths['/receipts/{receipt_id}']['get']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}']['get']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}']['get']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}']['get']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}']['get']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Deletes a specific receipt. */
    deleteReceiptsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/receipts/{receipt_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/receipts/{receipt_id}']['delete']['parameters'], paths['/receipts/{receipt_id}']['delete']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}']['delete']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}']['delete']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}']['delete']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}']['delete']['responses']['409']['content']['application/json'] | paths['/receipts/{receipt_id}']['delete']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Updates the information about a specific receipt. */
    patchReceiptsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/receipts/{receipt_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receipts/{receipt_id}']['patch']['requestBody']>['content']['application/json'], paths['/receipts/{receipt_id}']['patch']['responses']['200']['content']['application/json'], paths['/receipts/{receipt_id}']['patch']['parameters'], paths['/receipts/{receipt_id}']['patch']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}']['patch']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}']['patch']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}']['patch']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}']['patch']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Attach a file to a receipt
     * @description Attach file to receipt without existing attachment.
     */
    postReceiptsIdAttachFile: ServiceOperationMutation<{
        method: 'post';
        url: '/receipts/{receipt_id}/attach_file';
        mediaType: 'multipart/form-data';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receipts/{receipt_id}/attach_file']['post']['requestBody']>['content']['multipart/form-data'], paths['/receipts/{receipt_id}/attach_file']['post']['responses']['200']['content']['application/json'], paths['/receipts/{receipt_id}/attach_file']['post']['parameters'], paths['/receipts/{receipt_id}/attach_file']['post']['responses']['400']['content']['application/json'] | paths['/receipts/{receipt_id}/attach_file']['post']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}/attach_file']['post']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}/attach_file']['post']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}/attach_file']['post']['responses']['409']['content']['application/json'] | paths['/receipts/{receipt_id}/attach_file']['post']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}/attach_file']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get all line items of a receipt */
    getReceiptsIdLineItems: ServiceOperationQuery<{
        method: 'get';
        url: '/receipts/{receipt_id}/line_items';
        security: ['HTTPBearer'];
    }, paths['/receipts/{receipt_id}/line_items']['get']['responses']['200']['content']['application/json'], paths['/receipts/{receipt_id}/line_items']['get']['parameters'], paths['/receipts/{receipt_id}/line_items']['get']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['get']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['get']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['get']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['get']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['get']['responses']['500']['content']['application/json']>;
    /** @summary Add a new line item to a receipt */
    postReceiptsIdLineItems: ServiceOperationMutation<{
        method: 'post';
        url: '/receipts/{receipt_id}/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receipts/{receipt_id}/line_items']['post']['requestBody']>['content']['application/json'], paths['/receipts/{receipt_id}/line_items']['post']['responses']['201']['content']['application/json'], paths['/receipts/{receipt_id}/line_items']['post']['parameters'], paths['/receipts/{receipt_id}/line_items']['post']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['post']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['post']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['post']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['post']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items']['post']['responses']['500']['content']['application/json']>;
    /** @summary Delete a line item from a receipt */
    deleteReceiptsIdLineItemsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/receipts/{receipt_id}/line_items/{line_item_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['parameters'], paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a line item of a receipt */
    patchReceiptsIdLineItemsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/receipts/{receipt_id}/line_items/{line_item_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['requestBody']>['content']['application/json'], paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['200']['content']['application/json'], paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['parameters'], paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['401']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['403']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['404']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['405']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['422']['content']['application/json'] | paths['/receipts/{receipt_id}/line_items/{line_item_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface ReceivablesService {
    /**
     * @summary Get receivables
     * @description Returns a list of [accounts receivable](https://docs.monite.com/accounts-receivable/index) documents - invoices, quotes, and credit notes - of the specified entity.
     *
     * Results can be filtered by amount, counterpart, due date, and other criteria. Multiple filters are combined using logical AND unless specified otherwise. If no documents matching the search criteria are found, the endpoint returns a successful response with an empty `data` array.
     *
     * This endpoint supports [pagination](https://docs.monite.com/api/concepts/pagination-sorting-filtering) and sorting. By default, results are sorted by the creation date in ascending order (from oldest to newest).
     *
     * #### Examples
     *
     * ##### Invoices
     *
     * * Get all overdue invoices:
     *     ```
     *     GET /receivables?type=invoice&status=overdue
     *     ```
     *
     * * Get all invoices created for the counterpart named "Solarwind" (case-insensitive):
     *
     *     ```
     *     GET /receivables?type=invoice?counterpart_name__icontains=Solarwind
     *     ```
     *
     * * Get invoices whose total amount starts from 500 EUR:
     *
     *     ```
     *     GET /receivables?type=invoice&total_amount__gte=50000
     *     ```
     *
     * * Get invoices that are due for payment in September 2024:
     *
     *     ```
     *     GET /receivables?type=invoice&due_date__gte=2024-09-01T00:00:00Z&due_date__lt=2024-10-01T00:00:00Z
     *     ```
     *
     * * Get invoices created on or after September 1, 2024:
     *
     *     ```
     *     GET /receivables?type=invoice&created_at__gte=2024-09-01T00:00:00Z
     *     ```
     *
     * * Find an invoice created from a specific quote:
     *
     *     ```
     *     GET /receivables?type=invoice?based_on=QUOTE_ID
     *     ```
     *
     * ##### Quotes
     *
     * * Get the latest created quote:
     *
     *     ```
     *     GET /receivables?type=quote&sort=created_at&order=desc&limit=1
     *     ```
     *
     * * Get the latest issued quote:
     *
     *     ```
     *     GET /receivables?type=quote&sort=issue_date&order=desc&limit=1
     *     ```
     *
     * ##### Credit notes
     *
     * * Find all credit notes created for a specific invoice:
     *
     *     ```
     *     GET /receivables?type=credit_note?based_on=INVOICE_ID
     *     ```
     */
    getReceivables: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables';
        security: ['HTTPBearer'];
    }, paths['/receivables']['get']['responses']['200']['content']['application/json'], paths['/receivables']['get']['parameters'], paths['/receivables']['get']['responses']['400']['content']['application/json'] | paths['/receivables']['get']['responses']['403']['content']['application/json'] | paths['/receivables']['get']['responses']['405']['content']['application/json'] | paths['/receivables']['get']['responses']['406']['content']['application/json'] | paths['/receivables']['get']['responses']['409']['content']['application/json'] | paths['/receivables']['get']['responses']['422']['content']['application/json'] | paths['/receivables']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a receivable */
    postReceivables: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables']['post']['requestBody']>['content']['application/json'], paths['/receivables']['post']['responses']['201']['content']['application/json'], paths['/receivables']['post']['parameters'], paths['/receivables']['post']['responses']['400']['content']['application/json'] | paths['/receivables']['post']['responses']['401']['content']['application/json'] | paths['/receivables']['post']['responses']['403']['content']['application/json'] | paths['/receivables']['post']['responses']['404']['content']['application/json'] | paths['/receivables']['post']['responses']['405']['content']['application/json'] | paths['/receivables']['post']['responses']['409']['content']['application/json'] | paths['/receivables']['post']['responses']['422']['content']['application/json'] | paths['/receivables']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get required field names for invoice creation
     * @description Get field requirements for invoice creation given the entity and counterpart details.
     */
    getReceivablesRequiredFields: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/required_fields';
        security: ['HTTPBearer'];
    }, paths['/receivables/required_fields']['get']['responses']['200']['content']['application/json'], paths['/receivables/required_fields']['get']['parameters'], paths['/receivables/required_fields']['get']['responses']['405']['content']['application/json'] | paths['/receivables/required_fields']['get']['responses']['422']['content']['application/json'] | paths['/receivables/required_fields']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Search receivables
     * @description This is a POST version of the `GET /receivables` endpoint. Use it to send search and filter parameters in the request body instead of the URL query string in case the query is too long and exceeds the URL length limit of your HTTP client.
     */
    postReceivablesSearch: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/search';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/search']['post']['requestBody']>['content']['application/json'], paths['/receivables/search']['post']['responses']['200']['content']['application/json'], paths['/receivables/search']['post']['parameters'], paths['/receivables/search']['post']['responses']['400']['content']['application/json'] | paths['/receivables/search']['post']['responses']['403']['content']['application/json'] | paths['/receivables/search']['post']['responses']['405']['content']['application/json'] | paths['/receivables/search']['post']['responses']['406']['content']['application/json'] | paths['/receivables/search']['post']['responses']['409']['content']['application/json'] | paths['/receivables/search']['post']['responses']['422']['content']['application/json'] | paths['/receivables/search']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get email template variables
     * @description Get a list of placeholders that can be used in email templates for customization.
     */
    getReceivablesVariables: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/variables';
        security: ['HTTPBearer'];
    }, paths['/receivables/variables']['get']['responses']['200']['content']['application/json'], paths['/receivables/variables']['get']['parameters'], paths['/receivables/variables']['get']['responses']['404']['content']['application/json'] | paths['/receivables/variables']['get']['responses']['405']['content']['application/json'] | paths['/receivables/variables']['get']['responses']['409']['content']['application/json'] | paths['/receivables/variables']['get']['responses']['422']['content']['application/json'] | paths['/receivables/variables']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get a receivable by ID */
    getReceivablesId: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/{receivable_id}';
        security: ['HTTPBearer'];
    }, paths['/receivables/{receivable_id}']['get']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}']['get']['parameters'], paths['/receivables/{receivable_id}']['get']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}']['get']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}']['get']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}']['get']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}']['get']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}']['get']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Delete a receivable */
    deleteReceivablesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/receivables/{receivable_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/receivables/{receivable_id}']['delete']['parameters'], paths['/receivables/{receivable_id}']['delete']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Update a receivable */
    patchReceivablesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/receivables/{receivable_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}']['patch']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}']['patch']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}']['patch']['parameters'], paths['/receivables/{receivable_id}']['patch']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Accept a quote */
    postReceivablesIdAccept: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/accept';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/accept']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/accept']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/accept']['post']['parameters'], paths['/receivables/{receivable_id}/accept']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/accept']['post']['responses']['500']['content']['application/json']>;
    /** @summary Cancel an invoice */
    postReceivablesIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/receivables/{receivable_id}/cancel']['post']['parameters'], paths['/receivables/{receivable_id}/cancel']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /** @summary Clone a receivable */
    postReceivablesIdClone: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/clone';
        security: ['HTTPBearer'];
    }, undefined, paths['/receivables/{receivable_id}/clone']['post']['responses']['201']['content']['application/json'], paths['/receivables/{receivable_id}/clone']['post']['parameters'], paths['/receivables/{receivable_id}/clone']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/clone']['post']['responses']['500']['content']['application/json']>;
    /** @summary Decline a quote */
    postReceivablesIdDecline: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/decline';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/decline']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/decline']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/decline']['post']['parameters'], paths['/receivables/{receivable_id}/decline']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/decline']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a receivable's history
     * @description Returns the history of the specified accounts receivable document. The history contains all revisions of the document, status updates, and other events that occurred during the document's lifecycle. For more information, see [Document history](https://docs.monite.com/accounts-receivable/document-history).
     *
     * You can filter the history by the date range and event type. Events are sorted from oldest to newest by default.
     */
    getReceivablesIdHistory: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/{receivable_id}/history';
        security: ['HTTPBearer'];
    }, paths['/receivables/{receivable_id}/history']['get']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/history']['get']['parameters'], paths['/receivables/{receivable_id}/history']['get']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/history']['get']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/history']['get']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/history']['get']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/history']['get']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/history']['get']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/history']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a receivable's history record by ID
     * @description Returns a single record from the change history of the specified accounts receivable document.
     */
    getReceivablesIdHistoryId: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/{receivable_id}/history/{receivable_history_id}';
        security: ['HTTPBearer'];
    }, paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['parameters'], paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/history/{receivable_history_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Issue a receivable */
    postReceivablesIdIssue: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/issue';
        security: ['HTTPBearer'];
    }, undefined, paths['/receivables/{receivable_id}/issue']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/issue']['post']['parameters'], paths['/receivables/{receivable_id}/issue']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/issue']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update the line items of a receivable
     * @description Replace all line items of an existing invoice or quote with a new list of line items.
     */
    putReceivablesIdLineItems: ServiceOperationMutation<{
        method: 'put';
        url: '/receivables/{receivable_id}/line_items';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/line_items']['put']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/line_items']['put']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/line_items']['put']['parameters'], paths['/receivables/{receivable_id}/line_items']['put']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/line_items']['put']['responses']['500']['content']['application/json']>;
    /** @summary Get a list of all mails sent by receivable */
    getReceivablesIdMails: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/{receivable_id}/mails';
        security: ['HTTPBearer'];
    }, paths['/receivables/{receivable_id}/mails']['get']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/mails']['get']['parameters'], paths['/receivables/{receivable_id}/mails']['get']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/mails']['get']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/mails']['get']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/mails']['get']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/mails']['get']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/mails']['get']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/mails']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get a mail sent by receivable */
    getReceivablesIdMailsId: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/{receivable_id}/mails/{mail_id}';
        security: ['HTTPBearer'];
    }, paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['parameters'], paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/mails/{mail_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Mark an invoice as paid */
    postReceivablesIdMarkAsPaid: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/mark_as_paid';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/mark_as_paid']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/mark_as_paid']['post']['parameters'], paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_paid']['post']['responses']['500']['content']['application/json']>;
    /**
     * @deprecated
     * @summary Mark an invoice as partially paid
     * @description Deprecated. Use `POST /payment_records` to record an invoice payment.
     */
    postReceivablesIdMarkAsPartiallyPaid: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/mark_as_partially_paid';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['parameters'], paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_partially_paid']['post']['responses']['500']['content']['application/json']>;
    /** @summary Mark an invoice as uncollectible */
    postReceivablesIdMarkAsUncollectible: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/mark_as_uncollectible';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['parameters'], paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/mark_as_uncollectible']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a link to the PDF version of a receivable */
    getReceivablesIdPdfLink: ServiceOperationQuery<{
        method: 'get';
        url: '/receivables/{receivable_id}/pdf_link';
        security: ['HTTPBearer'];
    }, paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/pdf_link']['get']['parameters'], paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/pdf_link']['get']['responses']['500']['content']['application/json']>;
    /** @summary Preview a receivable's email message */
    postReceivablesIdPreview: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/preview';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/preview']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/preview']['post']['responses']['201']['content']['application/json'], paths['/receivables/{receivable_id}/preview']['post']['parameters'], paths['/receivables/{receivable_id}/preview']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/preview']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/preview']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/preview']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/preview']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/preview']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/preview']['post']['responses']['500']['content']['application/json']>;
    /** @summary Send a receivable via email */
    postReceivablesIdSend: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/send';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/send']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/send']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/send']['post']['parameters'], paths['/receivables/{receivable_id}/send']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/send']['post']['responses']['500']['content']['application/json']>;
    /** @summary Send a test reminder */
    postReceivablesIdSendTestReminder: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/send_test_reminder';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/receivables/{receivable_id}/send_test_reminder']['post']['requestBody']>['content']['application/json'], paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/send_test_reminder']['post']['parameters'], paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['409']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/send_test_reminder']['post']['responses']['500']['content']['application/json']>;
    /** @summary Verify a receivable */
    postReceivablesIdVerify: ServiceOperationMutation<{
        method: 'post';
        url: '/receivables/{receivable_id}/verify';
        security: ['HTTPBearer'];
    }, undefined, paths['/receivables/{receivable_id}/verify']['post']['responses']['200']['content']['application/json'], paths['/receivables/{receivable_id}/verify']['post']['parameters'], paths['/receivables/{receivable_id}/verify']['post']['responses']['400']['content']['application/json'] | paths['/receivables/{receivable_id}/verify']['post']['responses']['401']['content']['application/json'] | paths['/receivables/{receivable_id}/verify']['post']['responses']['403']['content']['application/json'] | paths['/receivables/{receivable_id}/verify']['post']['responses']['404']['content']['application/json'] | paths['/receivables/{receivable_id}/verify']['post']['responses']['405']['content']['application/json'] | paths['/receivables/{receivable_id}/verify']['post']['responses']['422']['content']['application/json'] | paths['/receivables/{receivable_id}/verify']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface RecurrencesService {
    /** @summary Get recurrences */
    getRecurrences: ServiceOperationQuery<{
        method: 'get';
        url: '/recurrences';
        security: ['HTTPBearer'];
    }, paths['/recurrences']['get']['responses']['200']['content']['application/json'], paths['/recurrences']['get']['parameters'], paths['/recurrences']['get']['responses']['400']['content']['application/json'] | paths['/recurrences']['get']['responses']['401']['content']['application/json'] | paths['/recurrences']['get']['responses']['403']['content']['application/json'] | paths['/recurrences']['get']['responses']['404']['content']['application/json'] | paths['/recurrences']['get']['responses']['405']['content']['application/json'] | paths['/recurrences']['get']['responses']['422']['content']['application/json'] | paths['/recurrences']['get']['responses']['500']['content']['application/json']>;
    /** @summary Create a recurrence */
    postRecurrences: ServiceOperationMutation<{
        method: 'post';
        url: '/recurrences';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/recurrences']['post']['requestBody']>['content']['application/json'], paths['/recurrences']['post']['responses']['200']['content']['application/json'], paths['/recurrences']['post']['parameters'], paths['/recurrences']['post']['responses']['400']['content']['application/json'] | paths['/recurrences']['post']['responses']['401']['content']['application/json'] | paths['/recurrences']['post']['responses']['403']['content']['application/json'] | paths['/recurrences']['post']['responses']['404']['content']['application/json'] | paths['/recurrences']['post']['responses']['405']['content']['application/json'] | paths['/recurrences']['post']['responses']['422']['content']['application/json'] | paths['/recurrences']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a recurrence by ID */
    getRecurrencesId: ServiceOperationQuery<{
        method: 'get';
        url: '/recurrences/{recurrence_id}';
        security: ['HTTPBearer'];
    }, paths['/recurrences/{recurrence_id}']['get']['responses']['200']['content']['application/json'], paths['/recurrences/{recurrence_id}']['get']['parameters'], paths['/recurrences/{recurrence_id}']['get']['responses']['400']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['get']['responses']['401']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['get']['responses']['403']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['get']['responses']['404']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['get']['responses']['405']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['get']['responses']['422']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update a recurrence */
    patchRecurrencesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/recurrences/{recurrence_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/recurrences/{recurrence_id}']['patch']['requestBody']>['content']['application/json'], paths['/recurrences/{recurrence_id}']['patch']['responses']['200']['content']['application/json'], paths['/recurrences/{recurrence_id}']['patch']['parameters'], paths['/recurrences/{recurrence_id}']['patch']['responses']['400']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['patch']['responses']['401']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['patch']['responses']['403']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['patch']['responses']['404']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['patch']['responses']['405']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['patch']['responses']['422']['content']['application/json'] | paths['/recurrences/{recurrence_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Cancel a recurrence */
    postRecurrencesIdCancel: ServiceOperationMutation<{
        method: 'post';
        url: '/recurrences/{recurrence_id}/cancel';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/recurrences/{recurrence_id}/cancel']['post']['parameters'], paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['400']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['401']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['403']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['404']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['405']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['409']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['422']['content']['application/json'] | paths['/recurrences/{recurrence_id}/cancel']['post']['responses']['500']['content']['application/json']>;
    /** @summary Pause a recurrence */
    postRecurrencesIdPause: ServiceOperationMutation<{
        method: 'post';
        url: '/recurrences/{recurrence_id}/pause';
        security: ['HTTPBearer'];
    }, undefined, paths['/recurrences/{recurrence_id}/pause']['post']['responses']['200']['content']['application/json'], paths['/recurrences/{recurrence_id}/pause']['post']['parameters'], paths['/recurrences/{recurrence_id}/pause']['post']['responses']['400']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['401']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['403']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['404']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['405']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['409']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['422']['content']['application/json'] | paths['/recurrences/{recurrence_id}/pause']['post']['responses']['500']['content']['application/json']>;
    /** @summary Resume a recurrence */
    postRecurrencesIdResume: ServiceOperationMutation<{
        method: 'post';
        url: '/recurrences/{recurrence_id}/resume';
        security: ['HTTPBearer'];
    }, undefined, paths['/recurrences/{recurrence_id}/resume']['post']['responses']['200']['content']['application/json'], paths['/recurrences/{recurrence_id}/resume']['post']['parameters'], paths['/recurrences/{recurrence_id}/resume']['post']['responses']['400']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['401']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['403']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['404']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['405']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['409']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['422']['content']['application/json'] | paths['/recurrences/{recurrence_id}/resume']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface RolesService {
    /**
     * @summary Create a role
     * @description Create a new role from the specified values.
     */
    postRoles: ServiceOperationMutation<{
        method: 'post';
        url: '/roles';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/roles']['post']['requestBody']>['content']['application/json'], paths['/roles']['post']['responses']['200']['content']['application/json'], paths['/roles']['post']['parameters'], paths['/roles']['post']['responses']['400']['content']['application/json'] | paths['/roles']['post']['responses']['405']['content']['application/json'] | paths['/roles']['post']['responses']['422']['content']['application/json'] | paths['/roles']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Search roles
     * @description Find all roles that match the search criteria.
     */
    getRoles: ServiceOperationQuery<{
        method: 'get';
        url: '/roles';
        security: ['HTTPBearer'];
    }, paths['/roles']['get']['responses']['200']['content']['application/json'], paths['/roles']['get']['parameters'], paths['/roles']['get']['responses']['400']['content']['application/json'] | paths['/roles']['get']['responses']['401']['content']['application/json'] | paths['/roles']['get']['responses']['403']['content']['application/json'] | paths['/roles']['get']['responses']['405']['content']['application/json'] | paths['/roles']['get']['responses']['406']['content']['application/json'] | paths['/roles']['get']['responses']['422']['content']['application/json'] | paths['/roles']['get']['responses']['500']['content']['application/json']>;
    /** @summary Get a role by ID */
    getRolesId: ServiceOperationQuery<{
        method: 'get';
        url: '/roles/{role_id}';
        security: ['HTTPBearer'];
    }, paths['/roles/{role_id}']['get']['responses']['200']['content']['application/json'], paths['/roles/{role_id}']['get']['parameters'], paths['/roles/{role_id}']['get']['responses']['400']['content']['application/json'] | paths['/roles/{role_id}']['get']['responses']['405']['content']['application/json'] | paths['/roles/{role_id}']['get']['responses']['422']['content']['application/json'] | paths['/roles/{role_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a role
     * @description Change the specified fields with the provided values.
     */
    patchRolesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/roles/{role_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/roles/{role_id}']['patch']['requestBody']>['content']['application/json'], paths['/roles/{role_id}']['patch']['responses']['200']['content']['application/json'], paths['/roles/{role_id}']['patch']['parameters'], paths['/roles/{role_id}']['patch']['responses']['400']['content']['application/json'] | paths['/roles/{role_id}']['patch']['responses']['405']['content']['application/json'] | paths['/roles/{role_id}']['patch']['responses']['422']['content']['application/json'] | paths['/roles/{role_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a role
     * @description Delete a role with the specified ID. The role being deleted must not be in use by any entity users, otherwise a 409 error is returned. To check if there are entity users that have this role, call `GET /entity_users?role_id=ROLE_ID`.
     */
    deleteRolesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/roles/{role_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/roles/{role_id}']['delete']['parameters'], paths['/roles/{role_id}']['delete']['responses']['400']['content']['application/json'] | paths['/roles/{role_id}']['delete']['responses']['404']['content']['application/json'] | paths['/roles/{role_id}']['delete']['responses']['405']['content']['application/json'] | paths['/roles/{role_id}']['delete']['responses']['409']['content']['application/json'] | paths['/roles/{role_id}']['delete']['responses']['422']['content']['application/json'] | paths['/roles/{role_id}']['delete']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface SettingsService {
    /**
     * @summary Update partner settings
     * @description Change the specified fields with the provided values.
     */
    patchSettings: ServiceOperationMutation<{
        method: 'patch';
        url: '/settings';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/settings']['patch']['requestBody']>['content']['application/json'], paths['/settings']['patch']['responses']['200']['content']['application/json'], paths['/settings']['patch']['parameters'], paths['/settings']['patch']['responses']['400']['content']['application/json'] | paths['/settings']['patch']['responses']['405']['content']['application/json'] | paths['/settings']['patch']['responses']['422']['content']['application/json'] | paths['/settings']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get partner settings
     * @description Retrieve all settings for this partner.
     */
    getSettings: ServiceOperationQuery<{
        method: 'get';
        url: '/settings';
        security: ['HTTPBearer'];
    }, paths['/settings']['get']['responses']['200']['content']['application/json'], paths['/settings']['get']['parameters'], paths['/settings']['get']['responses']['400']['content']['application/json'] | paths['/settings']['get']['responses']['405']['content']['application/json'] | paths['/settings']['get']['responses']['422']['content']['application/json'] | paths['/settings']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface TagsService {
    /**
     * @summary Get tags
     * @description Get a list of all tags. Tags can be assigned to resources to assist with searching and filtering.
     *     Tags can also be used as trigger conditions in payable approval policies.
     */
    getTags: ServiceOperationQuery<{
        method: 'get';
        url: '/tags';
        security: ['HTTPBearer'];
    }, paths['/tags']['get']['responses']['200']['content']['application/json'], paths['/tags']['get']['parameters'], paths['/tags']['get']['responses']['400']['content']['application/json'] | paths['/tags']['get']['responses']['401']['content']['application/json'] | paths['/tags']['get']['responses']['403']['content']['application/json'] | paths['/tags']['get']['responses']['405']['content']['application/json'] | paths['/tags']['get']['responses']['406']['content']['application/json'] | paths['/tags']['get']['responses']['422']['content']['application/json'] | paths['/tags']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a tag
     * @description Create a new tag. The tag name must be unique.
     *     Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
     *
     *
     * The response returns an auto-generated ID assigned to this tag.
     * To assign this tag to a resource, send the tag ID in the `tag_ids` list when creating or updating a resource.
     */
    postTags: ServiceOperationMutation<{
        method: 'post';
        url: '/tags';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/tags']['post']['requestBody']>['content']['application/json'], paths['/tags']['post']['responses']['201']['content']['application/json'], paths['/tags']['post']['parameters'], paths['/tags']['post']['responses']['400']['content']['application/json'] | paths['/tags']['post']['responses']['401']['content']['application/json'] | paths['/tags']['post']['responses']['403']['content']['application/json'] | paths['/tags']['post']['responses']['404']['content']['application/json'] | paths['/tags']['post']['responses']['405']['content']['application/json'] | paths['/tags']['post']['responses']['406']['content']['application/json'] | paths['/tags']['post']['responses']['422']['content']['application/json'] | paths['/tags']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a tag by ID
     * @description Get information about a tag with the given ID.
     */
    getTagsId: ServiceOperationQuery<{
        method: 'get';
        url: '/tags/{tag_id}';
        security: ['HTTPBearer'];
    }, paths['/tags/{tag_id}']['get']['responses']['200']['content']['application/json'], paths['/tags/{tag_id}']['get']['parameters'], paths['/tags/{tag_id}']['get']['responses']['400']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['401']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['403']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['404']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['405']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['406']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['422']['content']['application/json'] | paths['/tags/{tag_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a tag
     * @description Delete a tag with the given ID. This tag will be automatically deleted from all resources where it was used.
     */
    deleteTagsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/tags/{tag_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/tags/{tag_id}']['delete']['parameters'], paths['/tags/{tag_id}']['delete']['responses']['400']['content']['application/json'] | paths['/tags/{tag_id}']['delete']['responses']['403']['content']['application/json'] | paths['/tags/{tag_id}']['delete']['responses']['404']['content']['application/json'] | paths['/tags/{tag_id}']['delete']['responses']['405']['content']['application/json'] | paths['/tags/{tag_id}']['delete']['responses']['406']['content']['application/json'] | paths['/tags/{tag_id}']['delete']['responses']['422']['content']['application/json'] | paths['/tags/{tag_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a tag
     * @description Change the tag name. The new name must be unique among existing tags.
     *     Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
     */
    patchTagsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/tags/{tag_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/tags/{tag_id}']['patch']['requestBody']>['content']['application/json'], paths['/tags/{tag_id}']['patch']['responses']['200']['content']['application/json'], paths['/tags/{tag_id}']['patch']['parameters'], paths['/tags/{tag_id}']['patch']['responses']['400']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['401']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['403']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['404']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['405']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['406']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['422']['content']['application/json'] | paths['/tags/{tag_id}']['patch']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface TextTemplatesService {
    /**
     * @summary Get text templates
     * @description Get text templates
     */
    getTextTemplates: ServiceOperationQuery<{
        method: 'get';
        url: '/text_templates';
        security: ['HTTPBearer'];
    }, paths['/text_templates']['get']['responses']['200']['content']['application/json'], paths['/text_templates']['get']['parameters'], paths['/text_templates']['get']['responses']['405']['content']['application/json'] | paths['/text_templates']['get']['responses']['422']['content']['application/json'] | paths['/text_templates']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Create a text template
     * @description Create a text template
     */
    postTextTemplates: ServiceOperationMutation<{
        method: 'post';
        url: '/text_templates';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/text_templates']['post']['requestBody']>['content']['application/json'], paths['/text_templates']['post']['responses']['201']['content']['application/json'], paths['/text_templates']['post']['parameters'], paths['/text_templates']['post']['responses']['405']['content']['application/json'] | paths['/text_templates']['post']['responses']['422']['content']['application/json'] | paths['/text_templates']['post']['responses']['500']['content']['application/json']>;
    /**
     * @summary Get a text template by ID
     * @description Get all custom contents
     */
    getTextTemplatesId: ServiceOperationQuery<{
        method: 'get';
        url: '/text_templates/{text_template_id}';
        security: ['HTTPBearer'];
    }, paths['/text_templates/{text_template_id}']['get']['responses']['200']['content']['application/json'], paths['/text_templates/{text_template_id}']['get']['parameters'], paths['/text_templates/{text_template_id}']['get']['responses']['405']['content']['application/json'] | paths['/text_templates/{text_template_id}']['get']['responses']['422']['content']['application/json'] | paths['/text_templates/{text_template_id}']['get']['responses']['500']['content']['application/json']>;
    /**
     * @summary Delete a text template
     * @description Delete custom content by ID
     */
    deleteTextTemplatesId: ServiceOperationMutation<{
        method: 'delete';
        url: '/text_templates/{text_template_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/text_templates/{text_template_id}']['delete']['parameters'], paths['/text_templates/{text_template_id}']['delete']['responses']['405']['content']['application/json'] | paths['/text_templates/{text_template_id}']['delete']['responses']['422']['content']['application/json'] | paths['/text_templates/{text_template_id}']['delete']['responses']['500']['content']['application/json']>;
    /**
     * @summary Update a text template by ID
     * @description Update custom content by ID
     */
    patchTextTemplatesId: ServiceOperationMutation<{
        method: 'patch';
        url: '/text_templates/{text_template_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/text_templates/{text_template_id}']['patch']['requestBody']>['content']['application/json'], paths['/text_templates/{text_template_id}']['patch']['responses']['200']['content']['application/json'], paths['/text_templates/{text_template_id}']['patch']['parameters'], paths['/text_templates/{text_template_id}']['patch']['responses']['405']['content']['application/json'] | paths['/text_templates/{text_template_id}']['patch']['responses']['422']['content']['application/json'] | paths['/text_templates/{text_template_id}']['patch']['responses']['500']['content']['application/json']>;
    /**
     * @summary Make a text template default
     * @description Make text template default
     */
    postTextTemplatesIdMakeDefault: ServiceOperationMutation<{
        method: 'post';
        url: '/text_templates/{text_template_id}/make_default';
        security: ['HTTPBearer'];
    }, undefined, paths['/text_templates/{text_template_id}/make_default']['post']['responses']['200']['content']['application/json'], paths['/text_templates/{text_template_id}/make_default']['post']['parameters'], paths['/text_templates/{text_template_id}/make_default']['post']['responses']['405']['content']['application/json'] | paths['/text_templates/{text_template_id}/make_default']['post']['responses']['422']['content']['application/json'] | paths['/text_templates/{text_template_id}/make_default']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface VatRatesService {
    /** @summary Get VAT rates */
    getVatRates: ServiceOperationQuery<{
        method: 'get';
        url: '/vat_rates';
        security: ['HTTPBearer'];
    }, paths['/vat_rates']['get']['responses']['200']['content']['application/json'], paths['/vat_rates']['get']['parameters'], paths['/vat_rates']['get']['responses']['400']['content']['application/json'] | paths['/vat_rates']['get']['responses']['401']['content']['application/json'] | paths['/vat_rates']['get']['responses']['403']['content']['application/json'] | paths['/vat_rates']['get']['responses']['404']['content']['application/json'] | paths['/vat_rates']['get']['responses']['405']['content']['application/json'] | paths['/vat_rates']['get']['responses']['422']['content']['application/json'] | paths['/vat_rates']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface WebhookDeliveriesService {
    /**
     * @summary Get the webhook delivery log
     * @description Returns an aggregated log of webhook delivery attempts. The data contains a list of triggered webhook events, how many times Monite tried to send each event to your server, the last HTTP status code returned by your webhook listener endpoint, and whether the final attempt to deliver that event was successful.
     *
     * We guarantee access to webhook delivery data only from the last three months. Earlier data may be unavailable.
     *
     * Note that if the same event type is included in multiple webhook subscriptions, the results will include several entries for each occurrence of this event - one entry per subscription.
     */
    getWebhookDeliveries: ServiceOperationQuery<{
        method: 'get';
        url: '/webhook_deliveries';
        security: ['HTTPBearer'];
    }, paths['/webhook_deliveries']['get']['responses']['200']['content']['application/json'], paths['/webhook_deliveries']['get']['parameters'], paths['/webhook_deliveries']['get']['responses']['405']['content']['application/json'] | paths['/webhook_deliveries']['get']['responses']['422']['content']['application/json'] | paths['/webhook_deliveries']['get']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

interface WebhookSubscriptionsService {
    /** @summary Get webhook subscriptions */
    getWebhookSubscriptions: ServiceOperationQuery<{
        method: 'get';
        url: '/webhook_subscriptions';
        security: ['HTTPBearer'];
    }, paths['/webhook_subscriptions']['get']['responses']['200']['content']['application/json'], paths['/webhook_subscriptions']['get']['parameters'], paths['/webhook_subscriptions']['get']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions']['get']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions']['get']['responses']['500']['content']['application/json']>;
    /** @summary Subscribe to a webhook */
    postWebhookSubscriptions: ServiceOperationMutation<{
        method: 'post';
        url: '/webhook_subscriptions';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/webhook_subscriptions']['post']['requestBody']>['content']['application/json'], paths['/webhook_subscriptions']['post']['responses']['201']['content']['application/json'], paths['/webhook_subscriptions']['post']['parameters'], paths['/webhook_subscriptions']['post']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions']['post']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions']['post']['responses']['500']['content']['application/json']>;
    /** @summary Get a webhook subscription */
    getWebhookSubscriptionsId: ServiceOperationQuery<{
        method: 'get';
        url: '/webhook_subscriptions/{webhook_subscription_id}';
        security: ['HTTPBearer'];
    }, paths['/webhook_subscriptions/{webhook_subscription_id}']['get']['responses']['200']['content']['application/json'], paths['/webhook_subscriptions/{webhook_subscription_id}']['get']['parameters'], paths['/webhook_subscriptions/{webhook_subscription_id}']['get']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}']['get']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}']['get']['responses']['500']['content']['application/json']>;
    /** @summary Update a webhook subscription */
    patchWebhookSubscriptionsId: ServiceOperationMutation<{
        method: 'patch';
        url: '/webhook_subscriptions/{webhook_subscription_id}';
        mediaType: 'application/json';
        security: ['HTTPBearer'];
    }, NonNullable<paths['/webhook_subscriptions/{webhook_subscription_id}']['patch']['requestBody']>['content']['application/json'], paths['/webhook_subscriptions/{webhook_subscription_id}']['patch']['responses']['200']['content']['application/json'], paths['/webhook_subscriptions/{webhook_subscription_id}']['patch']['parameters'], paths['/webhook_subscriptions/{webhook_subscription_id}']['patch']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}']['patch']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}']['patch']['responses']['500']['content']['application/json']>;
    /** @summary Delete a webhook subscription */
    deleteWebhookSubscriptionsId: ServiceOperationMutation<{
        method: 'delete';
        url: '/webhook_subscriptions/{webhook_subscription_id}';
        security: ['HTTPBearer'];
    }, undefined, unknown, paths['/webhook_subscriptions/{webhook_subscription_id}']['delete']['parameters'], paths['/webhook_subscriptions/{webhook_subscription_id}']['delete']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}']['delete']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}']['delete']['responses']['500']['content']['application/json']>;
    /** @summary Disable a webhook subscription */
    postWebhookSubscriptionsIdDisable: ServiceOperationMutation<{
        method: 'post';
        url: '/webhook_subscriptions/{webhook_subscription_id}/disable';
        security: ['HTTPBearer'];
    }, undefined, paths['/webhook_subscriptions/{webhook_subscription_id}/disable']['post']['responses']['200']['content']['application/json'], paths['/webhook_subscriptions/{webhook_subscription_id}/disable']['post']['parameters'], paths['/webhook_subscriptions/{webhook_subscription_id}/disable']['post']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}/disable']['post']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}/disable']['post']['responses']['500']['content']['application/json']>;
    /** @summary Enable a webhook subscription */
    postWebhookSubscriptionsIdEnable: ServiceOperationMutation<{
        method: 'post';
        url: '/webhook_subscriptions/{webhook_subscription_id}/enable';
        security: ['HTTPBearer'];
    }, undefined, paths['/webhook_subscriptions/{webhook_subscription_id}/enable']['post']['responses']['200']['content']['application/json'], paths['/webhook_subscriptions/{webhook_subscription_id}/enable']['post']['parameters'], paths['/webhook_subscriptions/{webhook_subscription_id}/enable']['post']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}/enable']['post']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}/enable']['post']['responses']['500']['content']['application/json']>;
    /** @summary Regenerate a webhook secret and return the new webhook subscription */
    postWebhookSubscriptionsIdRegenerateSecret: ServiceOperationMutation<{
        method: 'post';
        url: '/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret';
        security: ['HTTPBearer'];
    }, undefined, paths['/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret']['post']['responses']['200']['content']['application/json'], paths['/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret']['post']['parameters'], paths['/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret']['post']['responses']['405']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret']['post']['responses']['422']['content']['application/json'] | paths['/webhook_subscriptions/{webhook_subscription_id}/regenerate_secret']['post']['responses']['500']['content']['application/json']>;
}

/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

type Services = {
    accounting: AccountingService;
    accountingConnections: AccountingConnectionsService;
    accountingSyncedRecords: AccountingSyncedRecordsService;
    accountingTaxRates: AccountingTaxRatesService;
    ai: AiService;
    analytics: AnalyticsService;
    approvalPolicies: ApprovalPoliciesService;
    approvalRequests: ApprovalRequestsService;
    auth: AuthService;
    bankAccounts: BankAccountsService;
    batchPayments: BatchPaymentsService;
    comments: CommentsService;
    counterparts: CounterpartsService;
    customVatRates: CustomVatRatesService;
    dataExports: DataExportsService;
    deliveryNotes: DeliveryNotesService;
    documentTemplates: DocumentTemplatesService;
    einvoiceSearch: EinvoiceSearchService;
    einvoicingConnections: EinvoicingConnectionsService;
    entities: EntitiesService;
    entityUsers: EntityUsersService;
    events: EventsService;
    files: FilesService;
    financingInvoices: FinancingInvoicesService;
    financingOffers: FinancingOffersService;
    financingTokens: FinancingTokensService;
    frontend: FrontendService;
    internal: InternalService;
    ledgerAccounts: LedgerAccountsService;
    mailTemplates: MailTemplatesService;
    mailboxDomains: MailboxDomainsService;
    mailboxes: MailboxesService;
    measureUnits: MeasureUnitsService;
    ocrTasks: OcrTasksService;
    onboardingDocuments: OnboardingDocumentsService;
    onboardingLinks: OnboardingLinksService;
    onboardingRequirements: OnboardingRequirementsService;
    overdueReminders: OverdueRemindersService;
    payableCreditNotes: PayableCreditNotesService;
    payablePurchaseOrders: PayablePurchaseOrdersService;
    payables: PayablesService;
    paymentIntents: PaymentIntentsService;
    paymentLinks: PaymentLinksService;
    paymentOnboardingLinks: PaymentOnboardingLinksService;
    paymentRecords: PaymentRecordsService;
    paymentReminders: PaymentRemindersService;
    paymentTerms: PaymentTermsService;
    persons: PersonsService;
    products: ProductsService;
    projects: ProjectsService;
    receipts: ReceiptsService;
    receivables: ReceivablesService;
    recurrences: RecurrencesService;
    roles: RolesService;
    settings: SettingsService;
    tags: TagsService;
    textTemplates: TextTemplatesService;
    vatRates: VatRatesService;
    webhookDeliveries: WebhookDeliveriesService;
    webhookSubscriptions: WebhookSubscriptionsService;
};

declare const FILTER_TYPE_SEARCH$4 = "search";
declare const FILTER_TYPE_TYPE$1 = "type";
declare const FILTER_TYPE_IS_CUSTOMER = "is_customer";

type Filters$1 = {
    [FILTER_TYPE_SEARCH$4]?: string | null;
    [FILTER_TYPE_TYPE$1]?: components['schemas']['CounterpartType'] | null;
    [FILTER_TYPE_IS_CUSTOMER]?: string | null;
};
type FilterValue$4 = components['schemas']['PayableStateEnum'] | 'all' | Date | string | null;

declare const AllowedCountries$1: ("AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "IC" | "CV" | "KY" | "CF" | "EA" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "SZ" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KP" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "AN" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "MK" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "SH" | "KN" | "LC" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SK" | "SI" | "SB" | "SO" | "ZA" | "SS" | "GS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "US" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW" | "BL" | "BQ" | "CW" | "MF" | "SX")[];

/**
 * Default values for the form fields
 */
type CounterpartDefaultValues = {
    isVendor?: boolean;
    isCustomer?: boolean;
};
type CounterpartShowCategories = {
    /**
     * Show or hide `categories` section.
     * (
     *  `categories` section responsible for checks `isVendor` and `isCustomer`
     *  )
     *  Defaults to `true`.
     */
    showCategories: boolean;
};
interface BaseCounterpartOCR {
    email: string;
    phone?: string;
    isCustomer: boolean;
    isVendor: boolean;
    line1: string;
    line2: string;
    city: string;
    state: string;
    postalCode: string;
    country?: keyof typeof AllowedCountries$1;
}
interface DefaultValuesOCR<T extends BaseCounterpartOCR> {
    tax_id: string;
    counterpart: T;
}
type DefaultValuesOCRIndividual = DefaultValuesOCR<BaseCounterpartOCR & {
    firstName?: string;
    lastName?: string;
}>;
type DefaultValuesOCROrganization = DefaultValuesOCR<BaseCounterpartOCR & {
    companyName: string;
}>;
/**
 * Represents the type of a counterpart in the system.
 */
type CustomerType = 'customer' | 'vendor';
/**
 * Array of available customer types, an array that should contain either customer, vendor, or both.
 * This array can't be empty and if only one option is passed, the customer type section will be hidden
 * and the default customer type will be the one passed.
 * It is set to undefined at component level but defaults to ['customer', 'vendor'] through componentSettings
 */
type CustomerTypes = CustomerType[];

interface CounterpartGridSortModel {
    field: components['schemas']['CounterpartCursorFields'];
    sort: NonNullable<GridSortDirection>;
}
/**
 * Props for the CounterpartsTable component.
 */
type CounterpartsTableProps = Partial<CounterpartShowCategories> & {
    /**
     * Callback function that is called when a row is clicked.
     * @param id - The ID of the clicked counterpart.
     */
    onRowClick?: (id: string) => void;
    /**
     * Callback function that is called when the sort order is changed.
     * @param params - An object containing the sort field and the sort order.
     * @param params.field - The field to sort by.
     * @param params.sort - The sort order (either ascending, descending, or null).
     */
    onChangeSort?: (params: CounterpartGridSortModel) => void;
    /**
     * Callback function that is called when the filter is changed.
     * @param filter - An object containing the filter field and value.
     * @param filter.field - The field to filter by.
     * @param filter.value - The value to filter with.
     */
    onChangeFilter?: (filter: {
        field: keyof Filters$1;
        value: FilterValue$4;
    }) => void;
    openModal?: (open: boolean) => void;
};
declare const CounterpartsTable: (props: CounterpartsTableProps) => _emotion_react_jsx_runtime.JSX.Element;

type CounterpartsFormProps = {
    /**
     * If `id` provided, then counterparts form works in `update` mode.
     * If `id` is NOT provided, then counterparts form works in `create` mode
     */
    id?: string;
    isInvoiceCreation?: boolean;
    onCancel?: () => void;
    onClose?: () => void;
    onCreate?: (id: string) => void;
    onUpdate?: (id: string) => void;
    onReturn?: () => void;
    /**
     * Default values for the form fields
     */
    defaultValues?: CounterpartDefaultValues;
    payableCounterpartRawData?: components['schemas']['CounterpartRawData'];
} & CounterpartShowCategories;

type CounterpartId = string;
type BankAccountId = string;
type VatId = string;
/**
 * `ExistingCounterpartDetail` is used when we have an `id`
 *  for existing counterpart and want to display it
 *  for editing or removing
 */
interface ExistingCounterpartDetail extends CommonCounterpartDetailsProps {
    id: CounterpartId;
    type?: undefined;
    defaultValuesOCR?: DefaultValuesOCRIndividual | DefaultValuesOCROrganization;
    payableCounterpartRawData?: components['schemas']['CounterpartRawData'];
}
/**
 * `NewCounterpartDetail` is used when we DO NOT have an `id`
 *  and want to create a new counterpart. But we must provide
 *  a `type` field
 */
interface NewCounterpartDetail extends CommonCounterpartDetailsProps, Pick<CounterpartsFormProps, 'defaultValues'> {
    id?: undefined;
    type: components['schemas']['CounterpartType'];
    onCreate?: (id: string) => void;
    defaultValuesOCR?: DefaultValuesOCRIndividual | DefaultValuesOCROrganization;
    payableCounterpartRawData?: components['schemas']['CounterpartRawData'];
}
interface CommonCounterpartDetailsProps extends Partial<CounterpartShowCategories> {
    /** Should bank accounts data be displayed. By default, set to `true` */
    showBankAccounts?: boolean;
    /**
     * Triggers only when the user updated address information
     *  successfully (it's saved on back-end side with no errors)
     */
    onAddressUpdate?: (id: CounterpartId) => void;
    /**
     * Triggers when the user filled and submitted
     *  new counterpart information
     *  and Monite saved the data on back-end side
     */
    onCreate?: (id: CounterpartId) => void;
    /**
     * Triggers when the user updated and submitted
     *  counterpart information
     *  and Monite saved the data on back-end side
     */
    onUpdate?: (id: CounterpartId) => void;
    /**
     * Triggers when we click on `delete` button,
     *  and we saved these the data on back-end side
     */
    onDelete?: (id: CounterpartId) => void;
    onClose?: () => void;
    onContactCreate?: (id: CounterpartId) => void;
    onContactUpdate?: (id: CounterpartId) => void;
    onContactDelete?: (id: CounterpartId) => void;
    onBankCreate?: (id: BankAccountId) => void;
    onBankUpdate?: (id: BankAccountId) => void;
    onBankDelete?: (id: BankAccountId) => void;
    onVatCreate?: (id: VatId) => void;
    onVatUpdate?: (id: VatId) => void;
    onVatDelete?: (id: VatId) => void;
    onReturn?: () => void;
}
type CounterpartsDetailsProps = {
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
    isInvoiceCreation?: boolean;
    onReturn?: () => void;
} & (ExistingCounterpartDetail | NewCounterpartDetail);

declare const CounterpartDetails: (props: CounterpartsDetailsProps) => _emotion_react_jsx_runtime.JSX.Element;

type CounterPartProps = {
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
};
declare const Counterparts: (props: CounterPartProps) => _emotion_react_jsx_runtime.JSX.Element;

interface CounterpartsAutocompleteOptionProps {
    id: string;
    label: string;
}
interface CounterpartAutocompleteProps<TFieldValues extends FieldValues> {
    control: Control<TFieldValues>;
    name: FieldPath<TFieldValues>;
    label: string;
    disabled?: boolean;
    required?: boolean;
    getCounterpartDefaultValues?: (type?: string) => DefaultValuesOCRIndividual | DefaultValuesOCROrganization;
    multiple?: boolean;
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
    counterpartRawName?: string;
    counterpartMatchingToOCR?: components['schemas']['CounterpartResponse'];
    counterpartAISuggested?: components['schemas']['CounterpartResponse'];
    setShowEditCounterpartDialog?: (value: SetStateAction<boolean>) => void;
    showEditCounterpartButton?: boolean;
}
declare const CounterpartAutocomplete: <TFieldValues extends FieldValues>({ control, name, label, required, getCounterpartDefaultValues, multiple, disabled, customerTypes, counterpartRawName, counterpartMatchingToOCR, counterpartAISuggested, setShowEditCounterpartDialog, showEditCounterpartButton, }: CounterpartAutocompleteProps<TFieldValues>) => _emotion_react_jsx_runtime.JSX.Element;

type CounterpartResponse = components['schemas']['CounterpartIndividualRootResponse'] | components['schemas']['CounterpartOrganizationRootResponse'];
declare const useCounterpartAddresses: (counterpartId?: string) => _tanstack_react_query.UseQueryResult<{
    data: components["schemas"]["CounterpartAddressResponseWithCounterpartID"][];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useUpdateCounterpartAddress: ({ counterpartId, addressId, }: {
    addressId: string;
    counterpartId: string;
}) => _tanstack_react_query.UseMutationResult<{
    id: string;
    city: string;
    counterpart_id: string;
    country: components["schemas"]["AllowedCountries"];
    line1: string;
    line2?: string;
    postal_code: string;
    state?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, void | {
    city?: string;
    country?: components["schemas"]["AllowedCountries"];
    line1?: string;
    line2?: string;
    postal_code?: string;
    state?: string;
}, unknown>;
declare const useCreateCounterpartBank: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    account_holder_name?: string;
    account_number?: string;
    bic?: string;
    counterpart_id: string;
    country: components["schemas"]["AllowedCountries"];
    currency: components["schemas"]["CurrencyEnum"];
    iban?: string;
    is_default_for_currency: boolean;
    name?: string;
    partner_metadata?: Record<string, never>;
    routing_number?: string;
    sort_code?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body: {
        account_holder_name?: string;
        account_number?: string;
        bic?: string;
        country: components["schemas"]["AllowedCountries"];
        currency: components["schemas"]["CurrencyEnum"];
        iban?: string;
        is_default_for_currency: boolean;
        name?: string;
        partner_metadata?: Record<string, never>;
        routing_number?: string;
        sort_code?: string;
    };
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useCounterpartBankById: (counterpartId: string, bankId?: string) => _tanstack_react_query.UseQueryResult<{
    id: string;
    account_holder_name?: string;
    account_number?: string;
    bic?: string;
    counterpart_id: string;
    country: components["schemas"]["AllowedCountries"];
    currency: components["schemas"]["CurrencyEnum"];
    iban?: string;
    is_default_for_currency: boolean;
    name?: string;
    partner_metadata?: Record<string, never>;
    routing_number?: string;
    sort_code?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useUpdateCounterpartBank: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    account_holder_name?: string;
    account_number?: string;
    bic?: string;
    counterpart_id: string;
    country: components["schemas"]["AllowedCountries"];
    currency: components["schemas"]["CurrencyEnum"];
    iban?: string;
    is_default_for_currency: boolean;
    name?: string;
    partner_metadata?: Record<string, never>;
    routing_number?: string;
    sort_code?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: {
        account_holder_name?: string;
        account_number?: string;
        bic?: string;
        country?: components["schemas"]["AllowedCountries"];
        currency?: components["schemas"]["CurrencyEnum"];
        iban?: string;
        name?: string;
        partner_metadata?: Record<string, never>;
        routing_number?: string;
        sort_code?: string;
    } | undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        bank_account_id: string;
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useDeleteCounterpartBank: (counterpartId: string) => _tanstack_react_query.UseMutationResult<unknown, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        bank_account_id: string;
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useCounterpartVatList: (counterpartId?: string) => _tanstack_react_query.UseQueryResult<{
    data: components["schemas"]["CounterpartVatIDResponse"][];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useCreateCounterpartVat: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    counterpart_id: string;
    country?: components["schemas"]["AllowedCountries"];
    type: components["schemas"]["VatIDTypeEnum"];
    value: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body: {
        country?: components["schemas"]["AllowedCountries"];
        type: components["schemas"]["VatIDTypeEnum"];
        value: string;
    };
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useCounterpartVatById: (counterpartId: string, vatId?: string) => _tanstack_react_query.UseQueryResult<{
    id: string;
    counterpart_id: string;
    country?: components["schemas"]["AllowedCountries"];
    type: components["schemas"]["VatIDTypeEnum"];
    value: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useUpdateCounterpartVat: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    counterpart_id: string;
    country?: components["schemas"]["AllowedCountries"];
    type: components["schemas"]["VatIDTypeEnum"];
    value: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: {
        country?: components["schemas"]["AllowedCountries"];
        type?: components["schemas"]["VatIDTypeEnum"];
        value?: string;
    } | undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        vat_id: string;
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useDeleteCounterpartVat: (counterpartId: string) => _tanstack_react_query.UseMutationResult<unknown, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        vat_id: string;
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
interface GenericCounterpartContact {
    id: string;
    counterpart_id: string;
    /**
     * @description Is default contact person
     */
    is_default?: boolean;
    /** @description The address of a contact person. */
    address?: components['schemas']['CounterpartAddress'];
    /**
     * Format: email
     * @description The email address of a contact person.
     * @example contact@example.org
     */
    email?: string;
    /**
     * @description The person's first name.
     * @example Adnan
     */
    first_name: string;
    /** @description Indicates if the counterpart is a customer. */
    is_customer: boolean;
    /** @description Indicates if the counterpart is a vendor. */
    is_vendor: boolean;
    /**
     * @description The person's last name.
     * @example Singh
     */
    last_name: string;
    /**
     * @description The person's phone number.
     * @example 5553211234
     */
    phone?: string;
    /**
     * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
     * @example Mr.
     */
    title?: string;
}
declare const useCounterpartContactList: (counterpartId: string | undefined) => {
    data?: GenericCounterpartContact[];
    error?: Error | {
        error: {
            message: string;
        };
    } | {
        detail?: {
            loc: (string | number)[];
            msg: string;
            type: string;
        }[] | undefined;
    } | null;
    isLoading: boolean;
};
declare const useCreateCounterpartContact: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    address: components["schemas"]["CounterpartAddress"];
    counterpart_id: string;
    email?: string;
    first_name: string;
    is_default: boolean;
    last_name: string;
    phone?: string;
    title?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body: {
        address: components["schemas"]["CounterpartAddress"];
        email?: string;
        first_name: string;
        last_name: string;
        phone?: string;
        title?: string;
    };
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useCounterpartContactById: (counterpartId: string, contactId?: string) => _tanstack_react_query.UseQueryResult<{
    id: string;
    address: components["schemas"]["CounterpartAddress"];
    counterpart_id: string;
    email?: string;
    first_name: string;
    is_default: boolean;
    last_name: string;
    phone?: string;
    title?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useUpdateCounterpartContact: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    address: components["schemas"]["CounterpartAddress"];
    counterpart_id: string;
    email?: string;
    first_name: string;
    is_default: boolean;
    last_name: string;
    phone?: string;
    title?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: {
        address?: components["schemas"]["CounterpartAddress"];
        email?: string;
        first_name?: string;
        last_name?: string;
        phone?: string;
        title?: string;
    } | undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        contact_id: string;
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useDeleteCounterpartContact: () => _tanstack_react_query.UseMutationResult<unknown, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        contact_id: string;
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useCounterpartList: (parameters?: Services["counterparts"]["getCounterparts"]["types"]["parameters"]) => _tanstack_react_query.UseQueryResult<{
    data: components["schemas"]["CounterpartResponse"][];
    next_pagination_token?: string;
    prev_pagination_token?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useCreateCounterpart: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    created_at: string;
    updated_at: string;
    created_automatically: boolean;
    created_by_entity_user_id?: string;
    default_billing_address_id?: string;
    default_shipping_address_id?: string;
    external_reference?: string;
    individual: components["schemas"]["CounterpartIndividualResponse"];
    language?: components["schemas"]["LanguageCodeEnum"];
    reminders_enabled?: boolean;
    tax_id?: string;
    type: components["schemas"]["CounterpartType"];
} | {
    id: string;
    created_at: string;
    updated_at: string;
    created_automatically: boolean;
    created_by_entity_user_id?: string;
    default_billing_address_id?: string;
    default_shipping_address_id?: string;
    external_reference?: string;
    language?: components["schemas"]["LanguageCodeEnum"];
    organization: components["schemas"]["CounterpartOrganizationResponse"];
    reminders_enabled?: boolean;
    tax_id?: string;
    type: components["schemas"]["CounterpartType"];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    external_reference?: string;
    language: components["schemas"]["LanguageCodeEnum"];
    organization: components["schemas"]["CounterpartOrganizationCreatePayload"];
    reminders_enabled: boolean;
    tax_id?: string;
    type: "organization";
} | {
    external_reference?: string;
    individual: components["schemas"]["CounterpartIndividualCreatePayload"];
    language: components["schemas"]["LanguageCodeEnum"];
    reminders_enabled: boolean;
    tax_id?: string;
    type: "individual";
}, unknown>;
declare const useCounterpartById: (id?: string) => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    created_automatically: boolean;
    created_by_entity_user_id?: string;
    default_billing_address_id?: string;
    default_shipping_address_id?: string;
    external_reference?: string;
    individual: components["schemas"]["CounterpartIndividualResponse"];
    language?: components["schemas"]["LanguageCodeEnum"];
    reminders_enabled?: boolean;
    tax_id?: string;
    type: components["schemas"]["CounterpartType"];
} | {
    id: string;
    created_at: string;
    updated_at: string;
    created_automatically: boolean;
    created_by_entity_user_id?: string;
    default_billing_address_id?: string;
    default_shipping_address_id?: string;
    external_reference?: string;
    language?: components["schemas"]["LanguageCodeEnum"];
    organization: components["schemas"]["CounterpartOrganizationResponse"];
    reminders_enabled?: boolean;
    tax_id?: string;
    type: components["schemas"]["CounterpartType"];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useCounterpartAddressesById: (id?: string) => _tanstack_react_query.UseQueryResult<{
    data: components["schemas"]["CounterpartAddressResponseWithCounterpartID"][];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useUpdateCounterpart: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    created_at: string;
    updated_at: string;
    created_automatically: boolean;
    created_by_entity_user_id?: string;
    default_billing_address_id?: string;
    default_shipping_address_id?: string;
    external_reference?: string;
    individual: components["schemas"]["CounterpartIndividualResponse"];
    language?: components["schemas"]["LanguageCodeEnum"];
    reminders_enabled?: boolean;
    tax_id?: string;
    type: components["schemas"]["CounterpartType"];
} | {
    id: string;
    created_at: string;
    updated_at: string;
    created_automatically: boolean;
    created_by_entity_user_id?: string;
    default_billing_address_id?: string;
    default_shipping_address_id?: string;
    external_reference?: string;
    language?: components["schemas"]["LanguageCodeEnum"];
    organization: components["schemas"]["CounterpartOrganizationResponse"];
    reminders_enabled?: boolean;
    tax_id?: string;
    type: components["schemas"]["CounterpartType"];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body: {
        default_billing_address_id?: string;
        default_shipping_address_id?: string;
        external_reference?: string;
        individual: components["schemas"]["CounterpartIndividualUpdatePayload"];
        language?: components["schemas"]["LanguageCodeEnum"];
        reminders_enabled?: boolean;
        tax_id?: string;
    } | {
        default_billing_address_id?: string;
        default_shipping_address_id?: string;
        external_reference?: string;
        language: components["schemas"]["LanguageCodeEnum"];
        organization: components["schemas"]["CounterpartOrganizationUpdatePayload"];
        reminders_enabled: boolean;
        tax_id?: string;
    };
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;
declare const useDeleteCounterpart: () => _tanstack_react_query.UseMutationResult<unknown, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    body?: undefined;
} & {
    query?: never;
    header?: {
        "x-monite-version"?: string;
        "x-monite-entity-id"?: string;
    };
    path: {
        counterpart_id: string;
    };
    cookie?: never;
}, unknown>;

declare const useEntityUserById: (id: string | undefined) => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    email?: string | null;
    first_name?: string;
    last_name?: string | null;
    login: string;
    phone?: string | null;
    role_id: string;
    status: components["schemas"]["StatusEnum"];
    userpic_file_id?: string | null;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useEntityUserByAuthToken: () => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    email?: string | null;
    first_name?: string;
    last_name?: string | null;
    login: string;
    phone?: string | null;
    role_id: string;
    status: components["schemas"]["StatusEnum"];
    userpic_file_id?: string | null;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useEntityUserRoleByAuthToken: () => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    permissions: components["schemas"]["BizObjectsSchema-Output"];
    status: components["schemas"]["StatusEnum"];
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

declare const useApprovalPolicyById: (approvalPolicyId: string | undefined) => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    created_by: string;
    description?: string;
    ends_at?: string;
    name: string;
    priority: number;
    script: (boolean | number | string | unknown[] | Record<string, never>)[];
    starts_at?: string;
    status: "active" | "pending";
    trigger?: boolean | number | string | unknown[] | Record<string, never>;
    updated_by?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

declare const useFileById: (fileId: string | undefined) => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    file_type: string;
    md5: string;
    mimetype: string;
    name: string;
    region: string;
    s3_bucket: string;
    s3_file_path: string;
    size: number;
    url: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

/**
 * @note We are deviating from the default query configuration because the data
 * does not require frequent refetching or retries as the data fetched
 * (user entity information) is relatively static
 *
 * @returns {QueryResult} The result of the user entity fetch.
 */
declare const useMe: () => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    email?: string | null;
    first_name?: string;
    last_name?: string | null;
    login: string;
    phone?: string | null;
    role_id: string;
    status: components["schemas"]["StatusEnum"];
    userpic_file_id?: string | null;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
declare const useMyEntity: () => {
    entityName: string;
    isNonVatSupported: boolean;
    isUSEntity: boolean;
    isNonCompliantFlow: boolean;
    data: {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    };
    error: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    };
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    } | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_query_core.RefetchOptions) => Promise<_tanstack_query_core.QueryObserverResult<{
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    }, Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    }>>;
    fetchStatus: _tanstack_query_core.FetchStatus;
} | {
    entityName: string;
    isNonVatSupported: boolean;
    isUSEntity: boolean;
    isNonCompliantFlow: boolean;
    data: {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    };
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    } | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_query_core.RefetchOptions) => Promise<_tanstack_query_core.QueryObserverResult<{
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    }, Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    }>>;
    fetchStatus: _tanstack_query_core.FetchStatus;
} | {
    entityName: string;
    isNonVatSupported: boolean;
    isUSEntity: boolean;
    isNonCompliantFlow: boolean;
    data: undefined;
    error: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    };
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    } | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_query_core.RefetchOptions) => Promise<_tanstack_query_core.QueryObserverResult<{
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    }, Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    }>>;
    fetchStatus: _tanstack_query_core.FetchStatus;
} | {
    entityName: string;
    isNonVatSupported: boolean;
    isUSEntity: boolean;
    isNonCompliantFlow: boolean;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    } | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_query_core.RefetchOptions) => Promise<_tanstack_query_core.QueryObserverResult<{
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    }, Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    }>>;
    fetchStatus: _tanstack_query_core.FetchStatus;
} | {
    entityName: string;
    isNonVatSupported: boolean;
    isUSEntity: boolean;
    isNonCompliantFlow: boolean;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    } | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: _tanstack_query_core.RefetchOptions) => Promise<_tanstack_query_core.QueryObserverResult<{
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        logo?: components["schemas"]["FileSchema2"] | null;
        organization: components["schemas"]["OrganizationResponseSchema"];
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "organization";
        website?: string | null;
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        address: components["schemas"]["EntityAddressResponseSchema"];
        email?: string | null;
        individual: components["schemas"]["IndividualResponseSchema"];
        logo?: components["schemas"]["FileSchema2"] | null;
        phone?: string | null;
        registration_authority?: string | null;
        registration_number?: string | null;
        status: components["schemas"]["EntityStatusEnum"];
        tax_id?: string | null;
        type: "individual";
        website?: string | null;
    }, Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    }>>;
    fetchStatus: _tanstack_query_core.FetchStatus;
};
declare const getEntityName: (entity?: EntityResponse) => string;

type OptionalFields = {
    invoiceDate?: boolean;
    tags?: boolean;
};
type OcrRequiredField = 'currency' | 'invoiceDate' | 'counterpart' | 'invoiceNumber' | 'counterpartBankAccount' | 'document_issued_at_date' | 'dueDate' | 'tags' | 'counterpartName' | 'contactPerson' | 'issueDate' | 'amount' | 'appliedPolicy' | 'addedByUser' | 'addedOn' | 'updatedOn';
type OcrRequiredFields = Partial<Record<OcrRequiredField, boolean>> | undefined;
type PaymentRecordWithIntent = {
    intent: string;
    record: components['schemas']['PaymentRecordResponse'];
};

declare const usePaymentRecords: (query: Services["paymentRecords"]["getPaymentRecords"]["types"]["parameters"]["query"], enabled?: boolean) => _tanstack_react_query.UseQueryResult<{
    data: components["schemas"]["PaymentRecordResponse"][];
    next_pagination_token?: string;
    prev_pagination_token?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;
/**
 * Hook to fetch payment records for a list of payables.
 * Sorts the payment records by paid_at in descending order.
 *
 * @param payableIds - Array of payable IDs to fetch payment records for
 * @returns {Object}
 *  - payablesPaymentIntentsRecord: Payment intents with most recent record per intent, grouped by payable ID
 *  - isLoading: Loading state boolean
 *  - error: Error state if request fails
 *
 * Example data returned in payablesPaymentIntentsRecord:
 * ```
 * {
 *    "payable-id-1": [
 *      { intent: "payment-intent-id-1", record: record2 },
 *      { intent: "payment-intent-id-2", record: record3 }
 *    ],
 *    "payable-id-2": [
 *      { intent: "payment-intent-id-3", record: record6 },
 *      { intent: "payment-intent-id-4", record: record8 }
 *    ]
 * }
 * ```
 */
declare const usePayablePaymentIntentsAndRecords: (payableIds?: string[]) => {
    allPaymentRecords: {
        id: string;
        amount: number;
        currency: components["schemas"]["CurrencyEnum"];
        entity_user_id?: string;
        history: components["schemas"]["PaymentRecordHistoryResponse"][];
        is_external: boolean;
        object: components["schemas"]["PaymentRecordObjectResponse"];
        overpaid_amount: number;
        paid_at?: string;
        payment_intent_id?: string;
        payment_intent_status?: string;
        payment_method?: string;
        planned_payment_date?: string;
        status: string;
    }[] | undefined;
    payablesPaymentIntentsRecord: Record<string, PaymentRecordWithIntent[]>;
    isLoading: boolean;
    error: Error | {
        detail?: components["schemas"]["ValidationError"][];
    } | {
        error: components["schemas"]["ErrorSchema"];
    } | null;
    refetch: () => void;
};
declare const useCreatePaymentRecord: () => _tanstack_react_query.UseMutationResult<{
    id: string;
    amount: number;
    currency: components["schemas"]["CurrencyEnum"];
    entity_user_id?: string;
    history: components["schemas"]["PaymentRecordHistoryResponse"][];
    is_external: boolean;
    object: components["schemas"]["PaymentRecordObjectResponse"];
    overpaid_amount: number;
    paid_at?: string;
    payment_intent_id?: string;
    payment_intent_status?: string;
    payment_method?: string;
    planned_payment_date?: string;
    status: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    amount: number;
    currency: components["schemas"]["CurrencyEnum"];
    entity_user_id?: string;
    object: components["schemas"]["PaymentRecordObjectRequest"];
    paid_at?: string;
    payment_intent_id?: string;
    payment_intent_status?: string;
    payment_method?: string;
    planned_payment_date?: string;
    status: "created" | "processing" | "succeeded";
}, unknown>;
declare const usePaymentRecordById: (payment_record_id: string) => _tanstack_react_query.UseQueryResult<{
    id: string;
    amount: number;
    currency: components["schemas"]["CurrencyEnum"];
    entity_user_id?: string;
    history: components["schemas"]["PaymentRecordHistoryResponse"][];
    is_external: boolean;
    object: components["schemas"]["PaymentRecordObjectResponse"];
    overpaid_amount: number;
    paid_at?: string;
    payment_intent_id?: string;
    payment_intent_status?: string;
    payment_method?: string;
    planned_payment_date?: string;
    status: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

declare const usePaymentIntentById: (payment_intent_id: string) => _tanstack_react_query.UseQueryResult<{
    id: string;
    updated_at: string;
    amount: number;
    application_fee_amount?: number;
    batch_payment_id?: string;
    currency: string;
    invoice?: components["schemas"]["Invoice"];
    object?: components["schemas"]["PaymentObject"];
    payer?: components["schemas"]["PayerAccountResponse"];
    payment_link_id?: string;
    payment_methods: components["schemas"]["MoniteAllPaymentMethodsTypes"][];
    payment_reference?: string;
    provider?: string;
    recipient: components["schemas"]["RecipientAccountResponse"];
    selected_payment_method?: components["schemas"]["MoniteAllPaymentMethodsTypes"];
    status: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

declare const usePatchEntitiesIdSettings: () => _tanstack_react_query.UseMutationResult<{
    accounting?: components["schemas"]["AccountingSettings"] | null;
    allow_purchase_order_autolinking: boolean | null;
    currency?: components["schemas"]["CurrencySettings-Output"] | null;
    document_ids?: components["schemas"]["DocumentIDsSettings"] | null;
    document_rendering?: components["schemas"]["DocumentRenderingSettings-Output"];
    generate_paid_invoice_pdf: boolean;
    language?: components["schemas"]["LanguageCodeEnum"] | null;
    mail?: components["schemas"]["EntityMailSettings"] | null;
    payables_ocr_auto_tagging?: components["schemas"]["OcrAutoTaggingSettingsRequest"][] | null;
    payables_skip_approval_flow: boolean;
    payment_priority: components["schemas"]["PaymentPriorityEnum"] | null;
    quote_signature_required: boolean;
    receivable_edit_flow: components["schemas"]["ReceivableEditFlow"] | null;
    reminder?: components["schemas"]["RemindersSettings"] | null;
    vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
    vat_mode: components["schemas"]["VatModeEnum"] | null;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}, {
    accounting?: components["schemas"]["AccountingSettings"] | null;
    allow_purchase_order_autolinking: boolean | null;
    currency?: components["schemas"]["CurrencySettings-Input"] | null;
    document_ids?: components["schemas"]["DocumentIDsSettingsRequest"] | null;
    document_rendering?: components["schemas"]["DocumentRenderingSettings-Input"];
    generate_paid_invoice_pdf: boolean;
    language?: components["schemas"]["LanguageCodeEnum"] | null;
    mail?: components["schemas"]["EntityMailSettings"] | null;
    payables_ocr_auto_tagging?: components["schemas"]["OcrAutoTaggingSettingsRequest"][] | null;
    payables_skip_approval_flow: boolean;
    payment_priority: components["schemas"]["PaymentPriorityEnum"] | null;
    quote_signature_required: boolean;
    receivable_edit_flow: components["schemas"]["ReceivableEditFlow"] | null;
    reminder?: components["schemas"]["RemindersSettings"] | null;
    vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
    vat_mode: components["schemas"]["VatModeEnum"] | null;
}, unknown>;
declare const useEntitySettings: (enabled?: boolean) => _tanstack_react_query.UseQueryResult<{
    accounting?: components["schemas"]["AccountingSettings"] | null;
    allow_purchase_order_autolinking: boolean | null;
    currency?: components["schemas"]["CurrencySettings-Output"] | null;
    document_ids?: components["schemas"]["DocumentIDsSettings"] | null;
    document_rendering?: components["schemas"]["DocumentRenderingSettings-Output"];
    generate_paid_invoice_pdf: boolean;
    language?: components["schemas"]["LanguageCodeEnum"] | null;
    mail?: components["schemas"]["EntityMailSettings"] | null;
    payables_ocr_auto_tagging?: components["schemas"]["OcrAutoTaggingSettingsRequest"][] | null;
    payables_skip_approval_flow: boolean;
    payment_priority: components["schemas"]["PaymentPriorityEnum"] | null;
    quote_signature_required: boolean;
    receivable_edit_flow: components["schemas"]["ReceivableEditFlow"] | null;
    reminder?: components["schemas"]["RemindersSettings"] | null;
    vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
    vat_mode: components["schemas"]["VatModeEnum"] | null;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

/**
 * Fetches receivable by provided `id`
 *
 * @see {@link https://docs.monite.com/reference/get_receivables_id} Monite backend call API
 */
declare const useGetReceivableById: (receivable_id: string, enabled?: boolean) => _tanstack_react_query.UseQueryResult<{
    id: string;
    created_at: string;
    updated_at: string;
    amount_due: number;
    amount_paid: number;
    amount_to_pay?: number;
    attachments?: components["schemas"]["AttachmentResponse2"][];
    based_on?: string;
    based_on_document_id?: string;
    comment?: string;
    commercial_condition_description?: string;
    counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
    counterpart_business_type?: string;
    counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
    counterpart_einvoicing_credentials?: components["schemas"]["EinvoicingCredentials"];
    counterpart_external_reference?: string;
    counterpart_id: string;
    counterpart_name?: string;
    counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
    counterpart_tax_id?: string;
    counterpart_type: components["schemas"]["CounterpartType"];
    counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
    currency: components["schemas"]["CurrencyEnum"];
    deduction_amount?: number;
    deduction_memo?: string;
    discount?: components["schemas"]["DiscountResponse2"];
    discounted_subtotal?: number;
    document_id?: string;
    document_rendering?: components["schemas"]["DocumentRenderingSettings"];
    due_date?: string;
    einvoice_error_comment?: string;
    einvoice_file_url?: string;
    entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
    entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
    entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount2"];
    entity_user_id?: string;
    entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
    file_language: components["schemas"]["LanguageCodeEnum"];
    file_url?: string;
    footer?: string;
    fulfillment_date?: string;
    is_einvoice: boolean;
    issue_date?: string;
    line_items: components["schemas"]["ResponseItem"][];
    memo?: string;
    network_credentials?: components["schemas"]["EinvoicingCredentials"];
    original_file_language: components["schemas"]["LanguageCodeEnum"];
    original_file_url?: string;
    overdue_reminder_id?: string;
    paid_at?: string;
    partner_metadata?: Record<string, never>;
    payment_page_url?: string;
    payment_reminder_id?: string;
    payment_terms?: components["schemas"]["PaymentTerms"];
    project_id?: string;
    purchase_order?: string;
    recurrence_id?: string;
    related_documents: components["schemas"]["RelatedDocuments"];
    status: components["schemas"]["ReceivablesStatusEnum"];
    subtotal?: number;
    subtotal_after_vat?: number;
    tags: components["schemas"]["TagReadSchema"][];
    total_amount: number;
    total_amount_with_credit_notes: number;
    total_vat_amount: number;
    total_vat_amounts?: components["schemas"]["TotalVatAmountItem2"][];
    total_withholding_tax?: number;
    trade_name?: string;
    type: "invoice";
    vat_exempt?: boolean;
    vat_exemption_rationale?: string;
    vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
    vat_mode: components["schemas"]["VatModeEnum"];
    withholding_tax_rate?: number;
} | {
    id: string;
    created_at: string;
    updated_at: string;
    attachments?: components["schemas"]["AttachmentResponse2"][];
    based_on?: string;
    based_on_document_id?: string;
    comment?: string;
    commercial_condition_description?: string;
    counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
    counterpart_business_type?: string;
    counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
    counterpart_external_reference?: string;
    counterpart_id: string;
    counterpart_name?: string;
    counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
    counterpart_tax_id?: string;
    counterpart_type: components["schemas"]["CounterpartType"];
    counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
    currency: components["schemas"]["CurrencyEnum"];
    deduction_amount?: number;
    deduction_memo?: string;
    discount?: components["schemas"]["DiscountResponse2"];
    discounted_subtotal?: number;
    document_id?: string;
    document_rendering?: components["schemas"]["DocumentRenderingSettings"];
    due_date?: string;
    einvoice_file_url?: string;
    entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
    entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
    entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount2"];
    entity_user_id?: string;
    entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
    expiry_date?: string;
    file_language: components["schemas"]["LanguageCodeEnum"];
    file_url?: string;
    footer?: string;
    issue_date?: string;
    line_items: components["schemas"]["ResponseItem"][];
    memo?: string;
    original_file_language: components["schemas"]["LanguageCodeEnum"];
    original_file_url?: string;
    partner_metadata?: Record<string, never>;
    project_id?: string;
    quote_accept_page_url?: string;
    signature_required?: boolean;
    status: components["schemas"]["QuoteStateEnum"];
    subtotal?: number;
    subtotal_after_vat?: number;
    tags: components["schemas"]["TagReadSchema"][];
    total_amount: number;
    total_vat_amount: number;
    total_vat_amounts?: components["schemas"]["TotalVatAmountItem2"][];
    total_withholding_tax?: number;
    trade_name?: string;
    type: "quote";
    vat_exempt?: boolean;
    vat_exemption_rationale?: string;
    vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
    vat_mode: components["schemas"]["VatModeEnum"];
    withholding_tax_rate?: number;
} | {
    id: string;
    created_at: string;
    updated_at: string;
    attachments?: components["schemas"]["AttachmentResponse2"][];
    based_on?: string;
    based_on_document_id?: string;
    commercial_condition_description?: string;
    counterpart_billing_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
    counterpart_business_type?: string;
    counterpart_contact?: components["schemas"]["ReceivableCounterpartContact2"];
    counterpart_einvoicing_credentials?: components["schemas"]["EinvoicingCredentials"];
    counterpart_external_reference?: string;
    counterpart_id: string;
    counterpart_name?: string;
    counterpart_shipping_address?: components["schemas"]["ReceivablesRepresentationOfCounterpartAddress2"];
    counterpart_tax_id?: string;
    counterpart_type: components["schemas"]["CounterpartType"];
    counterpart_vat_id?: components["schemas"]["ReceivableCounterpartVatIDResponse"];
    currency: components["schemas"]["CurrencyEnum"];
    deduction_amount?: number;
    deduction_memo?: string;
    discount?: components["schemas"]["DiscountResponse2"];
    discounted_subtotal?: number;
    document_id?: string;
    document_rendering?: components["schemas"]["DocumentRenderingSettings"];
    due_date?: string;
    einvoice_error_comment?: string;
    einvoice_file_url?: string;
    entity: components["schemas"]["ReceivableEntityOrganization"] | components["schemas"]["ReceivableEntityIndividual"];
    entity_address: components["schemas"]["ReceivableEntityAddressSchema"];
    entity_bank_account?: components["schemas"]["ReceivablesRepresentationOfEntityBankAccount2"];
    entity_user_id?: string;
    entity_vat_id?: components["schemas"]["ReceivableEntityVatIDResponse"];
    file_language: components["schemas"]["LanguageCodeEnum"];
    file_url?: string;
    footer?: string;
    is_einvoice: boolean;
    issue_date?: string;
    line_items: components["schemas"]["ResponseItem"][];
    memo?: string;
    network_credentials?: components["schemas"]["EinvoicingCredentials"];
    original_file_language: components["schemas"]["LanguageCodeEnum"];
    original_file_url?: string;
    partner_metadata?: Record<string, never>;
    project_id?: string;
    purchase_order?: string;
    status: components["schemas"]["CreditNoteStateEnum"];
    subtotal?: number;
    subtotal_after_vat?: number;
    tags: components["schemas"]["TagReadSchema"][];
    total_amount: number;
    total_vat_amount: number;
    total_vat_amounts?: components["schemas"]["TotalVatAmountItem2"][];
    total_withholding_tax?: number;
    trade_name?: string;
    type: "credit_note";
    vat_exempt?: boolean;
    vat_exemption_rationale?: string;
    vat_inclusive_discount_mode: components["schemas"]["VatModeEnum"];
    vat_mode: components["schemas"]["VatModeEnum"];
    withholding_tax_rate?: number;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

declare function getCounterpartName(counterpart: CounterpartResponse | undefined): string;
type EntityResponse = components['schemas']['EntityOrganizationResponse'] | components['schemas']['EntityIndividualResponse'];

interface ApprovalPolicyDetailsProps {
    /** Approval policy ID */
    id?: string;
    /** Callback is fired when a policy is created and sync with server is successful
     *
     * @param id - the ID of the created policy
     */
    onCreated?: (id: string) => void;
    /** Callback is fired when a policy is updated and sync with server is successful
     *
     * @param id - the ID of the updated policy
     */
    onUpdated?: (id: string) => void;
}
/**
 * ApprovalPolicyDetails component
 *
 * This component renders the approval policy details form. It includes fields for the policy name, description, trigger, and script.
 * The `useApprovalPolicyDetails` hook is used to handle the creation of a new approval policy.
 *
 */
declare const ApprovalPolicyDetails: ({ id, onCreated, onUpdated, }: ApprovalPolicyDetailsProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const FILTER_TYPE_SEARCH$3 = "search";
declare const FILTER_TYPE_CREATED_AT$1 = "created_at";

type FilterType = {
    [FILTER_TYPE_SEARCH$3]?: string | null;
    [FILTER_TYPE_CREATED_AT$1]?: Date | null;
};
type FilterValue$3 = Date | string | null;

type API = Services;
interface CreateMoniteAPIClientResult {
    requestFn: typeof requestFn;
    api: API;
    version: string;
}
interface CreateMoniteAPIClientOptions {
    context?: Context<QraftContextValue>;
    /** Used in entity-specific endpoints **/
    entityId?: string;
}
declare const createAPIClient: ({ entityId, ...qraftClientOptions }?: CreateMoniteAPIClientOptions | undefined) => CreateMoniteAPIClientResult;

type FilterTypes$1 = Partial<{
    [FILTER_TYPE_SEARCH$2]: string | null;
    [FILTER_TYPE_STATUS]: components['schemas']['PayableStateEnum'] | null;
    [FILTER_TYPE_DUE_DATE]: Date | null;
    [FILTER_TYPE_SUMMARY_CARD]: PayablesTabFilter | null;
}>;
type FilterValue$2 = components['schemas']['PayableStateEnum'] | 'all' | Date | string | null;
type FieldValueTypes = 'counterpart_id' | 'document_id' | 'amount' | 'due_date' | 'was_created_by_user_id' | 'created_at' | 'issued_at' | 'amount_paid' | 'amount_to_pay' | 'status' | 'pay';
interface MonitePayableTableProps {
    isShowingSummaryCards?: boolean;
    fieldOrder?: [FieldValueTypes, ...FieldValueTypes[]];
    summaryCardFilters?: Record<string, PayablesTabFilter | null>;
    requiredColumns?: [FieldValueTypes, ...FieldValueTypes[]];
}
type PayablesTabFilter = NonNullable<API['payables']['getPayables']['types']['parameters']['query']>;

declare const FILTER_TYPE_SEARCH$2 = "search";
declare const FILTER_TYPE_STATUS = "status";
declare const FILTER_TYPE_CREATED_AT = "created_at";
declare const FILTER_TYPE_DUE_DATE = "due_date";
declare const FILTER_TYPE_SUMMARY_CARD = "summary_card_filter";

declare const FILTER_TYPE_SEARCH$1: "search";

declare const FILTER_TYPE_CREATED_BY = "created_by";

type FilterTypes = {
    [FILTER_TYPE_SEARCH$1]?: string | null;
    [FILTER_TYPE_CREATED_AT]?: Date | null;
    [FILTER_TYPE_CREATED_BY]?: string | null;
};
type FilterValue$1 = Date | string | null;

interface onChangeSortParams {
    /**
     * The field to sort by. Defaults to ApprovalPolicyCursorFields.CREATED_AT.
     */
    sort: ApprovalPolicyCursorFields;
    /**
     * The value to order by. Defaults to SortOrderEnum.DESC.
     * null means no sorting.
     */
    order: 'asc' | 'desc' | null;
}
interface onFilterChangeParams {
    /**
     * The field to filter by.
     */
    field: keyof FilterTypes;
    /**
     * The value to filter by.
     */
    value: FilterValue$1;
}
interface ApprovalPoliciesTableProps {
    /**
     * Triggered when the sorting options are changed.
     *
     * @param params - The sorting options.
     */
    onChangeSort?: (params: onChangeSortParams) => void;
    /**
     * Triggered when the filtering options are changed.
     *
     * @param filter - The filtering options.
     */
    onChangeFilter?: (filter: onFilterChangeParams) => void;
    /**
     * Triggered when a row is clicked.
     *
     * @param approvalPolicy - The approval policy that was clicked.
     */
    onRowClick?: (approvalPolicy: ApprovalPolicyResource) => void;
    /**
     * Triggered when the create button is clicked for no data state.
     */
    onCreateClick?: () => void;
}
/**
 * ApprovalPoliciesTable component
 *
 * This component renders a table of approval policies. It includes pagination and filtering functionality.
 */
declare const ApprovalPoliciesTable: (props: ApprovalPoliciesTableProps) => _emotion_react_jsx_runtime.JSX.Element;
type ApprovalPolicyResource = components['schemas']['ApprovalPolicyResource'];
type ApprovalPolicyCursorFields = components['schemas']['ApprovalPolicyCursorFields'];

/**
 * ApprovalPolicies component
 * TODO: Check if this component is still needed
 *
 * This component renders the approval policies page. It includes a table of approval policies, a dialog for creating new approval policies,
 * and a header with a button for opening the create dialog.
 */
declare const ApprovalPolicies: () => _emotion_react_jsx_runtime.JSX.Element;

/**
 * ApprovalPolicies component
 *
 * This component renders the user roles & approval policies page. It includes a table of approval policies,
 * a dialog for creating new approval policies,
 * and a header with a button for opening the create dialog.
 */
declare const RolesAndApprovalPolicies: () => _emotion_react_jsx_runtime.JSX.Element;

declare const ApprovalRequests: () => _emotion_react_jsx_runtime.JSX.Element;

type ApprovalRequestsTableRowAction = 'approve' | 'reject';
interface UseApprovalRequestActionsCellProps {
    /**
     * The event handler for an approval row action.
     * If not provided, the action menu will not be displayed.
     * @param props.id - The identifier of the clicked row, a string.
     * @param props.action - The action to be performed, an `InvoicesTableRowAction`.
     */
    onRowActionClick: (props: {
        id: string;
        action: ApprovalRequestsTableRowAction;
    }) => Promise<components['schemas']['ApprovalRequestResourceWithMetadata']> | undefined;
}

interface ApprovalRequestsTableBaseProps {
    /**
     * The event handler for a row click.
     *
     * @param id - The identifier of the clicked row, a string.
     */
    onRowClick?: (id: string) => void;
}
type ApprovalRequestsTableProps = ApprovalRequestsTableBaseProps | (ApprovalRequestsTableBaseProps & UseApprovalRequestActionsCellProps);
declare const ApprovalRequestsTable: (props: ApprovalRequestsTableProps) => _emotion_react_jsx_runtime.JSX.Element;

type ReceivableFilterType = Pick<NonNullable<Services['receivables']['getReceivables']['types']['parameters']['query']>, 'document_id__contains' | 'status' | 'counterpart_id' | 'due_date__lte'>;
type ReceivablesTabFilter = NonNullable<API['receivables']['getReceivables']['types']['parameters']['query']>;

type FinanceStepListItem = {
    id: string;
    text: string;
};
type FinanceStep = {
    id: number | string;
    title: string;
    description: string;
    description2?: string;
    list?: {
        listTitle: string;
        listItems: FinanceStepListItem[];
    };
};

type OcrMismatchField = keyof Pick<PayableResponseSchema, 'amount_to_pay' | 'counterpart_bank_account_id'>;
type OcrMismatchFields = Partial<Record<OcrMismatchField, boolean>> | undefined;
interface MonitePayableDetailsInfoProps {
    optionalFields?: OptionalFields;
    ocrRequiredFields?: OcrRequiredFields;
    ocrMismatchFields?: OcrMismatchFields;
    isTagsDisabled?: boolean;
}
type PayableResponseSchema = components['schemas']['PayableResponseSchema'];

type BankAccountFormProps = {
    /**
     * Selected entity bank account id
     */
    entityBankAccountId: string;
    /**
     * Boolean flag to determine if dialog is open or not
     */
    isOpen: boolean;
    /**
     * List of entity bank accounts
     */
    bankAccounts: components['schemas']['EntityBankAccountResponse'][];
    /**
     * Callback function for cancelling
     */
    onCancel?: () => void;
    /**
     * Callback function for creating
     */
    onCreate?: (id: string) => void;
    /**
     * Callback function for updating
     */
    onUpdate?: () => void;
    /**
     * Callback function for deleting
     */
    onDelete?: () => void;
    /**
     * Callback function for closing
     */
    handleClose?: () => void;
    /**
     * Callback function for selecting another bank account after deleting selected bank account
     */
    handleSelectBankAfterDeletion?: (bankId: string) => void;
};
declare const BankAccountFormDialog: (props: BankAccountFormProps) => _emotion_react_jsx_runtime.JSX.Element;

type CreditNotesTableProps = {
    /**
     * The event handler for a row click.
     *
     * @param id - The identifier of the clicked row, a string.
     */
    onRowClick?: (id: string) => void;
    /**
     * The event handler for the creation new invoice for no data state
     *
     @param {boolean} isOpen - A boolean value indicating whether the dialog should be open (true) or closed (false).
     */
    setIsCreateInvoiceDialogOpen?: (isOpen: boolean) => void;
    /**
     * The query to be used for the Table
     */
    query?: ReceivablesTabFilter;
    /** Filters to be applied to the table */
    filters?: Array<keyof ReceivableFilterType>;
};
interface CreditNotesTableSortModel {
    field: components['schemas']['ReceivableCursorFields'];
    sort: NonNullable<GridSortDirection>;
}
declare const CreditNotesTable: (props: CreditNotesTableProps) => _emotion_react_jsx_runtime.JSX.Element;

interface UseInvoiceRowActionMenuCellProps {
    /**
     * The event handler for an invoice row action.
     * If not provided, the action menu will not be displayed.
     * @param props.id - The identifier of the clicked row, a string.
     * @param props.action - The action to be performed, an `InvoicesTableRowAction`.
     */
    onRowActionClick?: (props: {
        id: string;
        action?: InvoicesTableRowAction;
    }) => void;
    /**
     * The actions to be displayed in the row's action menu.
     * If not provided, default actions will be displayed,
     * in case if `onRowActionClick` is provided.
     *
     * @example
     * ```ts
     * {
     *   "draft": ['view', 'edit', 'issue', 'delete'], // Optional
     *   "issued": ['view', 'send', 'cancel', 'copyPaymentLink'], // Optional
     *   "canceled": ['view', 'send'], // Optional
     *   "partially_paid": ['view', 'send', 'copyPaymentLink', 'cancel'], // Optional
     *   "overdue": ['view', 'send', 'copyPaymentLink', 'cancel', 'markUncollectible'], // Optional
     *   "paid": ['view'], // Optional
     *   "uncollectible": ['view'], // Optional
     *   "expired": ['view'], // Optional
     *   "accepted": ['view'], // Optional
     *   "declined": ['view'], // Optional
     *   "recurring": ['view'], // Optional
     *   "deleted": [], // Optional
     * }
     * ```
     */
    rowActions?: Partial<InvoicesTableRowActionSchema>;
}
/**
 * Represents the possible actions that can be performed on an Invoice row.
 *
 * @property {'recurrent'} recurrent - Sets an invoice as recurrent.
 * @property {'issue'} issue - Issues an invoice.
 * @property {'delete'} delete - Deletes an invoice.
 * @property {'cancel'} cancel - Cancels an invoice.
 * @property {'partiallyPay'} partiallyPay - Partially pays an invoice.
 * @property {'pay'} pay - Fully pays an invoice.
 * @property {'overduePayment'} overduePayment - Marks an invoice payment as overdue.
 * @property {'markUncollectible'} markUncollectible - Marks an invoice as uncollectible.
 * @property {'view'} view - Views an invoice.
 * @property {'edit'} edit - Edits an invoice.
 * @property {'copyPaymentLink'} copyPaymentLink - Copies the payment link of an invoice.
 * @property {'send'} send - Sends an invoice.
 * @property {'financeInvoice'} financeInvoice - Interacts with the invoice financing menu.
 * @property {'duplicate'} duplicate - Duplicates an invoice.
 */
type InvoicesTableRowAction = 'recurrent' | 'issue' | 'delete' | 'cancel' | 'partiallyPay' | 'pay' | 'overduePayment' | 'markUncollectible' | 'view' | 'edit' | 'copyPaymentLink' | 'send' | 'financeInvoice' | 'duplicate';
/**
 * Represents the possible actions that can be performed on an Invoice row for each status.
 *
 * @description Each status corresponds to a specific set of actions that can be executed on an invoice.
 */
interface InvoicesTableRowActionSchema extends Record<components['schemas']['ReceivablesStatusEnum'], InvoicesTableRowAction[]> {
    ['draft']: Array<'view' | 'edit' | 'issue' | 'recurrent' | 'delete' | 'duplicate'>;
    ['issued']: Array<'view' | 'send' | 'copyPaymentLink' | 'pay' | 'partiallyPay' | 'overduePayment' | 'cancel' | 'financeInvoice' | 'duplicate'>;
    ['canceled']: Array<'view' | 'duplicate'>;
    ['partially_paid']: Array<'view' | 'send' | 'copyPaymentLink' | 'pay' | 'overduePayment' | 'cancel' | 'financeInvoice' | 'duplicate'>;
    ['overdue']: Array<'view' | 'send' | 'copyPaymentLink' | 'pay' | 'cancel' | 'markUncollectible' | 'duplicate'>;
    ['paid']: Array<'view' | 'duplicate'>;
    ['uncollectible']: Array<'view' | 'duplicate'>;
    ['expired']: Array<'view' | 'duplicate'>;
    ['accepted']: Array<'view' | 'duplicate'>;
    ['declined']: Array<'view' | 'duplicate'>;
    ['recurring']: Array<'view' | 'duplicate'>;
    ['deleted']: Array<never>;
}

interface InvoicesTableBaseProps {
    /**
     * The event handler for a row click.
     *
     * @param id - The identifier of the clicked row, a string.
     */
    onRowClick?: (id: string) => void;
    /**
     * The event handler for the creation new invoice for no data state
     *
     @param {boolean} isOpen - A boolean value indicating whether the dialog should be open (true) or closed (false).
     */
    setIsCreateInvoiceDialogOpen?: (isOpen: boolean) => void;
    /**
     * The query to be used for the Table
     */
    query?: ReceivablesTabFilter;
    /** Filters to be applied to the table */
    filters?: Array<keyof ReceivableFilterType>;
}
type InvoicesTableProps = InvoicesTableBaseProps | (UseInvoiceRowActionMenuCellProps & InvoicesTableBaseProps);
interface ReceivableGridSortModel {
    field: components['schemas']['ReceivableCursorFields'];
    sort: NonNullable<GridSortDirection$1>;
}
declare const InvoicesTable: (props: InvoicesTableProps) => _emotion_react_jsx_runtime.JSX.Element;

interface QuotesTableSortModel {
    field: components['schemas']['ReceivableCursorFields'];
    sort: NonNullable<GridSortDirection>;
}
type QuotesTableProps = {
    /**
     * The event handler for a row click.
     *
     * @param id - The identifier of the clicked row, a string.
     */
    onRowClick?: (id: string) => void;
    /**
     * The event handler for a sort change.
     *
     * @param {QuotesTableSortModel} params - The sort model.
     */
    onChangeSort?: (params: QuotesTableSortModel) => void;
    /**
     * The event handler for the creation new invoice for no data state
     *
     @param {boolean} isOpen - A boolean value indicating whether the dialog should be open (true) or closed (false).
     */
    setIsCreateInvoiceDialogOpen?: (isOpen: boolean) => void;
    /**
     * The query to be used for the Table
     */
    query?: ReceivablesTabFilter;
    /** Filters to be applied to the table */
    filters?: Array<keyof ReceivableFilterType>;
};
declare const QuotesTable: (props: QuotesTableProps) => _emotion_react_jsx_runtime.JSX.Element;

interface ReceivablesTableControlledProps {
    /** Event handler for tab change */
    onTabChange: (tab: number) => void;
    /** Active-selected tab */
    tab: number;
}
interface ReceivablesTableUncontrolledProps {
    /** Active-selected tab */
    tab?: number;
    onTabChange?: never;
}
/**
 * Receivables Table props for customisation via Monite Provider
 */
interface MoniteReceivablesTableProps {
    /** Active-selected tab */
    tab?: number;
    /**
     * The tabs to display in the ReceivablesTable.
     * By default, the component will display tabs for Invoices, Quotes, and Credit Notes.
     */
    tabs?: Array<MoniteReceivablesTab>;
    /**
     * The event handler for the creation of a new invoice
     *
      @param {string} receivableId - The ID of the receivable that was created.
     */
    onCreate?: (receivableId: string) => void;
}
declare enum ReceivablesTableTabEnum {
    Invoices = 0,
    Quotes = 1,
    CreditNotes = 2,
    Financing = 3
}
interface ReceivablesTableBaseProps {
    /**
     * The event handler for a row click.
     *
     * @param id - The identifier of the clicked row, a string.
     */
    onRowClick?: (id: string) => void;
    /**
     * The event handler for the creation new invoice for no data state
     *
      @param {boolean} isOpen - A boolean value indicating whether the dialog should be open (true) or closed (false).
     */
    setIsCreateInvoiceDialogOpen?: (isOpen: boolean) => void;
}
type ReceivablesTableProps = (ReceivablesTableControlledProps & ReceivablesTableBaseProps) | (ReceivablesTableUncontrolledProps & ReceivablesTableBaseProps);
/**
 * ReceivablesTable component
 * Displays Invoices, Quotes, Credit Notes
 *
 * @example Monite Provider customisation
 * ```ts
 * // You can configure the component through Monite Provider property `componentSettings` like this:
 * const componentSettings = {
 *   receivables: {
 *    tab: 0,                      // The default tab index to display
 *    tabs: [
 *           {
 *             label: 'Draft Invoices', // The label of the Tab
 *             query: {                 // The query parameters for the Tab
 *               type: 'invoice',       // The type of the Receivables, *required*
 *               sort: 'created_at',
 *               order: 'desc',
 *               status__in: ['draft'],
 *             },
 *             filters: [               // The UI filters for the Tab
 *               'document_id__contains',
 *               'counterpart_id',
 *               'due_date__lte',
 *             ],
 *           },
 *           {
 *             label: 'Recurring invoices',
 *             query: {
 *               type: 'invoice',
 *               status__in: ['recurring'],
 *             },
 *             filters: ['document_id__contains', 'counterpart_id'],
 *           },
 *           {
 *             label: 'Other Invoices',
 *             query: {
 *               type: 'invoice',
 *               sort: 'created_at',
 *               order: 'desc',
 *               status__in: [             // The "status" filter for the Tab will
 *                 'issued',               // only contain the values specified in "status__in"
 *                 'overdue',
 *                 'partially_paid',
 *                 'paid',
 *                 'uncollectible',
 *                 'canceled',
 *               ],
 *               // If no "filters" are specified, default UI filters will be displayed
 *             },
 *           },
 *           {
 *             label: 'Credit notes',
 *             query: {
 *               type: 'credit_note',
 *             },
 *           },
 *     ],
 *   },
 * });
 * ```
 */
declare const ReceivablesTable: (props: ReceivablesTableProps) => _emotion_react_jsx_runtime.JSX.Element;
type MoniteReceivablesTab = {
    label: string;
    query?: ReceivablesTabFilter | {
        type: 'financing';
    };
    filters?: Array<keyof ReceivableFilterType>;
};
declare const useReceivablesTableProps: (inProps?: Partial<MoniteReceivablesTableProps>) => {
    tab: number | undefined;
    tabs: MoniteReceivablesTab[] | undefined;
};

type ALIGN_DIALOG_TYPES = 'left' | 'right';
declare module '@mui/material/transitions' {
    interface TransitionProps {
        alignDialog?: ALIGN_DIALOG_TYPES;
    }
}
interface MoniteDialogProps extends DialogProps {
    alignDialog?: ALIGN_DIALOG_TYPES;
    onClosed?: () => void;
}

type ARDocumentType = 'invoice' | 'quote' | 'credit_note' | 'delivery_note';
type APDocumentType = 'purchase_order';

interface IconWrapperEvents {
    onHover?: (event: MouseEvent<HTMLButtonElement>) => void;
    onFocus?: (event: FocusEvent<HTMLButtonElement>) => void;
    onBlur?: (event: FocusEvent<HTMLButtonElement>) => void;
}
interface MoniteIconWrapperProps extends IconButtonProps, IconWrapperEvents {
    showCloseIcon?: boolean;
    icon?: ReactNode;
    fallbackIcon?: ReactNode;
    tooltip?: string;
    color?: 'inherit' | 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';
    sx?: SxProps<Theme>;
    isDynamic?: boolean;
    ariaLabelOverride?: string;
}

interface ReceivableSettings extends MoniteReceivablesTableProps {
    pageSizeOptions: number[];
    /** Callback to be called when an invoice is updated */
    onUpdate?: (receivableId: string, invoice?: components['schemas']['InvoiceResponsePayload']) => void;
    /** Callback to be called when an invoice is deleted */
    onDelete?: (receivableId: string) => void;
    /** Callback to be called when an invoice is sent */
    onInvoiceSent?: (invoiceId: string) => void;
    /** Enables bank account creation on invoice creation flow */
    enableEntityBankAccount?: boolean;
    /** List of available countries, ISO format */
    bankAccountCountries?: components['schemas']['AllowedCountries'][];
    /** List of available currencies, ISO format */
    bankAccountCurrencies?: components['schemas']['CurrencyEnum'][];
}
/**
 * Configuration settings for the onboarding component.
 *
 * ## Onboarding Callback Architecture
 *
 * The Monite SDK supports different types of onboarding flows with corresponding callbacks:
 *
 * ### 1. General Onboarding (`onComplete`)
 * - **Trigger**: When all onboarding requirements are fulfilled (requirements.length === 0)
 * - **Use Case**: General onboarding completion, backward compatibility
 * - **Business Logic**: Called when the onboarding component completes all required steps
 *
 * ### 2. Payments Onboarding (`onPaymentsOnboardingComplete`)
 * - **Trigger**: When payments onboarding requirements are fulfilled
 * - **Use Case**: Specific to payments onboarding completion
 * - **Business Logic**: Called when entity can make/receive payments via Monite payment rails
 * - **Note**: Currently triggered alongside `onComplete` as they represent the same flow
 *
 * ### 3. Working Capital Onboarding (`onWorkingCapitalOnboardingComplete`)
 * - **Trigger**: When business status transitions from 'INPUT_REQUIRED' or 'NEW' to 'WAITING_FOR_OFFERS'
 * - **Use Case**: Financing/working capital onboarding completion
 * - **Business Logic**: Called when entity completes onboarding for working capital services
 * - **Implementation**: Handled in the financing flow (useFinancing hook)
 *
 * ### Event Flow Architecture
 *
 * ```
 * Component → useComponentSettings() → [domain]Callbacks → MoniteEvents.enhance[Domain]Settings() → EVENT emission
 * ```
 *
 * All callbacks are enhanced with event emission capabilities in the drop-in package.
 */
interface OnboardingSettings {
    /**
     * Custom footer logo URL for the Onboarding pages.
     * If provided, the logo will be displayed instead of the Monite logo.
     * Requires `onboardingFooterWebsiteUrl` to be provided as well.
     */
    footerLogoUrl?: string;
    /**
     * Custom footer website URL for the Onboarding pages.
     * If provided, the onboardingFooterLogoUrl logo will link to this URL.
     */
    footerWebsiteUrl?: string;
    /**
     * If true, hides the footer on the Onboarding pages.
     * Defaults to false.
     */
    hideFooter?: boolean;
    /**
     * Whether to show the continue button on the onboarding completed page.
     *
     * @default false
     */
    showContinueButton?: boolean;
    /**
     * Allowed currencies to restrict options in the onboarding forms.
     * The first currency in the array will be used as the default value.
     *
     * @example ['USD', 'EUR']
     */
    allowedCurrencies?: components['schemas']['CurrencyEnum'][];
    /**
     * Allowed country codes to restrict options in the onboarding forms.
     * The first country code in the array will be used as the default value.
     *
     * @example ['US', 'GB']
     */
    allowedCountries?: components['schemas']['AllowedCountries'][];
    /**
     * Called when the onboarding process is completed.
     * This happens when all onboarding requirements have been fulfilled.
     *
     * @param {string} entityId - The ID of the entity
     * @returns {void}
     */
    onComplete?: (entityId: string) => void;
    /**
     * Called when the continue button is clicked on the onboarding completed page.
     *
     * @returns {void}
     */
    onContinue?: () => void;
    /**
     * Called when working capital onboarding is completed.
     * This happens when the business status transitions to 'ONBOARDED'.
     *
     * @param {string} entityId - The ID of the entity
     * @returns {void}
     */
    onWorkingCapitalOnboardingComplete?: (entityId: string) => void;
    /**
     * Called when payments onboarding is completed.
     * Note: This is currently triggered when all onboarding requirements are completed.
     * Future versions may tie this to a specific payments onboarding status.
     *
     * @param {string} entityId - The ID of the entity
     * @returns {void}
     */
    onPaymentsOnboardingComplete?: (entityId: string) => void;
}
interface FinancingSettings {
    /**
     * Enables finance widget buttons inside finance card in My financing tab when true, if false,
     * buttons are shown on the top right corner instead.
     */
    enableFinanceWidgetButton?: boolean;
    /**
     * Describes the step by step of how financing an invoice works, this is shown in a drawer when clicking on
     * `How does invoice financing work?` button
     */
    financeSteps: FinanceStep[];
}
interface TemplateSettings$1 {
    /**
     * Shows the template selection section if true or hides it if false, defaults to true.
     */
    showTemplateSection: boolean;
    /**
     * Shows the template PDF preview if true or hides it if false, defaults to true.
     */
    showTemplatePreview: boolean;
    /**
     * List of available template IDs for template selection, if no list is provided,
     * then all templates will be available, defaults to an empty list.
     */
    availableTemplateIds: string[];
    /**
     * Shows the logo selection section if true or hides it if false, defaults to true.
     */
    showLogoSection: boolean;
    /**
     * Enables the document number customisation tab if true or hides it if false, defaults to true.
     */
    enableDocumentNumberCustomisationTab: boolean;
    /**
     * Enables the other settings customisation tab if true or hides it if false, defaults to true.
     */
    enableOtherSettingsCustomisationTab: boolean;
    /**
     * List of available AR documents for customisation, defaults to all of the documents.
     */
    availableARDocuments: ARDocumentType[];
    /**
     * List of available AP documents for customisation, defaults to all of the documents.
     */
    availableAPDocuments: APDocumentType[];
}
/**
 * Action handlers for custom payment flows in payable operations.
 *
 * These handlers provide fine-grained control over payment workflows, allowing customers to:
 * - Integrate external payment providers
 * - Implement custom approval processes or multi-step authentication
 * - Add specialized banking solutions or enterprise payment workflows
 * - Control UI feedback and data refresh timing after payment completion
 *
 * @example Custom payment provider integration:
 * ```typescript
 * const onPay = (id: string, _data?: unknown, actions?: PayActionHandlers) => {
 *   // Start custom payment flow
 *   initiatePayment(id)
 *     .then(() => {
 *       // Payment successful - update SDK state and show success message
 *       actions?.resolve({ showToast: true });
 *     })
 *     .catch((error) => {
 *       // Payment failed - update SDK state and show error message
 *       actions?.reject(error, { showToast: true });
 *     });
 * };
 * ```
 */
type PayActionHandlers = {
    /**
     * Call when a custom payment flow has been successfully initiated/completed.
     * This triggers SDK's built-in state management: refreshes payable data,
     * payment records, and optionally displays success feedback to the user.
     *
     * @param options.showToast - Whether to display a success toast notification
     */
    resolve: (options?: {
        showToast?: boolean;
    }) => void;
    /**
     * Call when a custom payment flow failed or was cancelled by the user.
     * This triggers SDK's built-in state management: refreshes payable data,
     * payment records, and optionally displays error feedback to the user.
     *
     * @param error - Optional error details from the failed payment attempt
     * @param options.showToast - Whether to display an error toast notification
     */
    reject: (error?: unknown, options?: {
        showToast?: boolean;
    }) => void;
};
interface PayableSettings extends MonitePayableTableProps, MonitePayableDetailsInfoProps {
    pageSizeOptions: number[];
    enableGLCodes?: boolean;
    onSaved?: (id: string) => void;
    onCanceled?: (id: string) => void;
    onSubmitted?: (id: string) => void;
    onRejected?: (id: string) => void;
    onApproved?: (id: string) => void;
    onReopened?: (id: string) => void;
    onDeleted?: (id: string) => void;
    /**
     * Called when the user clicks Pay button on a payable.
     *
     * **Legacy Usage (Backward Compatible):**
     * ```typescript
     * onPay: (id: string) => {
     *   console.log('Payment initiated for:', id);
     * }
     * ```
     *
     * **Enhanced Usage (Custom Payment Flow):**
     * ```typescript
     * onPay: (id: string, _data?: unknown, actions?: PayActionHandlers) => {
     *   // Custom payment implementation
     *   processPaymentWithCustomProvider(id)
     *     .then(() => actions?.resolve({ showToast: true }))
     *     .catch(err => actions?.reject(err, { showToast: true }));
     * }
     * ```
     *
     * @param id - The payable ID being paid
     * @param _data - Reserved for future use (currently undefined)
     * @param actions - Optional handlers for custom payment flows. When provided,
     *                  enables custom payment integration. Call actions.resolve()
     *                  on success or actions.reject() on failure to update SDK state.
     */
    onPay?: (id: string, _data?: unknown, actions?: PayActionHandlers) => void;
}
interface ComponentSettings {
    general: {
        iconWrapper: Partial<MoniteIconWrapperProps>;
    };
    approvalPolicies: {
        pageSizeOptions: number[];
    };
    approvalRequests: {
        pageSizeOptions: number[];
    };
    counterparts: {
        pageSizeOptions: number[];
        /**
         * @see {@link CustomerTypes}
         * @param customerTypes - Array of customer types, defaults to ['customer', 'vendor']
         */
        customerTypes?: CustomerTypes;
    };
    payables: Partial<PayableSettings>;
    products: {
        pageSizeOptions: number[];
    };
    receivables: Partial<ReceivableSettings>;
    tags: {
        pageSizeOptions: number[];
    };
    userRoles: {
        pageSizeOptions: number[];
    };
    onboarding: Partial<OnboardingSettings>;
    financing: Partial<FinancingSettings>;
    templateSettings: Partial<TemplateSettings$1>;
}

type UsePayableDetailsProps = {
    /**
     * The ID of the payable
     */
    id?: string;
    /** when provided it takes precedence over component settings */
    enableGLCodes?: boolean;
    /**
     * Callback function that is called when the payable is saved
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onSaved?: (id: string) => void;
    /**
     * Callback function that is called when the payable is canceled
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onCanceled?: (id: string) => void;
    /**
     * Callback function that is called when the payable is submitted
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onSubmitted?: (id: string) => void;
    /**
     * Callback function that is called when the payable is rejected
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onRejected?: (id: string) => void;
    /**
     * Callback function that is called when the payable is approved
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onApproved?: (id: string) => void;
    /** Callback function that is called when the payable is reopened
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onReopened?: (id: string) => void;
    /** Callback function that is called when the payable is deleted
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onDeleted?: (id: string) => void;
    /**
     * Callback function that is called when the user press the Pay button
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onPay?: (id: string, _data?: unknown, actions?: PayActionHandlers) => void;
    /**
     * Callback function that is called when the user press the Pay button in US
     *
     * @param {string} id - The ID of the payable
     *
     * @returns {void}
     */
    onPayUS?: (id: string) => void;
};

interface PayablesDetailsProps extends UsePayableDetailsProps {
    optionalFields?: OptionalFields;
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
    enableGLCodes?: boolean;
    onClose?: () => void;
}
declare const PayableDetails: (props: PayablesDetailsProps) => _emotion_react_jsx_runtime.JSX.Element;

interface PayablesTableProps extends MonitePayableTableProps {
    /**
     * The event handler for a row click.
     *
     * @param id - The identifier of the clicked row, a string.
     */
    onRowClick?: (id: string) => void;
    /**
     * The event handler for the pay action
     *
     * @param id - The identifier of the row to perform the pay action on, a string.
     */
    onPay?: (id: string, _data?: unknown, actions?: PayActionHandlers) => void;
    /**
     * The event handler for the pay action in US
     *
     * @param id - The identifier of the row to perform the pay action on, a string.
     */
    onPayUS?: (id: string) => void;
    /**
     * Triggered when the filtering options are changed
     *
     * @param filter - An object containing the filter parameters.
     * @param filter.field - The field to filter by, specified as a keyof FilterTypes.
     * @param filter.value - The value to be applied to the filter, of type FilterValue.
     */
    onChangeFilter?: (filter: {
        field: keyof FilterTypes$1;
        value: FilterValue$2;
    }) => void;
    /**
     * Triggered when the sorting options are changed
     *
     * @param params - An object containing the sorting parameters.
     * @param params.sort - The field to sort by, in this case 'created_at'.
     * @param params.order - The sort order can be either SortOrderEnum values or null.
     */
    onChangeSort?: (params: {
        sort: 'created_at';
        order: 'asc' | 'desc' | null;
    }) => void;
    /**
     * The event handler for the file input when no data is present.
     * This triggers the file upload process when the user selects a file.
     */
    openFileInput?: () => void;
    /**
     * The event handler for opening the "New Invoice" dialog when no data is present.
     * This function controls the visibility of the dialog for invoice creation.
     *
     * @param {boolean} isOpen - A boolean value indicating whether the dialog should be open (true) or closed (false).
     */
    setIsCreateInvoiceDialogOpen?: (isOpen: boolean) => void;
}
/**
 * PayablesTable component.
 * @component
 * @example Monite Provider customisation
 * ```ts
 * // You can configure the component through Monite Provider property `componentSettings` like this:
 * const componentSettings = {
 *   payables: {
 *     fieldOrder: ['document_id', 'counterpart_id', 'created_at', 'issued_at', 'due_date', 'status', 'amount', 'pay'],
 *     summaryCardFilters: {
 *       'Overdue Invoices': {
 *         status__in: ['waiting_to_be_paid'],
 *         overdue: true,
 *       },
 *       'High-Value Invoices': {
 *         amount__gte: 10000,
 *       },
 *     },
 *   },
 * };
 * ```
 */
declare const PayablesTable: (props: PayablesTableProps) => _emotion_react_jsx_runtime.JSX.Element;

type PayablesProps = {
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
    /**
     * Enable GL code selection for payable line items.
     * When true, users can assign GL codes to individual line items.
     * GL codes are fetched from the connected accounting system.
     */
    enableGLCodes?: boolean;
} & Pick<UsePayableDetailsProps, 'onSaved' | 'onCanceled' | 'onSubmitted' | 'onRejected' | 'onApproved' | 'onReopened' | 'onDeleted' | 'onPay' | 'onPayUS'>;
declare const Payables: (props: PayablesProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const useGetPayableCounterpart: ({ payable, }: {
    payable?: components["schemas"]["PayableResponseSchema"];
}) => {
    counterpart: {
        id: string;
        created_at: string;
        updated_at: string;
        created_automatically: boolean;
        created_by_entity_user_id?: string;
        default_billing_address_id?: string;
        default_shipping_address_id?: string;
        external_reference?: string;
        individual: components["schemas"]["CounterpartIndividualResponse"];
        language?: components["schemas"]["LanguageCodeEnum"];
        reminders_enabled?: boolean;
        tax_id?: string;
        type: components["schemas"]["CounterpartType"];
    } | {
        id: string;
        created_at: string;
        updated_at: string;
        created_automatically: boolean;
        created_by_entity_user_id?: string;
        default_billing_address_id?: string;
        default_shipping_address_id?: string;
        external_reference?: string;
        language?: components["schemas"]["LanguageCodeEnum"];
        organization: components["schemas"]["CounterpartOrganizationResponse"];
        reminders_enabled?: boolean;
        tax_id?: string;
        type: components["schemas"]["CounterpartType"];
    } | undefined;
    counterpartRawName: string | undefined;
    isCounterpartAIMatched: boolean;
    isCounterpartMatchingToOCRFound: boolean;
    isCounterpartLoading: boolean;
    AISuggestions: {
        suggested_counterpart: components["schemas"]["SuggestedCounterpartPayload"];
    } | undefined;
};

declare const usePayableDetailsThemeProps: (inProps?: Partial<MonitePayableDetailsInfoProps>) => {
    optionalFields: OptionalFields | undefined;
    ocrRequiredFields: OcrRequiredFields;
    ocrMismatchFields: OcrMismatchFields;
    isTagsDisabled: boolean | undefined;
};

type PayableCallbackProps = Pick<UsePayableDetailsProps, 'onSaved' | 'onCanceled' | 'onSubmitted' | 'onRejected' | 'onApproved' | 'onReopened' | 'onDeleted' | 'onPay'>;
/**
 * Custom hook that creates memoized payable callbacks.
 * Each callback calls both the direct prop callback and the component settings callback.
 * Returns undefined for callbacks when neither the direct prop nor component settings callback is defined.
 *
 * @param props - Direct callback props from component props
 * @returns Object with memoized callback handlers (or undefined when no callbacks are defined)
 */
declare const usePayableCallbacks: (props: PayableCallbackProps) => {
    handleSaved: ((id: string) => void) | undefined;
    handleCanceled: ((id: string) => void) | undefined;
    handleSubmitted: ((id: string) => void) | undefined;
    handleRejected: ((id: string) => void) | undefined;
    handleApproved: ((id: string) => void) | undefined;
    handleReopened: ((id: string) => void) | undefined;
    handleDeleted: ((id: string) => void) | undefined;
    handlePay: ((id: string, data?: unknown, actions?: PayActionHandlers) => void) | undefined;
};

interface UsePayButtonVisibilityProps {
    payable?: components['schemas']['PayableResponseSchema'];
    payableRecentPaymentRecordByIntent: PaymentRecordWithIntent[];
}
interface PaymentIntentsAnalysis {
    scheduledIntents: PaymentRecordWithIntent[];
    processingIntents: PaymentRecordWithIntent[];
    succeededIntents: PaymentRecordWithIntent[];
    createdRecords: PaymentRecordWithIntent[];
    hasAnyIntentOtherThanCreated: boolean;
    aggregation: Record<string, {
        count: number;
        sum: number;
        records: Array<components['schemas']['PaymentRecordResponse']>;
    }>;
    idPaymentIntentInCreated?: string;
}
declare const usePayButtonVisibility: ({ payable, payableRecentPaymentRecordByIntent, }: UsePayButtonVisibilityProps) => {
    showPayButton: boolean;
    isPayAllowed: boolean;
    payableStatusCanBePaid: boolean;
    intentsAnalysis: PaymentIntentsAnalysis;
};

declare const useLedgerAccounts: (enabled?: boolean) => _tanstack_react_query.UseQueryResult<{
    data: components["schemas"]["LedgerAccountResponse"][];
    next_pagination_token?: string;
    prev_pagination_token?: string;
}, Error | {
    detail?: components["schemas"]["ValidationError"][];
} | {
    error: components["schemas"]["ErrorSchema"];
}>;

interface InvoiceDetailsCreateProps {
    id?: never;
    /** The type of the receivable */
    type: components['schemas']['ReceivableResponse']['type'];
    /**
     * Indicates that the invoice has been successfuly created.
     *
     * @param {string} receivableId Invoice ID
     *
     * @returns {void}
     */
    onCreate?: (receivableId: string) => void;
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
}

interface ExistingReceivableDetailsProps {
    /** Receivable ID */
    id: string;
    type?: never;
    /**
     * Function called to close the invoice details.
     */
    onClose: () => void;
    /**
     * Function called after invoice is duplicated.
     */
    onDuplicate?: (invoiceId: string) => void;
    onMarkAsUncollectible?: (invoiceId: string) => void;
    openInvoiceDetails?: (invoiceId: string) => void;
}
type InvoiceDetailsProps = ExistingReceivableDetailsProps | InvoiceDetailsCreateProps;
declare const InvoiceDetails: (props: InvoiceDetailsProps) => _emotion_react_jsx_runtime.JSX.Element;

type ReceivablesProps = {
    /** @see {@link CustomerTypes} */
    customerTypes?: CustomerTypes;
};
declare const Receivables: (props: ReceivablesProps) => _emotion_react_jsx_runtime.JSX.Element;

type OnboardingPersonId = string | null;
type OnboardingField = components['schemas']['OnboardingCurrencyField'] | components['schemas']['OnboardingDateField'] | components['schemas']['OnboardingEmailField'] | components['schemas']['OnboardingFloatField'] | components['schemas']['OnboardingStringField'] | components['schemas']['OnboardingCountryField'] | components['schemas']['OnboardingUrlField'];
type OnboardingErrorField = {
    code: string;
    message: string;
};
type OnboardingOutputFieldsType = NestedDictionary<OnboardingField | OnboardingValueType>;
type OnboardingOutputValuesType<TValue extends OnboardingValueType = OnboardingValueType> = NestedDictionary<TValue>;
type OnboardingFieldsType = OnboardingOutputFieldsType | Blob | boolean | number | string;
type OnboardingValuesType<TValue extends OnboardingValueType = OnboardingValueType> = OnboardingOutputValuesType<TValue> | boolean | Blob | number | string;
type OnboardingMaskType = NestedDictionary<boolean>;
type OnboardingAddressType = components['schemas']['OptionalPersonAddressRequest'] | components['schemas']['EntityAddressSchema'];
type OnboardingValueType = undefined | boolean | string | number | Blob | null | components['schemas']['OnboardingError'];
type NestedDictionary<T> = {
    [key: string]: T | NestedDictionary<T>;
};
type OnboardingTestData<F extends OnboardingFieldsType = OnboardingFieldsType, V extends OnboardingOutputValuesType = OnboardingOutputValuesType, E extends OnboardingErrorField[] = OnboardingErrorField[]> = {
    fields: F;
    values: V;
    errors: E;
};
type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object | undefined ? RecursivePartial<T[P]> : T[P];
};
type OnboardingOptionalParams = {
    parentKey?: string;
    exclude?: string[];
    optional?: string[];
    errors?: {
        code: string;
        message: string;
    }[];
};
type OnboardingRelationshipCode = keyof Pick<components['schemas']['OnboardingPersonRelationship'], 'representative' | 'owner' | 'director' | 'executive'>;
type EntityOrganizationRelationshipCode = keyof Pick<components['schemas']['OrganizationSchema'], 'representative_provided' | 'owners_provided' | 'directors_provided' | 'executives_provided'>;
type OrganizationRequirements = Partial<Record<EntityOrganizationRelationshipCode, boolean>>;
type OnboardingPersonIndex = string | null;
type OnboardingRequirementMask = Extract<components['schemas']['OnboardingRequirement'], 'representative' | 'directors' | 'executives' | 'owners'>;
type OnboardingProps = Pick<OnboardingSettings, 'showContinueButton' | 'allowedCurrencies' | 'allowedCountries' | 'onComplete' | 'onContinue'>;

/**
 * Onboarding component
 * @description Onboarding component.
 */
declare const Onboarding: (props: OnboardingProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const Products: () => _emotion_react_jsx_runtime.JSX.Element;

declare const FILTER_TYPE_SEARCH = "search";
declare const FILTER_TYPE_TYPE = "type";
declare const FILTER_TYPE_UNITS = "units";

type Filters = {
    [FILTER_TYPE_SEARCH]?: string | null;
    [FILTER_TYPE_TYPE]?: ProductServiceTypeEnum$1 | null;
    [FILTER_TYPE_UNITS]?: string | null;
};
type FilterValue = ProductServiceTypeEnum$1 | 'all' | string | null;
type ProductServiceTypeEnum$1 = components['schemas']['ProductServiceTypeEnum'];

interface ProductTableProps {
    /**
     * Triggered when the filtering options are changed.
     * Sync with the server *is* performed.
     *
     * @param filter - An object containing the filter parameters.
     * @param filter.field - The field to filter by, specified as a keyof FilterTypes.
     * @param filter.value - The value to be applied to the filter, of type FilterValue.
     */
    onFilterChanged?: (filter: {
        field: keyof Filters;
        value: FilterValue;
    }) => void;
    /**
     * Triggered when the sorting options are changed.
     * Sync with the server *is* performed.
     *
     * @param params - An object containing the sorting parameters.
     * @param params.sort - The field to sort by, in this case PayableCursorFields.CREATED_AT.
     * @param params.order - The sort order can be either SortOrderEnum values or null.
     */
    onSortChanged?: (params: ProductsTableSortModel) => void;
    /**
     * The event handler for a row click.
     *
     * @param product - The product selected from the table by clicking on the row.
     */
    onRowClick?: (product: ProductServiceResponse$1) => void;
    /**
     * The event handler for a product edit. Triggers when the user clicks the edit button.
     * Sync with the server is *not* performed.
     *
     * @param product - The product on which the user clicked the edit button.
     */
    onEdit?: (product: ProductServiceResponse$1) => void;
    /**
     * The event handler for a product delete.
     * Triggers when the user deletes the product from the modal and sync with server is successful.
     * Sync with the server *is* performed.
     *
     * @param productId - Removed product ID.
     */
    onDeleted?: (productId: ProductServiceResponse$1['id']) => void;
    /**
     * The event handler open create modal
     * Triggers when the user click on the create new button for no data state
     */
    openCreateModal?: () => void;
}
interface ProductsTableSortModel {
    field: ProductCursorFields;
    sort: NonNullable<GridSortDirection>;
}
declare const ProductsTable: (props: ProductTableProps) => _emotion_react_jsx_runtime.JSX.Element;
type ProductServiceResponse$1 = components['schemas']['ProductServiceResponse'];
type ProductCursorFields = components['schemas']['ProductCursorFields'];

interface ProductFormValues {
    name: string;
    type: ProductServiceTypeEnum;
    units: string;
    smallestAmount: number;
    pricePerUnit: number;
    currency: CurrencyEnum$2;
    description?: string;
}
type ProductServiceTypeEnum = components['schemas']['ProductServiceTypeEnum'];
type CurrencyEnum$2 = components['schemas']['CurrencyEnum'];

/** View of the product details */
declare enum ProductDetailsView {
    /** Read mode - the user is only viewing the product details */
    Read = "read",
    /** Edit mode - the user is editing the product details */
    Edit = "edit"
}
type ProductServiceResponse = components['schemas']['ProductServiceResponse'];
/** Props for the product details component when the product already exists */
interface ExistingProductDetailsProps {
    /** Product ID */
    id: string;
    /**
     * Callback is fired when a product is updated and sync with server is successful
     *
     * @param product
     */
    onUpdated?: (product: ProductServiceResponse) => void;
    /**
     * Callback is fired when a product is deleted and sync with server is successful
     *
     * @param product
     */
    onDeleted?: (productId: ProductServiceResponse['id']) => void;
    /**
     * Initial view of the product details
     * It might be `read` - when the user is only viewing
     *  the product details
     *  (but the user can click on the edit button to switch to edit mode)
     *
     *  or `edit` - when the user is editing the product details
     *
     * @default ProductDetailsView.Read
     */
    initialView?: ProductDetailsView;
}
/**
 * Props for the product details component when the product does not exist yet
 *  (we are creating a new product)
 */
interface ProductDetailsCreateProps {
    id?: never;
    /**
     * Callback is fired when a product is created and sync with server is successful
     *
     * @param product
     */
    onCreated?: (product: ProductServiceResponse) => void;
    /** Initial values for the product form */
    defaultValues?: Partial<ProductFormValues>;
}
type ProductDetailsProps = ExistingProductDetailsProps | ProductDetailsCreateProps;

declare const ProductDetails: (props: ProductDetailsProps) => _emotion_react_jsx_runtime.JSX.Element;

interface TagsTableProps {
    onChangeSort?: (params: TagsTableSortModel) => void;
    showCreationModal?: () => void;
}
interface TagsTableSortModel {
    field: components['schemas']['TagCursorFields'];
    sort: NonNullable<GridSortDirection>;
}
declare const TagsTable: (props: TagsTableProps) => _emotion_react_jsx_runtime.JSX.Element;

interface ITag {
    id: string;
    name: string;
    category?: components['schemas']['TagCategory'];
    keywords?: string[] | string;
}
interface TagFormModalProps {
    tag?: ITag;
    onCreate?: (tag: components['schemas']['TagReadSchema']) => void;
    onUpdate?: (tag: components['schemas']['TagReadSchema']) => void;
    onClose?: () => void;
    onDelete?: (tag: components['schemas']['TagReadSchema']) => void;
    isDeleteAllowed: boolean;
    /** Whether the modal is open or not */
    open: boolean;
}
/**
 * `TagFormModal` is responsible for creating or updating
 *   the tag.
 *  If no `tag` provided then the form is working on `creating` mode
 *  If `tag` provided then the form is working on `updating` mode
 */
declare const TagFormModal: (props: TagFormModalProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const Tags: () => _emotion_react_jsx_runtime.JSX.Element;

declare const UserRoles: () => _emotion_react_jsx_runtime.JSX.Element;

interface UserRolesTableProps {
    /**
     * Triggered when the filtering options are changed.
     * Sync with the server *is* performed.
     *
     * @param filter - An object containing the filter parameters.
     * @param filter.field - The field to filter by, specified as a keyof FilterTypes.
     * @param filter.value - The value to be applied to the filter, of type FilterValue.
     */
    onFilterChanged?: (filter: {
        field: keyof FilterType;
        value: FilterValue$3;
    }) => void;
    /**
     * Triggered when the sorting options are changed.
     * Sync with the server *is* performed.
     *
     * @param params - An object containing the sorting parameters.
     * @param params.sort - The field to sort by, in this case PayableCursorFields.CREATED_AT.
     * @param params.order - The sort order can be either SortOrderEnum values or null.
     */
    onSortChanged?: (params: UserRolesTableSortModel) => void;
    /**
     * Triggered when a row is clicked.
     *
     * @param id - The id of the row that was clicked.
     */
    onRowClick?: (id: string) => void;
    /**
     * Triggered when the create button is clicked for no data state
     */
    handleCreateNew?: () => void;
}
interface UserRolesTableSortModel {
    field: components['schemas']['RoleCursorFields'];
    sort: NonNullable<GridSortDirection>;
}
declare const UserRolesTable: (props: UserRolesTableProps) => _emotion_react_jsx_runtime.JSX.Element;

interface UserRoleEditDialogProps {
    /** The id of the role to be displayed */
    id?: string;
    onCreated: (role: components['schemas']['RoleResponse']) => void;
    onUpdated: (role: components['schemas']['RoleResponse']) => void;
    onClickDeleteRole: () => void;
}
declare const UserRoleEditDialog: ({ id, onCreated, onUpdated, onClickDeleteRole, }: UserRoleEditDialogProps) => _emotion_react_jsx_runtime.JSX.Element;

interface UserRoleDetailsDialogProps {
    /** The id of the role to be displayed */
    id?: string;
    /** Callback fired on click of edit role button */
    onClickEditRole: () => void;
    /** Callback fired on click of delete role button */
    onClickDeleteRole: () => void;
}
declare const UserRoleDetailsDialog: ({ id, onClickEditRole, onClickDeleteRole, }: UserRoleDetailsDialogProps) => _emotion_react_jsx_runtime.JSX.Element;

interface UserRoleDeleteDialogProps {
    id?: string;
    onDeleted: () => void;
}
declare const UserRoleDeleteDialog: ({ id, onDeleted, }: UserRoleDeleteDialogProps) => _emotion_react_jsx_runtime.JSX.Element | null;

type PageHeaderProps = {
    title: ReactNode;
    extra?: ReactNode;
    className?: string;
};
declare const PageHeader: ({ title, extra, className }: PageHeaderProps) => _emotion_react_jsx_runtime.JSX.Element;

interface DialogContextType {
    isDialogContent: boolean;
    onClose?: (...args: any[]) => void;
}
declare const useDialog: () => DialogContextType | undefined;
declare const Dialog: react.ForwardRefExoticComponent<Omit<MoniteDialogProps, "ref"> & react.RefAttributes<HTMLDivElement>>;

declare function Integrations(): _emotion_react_jsx_runtime.JSX.Element;

type TemplateSettingsProps = {
    /** Flag that controls whether settings are shown inside a fullscreen dialog or not */
    isDialog?: boolean;
    /** Flag that controls whether dialog is open or not. It's meant to be passed in when isDialog is true */
    isOpen?: boolean;
    /** Callback function that is called when you close the dialog. It's meant to be passed in when isDialog is true */
    handleCloseDialog?: () => void;
};
declare const TemplateSettings: (props: TemplateSettingsProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const DocumentDesign: (props: TemplateSettingsProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const FinanceBanner: (props: FinanceBannerProps) => _emotion_react_jsx_runtime.JSX.Element;
type FinanceBannerProps = {
    /** `enableServicingBanner` is a boolean flag that enables the `FinanceBanner` to be a small summarized version of the financing tab, but only works when entity is onboarded and is servicing. */
    enableServicingBanner?: boolean;
    /** Function that is called when clicking on View Details button.
     * The button will only appear when entity is servicing, enableServicingBanner is true and handleViewDetails is passed.
     * The purpose of this button is to give the user a way to navigate to the financing page through it. */
    handleViewDetails?: () => void;
};

declare const FinanceIntegrationCard: () => _emotion_react_jsx_runtime.JSX.Element | null;

interface FinanceInvoiceProps {
    invoice: components['schemas']['InvoiceResponsePayload'];
}
declare const FinanceInvoice: ({ invoice }: FinanceInvoiceProps) => _emotion_react_jsx_runtime.JSX.Element | null;

declare const FinanceTab: ({ onRowClick, }: {
    onRowClick?: (invoice_id: string) => void;
}) => _emotion_react_jsx_runtime.JSX.Element | null;

declare const AIAssistant: () => _emotion_react_jsx_runtime.JSX.Element;

interface ChartData {
    field_value: number;
    field_name: string;
}
interface Chart {
    chart_type: 'bar' | 'pie';
    chart_metric: string;
    data_points: ChartData[];
}
interface TextPart {
    id: number;
    type: 'text';
    content: string;
}
interface ChartPart {
    id: number;
    type: 'chart';
    content: Chart;
}
type Part = TextPart | ChartPart;
interface Conversation {
    id: string;
    title: string;
    created_at: string;
    is_starred: boolean;
    messages: AIMessage[];
}
interface Conversations {
    [title: string]: Conversation[];
}
interface AIMessage {
    id: string;
    created_at: string;
    role: 'system' | 'user' | 'assistant' | 'data';
    content: string;
}
interface Prompt {
    id: string;
    content: string;
    created_at: string;
}
type Feedback = 'like' | 'dislike';
type ChatOptions = UseChatOptions & {
    experimental_prepareRequestBody?: (options: {
        id: string;
        messages: UIMessage[];
        requestData?: JSONValue;
        requestBody?: object;
    }) => unknown;
};
type AIView = 'start' | 'chat' | 'history';
type AIChatStatus = 'ready' | 'submitted' | 'streaming' | 'error';
type SortDirection = 'asc' | 'desc';

type MoniteSupportedMessages = Messages;
type MoniteLocale = {
    /**
     * `code` responsible for internationalised Widgets language, internationalised number and currency formatting.
     * By default, it uses `navigator.language` as a fallback in MoniteProvider.
     * Intl format values are accepted and won't cause any trouble.
     *
     * E.g. 'en-GB', 'de-DE', etc.
     */
    code?: string;
    /**
     * `messages` responsible for internationalised Widgets translation.
     * By default, it uses `enLocaleMessages` as a fallback in MoniteProvider.
     *
     * The message object is a key-value pair where the key is the Message ID,
     * and the value is the message string or a `LinguiContextMessage` object.
     *
     * If you need to use context (`msgctxt`) for differentiating messages with the same ID,
     * you can use the LinguiContextMessage object.
     *
     * @example Without context:
     * ```ts
     * {
     *   "Hello": "Hallo"
     * }
     * ```
     *
     * @example With the context:
     * ```ts
     * {
     *   "View": [
     *     { msgstr: "Rechnung ansehen", msgctxt: "InvoicesTableRowActionMenu" },
     *     { msgstr: "Siehe" },
     *   ]
     * }
     * ```
     * In the example with context, `InvoicesTableRowActionMenu` is the context for the message "View".
     * This can be useful when the same message ID needs to be translated differently in different contexts.
     */
    messages?: MoniteSupportedMessages;
    /**
     * `currencyNumberFormat` responsible for currency formatting.
     */
    currencyNumberFormat?: {
        /**
         * Determines the format in which currency values are displayed.
         *
         * Possible values are:
         * - 'symbol': The currency is represented using its symbol (e.g., $ for USD)
         * - 'code': The currency is represented using its ISO code (e.g., USD for US Dollar)
         * - 'name': The currency is represented using its full name (e.g., US Dollar)
         */
        display?: 'symbol' | 'code' | 'name';
        /**
         * The locale code to use for formatting the currency number.
         * If not provided, the `code` will be used.
         *
         * @example 'en-US', 'de-DE', 'en-150', etc.
         */
        localeCode?: string;
    };
    /**
     * `dateFormat` responsible for date & time formatting. It is used in the `Intl.DateTimeFormat` constructor.
     *
     * By default, it uses the following options:
     * ```ts
     * {
     *   day: '2-digit',
     *   month: 'short',
     *   year: 'numeric',
     *   hour: '2-digit',
     *   minute: '2-digit',
     * }
     * ```
     */
    dateFormat?: Pick<Intl.DateTimeFormatOptions, 'weekday' | 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'timeZoneName' | 'hour12' | 'timeZone'>;
};
type MoniteLocaleWithRequired = DeepRequired<Omit<MoniteLocale, 'messages' | 'dateFormat'>> & Partial<Pick<MoniteLocale, 'messages' | 'dateFormat'>> & {
    dateTimeFormat?: Intl.DateTimeFormatOptions;
};

type TypographyStyle = {
    fontSize?: string | number;
    fontWeight?: string | number;
    lineHeight?: string | number;
    textTransform?: 'uppercase' | 'lowercase' | 'capitalize';
};
type ThemeConfig = {
    borderRadius?: number;
    spacing?: number;
    colors?: {
        primary?: string;
        primaryForeground?: string;
        secondary?: string;
        neutral?: string;
        info?: string;
        success?: string;
        warning?: string;
        error?: string;
        background?: string;
        text?: string;
    };
    typography?: {
        fontFamily?: string;
        fontSize?: number;
        h1?: TypographyStyle;
        h2?: TypographyStyle;
        h3?: TypographyStyle;
        subtitle1?: TypographyStyle;
        subtitle2?: TypographyStyle;
        body1?: TypographyStyle;
        body2?: TypographyStyle;
    };
    components?: {
        invoiceStatusChip?: Partial<MoniteInvoiceStatusChipProps>;
        payableStatusChip?: Partial<MonitePayableStatusChipProps>;
        approvalRequestStatusChip?: Partial<MoniteApprovalRequestStatusChipProps>;
        invoiceRecurrenceStatusChip?: Partial<MoniteInvoiceRecurrenceStatusChipProps>;
        invoiceRecurrenceIterationStatusChip?: Partial<MoniteInvoiceRecurrenceIterationStatusChipProps>;
        counterpartStatusChip?: Partial<MoniteCounterpartStatusChipProps>;
        approvalStatusChip?: Partial<MoniteApprovalStatusChipProps>;
    };
};
interface BaseChipProps {
    /** The variant of the Chip. */
    variant?: ChipProps['variant'];
    /** The size of the Chip. */
    size?: ChipProps['size'];
}
interface BaseStatusChipProps extends BaseChipProps {
    /** Display status icon? */
    icon?: boolean;
}
type MoniteCounterpartType = 'customer' | 'vendor';
interface MoniteInvoiceStatusChipProps extends BaseStatusChipProps {
    /** The status of the invoice. */
    status: components['schemas']['ReceivablesStatusEnum'];
}
interface MoniteInvoiceRecurrenceStatusChipProps extends BaseStatusChipProps {
    /** The status of the recurrence. */
    status: components['schemas']['RecurrenceStatus'];
}
interface MoniteInvoiceRecurrenceIterationStatusChipProps extends BaseStatusChipProps {
    /** The status of the iteration. */
    status: components['schemas']['IterationStatus'];
}
interface MonitePayableStatusChipProps extends BaseStatusChipProps {
    /** The status of the payable. */
    status: components['schemas']['PayableStateEnum'];
}
interface MoniteCounterpartStatusChipProps extends BaseChipProps {
    /** The status of the invoice. */
    status: MoniteCounterpartType;
}
interface MoniteApprovalRequestStatusChipProps extends BaseStatusChipProps {
    /** The status of the approval request. */
    status: components['schemas']['ApprovalRequestStatus'];
}
interface MoniteApprovalStatusChipProps extends BaseStatusChipProps {
    /** The status of the payable. */
    status: components['schemas']['ApprovalPolicyStatus'];
}

interface MoniteSettings {
    entityId: string;
    apiUrl?: string;
    fetchToken: () => Promise<components['schemas']['AccessTokenResponse']>;
}
interface MoniteProviderProps {
    children?: ReactNode;
    /**
     * `theme` responsible for global styling of all Widgets provided.
     * If `theme` is not provided, `Monite` uses default theme.
     */
    theme?: ThemeConfig;
    /** Monite initial settings  */
    monite: MoniteSettings;
    /**
     * `locale` responsible for internationalisation
     *  of all Widgets provided.
     */
    locale?: MoniteLocale;
    /**
     * Component settings
     */
    componentSettings?: Partial<ComponentSettings>;
    /**
     * Callback function that is called when the theme is mounted
     */
    onThemeMounted?: () => void;
}
declare const MoniteProvider: ({ monite, theme, componentSettings, children, locale, onThemeMounted, }: MoniteProviderProps) => _emotion_react_jsx_runtime.JSX.Element;

declare const RootElementsContext: react.Context<{
    styles: Element | undefined;
    root: Element | undefined;
}>;
declare const useRootElements: () => {
    styles: Element | undefined;
    root: Element | undefined;
};
declare const RootElementsProvider: ({ children, elements, }: {
    children: ReactNode;
    elements?: ContextType<typeof RootElementsContext>;
}) => _emotion_react_jsx_runtime.JSX.Element;

interface MoniteContextBaseValue {
    locale: MoniteLocaleWithRequired;
    i18n: I18n;
    dateFnsLocale: Locale;
}
type FetchToken = () => Promise<{
    access_token: string;
    expires_in: number;
    token_type: string;
}>;
type MoniteTheme = Theme$1 & {
    palette: {
        neutral: {
            main: string;
            '10': string;
            '30': string;
            '50': string;
            '70': string;
            '80': string;
            '90': string;
            '95': string;
        };
        primary: {
            main: string;
            '10': string;
            '20': string;
            '30': string;
            '40': string;
            '50': string;
            '55': string;
            '60': string;
            '65': string;
            '80': string;
            '85': string;
            '90': string;
            '95': string;
            foreground: {
                main: string;
            };
        };
        success: {
            main: string;
            '10': string;
            '30': string;
            '50': string;
            '60': string;
            '80': string;
            '90': string;
            '95': string;
        };
        warning: {
            main: string;
            '10': string;
            '30': string;
            '50': string;
            '60': string;
            '80': string;
            '90': string;
            '95': string;
        };
        error: {
            main: string;
            '10': string;
            '25': string;
            '50': string;
            '75': string;
            '100': string;
        };
    };
};
interface MoniteContextValue extends MoniteContextBaseValue, CreateMoniteAPIClientResult {
    environment: 'dev' | 'sandbox' | 'production';
    entityId: string;
    sentryHub: Hub | undefined;
    queryClient: QueryClient;
    apiUrl: string;
    theme: MoniteTheme;
    componentSettings: ComponentSettings;
    fetchToken: FetchToken;
}
/**
 * @internal
 */
declare function useMoniteContext(): MoniteContextValue;

type CountriesType = Record<string, string>;
type CountryType = {
    code: AllowedCountries;
    label: string;
};
declare const getCountriesArray: (i18n: I18n) => CountryType[];
declare const getCountries: (i18n: I18n) => CountriesType;
declare const defaultAvailableCountries: AllowedCountries[];
declare const countryCurrencyList: {
    country: string;
    currency: string;
}[];
type AllowedCountries = components['schemas']['AllowedCountries'];

type CurrenciesType = Record<CurrencyEnum$1, string>;
type CurrencyType = {
    code: CurrencyEnum$1;
    label: string;
};
declare const getCurrencies: (i18n: I18n) => CurrenciesType;
declare const defaultAvailableCurrencies: CurrencyEnum$1[];
declare const getCurrenciesArray: (i18n: I18n) => Array<CurrencyType>;
type CurrencyEnum$1 = components['schemas']['CurrencyEnum'];
interface CurrencyGroup {
    title: string;
    predicate: (option: CurrencyType) => boolean;
}
declare const filterOptions: (options: CurrencyType[], state: {
    inputValue: string;
}) => CurrencyType[];
declare const getGroupTitleForOption: (option: CurrencyType, groups?: CurrencyGroup[]) => {
    title: string;
    index: number;
};
declare const sortCurrencyOptionsByGroup: (options: CurrencyType[], groups?: CurrencyGroup[]) => CurrencyType[];
/**
 * Converts a currency rate from minor units (API format) to major units (UI display format)
 * Example: 2000 -> 20
 * Uses core currency conversion utilities for consistency and precision.
 * Rates always use 2 decimal places.
 * @param rateMinor The rate value in minor units (as received from API)
 * @returns The rate value in major units (for UI display)
 */
declare const rateMinorToMajor: (rateMinor: number) => number;
/**
 * Converts a currency rate from major units (UI display format) to minor units (API format)
 * Example: 20 -> 2000
 * Uses core currency conversion utilities for consistency and precision.
 * Rates always use 2 decimal places.
 * @param rateMajor The rate value in major units (from UI)
 * @returns The rate value in minor units (for API)
 */
declare const rateMajorToMinor: (rateMajor: number) => number;

/**
 * Utility functions for handling user names and display logic
 */
/**
 * Combines first and last name into a full name string.
 * Handles both object and separate parameter formats.
 *
 * @param firstName - First name string or object with first_name and last_name properties
 * @param lastName - Last name string (only used when firstName is a string)
 * @returns Combined full name with proper spacing and trimming
 */
declare function getIndividualName(name: {
    first_name: string | undefined;
    last_name: string | undefined;
}): string;
declare function getIndividualName(firstName: string | undefined, lastName: string | undefined): string;
/**
 * Gets individual name with fallback to login if name is empty.
 * Useful for user display components that need to show something meaningful.
 *
 * @param user - User object with name and login properties
 * @returns Full name if available, otherwise login, or empty string
 */
declare function getIndividualNameWithFallback(user: {
    first_name?: string | null;
    last_name?: string | null;
    login?: string | null;
}): string;
/**
 * Gets the display name for a user based on preferences.
 * Shows email if requested, otherwise shows full name with login fallback.
 *
 * @param user - User object with name, email, and login properties
 * @param showEmail - Whether to prioritize email over name
 * @returns Appropriate display name based on preferences
 */
declare function getUserDisplayName(user: {
    first_name?: string | null;
    last_name?: string | null;
    email?: string | null;
    login?: string | null;
}, showEmail?: boolean): string;

declare const createDayPluralForm: (i18n: I18n, days: number) => string;

/**
 * `useCurrencies` hook used for working with currencies
 *  - Display price based on amount, currency and locale.code parameters
 *  - Convert minor units into main currency and vise-versa
 */
declare const useCurrencies: () => {
    currencyList: {
        [key: string]: {
            minor_units: number;
            name: string;
            symbol: string;
        };
    } | undefined;
    getSymbolFromCurrency: (currency?: CurrencyEnum | string) => string | undefined;
    formatCurrencyToDisplay: (amountInMinorUnits: string | number, currency: CurrencyEnum, isCurrencyDisplayed?: boolean) => string | null;
    formatToMinorUnits: (amount: string | number, currency: CurrencyEnum) => number | null;
    formatFromMinorUnits: (amount: number, currency: CurrencyEnum) => number | null;
    isSuccess: boolean;
};
type CurrencyEnum = components['schemas']['CurrencyEnum'];

type ShowFields<T> = {
    [K in keyof T as `show${Capitalize<string & K>}`]: boolean;
};
declare const useOptionalFields: <T extends object>(optionalFields: T | boolean | undefined, defaultOptionalFields: ShowFields<T>) => ShowFields<T>;

type MenuType = Pick<MenuProps, 'open' | 'onClose' | 'onClick' | 'anchorEl' | 'id'> & {
    container: Element | undefined;
};
type ButtonType = Pick<ButtonProps, 'id' | 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'onClick' | 'tabIndex' | 'onKeyDown'>;
declare const useMenuButton: () => {
    open: boolean;
    menuProps: MenuType;
    buttonProps: ButtonType;
    closeMenu: (event?: SyntheticEvent | {}) => void;
};

declare const OCR_SUPPORTED_FORMATS: string[];
/**
 * `useFileInput` is a React hook that creates an invisible `<input type="file" />` and `open()` method for interacting with it.
 *
 * @returns {Object} An object containing two properties:
 *  - `FileInput`: A component that renders an invisible file input element. It takes all the standard HTML input attributes and forwardRefs the underlying input element.
 *  - `openFileInput`: A function that programmatically opens the file input dialog. It can be used to open the file input dialog when another element is clicked.
 *  - `checkFileError`: A function that checks for file errors based on type and size. It returns an error message if there is an issue, or null if the file is valid.
 *
 * @example
 * ```jsx
 * const { FileInput, openFileInput, checkFileError } = useFileInput();
 *
 * return (
 *   <>
 *     <button onClick={openFileInput}>Upload File</button>
 *     <FileInput
 *       onChange={(event) => {
 *         const file = event.target.files?.item(0);
 *         const error = checkFileError(file);
 *         if (error) {
 *           // handle the error (e.g., show a message)
 *           console.error(error);
 *         } else {
 *           // handle the selected file
 *         }
 *       }}
 *     />
 *   </>
 * );
 * ```
 */
declare const useFileInput: () => {
    FileInput: react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & react.RefAttributes<HTMLInputElement>>;
    openFileInput: () => void;
    checkFileError: (file: File) => string | null;
    resetInput: () => void;
};

declare const defaultCounterpartColumnWidth = 250;
declare function useAreCounterpartsLoading(rows?: {
    counterpart_id?: string;
}[]): boolean;
declare function useAutosizeGridColumns(rows: any, columns: GridColDef[], areCounterpartsLoading: boolean, columnSerializationKey: string): react.MutableRefObject<_mui_x_data_grid_internals.GridApiCommunity>;

declare const useFormPersist: (name: string, getValues: () => {
    [key: string]: any;
}, setValue: SetFieldValue<any>) => void;

/**
 * Hook for persistent storage of form fields with SSR safety
 * @param componentPrefix - Prefix to avoid key collisions between different components
 * @param key - The key to store the value under
 * @param initialValue - The initial value to use if none is stored
 */
declare const useLocalStorageFields: <T>(componentPrefix: string, key: string, initialValue: T) => [T, (value: T) => void, boolean, (checked: boolean) => void];

/**
 * Hook to debounce a value
 * @template T - The type of the value to debounce
 * @param value The value to debounce
 * @param delay The delay in milliseconds
 * @returns The debounced value
 */
declare const useDebounce: <T>(value: T, delay?: number) => T;
/**
 * Hook to debounce a callback function with auto-cleanup on unmount
 * @template Args - The argument types of the callback function
 * @template R - The return type of the callback function
 * @param callback The function to be debounced
 * @param delay The delay in milliseconds
 * @returns The debounced callback function
 */
declare const useDebounceCallback: <Args extends unknown[], R>(callback: (...args: Args) => R, delay?: number) => ((...args: Args) => void);

declare function useIsMobile(): boolean;

declare const useComponentSettings: () => {
    componentSettings: ComponentSettings;
    receivablesCallbacks: {
        onUpdate: ((receivableId: string, invoice?: components["schemas"]["InvoiceResponsePayload"]) => void) | undefined;
        onDelete: ((receivableId: string) => void) | undefined;
        onCreate: ((receivableId: string) => void) | undefined;
        onInvoiceSent: ((invoiceId: string) => void) | undefined;
    };
    onboardingCallbacks: {
        onWorkingCapitalOnboardingComplete: ((entityId: string) => void) | undefined;
        onPaymentsOnboardingComplete: ((entityId: string) => void) | undefined;
        onComplete: ((entityId: string) => void) | undefined;
        onContinue: (() => void) | undefined;
    };
    payablesCallbacks: {
        onSaved: ((id: string) => void) | undefined;
        onCanceled: ((id: string) => void) | undefined;
        onSubmitted: ((id: string) => void) | undefined;
        onRejected: ((id: string) => void) | undefined;
        onApproved: ((id: string) => void) | undefined;
        onReopened: ((id: string) => void) | undefined;
        onDeleted: ((id: string) => void) | undefined;
        onPay: ((id: string, _data?: unknown, actions?: PayActionHandlers) => void) | undefined;
    };
};

/**
 * Hook that tracks whether the component is currently mounted.
 * Useful for preventing state updates on unmounted components.
 *
 * @returns A ref object with current boolean indicating mount status
 */
declare const useIsMounted: () => react.MutableRefObject<boolean>;

declare const breakpoints: {
    readonly sm: 640;
    readonly md: 768;
    readonly lg: 1024;
    readonly xl: 1280;
    readonly '2xl': 1536;
};
type Breakpoint = keyof typeof breakpoints;
/**
 * Hook for responsive design using shadcn/ui standard breakpoints
 *
 * @param query - Media query string or breakpoint key
 * @returns boolean indicating if the media query matches
 *
 * @example
 * ```tsx
 * // Using breakpoint keys
 * const isMobile = useMediaQuery('sm'); // true when width < 640px
 * const isTablet = useMediaQuery('md'); // true when width >= 768px
 * const isDesktop = useMediaQuery('lg'); // true when width >= 1024px
 *
 * // Using custom media queries
 * const isLandscape = useMediaQuery('(orientation: landscape)');
 * const isHighDpi = useMediaQuery('(min-resolution: 2dppx)');
 *
 * // Using min/max width queries
 * const isMediumUp = useMediaQuery('(min-width: 768px)');
 * const isLargeDown = useMediaQuery('(max-width: 1023px)');
 * ```
 */
declare function useMediaQuery(query: Breakpoint | string): boolean;
/**
 * Convenience hooks for common breakpoints
 */
declare const useIsMobileScreen: () => boolean;
declare const useIsTabletScreen: () => boolean;
declare const useIsDesktopScreen: () => boolean;
declare const useIsLargeDesktopScreen: () => boolean;
declare const useIsExtraLargeDesktopScreen: () => boolean;
/**
 * Hook for checking if screen is smaller than a breakpoint
 *
 * @param breakpoint - The breakpoint to check against
 * @returns boolean indicating if screen is smaller than the breakpoint
 *
 * @example
 * ```tsx
 * const isSmallerThanLg = useIsSmallerThan('lg'); // true when width < 1024px
 * ```
 */
declare function useIsSmallerThan(breakpoint: Breakpoint): boolean;
/**
 * Hook for checking if screen is larger than a breakpoint
 *
 * @param breakpoint - The breakpoint to check against
 * @returns boolean indicating if screen is larger than the breakpoint
 *
 * @example
 * ```tsx
 * const isLargerThanMd = useIsLargerThan('md'); // true when width > 768px
 * ```
 */
declare function useIsLargerThan(breakpoint: Breakpoint): boolean;

/**
 * Provides a single instance of `<ScopedCssBaseline/>` component,
 * `<EmotionCacheProvider/>` and `<MuiThemeProvider/>` components.
 * This component prevents the creation of multiple `div` wrappers with the same styles,
 * and multiple Emotion Caches
 */
declare const MoniteScopedProviders: ({ children, }: {
    children: ReactNode;
}) => _emotion_react_jsx_runtime.JSX.Element;

declare const MoniteAPIProvider: ({ children, APIContext, }: {
    children?: ReactNode;
    APIContext: Context<QraftContextValue>;
}) => _emotion_react_jsx_runtime.JSX.Element;

export { AIAssistant, schema as APISchema, ApprovalPolicies, ApprovalPoliciesTable, ApprovalPolicyDetails, ApprovalRequests, ApprovalRequestsTable, BankAccountFormDialog, CounterpartAutocomplete, CounterpartDetails, Counterparts, CounterpartsTable, CreditNotesTable, Dialog, DocumentDesign, FinanceBanner, FinanceIntegrationCard, FinanceInvoice, FinanceTab, Integrations, InvoiceDetails, InvoicesTable, MoniteAPIProvider, MoniteProvider, MoniteScopedProviders, OCR_SUPPORTED_FORMATS, Onboarding, PageHeader, PayableDetails, Payables, PayablesTable, ProductDetails, ProductDetailsView, Products, ProductsTable, QuotesTable, Receivables, ReceivablesTable, ReceivablesTableTabEnum, RolesAndApprovalPolicies, RootElementsProvider, TagFormModal, Tags, TagsTable, TemplateSettings, UserRoleDeleteDialog, UserRoleDetailsDialog, UserRoleEditDialog, UserRoles, UserRolesTable, breakpoints, countryCurrencyList, createAPIClient, createDayPluralForm, defaultAvailableCountries, defaultAvailableCurrencies, defaultCounterpartColumnWidth, filterOptions, getCounterpartName, getCountries, getCountriesArray, getCurrencies, getCurrenciesArray, getEntityName, getGroupTitleForOption, getIndividualName, getIndividualNameWithFallback, getUserDisplayName, rateMajorToMinor, rateMinorToMajor, sortCurrencyOptionsByGroup, useApprovalPolicyById, useAreCounterpartsLoading, useAutosizeGridColumns, useComponentSettings, useCounterpartAddresses, useCounterpartAddressesById, useCounterpartBankById, useCounterpartById, useCounterpartContactById, useCounterpartContactList, useCounterpartList, useCounterpartVatById, useCounterpartVatList, useCreateCounterpart, useCreateCounterpartBank, useCreateCounterpartContact, useCreateCounterpartVat, useCreatePaymentRecord, useCurrencies, useDebounce, useDebounceCallback, useDeleteCounterpart, useDeleteCounterpartBank, useDeleteCounterpartContact, useDeleteCounterpartVat, useDialog, useEntitySettings, useEntityUserByAuthToken, useEntityUserById, useEntityUserRoleByAuthToken, useFileById, useFileInput, useFormPersist, useGetPayableCounterpart, useGetReceivableById, useIsDesktopScreen, useIsExtraLargeDesktopScreen, useIsLargeDesktopScreen, useIsLargerThan, useIsMobile, useIsMobileScreen, useIsMounted, useIsSmallerThan, useIsTabletScreen, useLedgerAccounts, useLocalStorageFields, useMe, useMediaQuery, useMenuButton, useMoniteContext, useMyEntity, useOptionalFields, usePatchEntitiesIdSettings, usePayButtonVisibility, usePayableCallbacks, usePayableDetailsThemeProps, usePayablePaymentIntentsAndRecords, usePaymentIntentById, usePaymentRecordById, usePaymentRecords, useReceivablesTableProps, useRootElements, useUpdateCounterpart, useUpdateCounterpartAddress, useUpdateCounterpartBank, useUpdateCounterpartContact, useUpdateCounterpartVat };
export type { AIChatStatus, AIMessage, AIView, ApprovalPolicyDetailsProps, Chart, ChartData, ChartPart, ChatOptions, ComponentSettings, Conversation, Conversations, CounterpartResponse, CounterpartsAutocompleteOptionProps, CountriesType, CountryType, CreateMoniteAPIClientOptions, CreateMoniteAPIClientResult, CreditNotesTableSortModel, CurrenciesType, CurrencyGroup, CurrencyType, EntityOrganizationRelationshipCode, ExistingProductDetailsProps, Feedback, GenericCounterpartContact, InvoicesTableProps, MoniteDialogProps, MoniteReceivablesTableProps, MoniteSettings, OnboardingAddressType, OnboardingErrorField, OnboardingField, OnboardingFieldsType, OnboardingMaskType, OnboardingOptionalParams, OnboardingOutputFieldsType, OnboardingOutputValuesType, OnboardingPersonId, OnboardingPersonIndex, OnboardingProps, OnboardingRelationshipCode, OnboardingRequirementMask, OnboardingTestData, OnboardingValueType, OnboardingValuesType, OrganizationRequirements, Part, PayActionHandlers, PayablesDetailsProps, PayablesProps, ProductDetailsCreateProps, ProductDetailsProps, ProductTableProps, Prompt, QuotesTableSortModel, ReceivableGridSortModel, ReceivablesTableProps, RecursivePartial, SortDirection, TemplateSettingsProps, TextPart };
