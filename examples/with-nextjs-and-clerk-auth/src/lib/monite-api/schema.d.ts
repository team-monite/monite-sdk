/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/accounting_connections': {
    /**
     * Get accounting connections
     * @description Get all connections
     */
    get: operations['get_accounting_connections'];
    /**
     * Connect to an accounting system
     * @description Create new connection
     */
    post: operations['post_accounting_connections'];
  };
  '/accounting_connections/{connection_id}': {
    /**
     * Get an accounting connection by ID
     * @description Get connection by id
     */
    get: operations['get_accounting_connections_id'];
  };
  '/accounting_connections/{connection_id}/disconnect': {
    /**
     * Disconnect from an accounting system
     * @description Disconnect
     */
    post: operations['post_accounting_connections_id_disconnect'];
  };
  '/accounting_sync_rules': {
    /** Get accounting sync rules */
    get: operations['get_accounting_sync_rules'];
    /** Update accounting sync rules */
    patch: operations['patch_accounting_sync_rules'];
  };
  '/approval_policies': {
    /**
     * Get approval policies
     * @description Retrieve a list of all approval policies with pagination.
     */
    get: operations['get_approval_policies'];
    /**
     * Create an approval policy
     * @description Create a new approval policy.
     */
    post: operations['post_approval_policies'];
  };
  '/approval_policies/{approval_policy_id}': {
    /**
     * Get an approval policy by ID
     * @description Retrieve a specific approval policy.
     */
    get: operations['get_approval_policies_id'];
    /**
     * Delete an approval policy
     * @description Delete an existing approval policy.
     */
    delete: operations['delete_approval_policies_id'];
    /**
     * Update an approval policy
     * @description Update an existing approval policy.
     */
    patch: operations['patch_approval_policies_id'];
  };
  '/approval_policies/{approval_policy_id}/processes': {
    /**
     * Get approval processes created from a policy
     * @description Retrieve a list of all approval policy processes.
     */
    get: operations['get_approval_policies_id_processes'];
  };
  '/approval_policies/{approval_policy_id}/processes/{process_id}': {
    /**
     * Get an approval process by ID
     * @description Retrieve a specific approval policy process.
     */
    get: operations['get_approval_policies_id_processes_id'];
  };
  '/approval_policies/{approval_policy_id}/processes/{process_id}/cancel': {
    /**
     * Cancel an approval process
     * @description Cancel an ongoing approval process for a specific approval policy.
     */
    post: operations['post_approval_policies_id_processes_id_cancel'];
  };
  '/approval_policies/{approval_policy_id}/processes/{process_id}/steps': {
    /**
     * Get the steps of an approval process
     * @description Retrieve a list of approval policy process steps.
     */
    get: operations['get_approval_policies_id_processes_id_steps'];
  };
  '/approval_requests': {
    /** Get approval requests */
    get: operations['get_approval_requests'];
    /** Create an approval request */
    post: operations['post_approval_requests'];
  };
  '/approval_requests/{approval_request_id}': {
    /** Get an approval request by ID */
    get: operations['get_approval_requests_id'];
  };
  '/approval_requests/{approval_request_id}/approve': {
    /** Approve an approval request */
    post: operations['post_approval_requests_id_approve'];
  };
  '/approval_requests/{approval_request_id}/cancel': {
    /** Cancel an approval request */
    post: operations['post_approval_requests_id_cancel'];
  };
  '/approval_requests/{approval_request_id}/reject': {
    /** Reject an approval request */
    post: operations['post_approval_requests_id_reject'];
  };
  '/audit_logs': {
    /** Get the audit log */
    get: operations['get_audit_logs'];
  };
  '/audit_logs/{log_id}': {
    /** Get an audit log entry */
    get: operations['get_audit_logs_id'];
  };
  '/auth/revoke': {
    /**
     * Revoke a token
     * @description Revoke an existing token immediately.
     */
    post: operations['post_auth_revoke'];
  };
  '/auth/token': {
    /**
     * Create a token
     * @description Create a new access token based on client ID and client secret.
     */
    post: operations['post_auth_token'];
  };
  '/bank_accounts': {
    /**
     * Get an entity's bank accounts
     * @description Get all bank accounts of this entity.
     */
    get: operations['get_bank_accounts'];
    /**
     * Create an entity bank account
     * @description Add a new bank account for the specified entity.
     *
     * The minimum required fields are `currency` and `country`. Other required fields depend on the currency:
     *
     * * EUR accounts require `iban`.
     * * GBP accounts require `account_holder_name`, `account_number`, and `sort_code`.
     * * USD accounts require `account_holder_name`, `account_number`, and `routing_number`.
     * * Accounts in other currencies require one of:
     *   * `iban`
     *   * `account_number` and `sort_code`
     *   * `account_number` and `routing_number`
     */
    post: operations['post_bank_accounts'];
  };
  '/bank_accounts/complete_verification': {
    /** Complete entity bank account verification */
    post: operations['post_bank_accounts_complete_verification'];
  };
  '/bank_accounts/start_verification': {
    /**
     * Start entity bank account verification
     * @description Start entity bank account verification. The flow depends on verification type.
     * For airwallex_plaid it generates Plaid Link token to init the Plaid SDK.
     */
    post: operations['post_bank_accounts_start_verification'];
  };
  '/bank_accounts/{bank_account_id}': {
    /**
     * Get an entity's bank account
     * @description Retrieve a bank account by its ID.
     */
    get: operations['get_bank_accounts_id'];
    /**
     * Delete an entity's bank account
     * @description Delete the bank account specified by its ID.
     */
    delete: operations['delete_bank_accounts_id'];
    /**
     * Update an entity's bank account
     * @description Change the specified fields with the provided values.
     */
    patch: operations['patch_bank_accounts_id'];
  };
  '/bank_accounts/{bank_account_id}/complete_verification': {
    /** Complete verification of the provided entity bank account */
    post: operations['post_bank_accounts_id_complete_verification'];
  };
  '/bank_accounts/{bank_account_id}/make_default': {
    /**
     * Set an entity's bank account as the default for its currency
     * @description Set a bank account as the default for this entity per currency.
     */
    post: operations['post_bank_accounts_id_make_default'];
  };
  '/bank_accounts/{bank_account_id}/refresh_verification': {
    /** Refresh verification of the provided entity bank account */
    post: operations['post_bank_accounts_id_refresh_verification'];
  };
  '/bank_accounts/{bank_account_id}/verifications': {
    /** Get a bank account verifications */
    get: operations['get_bank_accounts_id_verifications'];
  };
  '/batch_payments': {
    /** Create a batch payment */
    post: operations['post_batch_payments'];
  };
  '/batch_payments/{batch_payment_id}': {
    /** Get batch payment by ID */
    get: operations['get_batch_payments_id'];
  };
  '/comments': {
    /**
     * Get comments
     * @description Get comments
     */
    get: operations['get_comments'];
    /**
     * Create a comment
     * @description Create new comment
     */
    post: operations['post_comments'];
  };
  '/comments/{comment_id}': {
    /**
     * Get a comment by ID
     * @description Get comment
     */
    get: operations['get_comments_id'];
    /**
     * Delete a comment
     * @description Delete comment
     */
    delete: operations['delete_comments_id'];
    /**
     * Update a comment
     * @description Update comment
     */
    patch: operations['patch_comments_id'];
  };
  '/counterparts': {
    /** Get all counterparts */
    get: operations['get_counterparts'];
    /** Create a counterpart */
    post: operations['post_counterparts'];
  };
  '/counterparts/{counterpart_id}': {
    /** Get a counterpart */
    get: operations['get_counterparts_id'];
    /** Delete a counterpart */
    delete: operations['delete_counterparts_id'];
    /** Update a counterpart */
    patch: operations['patch_counterparts_id'];
  };
  '/counterparts/{counterpart_id}/addresses': {
    /** Get a counterpart's addresses */
    get: operations['get_counterparts_id_addresses'];
    /** Create a counterpart address */
    post: operations['post_counterparts_id_addresses'];
  };
  '/counterparts/{counterpart_id}/addresses/{address_id}': {
    /** Get a counterpart's address */
    get: operations['get_counterparts_id_addresses_id'];
    /** Delete a counterpart's address */
    delete: operations['delete_counterparts_id_addresses_id'];
    /** Update a counterpart's address */
    patch: operations['patch_counterparts_id_addresses_id'];
  };
  '/counterparts/{counterpart_id}/addresses/{address_id}/make_default': {
    /** Set a counterpart's default address */
    post: operations['post_counterparts_id_addresses_id_make_default'];
  };
  '/counterparts/{counterpart_id}/bank_accounts': {
    /** Get a counterpart's bank accounts */
    get: operations['get_counterparts_id_bank_accounts'];
    /** Create a counterpart bank account */
    post: operations['post_counterparts_id_bank_accounts'];
  };
  '/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}': {
    /** Get a counterpart's bank account */
    get: operations['get_counterparts_id_bank_accounts_id'];
    /** Delete a counterpart's bank account */
    delete: operations['delete_counterparts_id_bank_accounts_id'];
    /** Update a counterpart's bank account */
    patch: operations['patch_counterparts_id_bank_accounts_id'];
  };
  '/counterparts/{counterpart_id}/bank_accounts/{bank_account_id}/make_default': {
    /** Set a counterpart's bank account as default for its currency */
    post: operations['post_counterparts_id_bank_accounts_id_make_default'];
  };
  '/counterparts/{counterpart_id}/contacts': {
    /** Get a counterpart's contacts */
    get: operations['get_counterparts_id_contacts'];
    /** Create a counterpart contact */
    post: operations['post_counterparts_id_contacts'];
  };
  '/counterparts/{counterpart_id}/contacts/{contact_id}': {
    /** Get a counterpart's contact */
    get: operations['get_counterparts_id_contacts_id'];
    /** Delete a counterpart's contact */
    delete: operations['delete_counterparts_id_contacts_id'];
    /** Update a counterpart's contact */
    patch: operations['patch_counterparts_id_contacts_id'];
  };
  '/counterparts/{counterpart_id}/contacts/{contact_id}/make_default': {
    /** Set a counterpart's default contact */
    post: operations['post_counterparts_id_contacts_id_make_default'];
  };
  '/counterparts/{counterpart_id}/partner_metadata': {
    /** Get counterpart metadata */
    get: operations['get_counterparts_id_partner_metadata'];
    /** Replace counterpart metadata */
    put: operations['put_counterparts_id_partner_metadata'];
  };
  '/counterparts/{counterpart_id}/vat_ids': {
    /** Get a counterpart's VAT IDs */
    get: operations['get_counterparts_id_vat_ids'];
    /** Create a counterpart VAT ID */
    post: operations['post_counterparts_id_vat_ids'];
  };
  '/counterparts/{counterpart_id}/vat_ids/{vat_id}': {
    /** Get a counterpart's VAT ID */
    get: operations['get_counterparts_id_vat_ids_id'];
    /** Delete a counterpart's VAT ID */
    delete: operations['delete_counterparts_id_vat_ids_id'];
    /** Update a counterpart's VAT ID */
    patch: operations['patch_counterparts_id_vat_ids_id'];
  };
  '/data_exports': {
    /** Get All */
    get: operations['get_data_exports'];
    /** Add Document Export */
    post: operations['post_data_exports'];
  };
  '/data_exports/extra_data': {
    /** Get All */
    get: operations['get_data_exports_extra_data'];
    /** Create Extra Data */
    post: operations['post_data_exports_extra_data'];
  };
  '/data_exports/extra_data/{extra_data_id}': {
    /** Get Extra Data By Id */
    get: operations['get_data_exports_extra_data_id'];
    /** Delete Extra Data */
    delete: operations['delete_data_exports_extra_data_id'];
    /** Update Extra Data */
    patch: operations['patch_data_exports_extra_data_id'];
  };
  '/data_exports/supported_formats': {
    /** Get Supported Export Formats */
    get: operations['get_data_exports_supported_formats'];
  };
  '/data_exports/{document_export_id}': {
    /** Get Document Export By Id */
    get: operations['get_data_exports_id'];
  };
  '/document_templates': {
    /**
     * Get PDF templates
     * @description This API call returns all supported templates with language codes.
     */
    get: operations['get_document_templates'];
  };
  '/document_templates/system': {
    /**
     * Get built-in PDF templates
     * @description This API call returns all supported system templates with language codes.
     */
    get: operations['get_document_templates_system'];
  };
  '/document_templates/{document_template_id}': {
    /** Get a PDF template by ID */
    get: operations['get_document_templates_id'];
  };
  '/document_templates/{document_template_id}/make_default': {
    /** Set the default PDF template */
    post: operations['post_document_templates_id_make_default'];
  };
  '/document_templates/{document_template_id}/preview': {
    /**
     * Preview a PDF template
     * @description Returns a sample PDF invoice generated using the specified template.
     */
    get: operations['get_document_templates_id_preview'];
  };
  '/entities': {
    /**
     * Get all entities
     * @description Retrieve a list of all entities.
     */
    get: operations['get_entities'];
    /**
     * Create an entity
     * @description Create a new entity from the specified values.
     */
    post: operations['post_entities'];
  };
  '/entities/me': {
    /**
     * Get the current entity
     * @deprecated
     * @description Deprecated. Use `GET /entity_users/my_entity` instead.
     */
    get: operations['get_entities_me'];
    /**
     * Update the current entity
     * @deprecated
     * @description Deprecated. Use `PATCH /entity_users/my_entity` instead.
     */
    patch: operations['patch_entities_me'];
  };
  '/entities/{entity_id}': {
    /**
     * Get an entity
     * @description Retrieve an entity by its ID.
     */
    get: operations['get_entities_id'];
    /**
     * Update an entity
     * @description Change the specified fields with the provided values.
     */
    patch: operations['patch_entities_id'];
  };
  '/entities/{entity_id}/documents': {
    /**
     * Update entity onboarding documents
     * @description Update the onboarding documents of an entity.
     */
    post: operations['post_entities_id_documents'];
  };
  '/entities/{entity_id}/logo': {
    /**
     * Upload an entity logo
     * @description Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.
     */
    put: operations['put_entities_id_logo'];
    /** Delete an entity's logo */
    delete: operations['delete_entities_id_logo'];
  };
  '/entities/{entity_id}/onboarding_data': {
    /** Get entity onboarding data */
    get: operations['get_entities_id_onboarding_data'];
    /** Update entity onboarding data */
    put: operations['put_entities_id_onboarding_data'];
    /** Patch entity onboarding data */
    patch: operations['patch_entities_id_onboarding_data'];
  };
  '/entities/{entity_id}/onboarding_requirements': {
    /**
     * Get onboarding requirements
     * @description Check the information required to complete the onboarding process.
     */
    get: operations['get_entities_id_onboarding_requirements'];
  };
  '/entities/{entity_id}/partner_metadata': {
    /**
     * Get entity metadata
     * @description Retrieve a metadata object associated with this entity, usually in a JSON format.
     */
    get: operations['get_entities_id_partner_metadata'];
    /**
     * Replace entity metadata
     * @description Fully replace the current metadata object with the specified instance.
     */
    put: operations['put_entities_id_partner_metadata'];
  };
  '/entities/{entity_id}/payment_methods': {
    /**
     * Get Enabled Payment Methods
     * @description Get all enabled payment methods.
     */
    get: operations['get_entities_id_payment_methods'];
    /**
     * Enable Payment Methods
     * @description Set which payment methods should be enabled.
     */
    put: operations['put_entities_id_payment_methods'];
  };
  '/entities/{entity_id}/settings': {
    /**
     * Get entity settings
     * @description Retrieve all settings for this entity.
     */
    get: operations['get_entities_id_settings'];
    /**
     * Update entity settings
     * @description Change the specified fields with the provided values.
     */
    patch: operations['patch_entities_id_settings'];
  };
  '/entities/{entity_id}/vat_ids': {
    /** Get an entity's VAT IDs */
    get: operations['get_entities_id_vat_ids'];
    /** Create an entity VAT ID */
    post: operations['post_entities_id_vat_ids'];
  };
  '/entities/{entity_id}/vat_ids/{id}': {
    /** Get an entity's VAT ID */
    get: operations['get_entities_id_vat_ids_id'];
    /** Delete an entity's VAT ID */
    delete: operations['delete_entities_id_vat_ids_id'];
    /** Update an entity's VAT ID */
    patch: operations['patch_entities_id_vat_ids_id'];
  };
  '/entity_users': {
    /**
     * Get all entity users
     * @description Retrieve a list of all entity users.
     */
    get: operations['get_entity_users'];
    /**
     * Create an entity user
     * @description Create a new entity user from the specified values.
     */
    post: operations['post_entity_users'];
  };
  '/entity_users/me': {
    /**
     * Get current entity user
     * @description Retrieve an entity user by its ID.
     */
    get: operations['get_entity_users_me'];
    /**
     * Update current entity user
     * @description Change the specified fields with provided values.
     */
    patch: operations['patch_entity_users_me'];
  };
  '/entity_users/my_entity': {
    /**
     * Get an entity of this user
     * @description Retrieves information of an entity, which this entity user belongs to.
     */
    get: operations['get_entity_users_my_entity'];
    /**
     * Update an entity of this user
     * @description Update information of an entity, which this entity user belongs to.
     */
    patch: operations['patch_entity_users_my_entity'];
  };
  '/entity_users/my_role': {
    /**
     * Get a role of this entity user
     * @description Retrieves information of a role assigned to this entity user.
     */
    get: operations['get_entity_users_my_role'];
  };
  '/entity_users/{entity_user_id}': {
    /**
     * Get an entity user
     * @description Retrieve an entity user by its ID.
     */
    get: operations['get_entity_users_id'];
    /**
     * Update an entity user
     * @description Change the specified fields with provided values.
     */
    patch: operations['patch_entity_users_id'];
  };
  '/events': {
    /**
     * Get
     * @description Get events for a given entity.
     */
    get: operations['get_events'];
  };
  '/events/{event_id}': {
    /**
     * Get By Id
     * @description Get event by ID.
     */
    get: operations['get_events_id'];
  };
  '/files': {
    /** Get files */
    get: operations['get_files'];
    /** Upload a file */
    post: operations['post_files'];
  };
  '/files/{file_id}': {
    /** Get a file by ID */
    get: operations['get_files_id'];
    /** Delete a file */
    delete: operations['delete_files_id'];
  };
  '/ledger_accounts': {
    /**
     * Get ledger accounts
     * @description Get all ledger accounts
     */
    get: operations['get_ledger_accounts'];
  };
  '/ledger_accounts/{ledger_account_id}': {
    /**
     * Get a ledger account by ID
     * @description Get ledger account by id
     */
    get: operations['get_ledger_accounts_id'];
  };
  '/mail_templates': {
    /**
     * Get All With Filters
     * @description Get all custom templates
     */
    get: operations['get_mail_templates'];
    /**
     * Create
     * @description Create custom template
     */
    post: operations['post_mail_templates'];
  };
  '/mail_templates/preview': {
    /**
     * Preview
     * @description Preview rendered template
     */
    post: operations['post_mail_templates_preview'];
  };
  '/mail_templates/system': {
    /**
     * Get All System Templates
     * @description Get all system templates
     */
    get: operations['get_mail_templates_system'];
  };
  '/mail_templates/{template_id}': {
    /**
     * Get
     * @description Get custom template by ID
     */
    get: operations['get_mail_templates_id'];
    /**
     * Delete
     * @description Delete custom template bt ID
     */
    delete: operations['delete_mail_templates_id'];
    /**
     * Update
     * @description Update custom template by ID
     */
    patch: operations['patch_mail_templates_id'];
  };
  '/mail_templates/{template_id}/make_default': {
    /**
     * Make Default
     * @description Make template default
     */
    post: operations['post_mail_templates_id_make_default'];
  };
  '/mailbox_domains': {
    /**
     * Get Domains
     * @description Get all domains owned by partner_id
     */
    get: operations['get_mailbox_domains'];
    /**
     * Create Domain
     * @description Create domain for the partner_id
     */
    post: operations['post_mailbox_domains'];
  };
  '/mailbox_domains/{domain_id}': {
    /**
     * Delete Domain
     * @description Delete domain for the partner_id
     */
    delete: operations['delete_mailbox_domains_id'];
  };
  '/mailbox_domains/{domain_id}/verify': {
    /**
     * Verify Domain
     * @description Verify domain for the partner_id
     */
    post: operations['post_mailbox_domains_id_verify'];
  };
  '/mailboxes': {
    /**
     * Get Mailboxes
     * @description Get all mailboxes owned by Entity
     */
    get: operations['get_mailboxes'];
    /**
     * Create Mailbox
     * @description Create a new mailbox
     */
    post: operations['post_mailboxes'];
  };
  '/mailboxes/search': {
    /**
     * Get Mailboxes By Multiple Entity Ids
     * @description Get all mailboxes owned by Entity
     */
    post: operations['post_mailboxes_search'];
  };
  '/mailboxes/{mailbox_id}': {
    /**
     * Delete Mailbox
     * @description Delete mailbox
     */
    delete: operations['delete_mailboxes_id'];
  };
  '/measure_units': {
    /** Get measure units */
    get: operations['get_measure_units'];
    /** Create a measure unit */
    post: operations['post_measure_units'];
  };
  '/measure_units/{unit_id}': {
    /** Get a measure unit by ID */
    get: operations['get_measure_units_id'];
    /** Delete a measure unit */
    delete: operations['delete_measure_units_id'];
    /** Update a measure unit */
    patch: operations['patch_measure_units_id'];
  };
  '/onboarding_documents': {
    /**
     * Provide files for entity onboarding verification
     * @description Provide files for entity onboarding verification
     */
    post: operations['post_onboarding_documents'];
  };
  '/onboarding_links': {
    /** Create Onboarding Link */
    post: operations['post_onboarding_links'];
  };
  '/onboarding_requirements': {
    /**
     * Get onboarding requirements
     * @description Get onboarding requirements for the entity
     */
    get: operations['get_onboarding_requirements'];
  };
  '/overdue_reminders': {
    /** Get overdue reminder configurations */
    get: operations['get_overdue_reminders'];
    /** Create an overdue reminder configuration */
    post: operations['post_overdue_reminders'];
  };
  '/overdue_reminders/{overdue_reminder_id}': {
    /** Get an overdue reminder configuration by ID */
    get: operations['get_overdue_reminders_id'];
    /** Delete an overdue reminder configuration */
    delete: operations['delete_overdue_reminders_id'];
    /** Update an overdue reminder configuration */
    patch: operations['patch_overdue_reminders_id'];
  };
  '/payable_purchase_orders': {
    /** Get purchase orders */
    get: operations['get_payable_purchase_orders'];
    /** Create a purchase order */
    post: operations['post_payable_purchase_orders'];
  };
  '/payable_purchase_orders/variables': {
    /**
     * Get the available variables for purchase orders
     * @description Get a list of placeholders allowed to insert into an email template for customization
     */
    get: operations['get_payable_purchase_orders_variables'];
  };
  '/payable_purchase_orders/{purchase_order_id}': {
    /** Get a purchase order by ID */
    get: operations['get_payable_purchase_orders_id'];
    /** Delete a purchase order */
    delete: operations['delete_payable_purchase_orders_id'];
    /** Update a purchase order */
    patch: operations['patch_payable_purchase_orders_id'];
  };
  '/payable_purchase_orders/{purchase_order_id}/preview': {
    /** Preview a purchase order's email message */
    post: operations['post_payable_purchase_orders_id_preview'];
  };
  '/payable_purchase_orders/{purchase_order_id}/send': {
    /** Send a purchase order via email */
    post: operations['post_payable_purchase_orders_id_send'];
  };
  '/payables': {
    /**
     * Get payables
     * @description Lists all payables from the connected entity.
     *
     * If you already have the data of the payable (amount in [minor units](
     * https://docs.monite.com/docs/currencies#minor-units), currency, vendor information, and other details)
     * stored somewhere as individual attributes, you can create a payable with these attributes by calling [POST
     * /payables](https://docs.monite.com/reference/post_payables) and providing the [base64-encoded](
     * https://en.wikipedia.org/wiki/Base64) contents of the original invoice file in the field `base64_encoded_file`.
     *
     * A payable is a financial document given by an entity`s supplier itemizing the purchase of a good or a service and
     * demanding payment.
     *
     * The `file_name` field is optional. If omitted, it defaults to “default_file_name”. If the settings are configured
     * to automatically set `suggested_payment_term`, this object can be omitted from the request body.
     *
     * The `id` generated for this payable can be used in other API calls to update the data of this payable or trigger [
     * status transitions](https://docs.monite.com/docs/payable-status-transitions), for example. essential data
     * fields to move from `draft` to `new`
     *
     * Related guide: [Create a payable from data](https://docs.monite.com/docs/collect-payables#create-a-payable-from-data)
     *
     * See also:
     *
     *
     * [Automatic calculation of due date](https://docs.monite.com/docs/collect-payables#automatic-calculation-of-due-date)
     *
     * [Suggested payment date](https://docs.monite.com/docs/collect-payables#suggested-payment-date)
     *
     * [Attach file](https://docs.monite.com/docs/collect-payables#attach-file)
     *
     * [Collect payables by email](https://docs.monite.com/docs/collect-payables#send-payables-by-email)
     *
     * [Manage line items](https://docs.monite.com/docs/manage-line-items)
     */
    get: operations['get_payables'];
    /**
     * Create a payable
     * @description Add a new payable by providing the amount, currency, vendor name, and other details.
     * You can provide the base64_encoded contents of the original invoice file in the field `base64_encoded_file`.
     *
     * You can use this endpoint to bypass the Monite OCR service and provide the data directly
     * (for example, if you already have the data in place).
     *
     * A newly created payable has the the `draft` [status](https://docs.monite.com/docs/payables-lifecycle).
     */
    post: operations['post_payables'];
  };
  '/payables/upload_from_file': {
    /**
     * Upload a payable from a file
     * @description Upload an incoming invoice (payable) in PDF, PNG, JPEG, or TIFF format and scan its contents. The maximum file size is 10MB.
     */
    post: operations['post_payables_upload_from_file'];
  };
  '/payables/validations': {
    /**
     * Get payables validations
     * @description Get payable validations.
     */
    get: operations['get_payables_validations'];
    /**
     * Update payables validations
     * @description Update payable validations.
     */
    put: operations['put_payables_validations'];
  };
  '/payables/validations/reset': {
    /**
     * Reset payables validations
     * @description Reset payable validations to default ones.
     */
    post: operations['post_payables_validations_reset'];
  };
  '/payables/variables': {
    /**
     * Get the available variables for payable email templates
     * @description Get a list of placeholders allowed to insert into an email template for customization
     */
    get: operations['get_payables_variables'];
  };
  '/payables/{payable_id}': {
    /**
     * Get a payable by ID
     * @description Retrieves information about a specific payable with the given ID.
     */
    get: operations['get_payables_id'];
    /**
     * Update a payable
     * @description Updates the information about a specific payable.
     */
    patch: operations['patch_payables_id'];
  };
  '/payables/{payable_id}/approve_payment_operation': {
    /**
     * Approve a payable for payment
     * @description Confirms that the payable is ready to be paid.
     */
    post: operations['post_payables_id_approve_payment_operation'];
  };
  '/payables/{payable_id}/attach_file': {
    /**
     * Attach a file to a payable
     * @description Attach file to payable without existing attachment.
     */
    post: operations['post_payables_id_attach_file'];
  };
  '/payables/{payable_id}/cancel': {
    /**
     * Cancel a payable
     * @description Cancels the payable that was not confirmed during the review.
     */
    post: operations['post_payables_id_cancel'];
  };
  '/payables/{payable_id}/line_items': {
    /**
     * Get the line items of a payable
     * @description Get a list of all line items related to a specific payable.
     * Related guide: [List all payable line items](https://docs.monite.com/docs/manage-line-items#list-all-line-items-of-a-payable)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/docs/manage-line-items)
     *
     * [Collect payables](https://docs.monite.com/docs/collect-payables)
     */
    get: operations['get_payables_id_line_items'];
    /**
     * Add a line item to a payable
     * @description Add a new line item to a specific payable.
     *
     * The `subtotal` and `total` fields of line items are automatically calculated based on the `unit_price`,
     *  `quantity`, and `tax` fields, therefore, are read-only and appear only in the response schema. The field
     *   `ledger_account_id` is required **only** for account integration, otherwise, it is optional.
     *
     * Related guide: [Add line items to a payable](https://docs.monite.com/docs/manage-line-items#add-line-items-to-a-payable)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/docs/manage-line-items)
     *
     * [Collect payables](https://docs.monite.com/docs/collect-payables)
     */
    post: operations['post_payables_id_line_items'];
  };
  '/payables/{payable_id}/line_items/{line_item_id}': {
    /**
     * Get a single line item of a payable
     * @description Get information about a specific line item with a given ID.
     *
     * Related guide: [Retrieve a line item](https://docs.monite.com/docs/manage-line-items#retrieve-a-line-item)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/docs/manage-line-items)
     *
     * [Collect payables](https://docs.monite.com/docs/collect-payables)
     */
    get: operations['get_payables_id_line_items_id'];
    /**
     * Delete a line item from a payable
     * @description Delete the line item with the given ID.
     *
     * Related guide: [Remove a line item](https://docs.monite.com/docs/manage-line-items#remove-a-line-item)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/docs/manage-line-items)
     *
     * [Collect payables](https://docs.monite.com/docs/collect-payables)
     */
    delete: operations['delete_payables_id_line_items_id'];
    /**
     * Update a line item in a payable
     * @description Edits the information of a specific line item.
     *
     * Related guide: [Update a line item](https://docs.monite.com/docs/manage-line-items#update-a-line-item)
     *
     * See also:
     *
     * [Manage line items](https://docs.monite.com/docs/manage-line-items)
     *
     * [Collect payables](https://docs.monite.com/docs/collect-payables)
     */
    patch: operations['patch_payables_id_line_items_id'];
  };
  '/payables/{payable_id}/mark_as_paid': {
    /**
     * Mark a payable as paid
     * @description Mark a payable as paid.
     *
     * Payables can be paid using the payment channels offered by Monite or through external payment channels. In the latter
     *  case, the invoice is not automatically marked as paid in the system and needs to be converted to the paid status
     *  manually.
     *
     * Optionally, it is possible to pass the `comment` field in the request body, to describe how and when the invoice was
     * paid.
     *
     * To use this endpoint with an entity user token, this entity user must have a role that includes the `pay` permission for
     * payables.
     *
     * Related guide: [Mark a payable as paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-paid)
     *
     * See also:
     *
     * [Payables lifecycle](https://docs.monite.com/docs/payables-lifecycle)
     *
     * [Payables status transitions](https://docs.monite.com/docs/collect-payables#suggested-payment-date)
     */
    post: operations['post_payables_id_mark_as_paid'];
  };
  '/payables/{payable_id}/mark_as_partially_paid': {
    /**
     * Mark a payable as partially paid
     * @description Mark a payable as partially paid.
     *
     * If the payable is partially paid, its status is moved to `partially_paid`. The value of the `amount_paid` field must be
     *   the sum of all payments made, not only the last one.
     *
     * Notes:
     * - This endpoint can be used for payables in the `waiting_to_be_paid` status.
     * - The `amount_paid` must be greater than 0 and less than the total payable amount specified by the `amount` field.
     * - The `amount_paid` can be either increased or decreased to reflect reversed payments and chargebacks.
     * - You can use this endpoint multiple times for the same payable to reflect multiple partial payments, always setting the
     *  sum of all payments made.
     * - To use this endpoint with an entity user token, this entity user must have a role that includes the `pay`
     * permission for payables.
     *
     * Related guide: [Mark a payable as partially paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-partially-paid)
     *
     * See also:
     *
     * [Payables lifecycle](https://docs.monite.com/docs/payables-lifecycle)
     *
     * [Payables status transitions](https://docs.monite.com/docs/collect-payables#suggested-payment-date)
     *
     * [Mark a payable as paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-paid)
     */
    post: operations['post_payables_id_mark_as_partially_paid'];
  };
  '/payables/{payable_id}/reject': {
    /**
     * Reject a payable
     * @description Declines the payable when an approver finds any mismatch or discrepancies.
     */
    post: operations['post_payables_id_reject'];
  };
  '/payables/{payable_id}/reopen': {
    /**
     * Reopen a rejected payable
     * @description Reset payable state from rejected to new.
     */
    post: operations['post_payables_id_reopen'];
  };
  '/payables/{payable_id}/submit_for_approval': {
    /**
     * Submit a payable for approval
     * @description Starts the approval process once the uploaded payable is validated.
     */
    post: operations['post_payables_id_submit_for_approval'];
  };
  '/payables/{payable_id}/validate': {
    /**
     * Validate a payable
     * @description Check the invoice for compliance with the requirements for movement from draft to new status.
     */
    post: operations['post_payables_id_validate'];
  };
  '/payment_intents/{payment_intent_id}': {
    /** Get payment intent by ID */
    get: operations['get_payment_intents_id'];
    /** Update the payment intent amount */
    patch: operations['patch_payment_intents_id'];
  };
  '/payment_intents/{payment_intent_id}/history': {
    /** Get the payment intent history */
    get: operations['get_payment_intents_id_history'];
  };
  '/payment_links': {
    /** Create a payment link */
    post: operations['post_payment_links'];
  };
  '/payment_links/{payment_link_id}': {
    /** Get payment link by ID */
    get: operations['get_payment_links_id'];
  };
  '/payment_links/{payment_link_id}/expire': {
    /** Expire a payment link */
    post: operations['post_payment_links_id_expire'];
  };
  '/payment_onboarding_links': {
    /** Create an onboarding link */
    post: operations['post_payment_onboarding_links'];
  };
  '/payment_records': {
    /** Get payment records */
    get: operations['get_payment_records'];
    /** Create a payment record */
    post: operations['post_payment_records'];
  };
  '/payment_records/{payment_record_id}': {
    /** Get a payment record */
    get: operations['get_payment_records_id'];
  };
  '/payment_reminders': {
    /** Get payment reminder configurations */
    get: operations['get_payment_reminders'];
    /** Create a payment reminder configuration */
    post: operations['post_payment_reminders'];
  };
  '/payment_reminders/{payment_reminder_id}': {
    /** Get a payment reminder configuration by ID */
    get: operations['get_payment_reminders_id'];
    /** Delete a payment reminder configuration */
    delete: operations['delete_payment_reminders_id'];
    /** Update a payment reminder configuration */
    patch: operations['patch_payment_reminders_id'];
  };
  '/payment_terms': {
    /** Get payment terms */
    get: operations['get_payment_terms'];
    /** Create a payment term */
    post: operations['post_payment_terms'];
  };
  '/payment_terms/{payment_terms_id}': {
    /** Get a payment term by ID */
    get: operations['get_payment_terms_id'];
    /** Delete a payment term */
    delete: operations['delete_payment_terms_id'];
    /** Update a payment term */
    patch: operations['patch_payment_terms_id'];
  };
  '/persons': {
    /** Get all persons */
    get: operations['get_persons'];
    /** Create a person */
    post: operations['post_persons'];
  };
  '/persons/{person_id}': {
    /** Get a person */
    get: operations['get_persons_id'];
    /** Delete a person */
    delete: operations['delete_persons_id'];
    /** Update a person */
    patch: operations['patch_persons_id'];
  };
  '/persons/{person_id}/documents': {
    /**
     * Update person onboarding documents
     * @description Update the onboarding documents of a person.
     */
    post: operations['post_persons_id_documents'];
  };
  '/persons/{person_id}/onboarding_documents': {
    /**
     * Provide files for person onboarding verification
     * @description Provide files for person onboarding verification
     */
    post: operations['post_persons_id_onboarding_documents'];
  };
  '/products': {
    /** Get products */
    get: operations['get_products'];
    /** Create a product */
    post: operations['post_products'];
  };
  '/products/{product_id}': {
    /** Get a product by ID */
    get: operations['get_products_id'];
    /** Delete a product */
    delete: operations['delete_products_id'];
    /** Update a product */
    patch: operations['patch_products_id'];
  };
  '/receivables': {
    /** Get receivables */
    get: operations['get_receivables'];
    /** Create a receivable */
    post: operations['post_receivables'];
  };
  '/receivables/variables': {
    /**
     * Get email template variables
     * @description Get a list of placeholders that can be used in email templates for customization.
     */
    get: operations['get_receivables_variables'];
  };
  '/receivables/{receivable_id}': {
    /** Get a receivable by ID */
    get: operations['get_receivables_id'];
    /** Delete a receivable */
    delete: operations['delete_receivables_id'];
    /** Update a receivable */
    patch: operations['patch_receivables_id'];
  };
  '/receivables/{receivable_id}/accept': {
    /** Accept a quote */
    post: operations['post_receivables_id_accept'];
  };
  '/receivables/{receivable_id}/cancel': {
    /** Cancel an invoice */
    post: operations['post_receivables_id_cancel'];
  };
  '/receivables/{receivable_id}/clone': {
    /** Clone a receivable */
    post: operations['post_receivables_id_clone'];
  };
  '/receivables/{receivable_id}/decline': {
    /** Decline a quote */
    post: operations['post_receivables_id_decline'];
  };
  '/receivables/{receivable_id}/issue': {
    /** Issue a receivable */
    post: operations['post_receivables_id_issue'];
  };
  '/receivables/{receivable_id}/line_items': {
    /**
     * Update the line items of a receivable
     * @description Replace all line items of an existing invoice or quote with a new list of line items.
     */
    put: operations['put_receivables_id_line_items'];
  };
  '/receivables/{receivable_id}/mark_as_paid': {
    /** Mark an invoice as paid */
    post: operations['post_receivables_id_mark_as_paid'];
  };
  '/receivables/{receivable_id}/mark_as_partially_paid': {
    /**
     * Mark an invoice as partially paid
     * @deprecated
     * @description Deprecated. Use `POST /payment_records` to record an invoice payment.
     */
    post: operations['post_receivables_id_mark_as_partially_paid'];
  };
  '/receivables/{receivable_id}/mark_as_uncollectible': {
    /** Mark an invoice as uncollectible */
    post: operations['post_receivables_id_mark_as_uncollectible'];
  };
  '/receivables/{receivable_id}/pdf_link': {
    /** Get a link to the PDF version of a receivable */
    get: operations['get_receivables_id_pdf_link'];
  };
  '/receivables/{receivable_id}/preview': {
    /** Preview a receivable's email message */
    post: operations['post_receivables_id_preview'];
  };
  '/receivables/{receivable_id}/send': {
    /** Send a receivable via email */
    post: operations['post_receivables_id_send'];
  };
  '/receivables/{receivable_id}/send_test_reminder': {
    /** Send a test reminder */
    post: operations['post_receivables_id_send_test_reminder'];
  };
  '/receivables/{receivable_id}/verify': {
    /** Verify a receivable */
    post: operations['post_receivables_id_verify'];
  };
  '/recurrences': {
    /** Get recurrences */
    get: operations['get_recurrences'];
    /** Create a recurrence */
    post: operations['post_recurrences'];
  };
  '/recurrences/{recurrence_id}': {
    /** Get a recurrence by ID */
    get: operations['get_recurrences_id'];
    /** Update a recurrence */
    patch: operations['patch_recurrences_id'];
  };
  '/recurrences/{recurrence_id}/cancel': {
    /** Cancel a recurrence */
    post: operations['post_recurrences_id_cancel'];
  };
  '/roles': {
    /**
     * Search roles
     * @description Find all roles that match the search criteria.
     */
    get: operations['get_roles'];
    /**
     * Create a role
     * @description Create a new role from the specified values.
     */
    post: operations['post_roles'];
  };
  '/roles/{role_id}': {
    /** Get a role by ID */
    get: operations['get_roles_id'];
    /**
     * Update a role
     * @description Change the specified fields with the provided values.
     */
    patch: operations['patch_roles_id'];
  };
  '/settings': {
    /**
     * Get partner settings
     * @description Retrieve all settings for this partner.
     */
    get: operations['get_settings'];
    /**
     * Update partner settings
     * @description Change the specified fields with the provided values.
     */
    patch: operations['patch_settings'];
  };
  '/tags': {
    /**
     * Get tags
     * @description Get a list of all tags that can be assigned to payables.
     *     Tags can be used, for example, as trigger conditions in payable approval policies.
     */
    get: operations['get_tags'];
    /**
     * Create a tag
     * @description Create a new tag for use in payables. The tag name must be unique.
     *     Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
     *
     *
     * The response returns an auto-generated ID assigned to this tag.
     * To assign this tag to a payable, send the tag ID in the `tag_ids` list when creating or updating a payable.
     */
    post: operations['post_tags'];
  };
  '/tags/{tag_id}': {
    /**
     * Get a tag by ID
     * @description Get information about a tag with the given ID.
     */
    get: operations['get_tags_id'];
    /**
     * Delete a tag
     * @description Delete a tag with the given ID. This tag will be automatically deleted from all payables where it's used.
     */
    delete: operations['delete_tags_id'];
    /**
     * Update a tag
     * @description Change the tag name. The new name must be unique among existing tags.
     *     Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
     */
    patch: operations['patch_tags_id'];
  };
  '/text_templates': {
    /**
     * Get text templates
     * @description Get text templates
     */
    get: operations['get_text_templates'];
    /**
     * Create a text template
     * @description Create a text template
     */
    post: operations['post_text_templates'];
  };
  '/text_templates/{text_template_id}': {
    /**
     * Get a text template by ID
     * @description Get all custom contents
     */
    get: operations['get_text_templates_id'];
    /**
     * Delete a text template
     * @description Delete custom content by ID
     */
    delete: operations['delete_text_templates_id'];
    /**
     * Update a text template by ID
     * @description Update custom content by ID
     */
    patch: operations['patch_text_templates_id'];
  };
  '/text_templates/{text_template_id}/make_default': {
    /**
     * Make a text template default
     * @description Make text template default
     */
    post: operations['post_text_templates_id_make_default'];
  };
  '/vat_rates': {
    /** Get VAT rates */
    get: operations['get_vat_rates'];
  };
  '/webhook_settings': {
    /** Get webhook subscriptions */
    get: operations['get_webhook_settings'];
    /** Subscribe to a webhook */
    post: operations['post_webhook_settings'];
  };
  '/webhook_settings/{webhook_subscription_id}': {
    /** Get a webhook subscription */
    get: operations['get_webhook_settings_id'];
    /** Delete a webhook subscription */
    delete: operations['delete_webhook_settings_id'];
    /** Update a webhook subscription */
    patch: operations['patch_webhook_settings_id'];
  };
  '/webhook_settings/{webhook_subscription_id}/disable': {
    /** Disable a webhook subscription */
    post: operations['post_webhook_settings_id_disable'];
  };
  '/webhook_settings/{webhook_subscription_id}/enable': {
    /** Enable a webhook subscription */
    post: operations['post_webhook_settings_id_enable'];
  };
  '/webhook_settings/{webhook_subscription_id}/regenerate_secret': {
    /** Regenerate a webhook secret and return the new webhook subscription */
    post: operations['post_webhook_settings_id_regenerate_secret'];
  };
  '/webhooks': {
    /** Get aggregated webhook deliveries */
    get: operations['get_webhooks'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    APIVersion:
      | '2024-01-31'
      | '2023-09-01'
      | '2023-06-04'
      | '2023-04-12'
      | '2023-03-14'
      | '2023-03-01'
      | '2023-02-07'
      | '2022-11-16';
    AccessTokenResponse: {
      /** @example L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg */
      access_token: string;
      /** @example 86400 */
      expires_in: number;
      /** @example Bearer */
      token_type: string;
    };
    /** @enum {string} */
    AccountDisabledReason:
      | 'requirements.past_due'
      | 'requirements.pending_verification'
      | 'listed'
      | 'platform_paused'
      | 'rejected.fraud'
      | 'rejected.listed'
      | 'rejected.terms_of_service'
      | 'rejected.other'
      | 'under_review'
      | 'other';
    AccountResponse: {
      /** Format: uuid */
      id: string;
      bank_accounts?: components['schemas']['BankAccount'][];
      type: components['schemas']['PaymentAccountType'];
    };
    AccountingConnectionList: {
      data: components['schemas']['AccountingConnectionResponse'][];
    };
    AccountingConnectionRequest: {
      platform: components['schemas']['Platform'];
    };
    AccountingConnectionResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      connection_url: string;
      errors?: components['schemas']['ErrorSchema'][];
      /** Format: date-time */
      last_pull?: string;
      platform?: string;
      status?: components['schemas']['ConnectionStatus'];
    };
    AccountingSettingsPayload: {
      provider: string;
      token: string;
    };
    AccountingSettingsResponse: {
      provider: string;
      token: string;
    };
    AccountingSyncRulesBody: {
      push_statuses?: components['schemas']['DocumentTypeVariants'];
    };
    /** @enum {string} */
    ActionEnum: 'create' | 'read' | 'update' | 'delete';
    ActionSchema: {
      /**
       * @description Action name
       * @default read
       */
      action_name?: components['schemas']['ActionEnum'];
      /**
       * @description Permission type
       * @default allowed
       */
      permission?: components['schemas']['PermissionEnum'];
    };
    AddCustomTemplateSchema: {
      /** @description Jinja2 compatible string with email body */
      body_template: string;
      /**
       * @description Is default template
       * @default false
       */
      is_default?: boolean;
      /**
       * @description Lowercase ISO code of language
       * @default en
       */
      language?: components['schemas']['LanguageCodeEnum'];
      /** @description Custom template name */
      name: string;
      /** @description Jinja2 compatible string with email subject */
      subject_template: string;
      /** @description Document type of content */
      type: components['schemas']['DocumentObjectTypeRequestEnum'];
    };
    AirwallexMandate: {
      /**
       * Format: email
       * @description PDF copy of mandate will be sent to the email by Airwallex
       */
      email: string;
      /** @description Name of the person signed the mandate, must be a bank account owner */
      signatory: string;
      type: components['schemas']['AirwallexMandateType'];
      version: components['schemas']['AirwallexMandateVersion'];
    };
    /** @enum {string} */
    AirwallexMandateType: 'us_ach_debit';
    /** @enum {string} */
    AirwallexMandateVersion: '1.0';
    AirwallexPlaidAccount: {
      /** @description Plaid`s unique identifier for the account */
      id: string;
      /** @description The last 2-4 alphanumeric characters of an account's official account number */
      mask: string;
      /** @description The name of the account, either assigned by the user or by the financial institution itself */
      name: string;
    };
    /** @enum {string} */
    AirwallexPlaidBankAccountVerificationStatus:
      | 'verified'
      | 'expired'
      | 'suspended';
    AirwallexPlaidInstitution: {
      /** @description The institution identifier assigned by Plaid */
      id: string;
      /** @description The full financial institution name */
      name: string;
    };
    AirwallexPlaidVerification: {
      /** @description Status of the bank account verification */
      status: components['schemas']['AirwallexPlaidBankAccountVerificationStatus'];
    };
    AllDocumentExportResponseSchema: {
      /** @description A set of export objects returned per page. */
      data: components['schemas']['DocumentExportResponseSchema'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results. If there is no next page, i.e. you have reached the last page, the value is `null`. */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results. If there is no previous page, i.e. you have reached the first page, the value is `null`. */
      prev_pagination_token?: string;
    };
    AllOverdueRemindersResponse: {
      data: components['schemas']['OverdueReminderResponse'][];
    };
    /** @enum {string} */
    AllowedCountries:
      | 'AF'
      | 'AX'
      | 'AL'
      | 'DZ'
      | 'AS'
      | 'AD'
      | 'AO'
      | 'AI'
      | 'AQ'
      | 'AG'
      | 'AR'
      | 'AM'
      | 'AW'
      | 'AU'
      | 'AT'
      | 'AZ'
      | 'BS'
      | 'BH'
      | 'BD'
      | 'BB'
      | 'BY'
      | 'BE'
      | 'BZ'
      | 'BJ'
      | 'BM'
      | 'BT'
      | 'BO'
      | 'BA'
      | 'BW'
      | 'BV'
      | 'BR'
      | 'IO'
      | 'BN'
      | 'BG'
      | 'BF'
      | 'BI'
      | 'KH'
      | 'CM'
      | 'CA'
      | 'IC'
      | 'CV'
      | 'KY'
      | 'CF'
      | 'EA'
      | 'TD'
      | 'CL'
      | 'CN'
      | 'CX'
      | 'CC'
      | 'CO'
      | 'KM'
      | 'CG'
      | 'CD'
      | 'CK'
      | 'CR'
      | 'CI'
      | 'HR'
      | 'CU'
      | 'CY'
      | 'CZ'
      | 'DK'
      | 'DJ'
      | 'DM'
      | 'DO'
      | 'EC'
      | 'EG'
      | 'SV'
      | 'GQ'
      | 'ER'
      | 'EE'
      | 'ET'
      | 'FK'
      | 'FO'
      | 'FJ'
      | 'FI'
      | 'FR'
      | 'GF'
      | 'PF'
      | 'TF'
      | 'GA'
      | 'GM'
      | 'GE'
      | 'DE'
      | 'GH'
      | 'GI'
      | 'GR'
      | 'GL'
      | 'GD'
      | 'GP'
      | 'GU'
      | 'GT'
      | 'GG'
      | 'GN'
      | 'GW'
      | 'GY'
      | 'HT'
      | 'HM'
      | 'VA'
      | 'HN'
      | 'HK'
      | 'HU'
      | 'IS'
      | 'IN'
      | 'ID'
      | 'IR'
      | 'IQ'
      | 'IE'
      | 'IM'
      | 'IL'
      | 'IT'
      | 'JM'
      | 'JP'
      | 'JE'
      | 'JO'
      | 'KZ'
      | 'KE'
      | 'KI'
      | 'KP'
      | 'KR'
      | 'KW'
      | 'KG'
      | 'LA'
      | 'LV'
      | 'LB'
      | 'LS'
      | 'LR'
      | 'LY'
      | 'LI'
      | 'LT'
      | 'LU'
      | 'MO'
      | 'MK'
      | 'MG'
      | 'MW'
      | 'MY'
      | 'MV'
      | 'ML'
      | 'MT'
      | 'MH'
      | 'MQ'
      | 'MR'
      | 'MU'
      | 'YT'
      | 'MX'
      | 'FM'
      | 'MD'
      | 'MC'
      | 'MN'
      | 'MS'
      | 'MA'
      | 'MZ'
      | 'MM'
      | 'NA'
      | 'NR'
      | 'NP'
      | 'NL'
      | 'AN'
      | 'NC'
      | 'NZ'
      | 'NI'
      | 'NE'
      | 'NG'
      | 'NU'
      | 'NF'
      | 'MP'
      | 'NO'
      | 'OM'
      | 'PK'
      | 'PW'
      | 'PS'
      | 'PA'
      | 'PG'
      | 'PY'
      | 'PE'
      | 'PH'
      | 'PN'
      | 'PL'
      | 'PT'
      | 'PR'
      | 'QA'
      | 'RE'
      | 'RO'
      | 'RU'
      | 'RW'
      | 'SH'
      | 'KN'
      | 'LC'
      | 'PM'
      | 'VC'
      | 'WS'
      | 'SM'
      | 'ST'
      | 'SA'
      | 'SN'
      | 'CS'
      | 'SC'
      | 'SL'
      | 'SG'
      | 'SK'
      | 'SI'
      | 'SB'
      | 'SO'
      | 'ZA'
      | 'GS'
      | 'ES'
      | 'LK'
      | 'SD'
      | 'SR'
      | 'SJ'
      | 'SZ'
      | 'SE'
      | 'CH'
      | 'SY'
      | 'TW'
      | 'TJ'
      | 'TZ'
      | 'TH'
      | 'TL'
      | 'TG'
      | 'TK'
      | 'TO'
      | 'TT'
      | 'TN'
      | 'TR'
      | 'TM'
      | 'TC'
      | 'TV'
      | 'UG'
      | 'UA'
      | 'AE'
      | 'GB'
      | 'US'
      | 'UM'
      | 'UY'
      | 'UZ'
      | 'VU'
      | 'VE'
      | 'VN'
      | 'VG'
      | 'VI'
      | 'WF'
      | 'EH'
      | 'YE'
      | 'ZM'
      | 'ZW';
    /** @enum {string} */
    AllowedFileTypes:
      | 'ocr_results'
      | 'ocr_files'
      | 'payables'
      | 'receivables'
      | 'receipts'
      | 'userpics'
      | 'entity_logo'
      | 'companies_logo'
      | 'zip'
      | 'identity_documents'
      | 'additional_identity_documents';
    ApprovalPolicyCreate: {
      /** @description The name of the approval policy. */
      name: string;
      /** @description A brief description of the approval policy. */
      description: string;
      /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
      script: (boolean | number | string | unknown[] | Record<string, never>)[];
      /**
       * @description A JSON object that represents the trigger for the approval policy.The trigger specifies the event that will trigger the policy to be evaluated.
       * @example {amount >= 1000}
       */
      trigger?: boolean | number | string | unknown[] | Record<string, never>;
    };
    /** @enum {string} */
    ApprovalPolicyCursorFields: 'created_at' | 'updated_at';
    ApprovalPolicyResource: {
      /** @description The name of the approval policy. */
      name: string;
      /** @description A brief description of the approval policy. */
      description: string;
      /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
      script: (boolean | number | string | unknown[] | Record<string, never>)[];
      /**
       * @description A JSON object that represents the trigger for the approval policy.The trigger specifies the event that will trigger the policy to be evaluated.
       * @example {amount >= 1000}
       */
      trigger?: boolean | number | string | unknown[] | Record<string, never>;
      /** Format: uuid */
      id: string;
      /** @description The current status of the approval policy. */
      status: components['schemas']['ApprovalPolicyStatus'];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      created_by: string;
      /** Format: uuid */
      updated_by?: string;
    };
    ApprovalPolicyResourceList: {
      data: components['schemas']['ApprovalPolicyResource'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
    };
    /** @enum {string} */
    ApprovalPolicyStatus: 'active' | 'deleted' | 'pending';
    ApprovalPolicyUpdate: {
      /** @description The name of the approval policy. */
      name?: string;
      /** @description A brief description of the approval policy. */
      description?: string;
      /** @description A list of JSON objects that represents the approval policy script. The script contains the logic that determines whether an action should be sent to approval. This field is required, and it should contain at least one script object. */
      script?: (
        | boolean
        | number
        | string
        | unknown[]
        | Record<string, never>
      )[];
      /**
       * @description A JSON object that represents the trigger for the approval policy. The trigger specifies the event that will trigger the policy to be evaluated.
       * @example {amount >= 1000}
       */
      trigger?: boolean | number | string | unknown[] | Record<string, never>;
      /** @description A string that represents the current status of the approval policy. */
      status?: components['schemas']['ApprovalPolicyStatus'];
    };
    ApprovalProcessResourceList: {
      data: components['schemas']['ProcessResource'][];
    };
    ApprovalProcessStepResource: {
      approved_by: string[];
      /** Format: uuid */
      object_id: string;
      /** Format: uuid */
      rejected_by?: string;
      required_approval_count: number;
      role_ids: string[];
      status: components['schemas']['ApprovalProcessStepStatus'];
      user_ids: string[];
    };
    ApprovalProcessStepResourceList: {
      data: components['schemas']['ApprovalProcessStepResource'][];
    };
    /** @enum {string} */
    ApprovalProcessStepStatus:
      | 'waiting'
      | 'approved'
      | 'rejected'
      | 'canceled'
      | 'failed'
      | 'not_started'
      | 'skipped';
    ApprovalRequestCreateByRoleRequest: {
      /** Format: uuid */
      object_id: string;
      object_type: components['schemas']['ObjectType'];
      required_approval_count: number;
      role_ids: string[];
    };
    ApprovalRequestCreateByUserRequest: {
      /** Format: uuid */
      object_id: string;
      object_type: components['schemas']['ObjectType'];
      required_approval_count: number;
      user_ids: string[];
    };
    ApprovalRequestCreateRequest:
      | components['schemas']['ApprovalRequestCreateByRoleRequest']
      | components['schemas']['ApprovalRequestCreateByUserRequest'];
    /** @enum {string} */
    ApprovalRequestCursorFields: 'created_at' | 'updated_at';
    ApprovalRequestResourceList: {
      data: components['schemas']['ApprovalRequestResourceWithMetadata'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    ApprovalRequestResourceWithMetadata: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      approved_by: string[];
      /**
       * Format: uuid
       * @description ID of the user who created the approval request
       * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
       */
      created_by: string;
      /** Format: uuid */
      object_id: string;
      object_type: components['schemas']['ObjectType'];
      /** Format: uuid */
      rejected_by?: string;
      required_approval_count: number;
      role_ids: string[];
      status: components['schemas']['ApprovalRequestStatus'];
      user_ids: string[];
    };
    /** @enum {string} */
    ApprovalRequestStatus: 'waiting' | 'approved' | 'rejected' | 'canceled';
    AttachFileToPayableRequest: {
      /** Format: binary */
      file: string;
    };
    BankAccount: {
      /** Format: uuid */
      id: string;
      account_holder_name?: string;
      account_number?: string;
      bic?: string;
      country?: components['schemas']['AllowedCountries'];
      currency?: components['schemas']['CurrencyEnum'];
      display_name?: string;
      iban?: string;
      /** @default false */
      is_default?: boolean;
      /** @description Display name of a bank account */
      name?: string;
      sort_code?: string;
      /** Format: uuid */
      was_created_by_user_id?: string;
    };
    /** @enum {string} */
    BankAccountVerificationType: 'airwallex_plaid';
    BankAccountVerifications: {
      /** @description Airwallex Plaid verification */
      airwallex_plaid?: components['schemas']['AirwallexPlaidVerification'];
    };
    /** @enum {string} */
    BasedOnTransitionType: 'invoice' | 'credit_note';
    BizObjectsSchema: {
      /** @description List of objects */
      objects?: components['schemas']['RootSchema'][];
    };
    Body_post_files: {
      /** Format: binary */
      file: string;
      file_type: components['schemas']['AllowedFileTypes'];
    };
    BusinessProfile: {
      /**
       * @description The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide.
       * @example 5734
       */
      mcc?: string;
      /**
       * Format: uri
       * @description The business's publicly available website.
       */
      url?: string;
    };
    ButtonThemePayload: {
      /** Format: color */
      primary_color?: string;
      /** Format: color */
      primary_hover_color?: string;
      /** Format: color */
      secondary_color?: string;
      /** Format: color */
      secondary_hover_color?: string;
    };
    ButtonThemeResponse: {
      /** Format: color */
      primary_color?: string;
      /** Format: color */
      primary_hover_color?: string;
      /** Format: color */
      secondary_color?: string;
      /** Format: color */
      secondary_hover_color?: string;
    };
    CardThemePayload: {
      /** Format: color */
      background_color?: string;
    };
    CardThemeResponse: {
      /** Format: color */
      background_color?: string;
    };
    CommentCreateRequest: {
      /** Format: uuid */
      object_id: string;
      object_type: string;
      /** Format: uuid */
      reply_to_entity_user_id?: string;
      text: string;
    };
    /** @enum {string} */
    CommentCursorFields: 'id';
    CommentPayload: {
      /** @description An arbitrary comment that describes how and when this payable was paid. */
      comment?: string;
    };
    CommentResource: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: uuid */
      created_by_entity_user_id: string;
      /** Format: uuid */
      entity_id: string;
      /** Format: uuid */
      object_id: string;
      object_type: string;
      /** Format: uuid */
      reply_to_entity_user_id?: string;
      status: components['schemas']['StatusEnum'];
      text: string;
    };
    CommentResourceList: {
      data: components['schemas']['CommentResource'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    CommentUpdateRequest: {
      /** Format: uuid */
      reply_to_entity_user_id?: string;
      text?: string;
    };
    CommonSchema: {
      /** @description List of actions */
      actions?: components['schemas']['ActionSchema'][];
      /**
       * @description Object type
       * @default comment
       * @enum {string}
       */
      object_type?:
        | 'person'
        | 'onboarding'
        | 'comment'
        | 'counterpart'
        | 'entity_user'
        | 'entity'
        | 'entity_vat_ids'
        | 'counterpart_vat_id'
        | 'entity_bank_account'
        | 'export'
        | 'payables_purchase_order'
        | 'payment_reminder'
        | 'overdue_reminder'
        | 'product'
        | 'receivable'
        | 'reconciliation'
        | 'role'
        | 'tag'
        | 'todo_task'
        | 'todo_task_mute'
        | 'transaction'
        | 'workflow'
        | 'approval_request'
        | 'approval_policy'
        | 'payment_record';
    };
    CompleteRefreshVerificationRequest: {
      type: components['schemas']['BankAccountVerificationType'];
    };
    CompleteRefreshVerificationResponse: {
      verifications: components['schemas']['BankAccountVerifications'];
    };
    CompleteVerificationAirwallexPlaidRequest: {
      /** @description The bank account that was selected in the Plaid Modal */
      account: components['schemas']['AirwallexPlaidAccount'];
      /** @description The financial institution that was selected in the Plaid Modal */
      institution: components['schemas']['AirwallexPlaidInstitution'];
      mandate: components['schemas']['AirwallexMandate'];
      /** @description The Plaid Public Token */
      public_token: string;
    };
    CompleteVerificationRequest: {
      airwallex_plaid: components['schemas']['CompleteVerificationAirwallexPlaidRequest'];
      type: components['schemas']['BankAccountVerificationType'];
    };
    CompleteVerificationResponse: {
      /**
       * Format: uuid
       * @deprecated
       * @description Deprecated. Use bank_account_id instead.
       */
      id: string;
      /** @description Account holder's name */
      account_holder_name?: string;
      /** @description Account number (required if IBAN is not provided) */
      account_number?: string;
      /** Format: uuid */
      bank_account_id: string;
      /** @description The name of the entity`s bank account. */
      bank_name?: string;
      /** @description The BIC of the entity`s bank account. */
      bic?: string;
      country?: components['schemas']['AllowedCountries'];
      currency?: components['schemas']['CurrencyEnum'];
      display_name?: string;
      /** @description The IBAN of the entity`s bank account. */
      iban?: string;
      /** @description Marks if a bank account should be used by default for the currency. Only 1 can be True for each currency. */
      is_default: boolean;
      /** @description Routing number (US) */
      routing_number?: string;
      /** @description Sort code (GB) */
      sort_code?: string;
      verifications: components['schemas']['BankAccountVerifications'];
      /** Format: uuid */
      was_created_by_user_id?: string;
    };
    /** @enum {string} */
    ConnectionStatus:
      | 'connected'
      | 'disconnected'
      | 'deauthorized'
      | 'pending_auth';
    /** @description Address information. */
    CounterpartAddress: {
      /**
       * @description City name.
       * @example Berlin
       */
      city: string;
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country: components['schemas']['AllowedCountries'];
      /**
       * @description Street address.
       * @example Flughafenstrasse 52
       */
      line1: string;
      /** @description Additional address information (if any). */
      line2?: string;
      /**
       * @description ZIP or postal code.
       * @example 10115
       */
      postal_code: string;
      /** @description State, region, province, or county. */
      state?: string;
    };
    CounterpartAddressResourceList: {
      data: components['schemas']['CounterpartAddressResponseWithCounterpartID'][];
    };
    /** @description Address information. */
    CounterpartAddressResponseWithCounterpartID: {
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country: components['schemas']['AllowedCountries'];
      /**
       * @description City name.
       * @example Berlin
       */
      city: string;
      /**
       * @description ZIP or postal code.
       * @example 10115
       */
      postal_code: string;
      /** @description State, region, province, or county. */
      state?: string;
      /**
       * @description Street address.
       * @example Flughafenstrasse 52
       */
      line1: string;
      /** @description Additional address information (if any). */
      line2?: string;
      /**
       * Format: uuid
       * @description Unique ID of the address in the system
       */
      id: string;
      /** @description True if address is the default address of the counterpart. */
      is_default: boolean;
      /**
       * Format: uuid
       * @description ID of the counterpart that owns the address.
       */
      counterpart_id: string;
    };
    CounterpartBankAccountResourceList: {
      data: components['schemas']['CounterpartBankAccountResponse'][];
    };
    CounterpartBankAccountResponse: {
      /**
       * @description The IBAN of the bank account.
       * @example DE74500700100100000900
       */
      iban?: string;
      /**
       * @description The BIC/SWIFT code of the bank.
       * @example DEUTDEFFXXX
       */
      bic?: string;
      name?: string;
      /**
       * @description The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
       * @example Bob Jones
       */
      account_holder_name?: string;
      /**
       * @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
       * @example 12345678
       */
      account_number?: string;
      /**
       * @description The bank's sort code.
       * @example 123456
       */
      sort_code?: string;
      /** @description The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits. */
      routing_number?: string;
      currency: components['schemas']['CurrencyEnum'];
      country: components['schemas']['AllowedCountries'];
      /** @description Metadata for partner needs. */
      partner_metadata?: Record<string, never>;
      /** @default false */
      is_default?: boolean;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      counterpart_id: string;
    };
    /** @description The contact person for an organization. */
    CounterpartContactResponse: {
      /**
       * @description The first name of a contact person.
       * @example Mary
       */
      first_name: string;
      /**
       * @description The last name of a contact person.
       * @example O'Brien
       */
      last_name: string;
      /**
       * Format: email
       * @description The email address of a contact person.
       * @example contact@example.org
       */
      email?: string;
      /**
       * @description The phone number of a contact person
       * @example 5551235476
       */
      phone?: string;
      /** @description The address of a contact person. */
      address: components['schemas']['CounterpartAddress'];
      /**
       * @description The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
       * @example Ms.
       */
      title?: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      counterpart_id: string;
      is_default: boolean;
    };
    CounterpartContactsResourceList: {
      data: components['schemas']['CounterpartContactResponse'][];
    };
    /**
     * @description This schema is used to create new counterparts (either organizations or individuals).
     * The counterpart type is specified by the `type` property. Depending on the `type`,
     * you need to provide the data for either the `individual` or `organization` property.
     */
    CounterpartCreatePayload:
      | components['schemas']['CounterpartOrganizationRootCreatePayload']
      | components['schemas']['CounterpartIndividualRootCreatePayload'];
    /** @enum {string} */
    CounterpartCursorFields: 'counterpart_name';
    /** @description Represents counterparts that are individuals (natural persons). */
    CounterpartIndividualCreatePayload: {
      /**
       * @description The person's first name.
       * @example Adnan
       */
      first_name: string;
      /**
       * @description The person's last name.
       * @example Singh
       */
      last_name: string;
      /**
       * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
       * @example Mr.
       */
      title?: string;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor: boolean;
      /** @description Indicates if the counterpart is a customer. */
      is_customer: boolean;
      /**
       * @description The person's phone number.
       * @example 5553211234
       */
      phone?: string;
      /**
       * Format: email
       * @description The person's email address.
       * @example asingh@example.net
       */
      email?: string;
      /** @description The person's address. */
      residential_address: components['schemas']['CounterpartAddress'];
    };
    /** @description Represents counterparts that are individuals (natural persons). */
    CounterpartIndividualResponse: {
      /**
       * @description The person's first name.
       * @example Adnan
       */
      first_name: string;
      /**
       * @description The person's last name.
       * @example Singh
       */
      last_name: string;
      /**
       * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
       * @example Mr.
       */
      title?: string;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor: boolean;
      /** @description Indicates if the counterpart is a customer. */
      is_customer: boolean;
      /**
       * @description The person's phone number.
       * @example 5553211234
       */
      phone?: string;
      /**
       * Format: email
       * @description The person's email address.
       * @example asingh@example.net
       */
      email?: string;
    };
    /** @description This schema is used to create counterparts that are individuals (natural persons). */
    CounterpartIndividualRootCreatePayload: {
      /**
       * @description Must be "individual".
       * @example individual
       * @enum {string}
       */
      type: 'individual';
      individual: components['schemas']['CounterpartIndividualCreatePayload'];
      /** @default true */
      reminders_enabled?: boolean;
      /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
      tax_id?: string;
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
    };
    /** @description Represents counterparts that are individuals (natural persons). */
    CounterpartIndividualRootResponse: {
      /**
       * Format: uuid
       * @description ID of the shipping address.
       */
      default_shipping_address_id?: string;
      /**
       * Format: uuid
       * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
       */
      default_billing_address_id?: string;
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      updated_at: string;
      /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
      type: components['schemas']['CounterpartType'];
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
      reminders_enabled?: boolean;
      /**
       * Format: uuid
       * @description Entity user ID of counterpart creator.
       */
      created_by_entity_user_id?: string;
      /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
      tax_id?: string;
      individual: components['schemas']['CounterpartIndividualResponse'];
    };
    /** @description Represents counterparts that are individuals (natural persons). */
    CounterpartIndividualRootUpdatePayload: {
      /**
       * Format: uuid
       * @description ID of the shipping address.
       */
      default_shipping_address_id?: string;
      /**
       * Format: uuid
       * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
       */
      default_billing_address_id?: string;
      individual: components['schemas']['CounterpartIndividualUpdatePayload'];
      reminders_enabled?: boolean;
      /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
      tax_id?: string;
      /**
       * @description Must be "individual".
       * @example individual
       * @enum {string}
       */
      type: 'individual';
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
    };
    /** @description Represents counterparts that are individuals (natural persons). */
    CounterpartIndividualUpdatePayload: {
      /**
       * @description The person's first name.
       * @example Adnan
       */
      first_name?: string;
      /**
       * @description The person's last name.
       * @example Singh
       */
      last_name?: string;
      /**
       * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
       * @example Mr.
       */
      title?: string;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor?: boolean;
      /** @description Indicates if the counterpart is a customer. */
      is_customer?: boolean;
      /**
       * @description The person's phone number.
       * @example 5553211234
       */
      phone?: string;
      /**
       * Format: email
       * @description The person's email address.
       * @example asingh@example.net
       */
      email?: string;
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    CounterpartOrganizationCreatePayload: {
      /**
       * @description The legal name of the organization.
       * @example Acme Inc.
       */
      legal_name: string;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor: boolean;
      /** @description Indicates if the counterpart is a customer. */
      is_customer: boolean;
      /**
       * @description The phone number of the organization
       * @example 5551231234
       */
      phone?: string;
      /**
       * Format: email
       * @description The email address of the organization
       * @example acme@example.com
       */
      email?: string;
      /** @description The address of the organization. */
      registered_address: components['schemas']['CounterpartAddress'];
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    CounterpartOrganizationResponse: {
      /**
       * @description The legal name of the organization.
       * @example Acme Inc.
       */
      legal_name: string;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor: boolean;
      /** @description Indicates if the counterpart is a customer. */
      is_customer: boolean;
      /**
       * @description The phone number of the organization
       * @example 5551231234
       */
      phone?: string;
      /**
       * Format: email
       * @description The email address of the organization
       * @example acme@example.com
       */
      email?: string;
    };
    /** @description This schema is used to create counterparts that are organizations (juridical persons). */
    CounterpartOrganizationRootCreatePayload: {
      /**
       * @description Must be "organization".
       * @example organization
       * @enum {string}
       */
      type: 'organization';
      organization: components['schemas']['CounterpartOrganizationCreatePayload'];
      /** @default true */
      reminders_enabled?: boolean;
      /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
      tax_id?: string;
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    CounterpartOrganizationRootResponse: {
      /**
       * Format: uuid
       * @description ID of the shipping address.
       */
      default_shipping_address_id?: string;
      /**
       * Format: uuid
       * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
       */
      default_billing_address_id?: string;
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      updated_at: string;
      /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
      type: components['schemas']['CounterpartType'];
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
      reminders_enabled?: boolean;
      /**
       * Format: uuid
       * @description Entity user ID of counterpart creator.
       */
      created_by_entity_user_id?: string;
      /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
      tax_id?: string;
      organization: components['schemas']['CounterpartOrganizationResponse'];
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    CounterpartOrganizationRootUpdatePayload: {
      /**
       * Format: uuid
       * @description ID of the shipping address.
       */
      default_shipping_address_id?: string;
      /**
       * Format: uuid
       * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
       */
      default_billing_address_id?: string;
      organization: components['schemas']['CounterpartOrganizationUpdatePayload'];
      /** @default true */
      reminders_enabled?: boolean;
      /** @description The counterpart's taxpayer identification number or tax ID. This field is required for counterparts that are non-VAT registered. */
      tax_id?: string;
      /**
       * @description Must be "organization".
       * @example organization
       * @enum {string}
       */
      type: 'organization';
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    CounterpartOrganizationUpdatePayload: {
      /**
       * @description The legal name of the organization.
       * @example Acme Inc.
       */
      legal_name?: string;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor?: boolean;
      /** @description Indicates if the counterpart is a customer. */
      is_customer?: boolean;
      /**
       * @description The phone number of the organization.
       * @example 5551231234
       */
      phone?: string;
      /**
       * Format: email
       * @description The email address of the organization.
       * @example acme@example.com
       */
      email?: string;
    };
    /** @description A paginated list of counterparts */
    CounterpartPaginationResponse: {
      data: components['schemas']['CounterpartResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
    };
    /** @description Address information. */
    CounterpartRawAddress: {
      /**
       * @description City name.
       * @example Berlin
       */
      city?: string;
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /**
       * @description Street address.
       * @example Flughafenstrasse 52
       */
      line1?: string;
      /** @description Additional address information (if any). */
      line2?: string;
      /**
       * @description ZIP or postal code.
       * @example 10115
       */
      postal_code?: string;
      /** @description State, region, province, or county. */
      state?: string;
    };
    /** @description Address information. */
    CounterpartRawAddressUpdateRequest: {
      /**
       * @description City name.
       * @example Berlin
       */
      city?: string;
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /**
       * @description Street address.
       * @example Flughafenstrasse 52
       */
      line1?: string;
      /** @description Additional address information (if any). */
      line2?: string;
      /**
       * @description ZIP or postal code.
       * @example 10115
       */
      postal_code?: string;
      /** @description State, region, province, or county. */
      state?: string;
    };
    CounterpartRawBankAccount: {
      /**
       * @description Vendor's bank account number, IBAN, or similar (if specified in the payable document).
       * @example 123456789012
       */
      account_number?: string;
      /**
       * @description SWIFT code (BIC) of the vendor's bank.
       * @example DEUTDE2HXXX
       */
      bic?: string;
      /** @description required for non-GB bank accounts */
      iban?: string;
      /** @description required for GB bank accounts */
      sort_code?: string;
    };
    CounterpartRawBankAccountUpdateRequest: {
      /**
       * @description Vendor's bank account number, IBAN, or similar (if specified in the payable document).
       * @example 123456789012
       */
      account_number?: string;
      /**
       * @description SWIFT code (BIC) of the vendor's bank.
       * @example DEUTDE2HXXX
       */
      bic?: string;
      /** @description required for non-GB bank accounts */
      iban?: string;
      /** @description required for GB bank accounts */
      sort_code?: string;
    };
    CounterpartRawData: {
      /** @description The address of the vendor or supplier. */
      address?: components['schemas']['CounterpartRawAddress'];
      /** @description Object representing counterpart bank account. */
      bank_account?: components['schemas']['CounterpartRawBankAccount'];
      /**
       * Format: email
       * @description The email address of the organization
       * @example acme@example.com
       */
      email?: string;
      /**
       * @description Vendor or supplier name.
       * @example Acme Inc.
       */
      name?: string;
      /**
       * @description The phone number of the organization
       * @example 5551231234
       */
      phone?: string;
      /**
       * @description The tax id of the counterpart.
       * @example DE12345678
       */
      tax_id?: string;
      /** @description VAT ID of the vendor or supplier which was used in the invoice. */
      vat_id?: components['schemas']['CounterpartRawVatID'];
    };
    CounterpartRawDataUpdateRequest: {
      /** @description The address of the vendor or supplier. */
      address?: components['schemas']['CounterpartRawAddressUpdateRequest'];
      /** @description Object representing counterpart bank account. */
      bank_account?: components['schemas']['CounterpartRawBankAccountUpdateRequest'];
      /**
       * Format: email
       * @description The email address of the organization
       * @example acme@example.com
       */
      email?: string;
      /**
       * @description Vendor or supplier name.
       * @example Acme Inc.
       */
      name?: string;
      /**
       * @description The phone number of the organization
       * @example 5551231234
       */
      phone?: string;
      /**
       * @description The tax id of the counterpart.
       * @example DE12345678
       */
      tax_id?: string;
      /** @description VAT ID of the vendor or supplier which was used in the invoice. */
      vat_id?: components['schemas']['CounterpartRawVatIDUpdateRequest'];
    };
    CounterpartRawVatID: {
      country?: components['schemas']['AllowedCountries'];
      type?: string;
      value?: string;
    };
    CounterpartRawVatIDUpdateRequest: {
      country?: components['schemas']['AllowedCountries'];
      type?: string;
      value?: string;
    };
    /**
     * @description A Counterpart object contains information about an organization (juridical person) or
     * individual (natural person) that provides goods and services to or buys them from an
     * [SME](https://docs.monite.com/docs/glossary#sme).
     */
    CounterpartResponse:
      | components['schemas']['CounterpartIndividualRootResponse']
      | components['schemas']['CounterpartOrganizationRootResponse'];
    /** @enum {string} */
    CounterpartType: 'individual' | 'organization';
    CounterpartUpdateAddress: {
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /**
       * @description City name.
       * @example Berlin
       */
      city?: string;
      /**
       * @description ZIP or postal code.
       * @example 10115
       */
      postal_code?: string;
      /** @description State, region, province, or county. */
      state?: string;
      /**
       * @description Street address.
       * @example Flughafenstrasse 52
       */
      line1?: string;
      /** @description Additional address information (if any). */
      line2?: string;
    };
    /** @description This schema is used to update existing counterparts (organizations or individuals). */
    CounterpartUpdatePayload:
      | components['schemas']['CounterpartIndividualRootUpdatePayload']
      | components['schemas']['CounterpartOrganizationRootUpdatePayload'];
    CounterpartUpdateVatID: {
      country?: components['schemas']['AllowedCountries'];
      /** @example eu_vat */
      type?: components['schemas']['TaxIDTypeEnum'];
      value?: string;
    };
    CounterpartVatID: {
      country?: components['schemas']['AllowedCountries'];
      /**
       * @default unknown
       * @example eu_vat
       */
      type?: components['schemas']['TaxIDTypeEnum'];
      /** @example 123456789 */
      value: string;
    };
    CounterpartVatIDResourceList: {
      data: components['schemas']['CounterpartVatIDResponse'][];
    };
    CounterpartVatIDResponse: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      counterpart_id: string;
      country?: components['schemas']['AllowedCountries'];
      /**
       * @default unknown
       * @example eu_vat
       */
      type?: components['schemas']['TaxIDTypeEnum'];
      /** @example 123456789 */
      value: string;
    };
    CreateCounterpartBankAccount: {
      /**
       * @description The IBAN of the bank account.
       * @example DE74500700100100000900
       */
      iban?: string;
      /**
       * @description The BIC/SWIFT code of the bank.
       * @example DEUTDEFFXXX
       */
      bic?: string;
      name?: string;
      /**
       * @description The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
       * @example Bob Jones
       */
      account_holder_name?: string;
      /**
       * @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
       * @example 12345678
       */
      account_number?: string;
      /**
       * @description The bank's sort code.
       * @example 123456
       */
      sort_code?: string;
      /** @description The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits. */
      routing_number?: string;
      currency: components['schemas']['CurrencyEnum'];
      country: components['schemas']['AllowedCountries'];
      /** @description Metadata for partner needs. */
      partner_metadata?: Record<string, never>;
      /** @default false */
      is_default?: boolean;
    };
    /** @description The contact person for an organization. */
    CreateCounterpartContactPayload: {
      /**
       * @description The first name of a contact person.
       * @example Mary
       */
      first_name: string;
      /**
       * @description The last name of a contact person.
       * @example O'Brien
       */
      last_name: string;
      /**
       * Format: email
       * @description The email address of a contact person.
       * @example contact@example.org
       */
      email?: string;
      /**
       * @description The phone number of a contact person
       * @example 5551235476
       */
      phone?: string;
      /** @description The address of a contact person. */
      address: components['schemas']['CounterpartAddress'];
      /**
       * @description The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
       * @example Ms.
       */
      title?: string;
    };
    /** @description Represents a bank account owned by an entity. */
    CreateEntityBankAccountRequest: {
      /**
       * @description The name of the person or business that owns this bank account. Required if the account currency is GBP or USD.
       * @example Cayla Lloyd
       */
      account_holder_name?: string;
      /**
       * @description The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.
       * @example 12345678
       */
      account_number?: string;
      /**
       * @description The bank name.
       * @example Deutsche Bank
       */
      bank_name?: string;
      /**
       * @description The SWIFT/BIC code of the bank.
       * @example DEUTDEFFXXX
       */
      bic?: string;
      /**
       * @description The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country: components['schemas']['AllowedCountries'];
      /**
       * @description The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).
       * @example EUR
       */
      currency: components['schemas']['CurrencyEnum'];
      /**
       * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
       * @example Primary account
       */
      display_name?: string;
      /**
       * @description The IBAN of the bank account. Required if the account currency is EUR.
       * @example DE74500700100100000900
       */
      iban?: string;
      /**
       * @description If set to `true` or if this is the first bank account added for the given currency, this account becomes the default one for its currency.
       * @default false
       */
      is_default_for_currency?: boolean;
      /** @description The bank's routing transit number (RTN). Required if the account currency is USD. US routing numbers consist of 9 digits. */
      routing_number?: string;
      /**
       * @description The bank's sort code. Required if the account currency is GBP.
       * @example 123456
       */
      sort_code?: string;
    };
    /** @description A schema for a request to create an entity of different types */
    CreateEntityRequest: {
      /** @description An address description of the entity */
      address: components['schemas']['EntityAddressSchema'];
      /**
       * Format: email
       * @description An official email address of the entity
       */
      email: string;
      /** @description A set of meta data describing the individual */
      individual?: components['schemas']['IndividualSchema'];
      /** @description A set of meta data describing the organization */
      organization?: components['schemas']['OrganizationSchema'];
      /** @description A phone number of the entity */
      phone?: string;
      /** @description An identification number of the legal entity */
      tax_id?: string;
      /** @description A type for an entity */
      type: components['schemas']['EntityTypeEnum'];
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A scheme for validation an entity user additional info */
    CreateEntityUserRequest: {
      /**
       * Format: email
       * @description An entity user business email
       */
      email?: string;
      /**
       * @description First name
       * @example Andrey
       */
      first_name: string;
      /**
       * @description Last name
       * @example Korchak
       */
      last_name?: string;
      login: string;
      /** @description An entity user phone number in the international format */
      phone?: string;
      /**
       * Format: uuid
       * @description UUID of the role assigned to this entity user
       */
      role_id?: string;
      /**
       * @description Title
       * @example Boss
       */
      title?: string;
    };
    CreateExportTaskResponseSchema: {
      /** Format: uuid */
      id: string;
    };
    CreateOnboardingLinkRequest: {
      recipient: components['schemas']['Recipient'];
      /** Format: uri */
      refresh_url: string;
      /** Format: uri */
      return_url: string;
    };
    CreatePayableFromFileRequest: {
      /** Format: binary */
      file: string;
    };
    CreatePaymentLinkRequest: {
      /**
       * @description The payment amount in [minor units](https://docs.monite.com/docs/currencies#minor-units). Required if `object` is not specified.
       * @example 120550
       */
      amount?: number;
      /**
       * @description The payment currency. Required if `object` is not specified.
       * @example EUR
       */
      currency?: components['schemas']['CurrencyEnum'];
      /** Format: date-time */
      expires_at?: string;
      /** @description An object containing information about the invoice being paid. Used only if `object` is not specified. */
      invoice?: components['schemas']['Invoice'];
      /** @description If the invoice being paid is a payable or receivable stored in Monite, provide the `object` object containing the invoice type and ID. Otherwise, use the `amount`, `currency`, `payment_reference`, and (optionally) `invoice` fields to specify the invoice-related data. */
      object?: components['schemas']['PaymentObject'];
      payment_methods: components['schemas']['MoniteAllPaymentMethodsTypes'][];
      /**
       * @description A payment reference number that the recipient can use to identify the payer or purpose of the transaction. Required if `object` is not specified.
       * @example 011/7057/26072
       */
      payment_reference?: string;
      recipient: components['schemas']['PaymentAccountObject'];
      /**
       * Format: uri
       * @example https://pay.monite.com/result
       */
      return_url?: string;
    };
    CreateRecurrencePayload: {
      day_of_month: components['schemas']['DayOfMonth'];
      end_month: number;
      end_year: number;
      /** Format: uuid */
      invoice_id: string;
      start_month: number;
      start_year: number;
    };
    CreateRoleRequest: {
      /** @description Role name */
      name: string;
      /** @description Access permissions */
      permissions: components['schemas']['BizObjectsSchema'];
    };
    CreateTextTemplatePayload: {
      document_type: components['schemas']['DocumentTypeEnum'];
      name: string;
      template: string;
      type: components['schemas']['TextTemplateType'];
    };
    CreateWebhookSubscriptionRequest: {
      event_types?: string[];
      object_type: components['schemas']['WebhookObjectType'];
      /** Format: uri */
      url: string;
    };
    CreditNoteResponsePayload: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /**
       * Format: uuid
       * @description The unique ID of a previous document related to the receivable if applicable.
       */
      based_on?: string;
      /** @description The unique document ID of a previous document related to the receivable if applicable. */
      based_on_document_id?: string;
      /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
      commercial_condition_description?: string;
      counterpart_address: components['schemas']['CounterpartAddress'];
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
      counterpart_business_type?: string;
      /** @description Additional information about counterpart contacts. */
      counterpart_contact?: components['schemas']['ReceivableCounterpartContact'];
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      counterpart_id: string;
      /** @description A legal name of a counterpart it is an organization */
      counterpart_name?: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /** @description The VAT/TAX ID of the counterpart. */
      counterpart_tax_id?: string;
      /** @description The type of the counterpart. */
      counterpart_type: components['schemas']['CounterpartType'];
      counterpart_vat_id?: components['schemas']['CounterpartVatIDResponse'];
      /** @description The currency used in the receivable. */
      currency: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      discounted_subtotal?: number;
      /** @description The sequential code systematically assigned to invoices. */
      document_id?: string;
      /**
       * Format: date
       * @description Optional field representing date until which invoice should be paid
       */
      due_date?: string;
      entity:
        | components['schemas']['ReceivablesEntityOrganization']
        | components['schemas']['ReceivablesEntityIndividual'];
      entity_address: components['schemas']['EntityAddressSchema'];
      entity_bank_account?: components['schemas']['ReceivablesRepresentationOfEntityBankAccount'];
      /**
       * Format: uuid
       * @description The entity user who created this document.
       */
      entity_user_id?: string;
      entity_vat_id?: components['schemas']['EntityVatIDResponse'];
      file?: components['schemas']['FileSchema'];
      file_url?: string;
      /**
       * Format: date-time
       * @description Optional field for the issue of the entry.
       */
      issue_date?: string;
      line_items: components['schemas']['ResponseItem'][];
      /** @description A note with additional information for a receivable. */
      memo?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /** @description Contain purchase order number. */
      purchase_order?: string;
      /** @description The status of the Credit Note inside the receivable workflow. */
      status: components['schemas']['CreditNoteStateEnum'];
      /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      subtotal?: number;
      /**
       * @description Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
       * @default 0
       */
      total_amount?: number;
      /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      total_vat_amount: number;
      /** @description List of total vat amount for each VAT, presented in receivable */
      total_vat_amounts?: components['schemas']['TotalVatAmountItem'][];
      /** @description Total price of the receivable with tax withheld in minor units */
      total_withholding_tax?: number;
      /**
       * @description The type of the receivable
       * @enum {string}
       */
      type: 'credit_note';
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    /** @enum {string} */
    CreditNoteStateEnum: 'draft' | 'issued' | 'deleted';
    /** @enum {string} */
    CurrencyEnum:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'GBP'
      | 'GEL'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'INR'
      | 'ISK'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SEK'
      | 'SGD'
      | 'SLL'
      | 'SOS'
      | 'SRD'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XOF'
      | 'XPF'
      | 'YER'
      | 'ZAR'
      | 'ZMW';
    CurrencyExchangeSchema: {
      default_currency_code: string;
      rate: number;
      total: number;
    };
    CurrencySettings: {
      default: components['schemas']['CurrencyEnum'];
      exchange_rates?: components['schemas']['ExchangeRate'][];
    };
    CustomTemplateDataSchema: {
      /**
       * Format: uuid
       * @description ID of email template
       */
      id: string;
      /**
       * Format: date-time
       * @description Template created date and time
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Template updated date and time
       */
      updated_at: string;
      /** @description Jinja2 compatible email body template */
      body_template: string;
      /** @description Is default template */
      is_default: boolean;
      /** @description Lowercase ISO code of language */
      language: string;
      /** @description Name of the template */
      name: string;
      /** @description Jinja2 compatible email subject template */
      subject_template: string;
      /** @description Document type of content */
      type: string;
    };
    /** @enum {string} */
    CustomTemplatesCursorFields: 'type' | 'name';
    CustomTemplatesPaginationResponse: {
      /** @description All user-defined email templates */
      data: components['schemas']['CustomTemplateDataSchema'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    DNSRecord: {
      is_active: boolean;
      name?: string;
      /** @description Purpose of specific entry to distinguish between various TXT entries. */
      record_purpose?: components['schemas']['DNSRecordPurpose'];
      record_type: components['schemas']['DNSRecordType'];
      /** @description Field reflecting validation status by Mailgun. */
      valid: string;
      value: string;
    };
    /** @enum {string} */
    DNSRecordPurpose: 'DKIM' | 'SPF';
    /** @enum {string} */
    DNSRecordType: 'TXT' | 'MX' | 'CNAME';
    DNSRecords: {
      /** @description Set of DNS settings required by Mailgun for domain verification before emails receiving is possible. */
      receiving_dns_records: components['schemas']['DNSRecord'][];
      /** @description Set of DNS settings required by Mailgun for domain verification before emails sending is possible. */
      sending_dns_records: components['schemas']['DNSRecord'][];
    };
    /** @enum {string} */
    DataExportCursorFields: 'created_at';
    /** @enum {string} */
    DayOfMonth: 'first_day' | 'last_day';
    Discount: {
      /** @description The actual discount of the product in [minor units](https://docs.monite.com/docs/currencies#minor-units) if type field equals amount, else in percent minor units */
      amount: number;
      /** @description The field specifies whether to use product currency or %. */
      type: components['schemas']['DiscountType'];
    };
    /** @enum {string} */
    DiscountType: 'amount' | 'percentage';
    DocumentExportResponseSchema: {
      /** Format: uuid */
      id: string;
      count: number;
      /** Format: uuid */
      created_by_entity_user_id?: string;
      /** Format: date-time */
      end_datetime?: string;
      /** Format: uuid */
      entity_id: string;
      format: string;
      language: string;
      /** Format: uri */
      source_url?: string;
      /** Format: date-time */
      start_datetime?: string;
      status: string;
    };
    /** @enum {string} */
    DocumentObjectTypeRequestEnum:
      | 'receivables_quote'
      | 'receivables_invoice'
      | 'receivables_credit_note'
      | 'receivables_discount_reminder'
      | 'receivables_final_reminder'
      | 'payables_purchase_order'
      | 'payables_notify_approver'
      | 'payables_notify_payer';
    /** @enum {string} */
    DocumentTypeEnum:
      | 'quote'
      | 'invoice'
      | 'credit_note'
      | 'discount_reminder'
      | 'final_reminder'
      | 'payables_purchase_order'
      | 'overdue_reminder';
    DocumentTypeVariants: {
      payable?: components['schemas']['PayableStateEnum'][];
      receivable?: components['schemas']['InvoiceStateEnumForAccountingSyncRules'][];
    };
    DomainListResponse: {
      data: components['schemas']['DomainResponse'][];
    };
    DomainRequest: {
      domain: string;
    };
    DomainResponse: {
      /**
       * Format: uuid
       * @description Entry UUID
       */
      id: string;
      /** @description A dedicated IP address assigned to this mailbox and used to send outgoing email. */
      dedicated_ip?: string;
      dns_records: components['schemas']['DNSRecords'] | Record<string, never>;
      domain: string;
      status: string;
    };
    /** @enum {string} */
    EInvoicingProviderEnum: 'avalara';
    EInvoicingSettingsPayload: {
      client_id: string;
      client_secret: string;
      provider: components['schemas']['EInvoicingProviderEnum'];
    };
    EInvoicingSettingsResponse: {
      client_id: string;
      client_secret: string;
      provider: components['schemas']['EInvoicingProviderEnum'];
    };
    EnabledPaymentMethods: {
      /**
       * @deprecated
       * @description Deprecated. Use payment_methods_receive instead.
       */
      payment_methods?: components['schemas']['MoniteAllPaymentMethodsTypes'][];
      /** @description Enable payment methods to receive money. */
      payment_methods_receive?: components['schemas']['MoniteAllPaymentMethodsTypes'][];
      /** @description Enable payment methods to send money. */
      payment_methods_send?: components['schemas']['MoniteAllPaymentMethodsTypes'][];
    };
    /** @description A schema represents address info of the entity */
    EntityAddressSchema: {
      /** @description A city (a full name) where the entity is registered */
      city: string;
      /**
       * @description A country name (as ISO code) where the entity is registered
       * @default DE
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /** @description A street where the entity is registered */
      line1: string;
      /** @description An alternative street used by the entity */
      line2?: string;
      /** @description A postal code of the address where the entity is registered */
      postal_code: string;
      /** @description A state in a country where the entity is registered */
      state?: string;
    };
    /** @description A paginated list of an entity's bank accounts. */
    EntityBankAccountPaginationResponse: {
      /** @description A list of an entity's bank accounts. */
      data: components['schemas']['EntityBankAccountResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    /** @description Represents a bank account owned by an entity. */
    EntityBankAccountResponse: {
      /**
       * Format: uuid
       * @description Unique ID of the bank account.
       */
      id: string;
      /**
       * @description The name of the person or business that owns this bank account. Required if the account currency is GBP or USD.
       * @example Cayla Lloyd
       */
      account_holder_name?: string;
      /**
       * @description The bank account number. Required if the account currency is GBP or USD. UK account numbers typically contain 8 digits. US bank account numbers contain 9 to 12 digits.
       * @example 12345678
       */
      account_number?: string;
      /**
       * @description The bank name.
       * @example Deutsche Bank
       */
      bank_name?: string;
      /**
       * @description The SWIFT/BIC code of the bank.
       * @example DEUTDEFFXXX
       */
      bic?: string;
      /**
       * @description The country in which the bank account is registered, repsesented as a two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /**
       * @description The currency of the bank account, represented as a three-letter ISO [currency code](https://docs.monite.com/docs/currencies).
       * @example EUR
       */
      currency?: components['schemas']['CurrencyEnum'];
      /**
       * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
       * @example Primary account
       */
      display_name?: string;
      /**
       * @description The IBAN of the bank account. Required if the account currency is EUR.
       * @example DE74500700100100000900
       */
      iban?: string;
      /**
       * @description Indicates whether this bank account is the default one for its currency.
       * @default false
       */
      is_default_for_currency?: boolean;
      /** @description The bank's routing transit number (RTN). Required if the account currency is USD. US routing numbers consist of 9 digits. */
      routing_number?: string;
      /**
       * @description The bank's sort code. Required if the account currency is GBP.
       * @example 123456
       */
      sort_code?: string;
      /**
       * Format: uuid
       * @description ID of the entity user who added this bank account, or `null` if it was added using a partner access token.
       */
      was_created_by_user_id?: string;
    };
    /** @enum {string} */
    EntityBusinessStructure:
      | 'incorporated_partnership'
      | 'unincorporated_partnership'
      | 'public_corporation'
      | 'private_corporation'
      | 'sole_proprietorship'
      | 'single_member_llc'
      | 'multi_member_llc'
      | 'private_partnership'
      | 'unincorporated_association'
      | 'public_partnership';
    /** @enum {string} */
    EntityCursorFields: 'created_at' | 'updated_at';
    /** @description A Request schema for an entity of individual type */
    EntityIndividualRequest: {
      /**
       * Format: email
       * @description An email of the entity
       */
      email?: string;
      /** @description The first name of the entity issuing the receivable */
      first_name: string;
      /** @description The last name of the entity issuing the receivable */
      last_name: string;
      /**
       * Format: uri
       * @description A link to the entity logo
       */
      logo?: string;
      /** @description A phone number of the entity */
      phone?: string;
      /** @description The Tax ID of the entity issuing the receivable */
      tax_id?: string;
      /**
       * @description The entity type
       * @enum {string}
       */
      type: 'individual';
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A base for an entity response schema */
    EntityIndividualResponse: {
      /**
       * Format: uuid
       * @description UUID entity ID
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      updated_at: string;
      /** @description An address description of the entity */
      address: components['schemas']['EntityAddressSchema'];
      /** @description An official email address of the entity */
      email?: string;
      /** @description A set of metadata describing an individual */
      individual: components['schemas']['IndividualResponseSchema'];
      /** @description A logo image of the entity */
      logo?: components['schemas']['package__entities__unversioned__schemas__file_saver__FileSchema'];
      /** @description A phone number of the entity */
      phone?: string;
      /** @description record status, 'active' by default */
      status: components['schemas']['StatusEnum'];
      /** @description An identification number of the legal entity */
      tax_id?: string;
      /**
       * @description A type for an individual
       * @enum {string}
       */
      type: 'individual';
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    EntityLogoUploadRequest: {
      /** Format: binary */
      file: string;
    };
    EntityOnboardingDataRequest: {
      /** @description Business information about the entity. */
      business_profile?: components['schemas']['BusinessProfile'];
      /** @description Used to attest that the beneficial owner information provided is both current and correct. */
      ownership_declaration?: components['schemas']['package__entities__v2023_09_01__schemas__entity_onboarding_data__OwnershipDeclaration'];
      /** @description Details on the entity's acceptance of the service agreement. */
      tos_acceptance?: components['schemas']['package__entities__v2023_09_01__schemas__entity_onboarding_data__TermsOfServiceAcceptance'];
    };
    EntityOnboardingDocuments: {
      /** Format: binary */
      verification_document_front?: string;
      /** Format: binary */
      verification_document_back?: string;
      /** Format: binary */
      additional_verification_document_front?: string;
      /** Format: binary */
      additional_verification_document_back?: string;
      bank_account_ownership_verification?: string[];
      company_license?: string[];
      company_memorandum_of_association?: string[];
      company_ministerial_decree?: string[];
      company_registration_verification?: string[];
      company_tax_id_verification?: string[];
      proof_of_registration?: string[];
    };
    EntityOnboardingDocumentsPayload: {
      /** Format: uuid */
      additional_verification_document_back?: string;
      /** Format: uuid */
      additional_verification_document_front?: string;
      bank_account_ownership_verification?: string[];
      company_license?: string[];
      company_memorandum_of_association?: string[];
      company_ministerial_decree?: string[];
      company_registration_verification?: string[];
      company_tax_id_verification?: string[];
      proof_of_registration?: string[];
      /** Format: uuid */
      verification_document_back?: string;
      /** Format: uuid */
      verification_document_front?: string;
    };
    /** @description A Request schema for an entity of organization type */
    EntityOrganizationRequest: {
      /**
       * Format: email
       * @description An email of the entity
       */
      email?: string;
      /**
       * Format: uri
       * @description A link to the entity logo
       */
      logo?: string;
      /** @description The name of the entity issuing the receivable, when it is an organization. */
      name: string;
      /** @description A phone number of the entity */
      phone?: string;
      /** @description The Tax ID of the entity issuing the receivable */
      tax_id?: string;
      /**
       * @description The entity type
       * @enum {string}
       */
      type: 'organization';
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A base for an entity response schema */
    EntityOrganizationResponse: {
      /**
       * Format: uuid
       * @description UUID entity ID
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      updated_at: string;
      /** @description An address description of the entity */
      address: components['schemas']['EntityAddressSchema'];
      /** @description An official email address of the entity */
      email?: string;
      /** @description A logo image of the entity */
      logo?: components['schemas']['package__entities__unversioned__schemas__file_saver__FileSchema'];
      /** @description A set of metadata describing an organization */
      organization: components['schemas']['OrganizationResponseSchema'];
      /** @description A phone number of the entity */
      phone?: string;
      /** @description record status, 'active' by default */
      status: components['schemas']['StatusEnum'];
      /** @description An identification number of the legal entity */
      tax_id?: string;
      /**
       * @description A type for an organization
       * @enum {string}
       */
      type: 'organization';
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    EntityPaginationResponse: {
      /** @description A set of entities of different types returned per page */
      data: components['schemas']['EntityResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    /** @description A schema for a response after creation of an entity of different types */
    EntityResponse:
      | components['schemas']['EntityOrganizationResponse']
      | components['schemas']['EntityIndividualResponse'];
    /** @enum {string} */
    EntityTypeEnum: 'individual' | 'organization';
    EntityUpdateVatID: {
      country?: components['schemas']['AllowedCountries'];
      /** @example eu_vat */
      type?: components['schemas']['VatIDTypeEnum'];
      value?: string;
    };
    /** @enum {string} */
    EntityUserCursorFields: 'updated_at';
    EntityUserPaginationResponse: {
      /** @description array of records */
      data: components['schemas']['EntityUserResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    /** @description A scheme for validation an entity user additional info */
    EntityUserResponse: {
      /**
       * Format: uuid
       * @description UUID entity user ID
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      updated_at: string;
      /**
       * Format: email
       * @description An entity user business email
       */
      email?: string;
      /** @description First name */
      first_name?: string;
      /** @description Last name */
      last_name?: string;
      /**
       * @description Login
       * @example Meme Lord
       */
      login: string;
      /** @description An entity user phone number in the international format */
      phone?: string;
      /**
       * Format: uuid
       * @description UUID role ID
       */
      role_id: string;
      /** @description record status, 'active' by default */
      status: components['schemas']['StatusEnum'];
      /** Format: uuid */
      userpic_file_id?: string;
    };
    EntityVatID: {
      country: components['schemas']['AllowedCountries'];
      /**
       * @default unknown
       * @example eu_vat
       */
      type?: components['schemas']['VatIDTypeEnum'];
      /** @example 123456789 */
      value: string;
    };
    EntityVatIDResourceList: {
      data: components['schemas']['EntityVatIDResponse'][];
    };
    EntityVatIDResponse: {
      /** Format: uuid */
      id: string;
      country: components['schemas']['AllowedCountries'];
      /** Format: uuid */
      entity_id: string;
      /**
       * @default unknown
       * @example eu_vat
       */
      type?: components['schemas']['VatIDTypeEnum'];
      /** @example 123456789 */
      value: string;
    };
    ErrorSchema: {
      message: string;
    };
    ErrorSchemaResponse: {
      error: components['schemas']['ErrorSchema'];
    };
    /** @enum {string} */
    EventCursorFields: 'created_at' | 'updated_at';
    EventPaginationResource: {
      /** @description A set of events returned per page */
      data: components['schemas']['EventResource'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    EventResource: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description The timestamp that was generated at the time of making the database transaction that has initially caused the event
       */
      created_at?: string;
      action: string;
      api_version?: string;
      /** Format: uuid */
      entity_id: string;
      name: string;
      object?: unknown;
      /** Format: uuid */
      object_id: string;
      object_type: components['schemas']['WebhookObjectType'];
      /** @default medium */
      significance?: string;
    };
    EventResourceForWebhookClient: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description The timestamp that was generated at the time of making the database transaction that has initially caused the event
       */
      created_at?: string;
      action: string;
      api_version?: string;
      /** Format: uuid */
      entity_id: string;
      name: string;
      object?: unknown;
      /** Format: uuid */
      object_id: string;
      object_type: components['schemas']['WebhookObjectType'];
      /** @default medium */
      significance?: string;
      /** Format: uuid */
      webhook_subscription_id: string;
    };
    ExchangeRate: {
      /** @example USD */
      base: components['schemas']['CurrencyEnum'];
      /** @example 0.98 */
      rate: number;
      /** @example EUR */
      to: components['schemas']['CurrencyEnum'];
    };
    /** @enum {string} */
    ExportFormat: 'csv' | 'pdf' | 'csv_xero';
    ExportObjectSchema:
      | components['schemas']['ExportPayableSchema']
      | components['schemas']['ExportReceivableSchema'];
    ExportPayableSchema: {
      /** @enum {string} */
      name: 'payable';
      statuses: components['schemas']['PayableStateEnum'][];
    };
    ExportPayloadSchema: {
      /** Format: date */
      date_from: string;
      /** Format: date */
      date_to: string;
      format: components['schemas']['ExportFormat'];
      objects: components['schemas']['ExportObjectSchema'][];
    };
    ExportReceivableSchema: {
      /** @enum {string} */
      name: 'receivable';
      statuses: components['schemas']['ReceivablesStatusEnum'][];
    };
    /** @enum {string} */
    ExportSettingCursorFields: 'id' | 'created_at';
    ExtraDataCreateRequest: {
      field_name: components['schemas']['SupportedFieldNames'];
      field_value: string;
      /** Format: uuid */
      object_id: string;
      /** @enum {string} */
      object_type: 'counterpart';
    };
    ExtraDataResource: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      created_by?: string;
      field_name: components['schemas']['SupportedFieldNames'];
      field_value: string;
      /** Format: uuid */
      object_id: string;
      /** @enum {string} */
      object_type: 'counterpart';
    };
    ExtraDataResourceList: {
      data: components['schemas']['ExtraDataResource'][];
      next_pagination_token?: string;
      prev_pagination_token?: string;
    };
    ExtraDataUpdateRequest: {
      field_name?: components['schemas']['SupportedFieldNames'];
      field_value?: string;
      /** Format: uuid */
      object_id?: string;
      /** @enum {string} */
      object_type?: 'counterpart';
    };
    FileResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      file_type: string;
      md5: string;
      mimetype: string;
      name: string;
      region: string;
      s3_bucket: string;
      s3_file_path: string;
      size: number;
      url: string;
    };
    /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
    FileSchema: {
      /**
       * Format: uuid
       * @description A unique ID of this file.
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /**
       * @description The type of the business object associated with this file.
       * @example payables
       */
      file_type: string;
      /**
       * @description The MD5 hash of the file.
       * @example 31d1a2dd1ad3dfc39be849d70a68dac0
       */
      md5: string;
      /**
       * @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
       * @example application/pdf
       */
      mimetype: string;
      /**
       * @description The original file name (if available).
       * @example invoice.pdf
       */
      name: string;
      /**
       * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
       * @default []
       */
      pages?: components['schemas']['PageSchema'][];
      /**
       * @description Preview images generated for this file. There can be multiple images with different sizes.
       * @default []
       */
      previews?: components['schemas']['PreviewSchema'][];
      /**
       * @description Geographical region of the data center where the file is stored.
       * @example eu-central-1
       */
      region: string;
      /**
       * @description The file size in bytes.
       * @example 24381
       */
      size: number;
      /**
       * @description The URL to download the file.
       * @example https://bucketname.s3.amazonaws.com/12345/67890.pdf
       */
      url: string;
    };
    FilesResponse: {
      data: components['schemas']['FileResponse'][];
    };
    GetAllPaymentReminders: {
      data: components['schemas']['PaymentReminderResponse'][];
    };
    GetAllRecurrences: {
      data: components['schemas']['Recurrence'][];
    };
    GetOnboardingRequirementsResponse: {
      data: components['schemas']['SingleOnboardingRequirementsResponse'][];
    };
    /** @enum {string} */
    GrantType: 'client_credentials' | 'entity_user';
    HTTPValidationError: {
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * @description Less strict validator for response to do not break API. Validation rules are from version 2023-09-01 as the
     * stricter validation was introduced in 2024-01-31
     */
    IndividualResponseSchema: {
      /** Format: date */
      date_of_birth?: string;
      /** @description A first name of an individual */
      first_name: string;
      id_number?: string;
      /** @description A last name of an individual */
      last_name: string;
      ssn_last_4?: string;
      /** @description A title of an individual */
      title?: string;
    };
    /** @description A schema contains metadata for an individual */
    IndividualSchema: {
      /** Format: date */
      date_of_birth?: string;
      /** @description A first name of an individual */
      first_name: string;
      id_number?: string;
      /** @description A last name of an individual */
      last_name: string;
      /** @description The last four digits of the individual's Social Security number */
      ssn_last_4?: string;
      /** @description A title of an individual */
      title?: string;
    };
    InternalBusinessProfile: {
      /**
       * @description The merchant category code of the entity. MCCs are used to classify businesses based on the goods or services they provide.
       * @example 5734
       */
      mcc?: string;
      /**
       * Format: uri
       * @description The business's publicly available website.
       */
      url?: string;
    };
    InternalEntityOnboardingDataResponse: {
      business_profile?: components['schemas']['InternalBusinessProfile'];
      /** @description Used to attest that the beneficial owner information provided is both current and correct. */
      ownership_declaration?: components['schemas']['package__entities__head__schemas__entity_onboarding_data__OwnershipDeclaration'];
      /** @description Details on the entity's acceptance of the service agreement. */
      tos_acceptance?: components['schemas']['package__entities__head__schemas__entity_onboarding_data__TermsOfServiceAcceptance'];
    };
    Invoice: {
      /** Format: date */
      due_date?: string;
      file?: components['schemas']['InvoiceFile'];
      /** Format: date */
      issue_date?: string;
    };
    InvoiceFile: {
      mimetype: string;
      name: string;
      /** Format: uri */
      url: string;
    };
    InvoiceResponsePayload: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /** @description How much is left to be paid in [minor units](https://docs.monite.com/docs/currencies#minor-units). Equal 0 if the Invoice is fully paid. */
      amount_due: number;
      /** @description How much has been paid [minor units](https://docs.monite.com/docs/currencies#minor-units) */
      amount_paid: number;
      /** @description How much is left to be paid in in [minor units](https://docs.monite.com/docs/currencies#minor-units), including payment_term discounts. */
      amount_to_pay?: number;
      /**
       * Format: uuid
       * @description The unique ID of a previous document related to the receivable if applicable.
       */
      based_on?: string;
      /** @description The unique document ID of a previous document related to the receivable if applicable. */
      based_on_document_id?: string;
      /** @description Field with a comment for pay/partially/uncollectible info on this Invoice */
      comment?: string;
      /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
      commercial_condition_description?: string;
      counterpart_address: components['schemas']['CounterpartAddress'];
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
      counterpart_business_type?: string;
      /** @description Additional information about counterpart contacts. */
      counterpart_contact?: components['schemas']['ReceivableCounterpartContact'];
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      counterpart_id: string;
      /** @description A legal name of a counterpart it is an organization */
      counterpart_name?: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /** @description The VAT/TAX ID of the counterpart. */
      counterpart_tax_id?: string;
      /** @description The type of the counterpart. */
      counterpart_type: components['schemas']['CounterpartType'];
      counterpart_vat_id?: components['schemas']['CounterpartVatIDResponse'];
      /** @description The currency used in the receivable. */
      currency: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      discounted_subtotal?: number;
      /** @description The sequential code systematically assigned to invoices. */
      document_id?: string;
      /**
       * Format: date
       * @description Optional field representing date until which invoice should be paid
       */
      due_date?: string;
      entity:
        | components['schemas']['ReceivablesEntityOrganization']
        | components['schemas']['ReceivablesEntityIndividual'];
      entity_address: components['schemas']['EntityAddressSchema'];
      entity_bank_account?: components['schemas']['ReceivablesRepresentationOfEntityBankAccount'];
      /**
       * Format: uuid
       * @description The entity user who created this document.
       */
      entity_user_id?: string;
      entity_vat_id?: components['schemas']['EntityVatIDResponse'];
      file?: components['schemas']['FileSchema'];
      file_url?: string;
      /**
       * Format: date
       * @description The date when the goods are shipped or the service is provided.
       *
       * If omitted, defaults to the invoice issue date,
       * and the value is automatically set when the invoice status changes to `issued`.
       */
      fulfillment_date?: string;
      /**
       * Format: date-time
       * @description Optional field for the issue of the entry.
       */
      issue_date?: string;
      line_items: components['schemas']['ResponseItem'][];
      /** @description A note with additional information for a receivable. */
      memo?: string;
      /** Format: uuid */
      overdue_reminder_id?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /**
       * Format: uri
       * @description Link to the invoice's payment page. Either Monite's payment links or your custom payment links.
       */
      payment_page_url?: string;
      /** Format: uuid */
      payment_reminder_id?: string;
      payment_terms?: components['schemas']['PaymentTerms'];
      /** @description Contain purchase order number. */
      purchase_order?: string;
      /**
       * Format: uuid
       * @description Stores an unique ID of a recurrence if the receivable is in a recurring status
       */
      recurrence_id?: string;
      /** @description Ids of documents that relate to invoice. I.e credit notes, proforma invoices, etc. */
      related_documents: components['schemas']['RelatedDocuments'];
      /** @description The status of the receivable inside the receivable workflow. */
      status: components['schemas']['ReceivablesStatusEnum'];
      /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      subtotal?: number;
      /**
       * @description Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
       * @default 0
       */
      total_amount?: number;
      /** @description The total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units), including VAT and excluding all issued credit notes. */
      total_amount_with_credit_notes: number;
      /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      total_vat_amount: number;
      /** @description List of total vat amount for each VAT, presented in receivable */
      total_vat_amounts?: components['schemas']['TotalVatAmountItem'][];
      /** @description Total price of the receivable with tax withheld in minor units */
      total_withholding_tax?: number;
      /**
       * @description The type of the document uploaded.
       * @enum {string}
       */
      type: 'invoice';
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    /** @enum {string} */
    InvoiceStateEnumForAccountingSyncRules:
      | 'issued'
      | 'partially_paid'
      | 'paid'
      | 'overdue'
      | 'uncollectible'
      | 'canceled'
      | 'deleted';
    /** @description Contains information about a text block or line extracted from an uploaded document by OCR. */
    Item: {
      /**
       * @description The text as recognized by OCR.
       * @example €1,125.00
       */
      text: string;
      /**
       * @description OCR confidence score - the estimated accuracy percentage of character recognition of the extracted text, from 0 to 100%.
       * @example 96.238
       */
      confidence: number;
      /**
       * @description If the `text` value is identified as a currency amount or a date, `processed_text` contains this value converted to a common format:
       *
       * * Currency amounts (such as the total, subtotal, tax/VAT, line item prices) are converted to numbers with the currency character removed. For example, "€1,125.00" becomes 1125.0.* Dates are converted to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, `YYYY-MM-DDThh:mm:ss`. For example, "26/3/2021" becomes "2021-03-26T00:00:00".
       *
       * If `text` is not a currency amount or a date, `processed_text` is `null`.
       * @example 1125
       */
      processed_text?: unknown;
    };
    /** @enum {string} */
    IterationStatus: 'pending' | 'completed' | 'canceled' | 'issue_failed';
    /**
     * @description A label-value pair extracted from an uploaded document by OCR.
     * For example, the label could be "Total" and the value could be a currency amount.
     */
    LabelNValue: {
      /**
       * @description Text label.
       * @example {
       *   "text": "total",
       *   "confidence": 99.799
       * }
       */
      label: components['schemas']['Item'];
      /** @description The value (if any). */
      value: components['schemas']['Item'];
    };
    /** @enum {string} */
    LanguageCodeEnum:
      | 'ab'
      | 'aa'
      | 'af'
      | 'ak'
      | 'sq'
      | 'am'
      | 'ar'
      | 'an'
      | 'hy'
      | 'av'
      | 'ae'
      | 'ay'
      | 'az'
      | 'bm'
      | 'ba'
      | 'eu'
      | 'be'
      | 'bn'
      | 'bi'
      | 'bs'
      | 'br'
      | 'bg'
      | 'my'
      | 'ca'
      | 'ch'
      | 'ce'
      | 'ny'
      | 'zh'
      | 'cu'
      | 'cv'
      | 'kw'
      | 'co'
      | 'cr'
      | 'hr'
      | 'cs'
      | 'da'
      | 'dv'
      | 'nl'
      | 'dz'
      | 'en'
      | 'eo'
      | 'et'
      | 'ee'
      | 'fo'
      | 'fj'
      | 'fi'
      | 'fr'
      | 'fy'
      | 'ff'
      | 'gd'
      | 'gl'
      | 'lg'
      | 'ka'
      | 'de'
      | 'el'
      | 'kl'
      | 'gn'
      | 'gu'
      | 'ht'
      | 'ha'
      | 'he'
      | 'hz'
      | 'hi'
      | 'ho'
      | 'hu'
      | 'io'
      | 'ig'
      | 'id'
      | 'ia'
      | 'ie'
      | 'iu'
      | 'ik'
      | 'ga'
      | 'it'
      | 'ja'
      | 'jv'
      | 'kn'
      | 'kr'
      | 'ks'
      | 'kk'
      | 'km'
      | 'ki'
      | 'rw'
      | 'ky'
      | 'kv'
      | 'kg'
      | 'ko'
      | 'kj'
      | 'ku'
      | 'lo'
      | 'la'
      | 'lv'
      | 'li'
      | 'ln'
      | 'lt'
      | 'lu'
      | 'lb'
      | 'mk'
      | 'mg'
      | 'ms'
      | 'ml'
      | 'mt'
      | 'gv'
      | 'mi'
      | 'mr'
      | 'mh'
      | 'mn'
      | 'na'
      | 'nv'
      | 'nd'
      | 'nr'
      | 'ng'
      | 'ne'
      | 'no'
      | 'nb'
      | 'nn'
      | 'ii'
      | 'oc'
      | 'oj'
      | 'om'
      | 'os'
      | 'pi'
      | 'ps'
      | 'fa'
      | 'pl'
      | 'pt'
      | 'pa'
      | 'qu'
      | 'ro'
      | 'rm'
      | 'rn'
      | 'ru'
      | 'se'
      | 'sm'
      | 'sg'
      | 'sa'
      | 'sc'
      | 'sr'
      | 'sn'
      | 'sd'
      | 'si'
      | 'sk'
      | 'sl'
      | 'so'
      | 'st'
      | 'es'
      | 'su'
      | 'sw'
      | 'ss'
      | 'sv'
      | 'tl'
      | 'ty'
      | 'tg'
      | 'ta'
      | 'tt'
      | 'te'
      | 'th'
      | 'bo'
      | 'ti'
      | 'to'
      | 'ts'
      | 'tn'
      | 'tr'
      | 'tk'
      | 'tw'
      | 'ug'
      | 'uk'
      | 'ur'
      | 'uz'
      | 've'
      | 'vi'
      | 'vo'
      | 'wa'
      | 'cy'
      | 'wo'
      | 'xh'
      | 'yi'
      | 'yo'
      | 'za'
      | 'zu';
    /** @enum {string} */
    LedgerAccountCursorFields: 'name';
    /** @description A paginated list of ledger accounts. */
    LedgerAccountListResponse: {
      data: components['schemas']['LedgerAccountResponse'][];
      next_pagination_token?: string;
      prev_pagination_token?: string;
    };
    /** @description Represents a general ledger account retrieved from an accounting system. */
    LedgerAccountResponse: {
      /**
       * Format: uuid
       * @description A unique identifier of the ledger account.
       */
      id: string;
      /**
       * @description The currency of the ledger account, specified as a three-letter [currency code](https://docs.monite.com/docs/currencies) (ISO 4217).
       * @example EUR
       */
      currency: components['schemas']['CurrencyEnum'];
      /** @description The current balance in the account. */
      current_balance?: number;
      /** @description User-defined description of the ledger account. */
      description?: string;
      /** @description Indicates whether this ledger account represents a bank account. */
      is_bank_account: boolean;
      /**
       * @description A user-defined name of the ledger account. Examples: Accounts Receivable, Office Equipment, Advertising, Salaries.
       * @example Accounts Receivable
       */
      name: string;
      /**
       * @description The account code in the accounting system.
       * @example 610
       */
      nominal_code?: string;
      /**
       * @description The status of the ledger account. Possible values: Active, Archived, Pending, Unknown.
       * @example Active
       */
      status: string;
      /**
       * @description The subtype or category of the ledger account. Possible values vary based on the accounting system used. Examples: Current, Fixed, Expense, Inventory, Equity.
       * @example Current
       */
      subtype?: string;
      /**
       * @description The type of the ledger account. It determines whether the account is a credit account or a debit account and where it appears in financial reports within the accounting system. Possible values: Asset, Equity, Expense, Income, Liability, Unknown.
       * @example Asset
       */
      type: string;
    };
    LineItem: {
      /** @description The discount for a product. */
      discount?: components['schemas']['Discount'];
      /** Format: uuid */
      product_id: string;
      /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
      quantity: number;
      /**
       * Format: uuid
       * @description Unique identifier of the vat rate object.
       */
      vat_rate_id: string;
    };
    /** @enum {string} */
    LineItemCursorFields: 'created_at' | 'updated_at';
    LineItemPaginationResponse: {
      data: components['schemas']['LineItemResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    LineItemProduct: {
      /**
       * Format: uuid
       * @description Unique ID of the product.
       */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the product was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the product was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /** @description Description of the product. */
      description?: string;
      /** Format: uuid */
      entity_id: string;
      /** Format: uuid */
      entity_user_id?: string;
      /** Format: uuid */
      ledger_account_id?: string;
      measure_unit: components['schemas']['UnitResponse'];
      /**
       * Format: uuid
       * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
       */
      measure_unit_id: string;
      /** @description Name of the product. */
      name: string;
      price?: components['schemas']['Price'];
      /** @description The smallest amount allowed for this product. */
      smallest_amount?: number;
      /**
       * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
       * @default product
       */
      type?: components['schemas']['ProductServiceTypeEnum'];
      vat_rate: components['schemas']['VatRateResponse'];
    };
    LineItemRequest: {
      /**
       * Format: uuid
       * @description ID of the tax rate reference used for accounting integration. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
       * @example dd13735f-ef3a-4312-8c37-835d70341375
       */
      accounting_tax_rate_id?: string;
      /** @description Description of the product. */
      description?: string;
      /**
       * Format: uuid
       * @description ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
       * @example 7df884fd-8be8-4eba-b6ff-417b66efe033
       */
      ledger_account_id?: string;
      /** @description Name of the product. */
      name?: string;
      /**
       * @description The quantity of each of the goods, materials, or services listed in the payable.
       * @example 1.22
       */
      quantity?: number;
      /**
       * @description VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
       * @example 1250
       */
      tax?: number;
      /**
       * @description The unit of the product
       * @example meter
       */
      unit?: string;
      /**
       * @description The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 1200
       */
      unit_price?: number;
    };
    LineItemResponse: {
      /** Format: uuid */
      id: string;
      /**
       * Format: uuid
       * @description ID of the tax rate reference used for accounting integartion. May be used to override auto-picked tax rate reference in accounting platform in case of any platform-specific constraints.
       * @example dd13735f-ef3a-4312-8c37-835d70341375
       */
      accounting_tax_rate_id?: string;
      /** @description Description of the product. */
      description?: string;
      /**
       * Format: uuid
       * @description ID of the account record used to store bookkeeping entries for balance-sheet and income-statement transactions.
       * @example 7df884fd-8be8-4eba-b6ff-417b66efe033
       */
      ledger_account_id?: string;
      /** @description Name of the product. */
      name?: string;
      /** Format: uuid */
      payable_id: string;
      /**
       * @description The quantity of each of the goods, materials, or services listed in the payable.
       * @example 1.22
       */
      quantity?: number;
      /**
       * @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units).
       * @example 1250
       */
      subtotal?: number;
      /**
       * @description VAT rate in percent [minor units](https://docs.monite.com/docs/currencies#minor-units). Example: 12.5% is 1250.
       * @example 2000
       */
      tax?: number;
      /**
       * @description Tax amount in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 250
       */
      tax_amount?: number;
      /**
       * @description The actual price of the product.
       * @example 1200
       */
      total?: number;
      /**
       * @description The unit of the product
       * @example meter
       */
      unit?: string;
      /**
       * @description The unit price of the product, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 1500
       */
      unit_price?: number;
      /**
       * Format: uuid
       * @description ID of the user who created the tag.
       * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
       */
      was_created_by_user_id?: string;
    };
    LineItemUpdate: {
      /** @description The discount for a product. */
      discount?: components['schemas']['Discount'];
      /** @description The actual price of the product in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      price?: number;
      /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
      quantity?: number;
      /**
       * Format: uuid
       * @description Vat rate object id
       */
      vat_rate_id?: string;
    };
    LineItemsResponse: {
      data: components['schemas']['ResponseItem'][];
    };
    /** @enum {string} */
    LogMethodEnum: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    LogResponse: {
      /** Format: uuid */
      id: string;
      body?: Record<string, never> | unknown[];
      content_type: string;
      /** Format: uuid */
      entity_id: string;
      /** Format: uuid */
      entity_user_id?: string;
      headers?: Record<string, never>;
      method?: string;
      params?: string;
      /** Format: uuid */
      parent_log_id?: string;
      /** Format: uuid */
      partner_id: string;
      path?: string;
      status_code?: number;
      target_service: string;
      /** Format: date-time */
      timestamp: string;
      type: string;
    };
    /** @enum {string} */
    LogTypeEnum: 'request' | 'response';
    LogsResponse: {
      data: components['schemas']['LogResponse'][];
      next_pagination_token?: string;
      prev_pagination_token?: string;
      total_logs: number;
      total_pages: number;
    };
    MailSettingsPayload: {
      attach_documents_as_pdf: boolean;
      from_email_username?: string;
      from_name?: string;
    };
    MailSettingsResponse: {
      attach_documents_as_pdf: boolean;
      from_email_username?: string;
      from_name?: string;
    };
    MailboxDataResponse: {
      data?: components['schemas']['MailboxResponse'][];
    };
    MailboxDomainRequest: {
      /** Format: uuid */
      mailbox_domain_id: string;
      mailbox_name: string;
      /** @description Related object type: payable and so on */
      related_object_type: components['schemas']['MailboxObjectTypeEnum'];
    };
    MailboxMultipleEntitiesRequest: {
      entity_ids: string[];
    };
    /** @enum {string} */
    MailboxObjectTypeEnum: 'payable';
    MailboxResponse: {
      /**
       * Format: uuid
       * @description Mailbox UUID
       */
      id: string;
      /** Format: uuid */
      mailbox_domain_id?: string;
      mailbox_full_address: string;
      mailbox_name: string;
      related_object_type: string;
      status: string;
    };
    MergedSettingsResponse: {
      /** @description Settings for the accounting module. */
      accounting?: components['schemas']['AccountingSettingsResponse'];
      /** @description Default API version for partner. */
      api_version?: components['schemas']['APIVersion'];
      /** @description Commercial conditions for receivables. */
      commercial_conditions?: string[];
      /** @description Custom currency exchange rates. */
      currency?: components['schemas']['CurrencySettings'];
      /** @description A default role to provision upon new entity creation. */
      default_role?: Record<string, never>;
      /** @description Settings for the e-invoicing module. */
      einvoicing?: components['schemas']['EInvoicingSettingsResponse'];
      /** @description Settings for email and mailboxes. */
      mail?: components['schemas']['MailSettingsResponse'];
      /** @description Settings for the payables module. */
      payable?: components['schemas']['PayableSettingsResponse'];
      /**
       * @description Payment preferences for entity to automate calculating suggested payment date basing on payment terms and entity preferences
       * @default working_capital
       */
      payment_priority?: components['schemas']['PaymentPriorityEnum'];
      /** @description Settings for the payments module. */
      payments?: components['schemas']['PaymentsSettingsResponse'];
      /** @description Settings for the receivables module. */
      receivable?: components['schemas']['ReceivableSettingsResponse'];
      /** @default compliant */
      receivable_edit_flow?: components['schemas']['ReceivableEditFlow'];
      reminder?: components['schemas']['RemindersSettings'];
      /** @description Measurement units. */
      units?: components['schemas']['Unit'][];
      website?: string;
    };
    MessageResponse: {
      message: string;
    };
    MissingFields: {
      /** @description Missing fields of counterpart. */
      counterpart?: string[];
      /** @description Missing fields of entity. */
      entity?: string[];
      /** @description Missing fields of line items. */
      products?: components['schemas']['MissingLineItemFields'][];
      /** @description Missing fields of receivable. */
      receivable?: string[];
      /** @description List of invalid vat rates. */
      vat_rates?: string[];
      /** @description Warning message for payment reminder */
      warnings?: components['schemas']['ReceivablesRemindersWarningMessage'];
    };
    MissingLineItemFields: {
      /** @description Order number of line item. */
      line_item_number: number;
      /** @description Missing fields of line item. */
      missing_fields: string[];
    };
    /** @enum {string} */
    MoniteAllPaymentMethods:
      | 'SEPA Payments'
      | 'US ACH Payments'
      | 'BLIK'
      | 'Card payments'
      | 'Bancontact'
      | 'Electronic Payment Standard'
      | 'Giropay'
      | 'iDEAL'
      | 'Przelewy24'
      | 'SEPA Direct Debit'
      | 'SOFORT'
      | 'Apple Pay'
      | 'Google Pay';
    /** @enum {string} */
    MoniteAllPaymentMethodsTypes:
      | 'sepa_credit'
      | 'us_ach'
      | 'blik'
      | 'card'
      | 'bancontact'
      | 'eps'
      | 'giropay'
      | 'ideal'
      | 'p24'
      | 'sepa_debit'
      | 'sofort'
      | 'applepay'
      | 'googlepay';
    /**
     * @description In general it's compatible with CounterpartAddress model but
     * * All fields are optional
     * * There is an additional field original_country_name
     */
    OCRAddress: {
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country?: string;
      /**
       * @description Country name as it is stated in the document.
       * @example Berlin
       */
      original_country_name?: string;
      /**
       * @description City name.
       * @example Berlin
       */
      city?: string;
      /**
       * @description ZIP or postal code.
       * @example 10115
       */
      postal_code?: string;
      /** @description State, region, province, or county. */
      state?: string;
      /**
       * @description Street address.
       * @example Flughafenstrasse 52
       */
      line1?: string;
      /** @description Additional address information (if any). */
      line2?: string;
    };
    OCRResponseInvoiceReceiptData: {
      /**
       * @description Total in cents/eurocents. Outdated, actual conversion happens in payables.
       * @example 7000
       */
      total?: number;
      /**
       * @description Total, without minor units
       * @example 70
       */
      total_raw?: number;
      /**
       * @description Subtotal cents/eurocents. Outdated, actual conversion happens in payables.
       * @example 7700
       */
      total_excl_vat?: number;
      /**
       * @description Subtotal, without minor units
       * @example 77
       */
      total_excl_vat_raw?: number;
      /**
       * @description VAT amount in cents. Outdated, actual conversion happens in payables.
       * @example 700
       */
      total_vat_amount?: number;
      /**
       * @description VAT amount, without minor units
       * @example 7
       */
      total_vat_amount_raw?: number;
      /**
       * @description VAT Percent minor units. Example: 12.5% is 1250. Outdated, actual conversion happens in payables.
       * @example 1250
       */
      total_vat_rate?: number;
      /**
       * @description VAT Percent raw, without minor units.
       * @example 12.5
       */
      total_vat_rate_raw?: number;
      /**
       * @description ISO 4217 currency code
       * @example EUR
       */
      currency?: string;
      /**
       * @description Counterpart name
       * @example Monite GMbH
       */
      counterpart_name?: string;
      /** @description Counterpart address */
      counterpart_address?: string;
      /**
       * @description Counterpart bank ID
       * @example DEUTDEFF
       */
      counterpart_account_id?: string;
      /**
       * @description Invoice/receipt ID
       * @example CST-13341
       */
      document_id?: string;
      /** @description Payment terms. Deprecated. */
      payment_terms?: string;
      /** @description Payment terms parsed and calculated. Deprecated */
      payment_terms_parsed?: components['schemas']['OCRResponsePaymentTermsPayload'];
      /** @description Raw payment terms parsed but not calculated. */
      payment_terms_raw?: string[];
      /**
       * @description Tax payer ID (aka VAT ID)
       * @example DE88939004
       */
      tax_payer_id?: string;
      /** @description Document issuance date in ISO format */
      document_issued_at_date?: string;
      /** @description Document due date in ISO format */
      document_due_date?: string;
      /** @description Counterpart address as a json object compatible with counterparts service */
      counterpart_address_object?: components['schemas']['OCRAddress'];
      /** @description The bank account number */
      counterpart_account_number?: string;
      /** @description The bank routing number */
      counterpart_routing_number?: string;
      /** @description List of line items from document. Outdated, actual conversion happens in payables. */
      line_items?: components['schemas']['OCRResponseInvoiceReceiptLineItem'][];
      /** @description List of line items from document raw, without minor units conversion. */
      line_items_raw?: components['schemas']['OCRResponseInvoiceReceiptLineItemRaw'][];
    };
    OCRResponseInvoiceReceiptLineItem: {
      /** @description OCR Id of line item */
      line_item_ocr_id?: string;
      /**
       * @description Human-readable line item description
       * @example Impact Players : How to Take the Lead , Play Bigger , and Multiply Your
       */
      description?: string;
      /**
       * @description Quanity
       * @example 1.22
       */
      quantity?: number;
      /**
       * @description Price in  cents/eurocents
       * @example 1200
       */
      unit_price?: number;
      /**
       * @description Unit
       * @example meters
       */
      unit?: string;
      /**
       * @description VAT Percent minor units. Example: 12.5% is 1250.
       * @example 1250
       */
      vat_percentage?: number;
      /**
       * @description VAT Amount minor units.
       * @example 2900
       */
      vat_amount?: number;
      /**
       * @description Total excl VAT
       * @example 12300
       */
      total_excl_vat?: number;
      /**
       * @description Total included VAT
       * @example 12300
       */
      total_incl_vat?: number;
    };
    OCRResponseInvoiceReceiptLineItemRaw: {
      /** @description OCR Id of line item */
      line_item_ocr_id?: string;
      /**
       * @description Human-readable line item description
       * @example Impact Players : How to Take the Lead , Play Bigger , and Multiply Your
       */
      description?: string;
      /**
       * @description Quanity
       * @example 1.2
       */
      quantity?: number;
      /**
       * @description Price as parsed
       * @example 100
       */
      unit_price?: number;
      /**
       * @description Unit
       * @example meters
       */
      unit?: string;
      /**
       * @description VAT Percent as parsed.
       * @example 12.5
       */
      vat_percentage?: number;
      /**
       * @description VAT Amount as parsed.
       * @example 15
       */
      vat_amount?: number;
      /**
       * @description Total excluded VAT as parsed.
       * @example 120
       */
      total_excl_vat?: number;
      /**
       * @description Total included VAT as parsed.
       * @example 135
       */
      total_incl_vat?: number;
    };
    OCRResponsePaymentTerm: {
      /**
       * @description The amount of days after the invoice issue date.
       * @example 10
       */
      number_of_days: number;
    };
    OCRResponsePaymentTermDiscount: {
      /**
       * @description The amount of days after the invoice issue date.
       * @example 10
       */
      number_of_days: number;
      /**
       * @description The discount percentage in minor units. E.g., 200 means 2%, 1050 means 10.5%.
       * @example 1500
       */
      discount: number;
    };
    OCRResponsePaymentTermsPayload: {
      name: string;
      description?: string;
      term_final: components['schemas']['OCRResponsePaymentTerm'];
      term_1?: components['schemas']['OCRResponsePaymentTermDiscount'];
      term_2?: components['schemas']['OCRResponsePaymentTermDiscount'];
    };
    /** @enum {string} */
    ObjectType:
      | 'account'
      | 'approval'
      | 'approval_request'
      | 'approval_policy'
      | 'monitescript_process'
      | 'audit_trail'
      | 'comment'
      | 'counterpart'
      | 'counterpart_address'
      | 'counterpart_bank_account'
      | 'counterpart_contact_person'
      | 'counterpart_partner_metadata'
      | 'counterpart_tax_id'
      | 'counterpart_vat_id'
      | 'entity'
      | 'entity_bank_account'
      | 'entity_settings'
      | 'entity_token'
      | 'entity_user'
      | 'entity_user_token'
      | 'entity_vat_ids'
      | 'export'
      | 'partner'
      | 'partner_internal_config'
      | 'partner_settings'
      | 'partner_token'
      | 'payable'
      | 'payable_line_item'
      | 'payables_purchase_order'
      | 'payment'
      | 'payment_intent'
      | 'payment_link'
      | 'payment_record'
      | 'payment_reminder'
      | 'product'
      | 'receivable'
      | 'reconciliation'
      | 'recurrence'
      | 'role'
      | 'tag'
      | 'todo_task'
      | 'todo_task_mute'
      | 'transaction'
      | 'webhook'
      | 'workflow'
      | 'workflow_pipeline'
      | 'overdue_reminder'
      | 'einvoicing';
    /** @enum {unknown} */
    ObjectTypeAvailableComment: 'payable';
    /** @enum {string} */
    ObjectTypeEnum: 'receivable' | 'payable';
    ObtainTokenPayload: {
      /** Format: uuid */
      client_id: string;
      client_secret: string;
      /** Format: uuid */
      entity_user_id?: string;
      grant_type: components['schemas']['GrantType'];
    };
    /**
     * @description Contains information about all text blocks extracted from an uploaded invoice by OCR.
     * The text blocks are grouped into `line_items` (invoice line items) and `summary` (all other information).
     * Legacy schema used for AWS textract recognition.
     */
    OcrRecognitionResponse: {
      /** @description Invoice text content other than the line items. Such as the invoice issue and due dates, vendor name and address, and other general information. */
      summary?: components['schemas']['LabelNValue'][];
      /** @description Text content of the invoice line items as recognized by OCR. */
      line_items?: components['schemas']['LabelNValue'][];
    };
    /** @enum {string} */
    OcrStatusEnum: 'processing' | 'error' | 'success';
    OnboardingLinkPublicResponse: {
      /** Format: uri */
      refresh_url: string;
      /** Format: uri */
      return_url: string;
      /** Format: date-time */
      expires_at: string;
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      entity_id: string;
      /** Format: uri */
      url: string;
    };
    OnboardingLinkRequest: {
      /** Format: uri */
      refresh_url: string;
      /** Format: uri */
      return_url: string;
      /** Format: date-time */
      expires_at: string;
    };
    OnboardingLinkResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      expires_at: string;
      recipient: components['schemas']['Recipient'];
      /** Format: uri */
      refresh_url: string;
      /** Format: uri */
      return_url: string;
      /** Format: uri */
      url: string;
    };
    OnboardingPaymentMethodsResponse: {
      data: components['schemas']['PaymentMethod'][];
    };
    OnboardingRequirementsError: {
      code: string;
      reason: string;
      requirement: string;
    };
    OnboardingRequirementsResponse: {
      disabled_reason?: components['schemas']['AccountDisabledReason'];
      requirements: components['schemas']['PaymentRequirements'];
      requirements_errors: components['schemas']['RequirementsError'][];
      verification_errors: components['schemas']['VerificationError'][];
      verification_status: components['schemas']['VerificationStatusEnum'];
    };
    OnboardingVerificationError: {
      code: string;
      details: string;
    };
    /** @enum {string} */
    OnboardingVerificationStatusEnum: 'enabled' | 'disabled' | 'pending';
    /** @description A schema for metadata for updating an individual */
    OptionalIndividualSchema: {
      /** Format: date */
      date_of_birth?: string;
      /** @description A first name of an individual */
      first_name?: string;
      id_number?: string;
      /** @description A last name of an individual */
      last_name?: string;
      /** @description The last four digits of the individual's Social Security number */
      ssn_last_4?: string;
      /** @description A title of an individual */
      title?: string;
    };
    /** @description A schema contains metadata for updating an organization */
    OptionalOrganizationSchema: {
      /** @description Business structure of the company */
      business_structure?: components['schemas']['EntityBusinessStructure'];
      directors_provided?: boolean;
      executives_provided?: boolean;
      /** @description A code which identifies uniquely a party of a transaction worldwide */
      legal_entity_id?: string;
      /** @description A legal name of an organization */
      legal_name?: string;
      owners_provided?: boolean;
      representative_provided?: boolean;
    };
    OptionalPersonAddress: {
      /** @description City, district, suburb, town, or village */
      city?: string;
      /** @description Two-letter country code (ISO 3166-1 alpha-2) */
      country?: string;
      /** @description Address line 1 (e.g., street, PO Box, or company name) */
      line1?: string;
      /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
      line2?: string;
      /** @description ZIP or postal code */
      postal_code?: string;
      /** @description State, county, province, or region */
      state?: string;
    };
    OptionalPersonRelationship: {
      /** @description Whether the person is a director of the account's legal entity */
      director?: boolean;
      /** @description Whether the person has significant responsibility to control, manage, or direct the organization */
      executive?: boolean;
      /** @description Whether the person is an owner of the account's legal entity */
      owner?: boolean;
      /** @description The percent owned by the person of the account's legal entity */
      percent_ownership?: number;
      /** @description Whether the person is authorized as the primary representative of the account */
      representative?: boolean;
      /** @description The person's title (e.g., CEO, Support Engineer) */
      title?: string;
    };
    OptionalPersonRequest: {
      /** @description The person's address */
      address?: components['schemas']['OptionalPersonAddress'];
      /**
       * Format: date
       * @description The person's date of birth
       */
      date_of_birth?: string;
      /**
       * Format: email
       * @description The person's email address
       */
      email?: string;
      /** @description The person's first name */
      first_name?: string;
      /** @description The person's ID number, as appropriate for their country */
      id_number?: string;
      /** @description The person's last name */
      last_name?: string;
      /** @description The person's phone number */
      phone?: string;
      /** @description Describes the person's relationship to the entity */
      relationship?: components['schemas']['OptionalPersonRelationship'];
      /** @description The last four digits of the person's Social Security number */
      ssn_last_4?: string;
    };
    /** @enum {string} */
    OrderEnum: 'asc' | 'desc';
    /**
     * @description Less strict validator for response to do not break API. Validation rules are from version 2023-09-01 as the
     * stricter validation was introduced in 2024-01-31
     */
    OrganizationResponseSchema: {
      /** @description Business structure of the company */
      business_structure?: components['schemas']['EntityBusinessStructure'];
      directors_provided?: boolean;
      executives_provided?: boolean;
      /** @description A code which identifies uniquely a party of a transaction worldwide */
      legal_entity_id?: string;
      /** @description A legal name of an organization */
      legal_name: string;
      owners_provided?: boolean;
      representative_provided?: boolean;
    };
    /** @description A schema contains metadata for an organization */
    OrganizationSchema: {
      /** @description Business structure of the company */
      business_structure?: components['schemas']['EntityBusinessStructure'];
      directors_provided?: boolean;
      executives_provided?: boolean;
      /** @description A code which identifies uniquely a party of a transaction worldwide */
      legal_entity_id?: string;
      /** @description A legal name of an organization */
      legal_name: string;
      owners_provided?: boolean;
      representative_provided?: boolean;
    };
    OverdueReminderRequest: {
      name: string;
      /** @description Overdue reminder to send for payment term */
      term: components['schemas']['OverdueReminderTerm'];
    };
    OverdueReminderResponse: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the OverdueReminder was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the OverdueReminder was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      name: string;
      /** @description Overdue reminder to send for payment term */
      term: components['schemas']['OverdueReminderTerm'];
    };
    OverdueReminderTerm: {
      body: string;
      days_after: number;
      subject: string;
    };
    /**
     * @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
     * and saves them as PNG images. This object contains the image and metadata of a single page.
     */
    PageSchema: {
      /**
       * Format: uuid
       * @description A unique ID of the image.
       */
      id: string;
      /**
       * @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
       * @example image/png
       */
      mimetype: string;
      /**
       * @description The page number in the PDF document, from 0.
       * @example 0
       */
      number: number;
      /**
       * @description Image file size, in bytes.
       * @example 21972
       */
      size: number;
      /**
       * @description The URL to download the image.
       * @example https://bucket.s3.amazonaws.com/123/456.png
       */
      url: string;
    };
    PartiallyPaidPayload: {
      /** @description How much was paid on the invoice (in minor units). */
      amount_paid: number;
    };
    PartnerMetadata: {
      /** @description Metadata for partner needs */
      metadata: Record<string, never>;
    };
    PartnerMetadataResponse: {
      /** @description Metadata for partner needs */
      metadata?: Record<string, never>;
    };
    PartnerProjectSettingsPayload: {
      /** @description Settings for the accounting module. */
      accounting?: components['schemas']['AccountingSettingsPayload'];
      /** @description Default API version for partner. */
      api_version?: components['schemas']['APIVersion'];
      /** @description Commercial conditions for receivables. */
      commercial_conditions?: string[];
      /** @description Custom currency exchange rates. */
      currency?: components['schemas']['CurrencySettings'];
      /** @description A default role to provision upon new entity creation. */
      default_role?: Record<string, never>;
      /** @description Settings for the e-invoicing module. */
      einvoicing?: components['schemas']['EInvoicingSettingsPayload'];
      /** @description Settings for email and mailboxes. */
      mail?: components['schemas']['MailSettingsPayload'];
      /** @description Settings for the payables module. */
      payable?: components['schemas']['PayableSettingsPayload'];
      /** @description Settings for the payments module. */
      payments?: components['schemas']['PaymentsSettingsPayload'];
      /** @description Settings for the receivables module. */
      receivable?: components['schemas']['ReceivableSettingsPayload'];
      /** @description Measurement units. */
      units?: components['schemas']['Unit'][];
      website?: string;
    };
    PartnerProjectSettingsResponse: {
      /** @description Settings for the accounting module. */
      accounting?: components['schemas']['AccountingSettingsResponse'];
      /** @description Default API version for partner. */
      api_version?: components['schemas']['APIVersion'];
      /** @description Commercial conditions for receivables. */
      commercial_conditions?: string[];
      /** @description Custom currency exchange rates. */
      currency?: components['schemas']['CurrencySettings'];
      /** @description A default role to provision upon new entity creation. */
      default_role?: Record<string, never>;
      /** @description Settings for the e-invoicing module. */
      einvoicing?: components['schemas']['EInvoicingSettingsResponse'];
      /** @description Settings for email and mailboxes. */
      mail?: components['schemas']['MailSettingsResponse'];
      /** @description Settings for the payables module. */
      payable?: components['schemas']['PayableSettingsResponse'];
      /** @description Settings for the payments module. */
      payments?: components['schemas']['PaymentsSettingsResponse'];
      /** @description Settings for the receivables module. */
      receivable?: components['schemas']['ReceivableSettingsResponse'];
      /** @description Measurement units. */
      units?: components['schemas']['Unit'][];
      website?: string;
    };
    PatchSettingsPayload: {
      currency?: components['schemas']['CurrencySettings'];
      reminder?: components['schemas']['RemindersSettings'];
      /**
       * @description Payment preferences for entity to automate calculating suggested payment date basing on payment terms and entity preferences
       * @default working_capital
       */
      payment_priority?: components['schemas']['PaymentPriorityEnum'];
      /** @default compliant */
      receivable_edit_flow?: components['schemas']['ReceivableEditFlow'];
    };
    /** @enum {string} */
    PayableActionEnum:
      | 'create'
      | 'read'
      | 'update'
      | 'delete'
      | 'pay'
      | 'approve'
      | 'cancel'
      | 'submit'
      | 'create_from_mail'
      | 'reopen';
    PayableActionSchema: {
      /**
       * @description Action name
       * @default read
       */
      action_name?: components['schemas']['PayableActionEnum'];
      /**
       * @description Permission type
       * @default allowed
       */
      permission?: components['schemas']['PermissionEnum'];
    };
    /** @enum {string} */
    PayableCursorFields: 'id' | 'created_at';
    /** @description A schema represents address info of the entity */
    PayableEntityAddressSchema: {
      /** @description A city (a full name) where the entity is registered */
      city: string;
      /**
       * @description A country name (as ISO code) where the entity is registered
       * @default DE
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /** @description A street where the entity is registered */
      line1: string;
      /** @description An alternative street used by the entity */
      line2?: string;
      /** @description A postal code of the address where the entity is registered */
      postal_code: string;
      /** @description A state in a country where the entity is registered */
      state?: string;
    };
    /** @description A base for an entity response schema */
    PayableEntityIndividualResponse: {
      /**
       * Format: uuid
       * @description UUID entity ID
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      updated_at: string;
      address: components['schemas']['PayableEntityAddressSchema'];
      /** @description An official email address of the entity */
      email?: string;
      /** @description A set of metadata describing an individual */
      individual: components['schemas']['PayableIndividualSchema'];
      /** @description A logo image of the entity */
      logo?: components['schemas']['entities__unversioned__schemas__file_saver__FileSchema'];
      /** @description A phone number of the entity */
      phone?: string;
      /** @description record status, 'active' by default */
      status: components['schemas']['StatusEnum'];
      /** @description An identification number of the legal entity */
      tax_id?: string;
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A base for an entity response schema */
    PayableEntityOrganizationResponse: {
      /**
       * Format: uuid
       * @description UUID entity ID
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      updated_at: string;
      address: components['schemas']['PayableEntityAddressSchema'];
      /** @description An official email address of the entity */
      email?: string;
      /** @description A logo image of the entity */
      logo?: components['schemas']['entities__unversioned__schemas__file_saver__FileSchema'];
      /** @description A set of metadata describing an organization */
      organization: components['schemas']['PayableOrganizationSchema'];
      /** @description A phone number of the entity */
      phone?: string;
      /** @description record status, 'active' by default */
      status: components['schemas']['StatusEnum'];
      /** @description An identification number of the legal entity */
      tax_id?: string;
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A schema contains metadata for an individual */
    PayableIndividualSchema: {
      /** Format: date */
      date_of_birth?: string;
      /** @description A first name of an individual */
      first_name: string;
      id_number?: string;
      /** @description A last name of an individual */
      last_name: string;
      ssn_last_4?: string;
      /** @description A title of an individual */
      title?: string;
    };
    /** @description A schema contains metadata for an organization */
    PayableOrganizationSchema: {
      /** @description Business structure of the company */
      business_structure?: components['schemas']['EntityBusinessStructure'];
      directors_provided?: boolean;
      executives_provided?: boolean;
      /** @description A code which identifies uniquely a party of a transaction worldwide */
      legal_entity_id?: string;
      /** @description A legal name of an organization */
      legal_name: string;
      owners_provided?: boolean;
      representative_provided?: boolean;
    };
    /** @enum {string} */
    PayableOriginEnum: 'upload' | 'email';
    /** @description A paginated list of payables. */
    PayablePaginationResponse: {
      data: components['schemas']['PayableResponseSchema'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    /** @description Represents an Accounts Payable document received from a vendor or supplier. */
    PayableResponseSchema: {
      /**
       * Format: uuid
       * @description A unique ID assigned to this payable.
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC date and time when this payable was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC date and time when this payable was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
       */
      updated_at: string;
      /**
       * @description How much is left to be paid on the invoice (in minor units).
       * @example 1000
       */
      amount_due?: number;
      /**
       * @description How much was paid on the invoice (in minor units).
       * @example 1000
       */
      amount_paid?: number;
      /**
       * @description How much is left to be paid on the invoice (in minor units) with discounts from payment terms.
       * @example 1000
       */
      amount_to_pay?: number;
      /**
       * Format: uuid
       * @description Id of existing approval policy that applies to this payable, if any. A policy is applied if the payable matches the policy trigger conditions.
       */
      approval_policy_id?: string;
      /** @description Object representing de-normalized counterpart data. Filled at the moment of invoice submitting for approval or payment. */
      counterpart?: components['schemas']['CounterpartRawData'];
      /**
       * Format: uuid
       * @description The ID of counterpart address object stored in counterparts service
       */
      counterpart_address_id?: string;
      /**
       * Format: uuid
       * @description The ID of counterpart bank account object stored in counterparts service
       */
      counterpart_bank_account_id?: string;
      /**
       * Format: uuid
       * @description The ID of the counterpart object that represents the vendor or supplier.
       */
      counterpart_id?: string;
      /** @description Object representing counterpart data which was extracted by OCR. Used for informational purposes. */
      counterpart_raw_data?: components['schemas']['CounterpartRawData'];
      /**
       * Format: uuid
       * @description The ID of counterpart VAT ID object stored in counterparts service
       */
      counterpart_vat_id_id?: string;
      /**
       * @description The [currency code](https://docs.monite.com/docs/currencies) of the currency used in the payable.
       * @example EUR
       */
      currency?: components['schemas']['CurrencyEnum'];
      currency_exchange?: components['schemas']['CurrencyExchangeSchema'];
      /** @description An arbitrary description of this payable. */
      description?: string;
      /**
       * @description A unique invoice number assigned by the invoice issuer for payment tracking purposes. This is different from `id` which is an internal ID created automatically by Monite.
       * @example DE2287
       */
      document_id?: string;
      /**
       * Format: date
       * @description The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date.
       */
      due_date?: string;
      /**
       * Format: uuid
       * @description The ID of the entity to which the payable was issued.
       */
      entity_id: string;
      /** @description The original file from which this payable was created. */
      file?: components['schemas']['monite__schemas__file_saver__FileSchema'];
      /**
       * Format: date
       * @description The date when the payable was issued, in the YYYY-MM-DD format.
       */
      issued_at?: string;
      /**
       * Format: uuid
       * @description The ID of the entity user who marked this document as paid.
       * @example 71e8875a-43b3-434f-b12a-54c84c176ef3
       */
      marked_as_paid_by_entity_user_id?: string;
      /**
       * @description An arbitrary comment that describes how and when this payable was paid.
       * @example Was paid partly in the end of the month.
       */
      marked_as_paid_with_comment?: string;
      /**
       * Format: uuid
       * @description Id of OCR request to match asynchronous result of processing payable.
       */
      ocr_request_id?: string;
      /** @description The status of the data recognition process using OCR. The 'processing' status means that the data recognition is in progress and the user needs to wait for the data enrichment. The 'error' status indicates that some error occurred on the OCR side and the user can fill in the data manually. The 'success' status means the data recognition has been successfully completed, after which the user can check the data if desired and enrich or correct it. */
      ocr_status?: components['schemas']['OcrStatusEnum'];
      /** @description Data extracted from the uploaded payable by OCR. */
      other_extracted_data?:
        | components['schemas']['OCRResponseInvoiceReceiptData']
        | components['schemas']['OcrRecognitionResponse'];
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /** @description Specifies how this payable was created in Monite: `upload` - created via an API call, `email` - sent via email to the entity's mailbox. */
      payable_origin: components['schemas']['PayableOriginEnum'];
      /** @description The number of days to pay with potential discount for options shorter than due_date */
      payment_terms?: components['schemas']['PaymentTermsCreatePayload'];
      /**
       * Format: email
       * @description The email address from which the invoice was sent to the entity.
       * @example hello@example.com
       */
      sender?: string;
      /** @description Specifies how the property values of this payable were provided: `ocr` - Monite OCR service extracted the values from the provided PDF or image file, `user_specified` - values were added or updated via an API call. */
      source_of_payable_data: components['schemas']['SourceOfPayableDataEnum'];
      /** @description The [status](https://docs.monite.com/docs/payables-lifecycle) of the payable. */
      status: components['schemas']['PayableStateEnum'];
      /**
       * @description The subtotal amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 1250
       */
      subtotal?: number;
      /** @description The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0. */
      suggested_payment_term?: components['schemas']['SuggestedPaymentTerm'];
      /** @description A list of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable. */
      tags?: components['schemas']['TagReadSchema'][];
      /**
       * @description Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.
       * @example 2000
       */
      tax?: number;
      /**
       * @description Tax amount in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 250
       */
      tax_amount?: number;
      /**
       * @description The total amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 1500
       */
      total_amount?: number;
      /** Format: uuid */
      was_created_by_user_id?: string;
    };
    PayableSchema: {
      /** @description List of actions */
      actions?: components['schemas']['PayableActionSchema'][];
      /**
       * @description Object type
       * @default payable
       * @enum {string}
       */
      object_type?: 'payable';
    };
    PayableSettingsPayload: {
      /** @default false */
      allow_cancel_duplicates_automatically?: boolean;
      /** @default false */
      allow_counterpart_autocreation?: boolean;
      /** @default false */
      allow_counterpart_autolinking?: boolean;
      /**
       * Format: uri
       * @example https://monite.com
       */
      approve_page_url: string;
      /**
       * @description A state each new payable will have upon creation
       * @example new
       */
      default_state?: string;
      /** @default true */
      enable_line_items?: boolean;
    };
    PayableSettingsResponse: {
      /** @default false */
      allow_cancel_duplicates_automatically?: boolean;
      /** @default false */
      allow_counterpart_autocreation?: boolean;
      /** @default false */
      allow_counterpart_autolinking?: boolean;
      /**
       * Format: uri
       * @example https://monite.com
       */
      approve_page_url: string;
      /**
       * @description A state each new payable will have upon creation
       * @example new
       */
      default_state?: string;
      /** @default true */
      enable_line_items?: boolean;
    };
    /** @enum {string} */
    PayableStateEnum:
      | 'draft'
      | 'new'
      | 'approve_in_progress'
      | 'waiting_to_be_paid'
      | 'partially_paid'
      | 'paid'
      | 'canceled'
      | 'rejected';
    PayableTemplatesVariable: {
      description: string;
      name: string;
    };
    PayableTemplatesVariablesObject: {
      object_subtype: components['schemas']['VariablesType'];
      object_type: components['schemas']['ObjectType'];
      variables: components['schemas']['PayableTemplatesVariable'][];
    };
    PayableTemplatesVariablesObjectList: {
      data: components['schemas']['PayableTemplatesVariablesObject'][];
    };
    /** @description This schema is used to update the data of an existing payable. */
    PayableUpdateSchema: {
      /**
       * Format: uuid
       * @description The ID of counterpart address object stored in counterparts service
       */
      counterpart_address_id?: string;
      /**
       * Format: uuid
       * @description The ID of counterpart bank account object stored in counterparts service
       */
      counterpart_bank_account_id?: string;
      /**
       * Format: uuid
       * @description The ID of the counterpart object that represents the vendor or supplier.
       */
      counterpart_id?: string;
      /** @description Allows to fix some data in counterpart recognised fields to correct them in order to make autolinking happen. */
      counterpart_raw_data?: components['schemas']['CounterpartRawDataUpdateRequest'];
      /**
       * Format: uuid
       * @description The ID of counterpart VAT ID object stored in counterparts service
       */
      counterpart_vat_id_id?: string;
      /**
       * @description The [currency code](https://docs.monite.com/docs/currencies) of the currency used in the payable.
       * @example EUR
       */
      currency?: components['schemas']['CurrencyEnum'];
      /** @description An arbitrary description of this payable. */
      description?: string;
      /**
       * @description A unique invoice number assigned by the invoice issuer for payment tracking purposes.
       * @example DE2287
       */
      document_id?: string;
      /**
       * Format: date
       * @description The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date.
       */
      due_date?: string;
      /**
       * Format: date
       * @description The date when the payable was issued, in the YYYY-MM-DD format.
       */
      issued_at?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /** @description The number of days to pay with potential discount for options shorter than due_date */
      payment_terms?: components['schemas']['PaymentTermsCreatePayload'];
      /**
       * Format: email
       * @description The email address from which the invoice was sent to the entity.
       * @example hello@example.com
       */
      sender?: string;
      /**
       * @description The subtotal amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 1250
       */
      subtotal?: number;
      /** @description The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0. */
      suggested_payment_term?: components['schemas']['SuggestedPaymentTerm'];
      /** @description A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable. */
      tag_ids?: string[];
      /**
       * @description Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%, 1050 means 10.5%.
       * @example 2000
       */
      tax?: number;
      /**
       * @description Tax amount in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 250
       */
      tax_amount?: number;
      /**
       * @description The total amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 15000
       */
      total_amount?: number;
    };
    /** @description This schema is used to create a new payable by providing its data along with the original file. */
    PayableUploadWithDataSchema: {
      /**
       * @description Base64-encoded contents of the original issued payable. The file is provided for reference purposes as the original source of the data.
       *
       *  Any file formats are allowed. The most common formats are PDF, PNG, JPEG, TIFF.
       */
      base64_encoded_file?: string;
      /**
       * Format: uuid
       * @description The ID of counterpart address object stored in counterparts service
       */
      counterpart_address_id?: string;
      /**
       * Format: uuid
       * @description The ID of counterpart bank account object stored in counterparts service
       */
      counterpart_bank_account_id?: string;
      /**
       * Format: uuid
       * @description The ID of the counterpart object that represents the vendor or supplier.
       */
      counterpart_id?: string;
      /**
       * Format: uuid
       * @description The ID of counterpart VAT ID object stored in counterparts service
       */
      counterpart_vat_id_id?: string;
      /**
       * @description The [currency code](https://docs.monite.com/docs/currencies) of the currency used in the payable.
       * @example EUR
       */
      currency?: components['schemas']['CurrencyEnum'];
      /** @description An arbitrary description of this payable. */
      description?: string;
      /**
       * @description A unique invoice number assigned by the invoice issuer for payment tracking purposes.
       * @example DE2287
       */
      document_id?: string;
      /**
       * Format: date
       * @description The date by which the payable must be paid, in the YYYY-MM-DD format. If the payable specifies payment terms with early payment discounts, this is the final payment date.
       */
      due_date?: string;
      /**
       * @description The original file name.
       * @example invoice.pdf
       */
      file_name?: string;
      /**
       * Format: date
       * @description The date when the payable was issued, in the YYYY-MM-DD format.
       */
      issued_at?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /** @description The number of days to pay with potential discount for options shorter than due_date */
      payment_terms?: components['schemas']['PaymentTermsCreatePayload'];
      /**
       * Format: email
       * @description The email address from which the invoice was sent to the entity.
       * @example hello@example.com
       */
      sender?: string;
      /**
       * @description The subtotal amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 1250
       */
      subtotal?: number;
      /** @description The suggested date and corresponding discount in which payable could be paid. The date is in the YYYY-MM-DD format. The discount is calculated as X * (10^-4) - for example, 100 is 1%, 25 is 0,25%, 10000 is 100 %. Date varies depending on the payment terms and may even be equal to the due date with discount 0. */
      suggested_payment_term?: components['schemas']['SuggestedPaymentTerm'];
      /** @description A list of IDs of user-defined tags (labels) assigned to this payable. Tags can be used to trigger a specific approval policy for this payable. */
      tag_ids?: string[];
      /**
       * @description Registered tax percentage applied for a service price in minor units, e.g. 200 means 2%. 1050 means 10.5%.
       * @example 2000
       */
      tax?: number;
      /**
       * @description Tax amount in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 250
       */
      tax_amount?: number;
      /**
       * @description The total amount to be paid, in [minor units](https://docs.monite.com/docs/currencies#minor-units). For example, $12.50 is represented as 1250.
       * @example 15000
       */
      total_amount?: number;
    };
    PayableValidationResponse: {
      /**
       * Format: uuid
       * @description A unique ID assigned to this payable.
       */
      id: string;
      validation_errors?: Record<string, never>[];
    };
    PayableValidationsResource: {
      required_fields: components['schemas']['PayablesFieldsAllowedForValidate'][];
    };
    PayableValidationsUpdateRequest: {
      required_fields: components['schemas']['PayablesFieldsAllowedForValidate'][];
    };
    /** @enum {string} */
    PayablesFieldsAllowedForValidate:
      | 'currency'
      | 'document_id'
      | 'due_date'
      | 'issued_at'
      | 'tax_amount'
      | 'total_amount'
      | 'subtotal'
      | 'description'
      | 'suggested_payment_term'
      | 'payment_terms'
      | 'currency_exchange'
      | 'file'
      | 'tax'
      | 'sender'
      | 'partner_metadata'
      | 'counterpart_id'
      | 'counterpart_bank_account_id'
      | 'counterpart_address_id'
      | 'counterpart_vat_id_id'
      | 'line_items'
      | 'line_items.quantity'
      | 'line_items.unit_price'
      | 'line_items.tax'
      | 'line_items.ledger_account_id'
      | 'line_items.accounting_tax_rate_id'
      | 'line_items.unit'
      | 'line_items.name'
      | 'line_items.description'
      | 'line_items.subtotal'
      | 'line_items.total'
      | 'line_items.tax_amount';
    PaymentAccountObject: {
      /** Format: uuid */
      id: string;
      type: components['schemas']['PaymentAccountType'];
    };
    /** @enum {string} */
    PaymentAccountType: 'entity' | 'counterpart';
    PaymentIntent: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      updated_at: string;
      application_fee_amount?: number;
      object?: components['schemas']['PaymentObject'];
      provider?: string;
      selected_payment_method?: string;
      status: string;
    };
    PaymentIntentHistory: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      payment_intent_id: string;
      status: string;
    };
    PaymentIntentHistoryResponse: {
      /** @description Payment intent history */
      data: components['schemas']['PaymentIntentHistory'][];
    };
    /** @enum {string} */
    PaymentIntentPayoutMethod: 'bank_account' | 'paper_check';
    PaymentIntentResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      updated_at: string;
      amount: number;
      application_fee_amount?: number;
      /** Format: uuid */
      batch_payment_id?: string;
      currency: string;
      invoice?: components['schemas']['Invoice'];
      object?: components['schemas']['PaymentObject'];
      payer?: components['schemas']['AccountResponse'];
      /** Format: uuid */
      payment_link_id?: string;
      payment_methods: components['schemas']['MoniteAllPaymentMethodsTypes'][];
      payment_reference?: string;
      provider?: string;
      recipient: components['schemas']['RecipientAccountResponse'];
      selected_payment_method?: components['schemas']['MoniteAllPaymentMethodsTypes'];
      status: string;
    };
    PaymentIntentsRecipient: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      bank_account_id?: string;
      /** @default bank_account */
      payout_method?: components['schemas']['PaymentIntentPayoutMethod'];
      /** @enum {string} */
      type: 'counterpart';
    };
    PaymentMethod: {
      direction: components['schemas']['PaymentMethodDirection'];
      name: components['schemas']['MoniteAllPaymentMethods'];
      status: components['schemas']['PaymentMethodStatus'];
      type: components['schemas']['MoniteAllPaymentMethodsTypes'];
    };
    /** @enum {string} */
    PaymentMethodDirection: 'receive' | 'send';
    PaymentMethodRequirements: {
      /** Format: date-time */
      current_deadline?: string;
      currently_due: string[];
      eventually_due: string[];
      past_due: string[];
      pending_verification: string[];
    };
    /** @enum {string} */
    PaymentMethodStatus: 'active' | 'inactive';
    PaymentObject: {
      /** Format: uuid */
      id: string;
      type: components['schemas']['PaymentObjectType'];
    };
    PaymentObjectPayable: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      type: 'payable';
    };
    /** @enum {string} */
    PaymentObjectType: 'payable' | 'receivable';
    PaymentPageThemePayload: {
      /** Format: color */
      background_color?: string;
      border_radius?: string;
      button?: components['schemas']['ButtonThemePayload'];
      card?: components['schemas']['CardThemePayload'];
      /** Format: color */
      font_color?: string;
      font_family?: string;
      /** Format: uri */
      font_link_href?: string;
      /** Format: uri */
      logo_src?: string;
    };
    PaymentPageThemeResponse: {
      /** Format: color */
      background_color?: string;
      border_radius?: string;
      button?: components['schemas']['ButtonThemeResponse'];
      card?: components['schemas']['CardThemeResponse'];
      /** Format: color */
      font_color?: string;
      font_family?: string;
      /** Format: uri */
      font_link_href?: string;
      /** Format: uri */
      logo_src?: string;
    };
    /** @enum {string} */
    PaymentPriorityEnum: 'working_capital' | 'balanced' | 'bottom_line';
    /** @enum {string} */
    PaymentRecordCursorFields: 'paid_at' | 'amount' | 'overpaid_amount';
    PaymentRecordObjectRequest: {
      /**
       * Format: uuid
       * @description ID of the invoice
       */
      id: string;
      type: components['schemas']['ObjectTypeEnum'];
    };
    PaymentRecordObjectResponse: {
      /**
       * Format: uuid
       * @description ID of the invoice
       */
      id: string;
      /** @description Status, in which object has been moved */
      new_status: string;
      /** @description Status, in which object was before payment */
      old_status: string;
      type: components['schemas']['ObjectTypeEnum'];
    };
    PaymentRecordRequest: {
      amount: number;
      currency: components['schemas']['CurrencyEnum'];
      /** Format: uuid */
      entity_user_id?: string;
      object: components['schemas']['PaymentRecordObjectRequest'];
      /** Format: date-time */
      paid_at: string;
      /** Format: uuid */
      payment_intent_id: string;
    };
    PaymentRecordResponse: {
      /** Format: uuid */
      id: string;
      amount: number;
      currency: components['schemas']['CurrencyEnum'];
      /** Format: uuid */
      entity_user_id?: string;
      is_external: boolean;
      object: components['schemas']['PaymentRecordObjectResponse'];
      /**
       * @description Filled in a case, if payment amount is more, than total_amount
       * @default 0
       */
      overpaid_amount?: number;
      /** Format: date-time */
      paid_at: string;
      /** Format: uuid */
      payment_intent_id: string;
    };
    PaymentRecordResponseList: {
      data: components['schemas']['PaymentRecordResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    PaymentReminder: {
      name: string;
      /** @description Reminder to send for first payment term */
      term_1_reminder?: components['schemas']['Reminder'];
      /** @description Reminder to send for second payment term */
      term_2_reminder?: components['schemas']['Reminder'];
      /** @description Reminder to send for final payment term */
      term_final_reminder?: components['schemas']['Reminder'];
    };
    PaymentReminderResponse: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the PaymentReminder was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the PaymentReminder was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /** Format: uuid */
      entity_id: string;
      name: string;
      status: components['schemas']['StatusEnum'];
      /** @description Reminder to send for first payment term */
      term_1_reminder?: components['schemas']['Reminder'];
      /** @description Reminder to send for second payment term */
      term_2_reminder?: components['schemas']['Reminder'];
      /** @description Reminder to send for final payment term */
      term_final_reminder?: components['schemas']['Reminder'];
    };
    PaymentRequirements: {
      /** Format: date-time */
      current_deadline?: string;
      currently_due: string[];
      eventually_due: string[];
      pending_verification: string[];
    };
    PaymentTerm: {
      /** @description The amount of days after the invoice issue date. */
      number_of_days: number;
    };
    PaymentTermDiscount: {
      /** @description The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%. */
      discount: number;
      /** @description The amount of days after the invoice issue date. */
      number_of_days: number;
    };
    PaymentTermDiscountWithDate: {
      /** @description The discount percentage in minor units. E.g., 200 means 2%. 1050 means 10.5%. */
      discount: number;
      /** Format: date */
      end_date?: string;
      /** @description The amount of days after the invoice issue date. */
      number_of_days: number;
    };
    PaymentTerms: {
      /** Format: uuid */
      id: string;
      name?: string;
      /** @description The first tier of the payment term. Represents the terms of the first early discount. */
      term_1?: components['schemas']['PaymentTermDiscountWithDate'];
      /** @description The second tier of the payment term. Defines the terms of the second early discount. */
      term_2?: components['schemas']['PaymentTermDiscountWithDate'];
      /** @description The final tier of the payment term. Defines the invoice due date. */
      term_final: components['schemas']['TermFinalWithDate'];
    };
    PaymentTermsCreatePayload: {
      description?: string;
      name: string;
      /** @description The first tier of the payment term. Represents the terms of the first early discount. */
      term_1?: components['schemas']['PaymentTermDiscount'];
      /** @description The second tier of the payment term. Defines the terms of the second early discount. */
      term_2?: components['schemas']['PaymentTermDiscount'];
      /** @description The final tier of the payment term. Defines the invoice due date. */
      term_final: components['schemas']['PaymentTerm'];
    };
    PaymentTermsListResponse: {
      data?: components['schemas']['PaymentTermsResponse'][];
    };
    PaymentTermsResponse: {
      /** Format: uuid */
      id: string;
      description?: string;
      name: string;
      /** @description The first tier of the payment term. Represents the terms of the first early discount. */
      term_1?: components['schemas']['PaymentTermDiscount'];
      /** @description The second tier of the payment term. Defines the terms of the second early discount. */
      term_2?: components['schemas']['PaymentTermDiscount'];
      /** @description The final tier of the payment term. Defines the invoice due date. */
      term_final: components['schemas']['PaymentTerm'];
    };
    PaymentTermsUpdatePayload: {
      description?: string;
      name?: string;
      /** @description The first tier of the payment term. Represents the terms of the first early discount. */
      term_1?: components['schemas']['PaymentTermDiscount'];
      /** @description The second tier of the payment term. Defines the terms of the second early discount. */
      term_2?: components['schemas']['PaymentTermDiscount'];
      /** @description The final tier of the payment term. Defines the invoice due date. */
      term_final?: components['schemas']['PaymentTerm'];
    };
    PaymentsBatchPaymentRequest: {
      /** Format: uuid */
      payer_bank_account_id: string;
      payment_intents: components['schemas']['SinglePaymentIntent'][];
      /** @enum {string} */
      payment_method: 'us_ach';
    };
    PaymentsBatchPaymentResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      error?: Record<string, never>;
      /** Format: uuid */
      payer_bank_account_id: string;
      payment_intents: components['schemas']['SinglePaymentIntentResponse'][];
      /** @enum {string} */
      payment_method: 'us_ach';
      status: components['schemas']['PaymentsBatchPaymentStatus'];
      total_amount?: number;
    };
    /** @enum {string} */
    PaymentsBatchPaymentStatus:
      | 'created'
      | 'processing'
      | 'partially_successful'
      | 'succeeded'
      | 'failed';
    PaymentsSettingsPayload: {
      payment_page_domain?: string;
      payment_page_theme?: components['schemas']['PaymentPageThemePayload'];
    };
    PaymentsSettingsResponse: {
      payment_page_domain?: string;
      payment_page_theme?: components['schemas']['PaymentPageThemeResponse'];
    };
    /** @enum {string} */
    PermissionEnum: 'allowed' | 'allowed_for_own' | 'not_allowed';
    PersonAddress: {
      /** @description City, district, suburb, town, or village */
      city: string;
      /** @description Two-letter country code (ISO 3166-1 alpha-2) */
      country: string;
      /** @description Address line 1 (e.g., street, PO Box, or company name) */
      line1: string;
      /** @description Address line 2 (e.g., apartment, suite, unit, or building) */
      line2?: string;
      /** @description ZIP or postal code */
      postal_code: string;
      /** @description State, county, province, or region */
      state?: string;
    };
    PersonOnboardingDocuments: {
      /** Format: binary */
      verification_document_front?: string;
      /** Format: binary */
      verification_document_back?: string;
      /** Format: binary */
      additional_verification_document_front?: string;
      /** Format: binary */
      additional_verification_document_back?: string;
    };
    PersonOnboardingDocumentsPayload: {
      /** Format: uuid */
      additional_verification_document_back?: string;
      /** Format: uuid */
      additional_verification_document_front?: string;
      /** Format: uuid */
      verification_document_back?: string;
      /** Format: uuid */
      verification_document_front?: string;
    };
    PersonRelationship: {
      /**
       * @description Whether the person is a director of the account's legal entity
       * @default false
       */
      director?: boolean;
      /**
       * @description Whether the person has significant responsibility to control, manage, or direct the organization
       * @default false
       */
      executive?: boolean;
      /**
       * @description Whether the person is an owner of the account's legal entity
       * @default false
       */
      owner?: boolean;
      /** @description The percent owned by the person of the account's legal entity */
      percent_ownership?: number;
      /**
       * @description Whether the person is authorized as the primary representative of the account
       * @default false
       */
      representative?: boolean;
      /** @description The person's title (e.g., CEO, Support Engineer) */
      title?: string;
    };
    PersonRequest: {
      /** @description The person's address */
      address?: components['schemas']['PersonAddress'];
      /**
       * Format: date
       * @description The person's date of birth
       */
      date_of_birth?: string;
      /**
       * Format: email
       * @description The person's email address
       */
      email: string;
      /** @description The person's first name */
      first_name: string;
      /** @description The person's ID number, as appropriate for their country */
      id_number?: string;
      /** @description The person's last name */
      last_name: string;
      /** @description The person's phone number */
      phone?: string;
      /** @description Describes the person's relationship to the entity */
      relationship: components['schemas']['PersonRelationship'];
      /** @description The last four digits of the person's Social Security number */
      ssn_last_4?: string;
    };
    PersonResponse: {
      /**
       * Format: uuid
       * @description The person's unique identifier
       */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the person was created
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the person was updated
       */
      updated_at: string;
      /** @description The person's address */
      address?: components['schemas']['PersonAddress'];
      /**
       * Format: date
       * @description The person's date of birth
       */
      date_of_birth?: string;
      /**
       * Format: email
       * @description The person's email address
       */
      email: string;
      /**
       * Format: uuid
       * @description Entity ID
       */
      entity_id: string;
      /** @description The person's first name */
      first_name: string;
      /** @description The person's ID number, as appropriate for their country */
      id_number?: string;
      /** @description The person's last name */
      last_name: string;
      /** @description The person's phone number */
      phone?: string;
      /** @description Describes the person's relationship to the entity */
      relationship: components['schemas']['PersonRelationship'];
      /** @description The last four digits of the person's Social Security number */
      ssn_last_4?: string;
    };
    PersonsResponse: {
      /** @description array of objects of type person */
      data: components['schemas']['PersonResponse'][];
    };
    /** @enum {string} */
    Platform: 'xero' | 'quickbooks_online' | 'quickbooks_online_sandbox';
    /** @description A preview image generated for a file. */
    PreviewSchema: {
      /**
       * @description The image height in pixels.
       * @example 400
       */
      height: number;
      /**
       * @description The image URL.
       * @example https://bucketname.s3.amazonaws.com/1/2/3.png
       */
      url: string;
      /**
       * @description The image width in pixels.
       * @example 200
       */
      width: number;
    };
    PreviewTemplateRequest: {
      /** @description Body text of the template */
      body: string;
      /** @description Document type of content */
      document_type: components['schemas']['DocumentObjectTypeRequestEnum'];
      /** @description Lowercase ISO code of language */
      language_code: components['schemas']['LanguageCodeEnum'];
      /** @description Subject text of the template */
      subject: string;
    };
    PreviewTemplateResponse: {
      body_preview: string;
      subject_preview: string;
    };
    Price: {
      /** @description The currency in which the price of the product is set. */
      currency: components['schemas']['CurrencyEnum'];
      /** @description The actual price of the product. */
      value: number;
    };
    ProcessResource: {
      /** Format: uuid */
      id: string;
      /** @description Tthe current status of the approval policy process. */
      status: components['schemas']['ProcessStatusEnum'];
      /** @description The input for the script. */
      input: Record<string, never>;
      /** @description The error for the process. */
      error?: Record<string, never>;
      /** @description The script snapshot taken when script started. */
      script_snapshot?:
        | boolean
        | number
        | string
        | unknown[]
        | Record<string, never>;
      /** @description The metadata for the process. */
      metadata: Record<string, never>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: uuid */
      created_by?: string;
      /** Format: uuid */
      updated_by?: string;
    };
    /** @enum {string} */
    ProcessStatusEnum:
      | 'succeeded'
      | 'waiting'
      | 'failed'
      | 'running'
      | 'canceled'
      | 'timed_out';
    /** @enum {string} */
    ProductCursorFields: 'name';
    /** @description A paginated list of products and services */
    ProductServicePaginationResponse: {
      data: components['schemas']['ProductServiceResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    ProductServiceRequest: {
      /** @description Description of the product. */
      description?: string;
      /** Format: uuid */
      ledger_account_id?: string;
      /**
       * Format: uuid
       * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
       */
      measure_unit_id: string;
      /** @description Name of the product. */
      name: string;
      price?: components['schemas']['Price'];
      /** @description The smallest amount allowed for this product. */
      smallest_amount?: number;
      /**
       * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
       * @default product
       */
      type?: components['schemas']['ProductServiceTypeEnum'];
    };
    ProductServiceResponse: {
      /**
       * Format: uuid
       * @description Unique ID of the product.
       */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the product was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the product was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /** @description Description of the product. */
      description?: string;
      /** Format: uuid */
      entity_id: string;
      /** Format: uuid */
      entity_user_id?: string;
      /** Format: uuid */
      ledger_account_id?: string;
      /**
       * Format: uuid
       * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
       */
      measure_unit_id: string;
      /** @description Name of the product. */
      name: string;
      price?: components['schemas']['Price'];
      /** @description The smallest amount allowed for this product. */
      smallest_amount?: number;
      /**
       * @description Specifies whether this offering is a product or service. This may affect the applicable tax rates.
       * @default product
       */
      type?: components['schemas']['ProductServiceTypeEnum'];
    };
    /** @enum {string} */
    ProductServiceTypeEnum: 'product' | 'service';
    ProductServiceUpdate: {
      /** @description Description of the product. */
      description?: string;
      /** Format: uuid */
      ledger_account_id?: string;
      /**
       * Format: uuid
       * @description The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
       */
      measure_unit_id?: string;
      /** @description Name of the product. */
      name?: string;
      price?: components['schemas']['Price'];
      /** @description The smallest amount allowed for this product. */
      smallest_amount?: number;
      /** @description Specifies whether this offering is a product or service. This may affect the applicable tax rates. */
      type?: components['schemas']['ProductServiceTypeEnum'];
    };
    PublicPaymentLinkResponse: {
      /** Format: uuid */
      id: string;
      amount: number;
      currency: components['schemas']['CurrencyEnum'];
      /** Format: date-time */
      expires_at: string;
      invoice?: components['schemas']['Invoice'];
      payer?: components['schemas']['AccountResponse'];
      payment_intent?: components['schemas']['PaymentIntent'];
      /** Format: uuid */
      payment_intent_id: string;
      payment_methods: string[];
      /** Format: uri */
      payment_page_url: string;
      payment_reference?: string;
      recipient: components['schemas']['RecipientAccountResponse'];
      return_url?: string;
      status: string;
    };
    /** @description Represents counterparts that are individuals (natural persons). */
    PurchaseOrderCounterpartIndividualResponse: {
      /**
       * Format: email
       * @description The person's email address.
       * @example asingh@example.net
       */
      email?: string;
      /**
       * @description The person's first name.
       * @example Adnan
       */
      first_name: string;
      /** @description Indicates if the counterpart is a customer. */
      is_customer: boolean;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor: boolean;
      /**
       * @description The person's last name.
       * @example Singh
       */
      last_name: string;
      /**
       * @description The person's phone number.
       * @example 5553211234
       */
      phone?: string;
      /**
       * @description The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
       * @example Mr.
       */
      title?: string;
    };
    /** @description Represents counterparts that are individuals (natural persons). */
    PurchaseOrderCounterpartIndividualRootResponse: {
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      updated_at: string;
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
      /**
       * Format: uuid
       * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
       */
      default_billing_address_id?: string;
      /**
       * Format: uuid
       * @description ID of the shipping address.
       */
      default_shipping_address_id?: string;
      /**
       * Format: uuid
       * @description Entity user ID of counterpart creator.
       */
      created_by_entity_user_id?: string;
      individual: components['schemas']['PurchaseOrderCounterpartIndividualResponse'];
      reminders_enabled?: boolean;
      /** @description An identification number of the counterpart */
      tax_id?: string;
      /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
      type: components['schemas']['CounterpartType'];
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    PurchaseOrderCounterpartOrganizationResponse: {
      /**
       * Format: email
       * @description The email address of the organization
       * @example acme@example.com
       */
      email?: string;
      /** @description Indicates if the counterpart is a customer. */
      is_customer: boolean;
      /** @description Indicates if the counterpart is a vendor. */
      is_vendor: boolean;
      /**
       * @description The legal name of the organization.
       * @example Acme Inc.
       */
      legal_name: string;
      /**
       * @description The phone number of the organization
       * @example 5551231234
       */
      phone?: string;
    };
    /** @description Represents counterparts that are organizations (juridical persons). */
    PurchaseOrderCounterpartOrganizationRootResponse: {
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Date and time when the counterpart was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       */
      updated_at: string;
      /**
       * @description `true` if the counterpart was created automatically by Monite when processing incoming invoices with OCR. `false` if the counterpart was created by the API client.
       * @default false
       */
      created_automatically?: boolean;
      /**
       * Format: uuid
       * @description ID of the counterpart's billing address. If the counterpart is US-based and needs to accept ACH payments, this address must have all fields filled in. If `default_billing_address_id` is not defined, the default address is instead used as the billing address for ACH payments.
       */
      default_billing_address_id?: string;
      /**
       * Format: uuid
       * @description ID of the shipping address.
       */
      default_shipping_address_id?: string;
      /**
       * Format: uuid
       * @description Entity user ID of counterpart creator.
       */
      created_by_entity_user_id?: string;
      organization: components['schemas']['PurchaseOrderCounterpartOrganizationResponse'];
      reminders_enabled?: boolean;
      /** @description An identification number of the counterpart */
      tax_id?: string;
      /** @description The counterpart type: `organization` (juridical person) or `individual` (natural person). */
      type: components['schemas']['CounterpartType'];
    };
    /**
     * @description A Counterpart object contains information about an organization (juridical person) or
     * individual (natural person) that provides goods and services to or buys them from an
     * [SME](https://docs.monite.com/docs/glossary#sme).
     */
    PurchaseOrderCounterpartSchema:
      | components['schemas']['PurchaseOrderCounterpartIndividualRootResponse']
      | components['schemas']['PurchaseOrderCounterpartOrganizationRootResponse'];
    /** @enum {string} */
    PurchaseOrderCursorFields: 'created_at' | 'updated_at';
    /** @description A schema for request for preview of purchase order email */
    PurchaseOrderEmailPreviewRequest: {
      body_text: string;
      subject_text: string;
    };
    /** @description A schema for returning a response for email preview */
    PurchaseOrderEmailPreviewResponse: {
      body_preview: string;
      subject_preview: string;
    };
    /** @description A schema for returning a response an email with a link to purchase order document has been sent */
    PurchaseOrderEmailSentResponse: {
      /** Format: uuid */
      mail_id: string;
    };
    PurchaseOrderItem: {
      /** @description The currency in which the price of the product is set. */
      currency: components['schemas']['CurrencyEnum'];
      /** @description The name of the product to purchase */
      name: string;
      /** @description The subtotal cost (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      price: number;
      /** @description Number (quantity) of products */
      quantity: number;
      /** @description Units (hours, meters, unit) */
      unit: string;
      /** @description Percent minor units. Example: 12.5% is 1250 */
      vat_rate: number;
    };
    /** @description A paginated list of purchase orders. */
    PurchaseOrderPaginationResponse: {
      data: components['schemas']['PurchaseOrderResponseSchema'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    /** @description Represents an Accounts Purchase Order document created by entity. */
    PurchaseOrderPayloadSchema: {
      /**
       * Format: uuid
       * @description Counterpart unique ID.
       */
      counterpart_id: string;
      /** @description The currency in which the price of the product is set. (all items need to have the same currency) */
      currency: components['schemas']['CurrencyEnum'];
      /**
       * Format: uuid
       * @description Entity VAT ID identifier that applied to purchase order
       */
      entity_vat_id_id: string;
      /** @description List of item to purchase */
      items: components['schemas']['PurchaseOrderItem'][];
      /** @description Msg which will be send to counterpart for who the purchase order is issued. */
      message: string;
      /** @description Number of days for which purchase order is valid */
      valid_for_days: number;
    };
    /** @description Represents response for an Accounts Purchase Order document created by entity. */
    PurchaseOrderResponseSchema: {
      /**
       * Format: uuid
       * @description A unique ID assigned to this purchase order.
       */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /** @description Counterpart information about an organization (juridical person) or individual (natural person) that provides goods and services to or buys them from an */
      counterpart: components['schemas']['PurchaseOrderCounterpartSchema'];
      /**
       * Format: uuid
       * @description Counterpart unique ID.
       */
      counterpart_id: string;
      /**
       * Format: uuid
       * @description ID of the creator of the purchase order
       */
      created_by_user_id?: string;
      /** @description The currency in which the price of the product is set. (all items need to have the same currency) */
      currency: components['schemas']['CurrencyEnum'];
      document_id: string;
      /** @description Data of the entity (address, name, contact) */
      entity:
        | components['schemas']['PayableEntityIndividualResponse']
        | components['schemas']['PayableEntityOrganizationResponse'];
      /**
       * Format: uuid
       * @description The ID of the entity which issued the purchase order.
       */
      entity_id: string;
      entity_vat_id?: components['schemas']['PurchaseOrderVatId'];
      /** Format: uuid */
      file_id?: string;
      file_url?: string;
      /**
       * Format: date
       * @description When status changed from 'draft' to 'send', so after sending purchase order
       */
      issued_at?: string;
      /** @description List of item to purchase */
      items: components['schemas']['PurchaseOrderItem'][];
      /** @description Msg which will be send to counterpart for who the purchase order is issued. */
      message: string;
      /** @description Purchase order can be in 'draft' state before sending it to counterpart. After that state is 'issued' */
      status: string;
      /** @description Number of days for which purchase order is valid */
      valid_for_days: number;
    };
    /** @enum {string} */
    PurchaseOrderStatusEnum: 'draft' | 'issued';
    PurchaseOrderVatId: {
      /** Format: uuid */
      id: string;
      country: string;
      /** Format: uuid */
      entity_id: string;
      type: string;
      value: string;
    };
    QuoteResponsePayload: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      /**
       * Format: uuid
       * @description The unique ID of a previous document related to the receivable if applicable.
       */
      based_on?: string;
      /** @description The unique document ID of a previous document related to the receivable if applicable. */
      based_on_document_id?: string;
      /** @description Field with a comment on why the client declined this Quote */
      comment?: string;
      /** @description The commercial terms of the receivable (e.g. The products must be delivered in X days). */
      commercial_condition_description?: string;
      counterpart_address: components['schemas']['CounterpartAddress'];
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
      counterpart_business_type?: string;
      /** @description Additional information about counterpart contacts. */
      counterpart_contact?: components['schemas']['ReceivableCounterpartContact'];
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      counterpart_id: string;
      /** @description A legal name of a counterpart it is an organization */
      counterpart_name?: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /** @description The VAT/TAX ID of the counterpart. */
      counterpart_tax_id?: string;
      /** @description The type of the counterpart. */
      counterpart_type: components['schemas']['CounterpartType'];
      counterpart_vat_id?: components['schemas']['CounterpartVatIDResponse'];
      /** @description The currency used in the receivable. */
      currency: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /** @description Total price of the receivable with discounts before taxes [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      discounted_subtotal?: number;
      /** @description The sequential code systematically assigned to invoices. */
      document_id?: string;
      /**
       * Format: date
       * @description Optional field representing date until which invoice should be paid
       */
      due_date?: string;
      entity:
        | components['schemas']['ReceivablesEntityOrganization']
        | components['schemas']['ReceivablesEntityIndividual'];
      entity_address: components['schemas']['EntityAddressSchema'];
      entity_bank_account?: components['schemas']['ReceivablesRepresentationOfEntityBankAccount'];
      /**
       * Format: uuid
       * @description The entity user who created this document.
       */
      entity_user_id?: string;
      entity_vat_id?: components['schemas']['EntityVatIDResponse'];
      /**
       * Format: date
       * @description The date (in ISO 8601 format) until which the quote is valid.
       */
      expiry_date?: string;
      file?: components['schemas']['FileSchema'];
      file_url?: string;
      /**
       * Format: date-time
       * @description Optional field for the issue of the entry.
       */
      issue_date?: string;
      line_items: components['schemas']['ResponseItem'][];
      /** @description A note with additional information for a receivable. */
      memo?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /**
       * Format: uri
       * @description Link for custom quote accept page
       */
      quote_accept_page_url?: string;
      /** @description The status of the Quote inside the receivable workflow. */
      status: components['schemas']['QuoteStateEnum'];
      /** @description The subtotal (excluding VAT), in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      subtotal?: number;
      /**
       * @description Total price of the receivable in [minor units](https://docs.monite.com/docs/currencies#minor-units). Calculated as a subtotal + total_vat_amount.
       * @default 0
       */
      total_amount?: number;
      /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      total_vat_amount: number;
      /** @description List of total vat amount for each VAT, presented in receivable */
      total_vat_amounts?: components['schemas']['TotalVatAmountItem'][];
      /** @description Total price of the receivable with tax withheld in minor units */
      total_withholding_tax?: number;
      /**
       * @description The type of the document uploaded.
       * @enum {string}
       */
      type: 'quote';
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    /** @enum {string} */
    QuoteStateEnum:
      | 'draft'
      | 'issued'
      | 'accepted'
      | 'expired'
      | 'declined'
      | 'deleted';
    ReceivableCounterpartContact: {
      /** @description The contact address of the counterpart */
      address: components['schemas']['CounterpartAddress'];
      /**
       * Format: email
       * @description The contact email of the counterpart.
       * @example marge@example.org
       */
      email?: string;
      /**
       * @description The first name of the counterpart contact.
       * @example Marge
       */
      first_name: string;
      /**
       * @description The last name of the counterpart contact.
       * @example Smith
       */
      last_name: string;
      /**
       * @description The contact phone number of the counterpart.
       * @example 55512378654
       */
      phone?: string;
      /**
       * @description The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).
       * @example Dr.
       */
      title?: string;
    };
    ReceivableCreateBasedOnPayload: {
      /**
       * Format: uuid
       * @description The unique ID of a previous document related to the receivable if applicable.
       */
      based_on: string;
      /** @description The type of a created receivable. Currently supported transitions:quote -> invoice; invoice -> credit_note */
      type: components['schemas']['BasedOnTransitionType'];
    };
    /** @enum {string} */
    ReceivableCursorFields: 'counterpart_name' | 'amount' | 'status';
    /** @description Payload for decline a Qoute with a comment */
    ReceivableDeclinePayload: {
      /**
       * @description Field with a comment on why the client declined this Quote
       * @example The quote was declined for some reasons
       */
      comment?: string;
    };
    /** @enum {string} */
    ReceivableEditFlow: 'compliant' | 'partially_compliant' | 'non_compliant';
    ReceivableFacadeCreateInvoicePayload: {
      commercial_condition_description?: string;
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
      counterpart_business_type?: string;
      /** Format: uuid */
      counterpart_id: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /**
       * Format: uuid
       * @description Counterpart VAT ID id
       */
      counterpart_vat_id_id?: string;
      currency: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /**
       * Format: uuid
       * @description Entity bank account ID
       */
      entity_bank_account_id?: string;
      /**
       * Format: uuid
       * @description Entity VAT ID id
       */
      entity_vat_id_id?: string;
      /**
       * Format: date
       * @description The date when the goods are shipped or the service is provided.
       *
       * If omitted, defaults to the invoice issue date,
       * and the value is automatically set when the invoice status changes to `issued`.
       */
      fulfillment_date?: string;
      line_items: components['schemas']['LineItem'][];
      /** @description A note with additional information for a receivable */
      memo?: string;
      /** Format: uuid */
      overdue_reminder_id?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /**
       * Format: uri
       * @description Link to the invoice's payment page. Either Monite's payment links or your custom payment links.
       */
      payment_page_url?: string;
      /** Format: uuid */
      payment_reminder_id?: string;
      /** Format: uuid */
      payment_terms_id?: string;
      /** @description Contain purchase order number. */
      purchase_order?: string;
      /**
       * @description The type of the document uploaded.
       * @enum {string}
       */
      type: 'invoice';
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    ReceivableFacadeCreatePayload:
      | components['schemas']['ReceivableFacadeCreateQuotePayload']
      | components['schemas']['ReceivableFacadeCreateInvoicePayload']
      | components['schemas']['ReceivableCreateBasedOnPayload'];
    ReceivableFacadeCreateQuotePayload: {
      commercial_condition_description?: string;
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /** @description Different types of companies for different countries, ex. GmbH, SAS, SNC, etc. */
      counterpart_business_type?: string;
      /** Format: uuid */
      counterpart_id: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /**
       * Format: uuid
       * @description Counterpart VAT ID id
       */
      counterpart_vat_id_id?: string;
      currency: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /**
       * Format: uuid
       * @description Entity bank account ID
       */
      entity_bank_account_id?: string;
      /**
       * Format: uuid
       * @description Entity VAT ID id
       */
      entity_vat_id_id?: string;
      /**
       * Format: date
       * @description The date (in ISO 8601 format) until which the quote is valid.
       */
      expiry_date?: string;
      line_items: components['schemas']['LineItem'][];
      /** @description A note with additional information for a receivable */
      memo?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /**
       * Format: uri
       * @description Link for custom quote accept page
       */
      quote_accept_page_url?: string;
      /**
       * @description The type of the document uploaded.
       * @enum {string}
       */
      type: 'quote';
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    ReceivableFileUrl: {
      file_url?: string;
    };
    /** @description A paginated list of receivables */
    ReceivablePaginationResponse: {
      data: components['schemas']['ReceivableResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    ReceivablePaidPayload: {
      /** @description Optional comment explaining how the payment was made. */
      comment?: string;
    };
    ReceivablePartiallyPaidPayload: {
      /** @description How much has been paid on the invoice (in minor units). */
      amount_paid: number;
      /** @description Optional comment explaining how the payment was made. */
      comment?: string;
    };
    /** @description A schema for receiving a request for previewing an email with a receivable document */
    ReceivablePreviewRequest: {
      /** @description Body text of the content */
      body_text: string;
      /**
       * @description Language code for localization purposes
       * @default en
       */
      language?: string;
      /** @description Subject text of the content */
      subject_text: string;
      /**
       * @description The type of the preview document.
       * @default receivable
       */
      type?: components['schemas']['ReceivablesPreviewTypeEnum'];
    };
    /** @description A schema for receiving a request for previewing an email with a receivable document */
    ReceivablePreviewResponse: {
      body_preview: string;
      subject_preview: string;
    };
    ReceivableResponse:
      | components['schemas']['QuoteResponsePayload']
      | components['schemas']['InvoiceResponsePayload']
      | components['schemas']['CreditNoteResponsePayload'];
    /** @description A schema for receiving a request for sending a receivable */
    ReceivableSendRequest: {
      /** @description Body text of the content */
      body_text: string;
      /**
       * @description Lowercase ISO code of language
       * @default en
       */
      language?: string;
      /** @description Subject text of the content */
      subject_text: string;
    };
    /** @description A schema for returning a response an email with a link to receivable document has been sent */
    ReceivableSendResponse: {
      /** Format: uuid */
      mail_id: string;
    };
    /** @description Payload for sending a test reminder email */
    ReceivableSendTestReminderPayload: {
      /** @description The type of the reminder to be sent. */
      reminder_type: components['schemas']['ReminderTypeEnum'];
    };
    ReceivableSettingsPayload: {
      create_without_personal_info: boolean;
      deduction_title?: string;
    };
    ReceivableSettingsResponse: {
      create_without_personal_info: boolean;
      deduction_title?: string;
    };
    ReceivableTemplatesVariable: {
      description: string;
      name: string;
    };
    ReceivableTemplatesVariablesObject: {
      object_subtype: components['schemas']['VariablesType'];
      object_type: string;
      variables: components['schemas']['ReceivableTemplatesVariable'][];
    };
    ReceivableTemplatesVariablesObjectList: {
      data: components['schemas']['ReceivableTemplatesVariablesObject'][];
    };
    /** @enum {string} */
    ReceivableType: 'quote' | 'invoice' | 'credit_note';
    ReceivableUncollectiblePayload: {
      /** @description Optional comment explains why the Invoice goes uncollectible. */
      comment?: string;
    };
    ReceivableUpdatePayload:
      | components['schemas']['UpdateQuotePayload']
      | components['schemas']['UpdateInvoicePayload']
      | components['schemas']['UpdateCreditNotePayload']
      | components['schemas']['UpdateIssuedInvoicePayload'];
    /** @description A Response schema for an entity of individual type */
    ReceivablesEntityIndividual: {
      /**
       * Format: email
       * @description An email of the entity
       */
      email?: string;
      /** @description The first name of the entity issuing the receivable */
      first_name: string;
      /** @description The last name of the entity issuing the receivable */
      last_name: string;
      /**
       * Format: uri
       * @description A link to the entity logo
       */
      logo?: string;
      /** @description A phone number of the entity */
      phone?: string;
      /** @description The Tax ID of the entity issuing the receivable */
      tax_id?: string;
      /**
       * @description The entity type
       * @enum {string}
       */
      type: 'individual';
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A Response schema for an entity of organization type */
    ReceivablesEntityOrganization: {
      /**
       * Format: email
       * @description An email of the entity
       */
      email?: string;
      /**
       * Format: uri
       * @description A link to the entity logo
       */
      logo?: string;
      /** @description The name of the entity issuing the receivable, when it is an organization. */
      name: string;
      /** @description A phone number of the entity */
      phone?: string;
      /** @description The Tax ID of the entity issuing the receivable */
      tax_id?: string;
      /**
       * @description The entity type
       * @enum {string}
       */
      type: 'organization';
      /** @description The VAT ID of the entity issuing the receivable, when it is an organization. */
      vat_id?: string;
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @enum {string} */
    ReceivablesPreviewTypeEnum:
      | 'receivable'
      | 'discount_reminder'
      | 'final_reminder';
    ReceivablesRemindersWarningMessage: {
      /** @description Warning message for payment reminder */
      payment_reminders?: string;
    };
    ReceivablesRepresentationOfEntityBankAccount: {
      /**
       * Format: uuid
       * @description Unique ID of the entity bank account.
       */
      id?: string;
      /** @description Account holder's name */
      account_holder_name?: string;
      /** @description Account number (required if IBAN is not provided) */
      account_number?: string;
      /** @description The name of the entity's bank account. */
      bank_name?: string;
      /** @description The BIC of the entity's bank account. */
      bic?: string;
      country?: components['schemas']['AllowedCountries'];
      currency?: components['schemas']['CurrencyEnum'];
      display_name?: string;
      /** @description The IBAN of the entity's bank account. */
      iban?: string;
      /**
       * @description Marks if a bank account should be used by default. Only 1 can be True
       * @default false
       */
      is_default?: boolean;
      /** @description Routing number (US) */
      routing_number?: string;
      /** @description Sort code (GB) */
      sort_code?: string;
      /** Format: uuid */
      was_created_by_user_id?: string;
    };
    /** @description A schema for returning a response with list of ids by which user check sending status */
    ReceivablesSendResponse: {
      mail_ids: string[];
    };
    /**
     * @description This Enum the results of combining two types of statuses from
     * QuoteStateEnum, CreditNoteStateEnum and InvoiceStateEnum. You shouldn't use
     * it in your scenarios if only for edge cases in workers, but ideally need to
     * remove this shared Enum.
     * @enum {string}
     */
    ReceivablesStatusEnum:
      | 'draft'
      | 'issued'
      | 'accepted'
      | 'expired'
      | 'declined'
      | 'recurring'
      | 'partially_paid'
      | 'paid'
      | 'overdue'
      | 'uncollectible'
      | 'canceled'
      | 'deleted';
    Recipient: {
      /** Format: uuid */
      id: string;
      type: components['schemas']['RecipientType'];
    };
    RecipientAccountResponse: {
      /** Format: uuid */
      id: string;
      bank_accounts?: components['schemas']['BankAccount'][];
      name?: string;
      type: components['schemas']['PaymentAccountType'];
    };
    /** @enum {string} */
    RecipientType: 'entity' | 'counterpart';
    Recurrence: {
      /** Format: uuid */
      id: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was created. Timestamps follow the ISO 8601 standard.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Time at which the receivable was last updated. Timestamps follow the ISO 8601 standard.
       */
      updated_at: string;
      current_iteration: number;
      day_of_month: components['schemas']['DayOfMonth'];
      end_month: number;
      end_year: number;
      /** Format: uuid */
      invoice_id: string;
      iterations: components['schemas']['RecurrenceIteration'][];
      start_month: number;
      start_year: number;
      status: components['schemas']['RecurrenceStatus'];
    };
    RecurrenceIteration: {
      /** Format: date */
      issue_at: string;
      /** Format: uuid */
      issued_invoice_id?: string;
      /** @default 1 */
      iteration?: number;
      status: components['schemas']['IterationStatus'];
    };
    /** @enum {string} */
    RecurrenceStatus: 'active' | 'canceled' | 'completed';
    RelatedDocuments: {
      credit_note_ids?: string[];
      /** Format: uuid */
      proforma_invoice_id?: string;
    };
    Reminder: {
      body: string;
      days_before: number;
      subject: string;
    };
    /** @enum {string} */
    ReminderTypeEnum: 'term_1' | 'term_2' | 'term_final' | 'overdue';
    RemindersSettings: {
      /** @default true */
      enabled?: boolean;
    };
    RequirementsError: {
      code: string;
      reason: string;
      requirement: string;
    };
    ResponseItem: {
      /** @description The discount for a product. */
      discount?: components['schemas']['Discount'];
      product: components['schemas']['LineItemProduct'];
      /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
      quantity: number;
      /** @description Total of line_item before VAT in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      total_before_vat?: number;
    };
    RevokeTokenPayload: {
      /** Format: uuid */
      client_id: string;
      client_secret: string;
      token: string;
    };
    /** @enum {string} */
    RoleCursorFields: 'updated_at' | 'created_at';
    RolePaginationResponse: {
      /** @description array of records */
      data: components['schemas']['RoleResponse'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    RoleResponse: {
      /**
       * Format: uuid
       * @description UUID role ID
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      created_at: string;
      /**
       * Format: date-time
       * @description UTC datetime
       */
      updated_at: string;
      /** @description Role name */
      name: string;
      /** @description Access permissions */
      permissions: components['schemas']['BizObjectsSchema'];
      /** @description record status, 'active' by default */
      status: components['schemas']['StatusEnum'];
    };
    RootSchema:
      | components['schemas']['CommonSchema']
      | components['schemas']['PayableSchema'];
    /** @description A schema for request for sending purchase order via email */
    SendPurchaseOrderViaEmailRequest: {
      body_text: string;
      subject_text: string;
    };
    SingleOnboardingRequirementsResponse: {
      disabled_reason?: string;
      payment_method: string;
      requirements: components['schemas']['PaymentMethodRequirements'];
      requirements_errors: components['schemas']['OnboardingRequirementsError'][];
      verification_errors: components['schemas']['OnboardingVerificationError'][];
      verification_status: components['schemas']['OnboardingVerificationStatusEnum'];
    };
    SinglePaymentIntent: {
      object: components['schemas']['PaymentObjectPayable'];
      /** @description Must be provided if payable's document id is missing. */
      payment_reference?: string;
      recipient: components['schemas']['PaymentIntentsRecipient'];
    };
    SinglePaymentIntentResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      amount: number;
      currency: components['schemas']['CurrencyEnum'];
      error?: Record<string, never>;
      object: components['schemas']['PaymentObjectPayable'];
      payment_reference: string;
      recipient: components['schemas']['PaymentIntentsRecipient'];
      status: string;
    };
    /** @enum {string} */
    SourceOfPayableDataEnum: 'ocr' | 'user_specified';
    /** @enum {string} */
    StatusEnum: 'active' | 'deleted';
    SuccessResult: {
      /** @default true */
      success?: boolean;
    };
    /** @description Suggested payment date and corresponding discount */
    SuggestedPaymentTerm: {
      /** Format: date */
      date: string;
      discount?: number;
    };
    /** @enum {string} */
    SupportedFieldNames: 'default_account_code' | 'default_tax_rate_code';
    SupportedFormatSchema: {
      available_types: {
        [key: string]: components['schemas']['ExportFormat'][];
      };
      /** @enum {string} */
      object_type: 'payable' | 'receivable';
    };
    SystemTemplateDataSchema: {
      /** @description Array of templates */
      available_templates: components['schemas']['TemplateDataSchema'][];
      /** @description Name of the template */
      template_name: string;
    };
    SystemTemplates: {
      /** @description All pre-defined email templates */
      data: components['schemas']['SystemTemplateDataSchema'][];
    };
    TagCreateOrUpdateSchema: {
      /**
       * @description The tag name.
       * @example Marketing
       */
      name: string;
    };
    /** @enum {string} */
    TagCursorFields: 'created_at' | 'updated_at';
    /** @description Represents a user-defined tag that can be assigned to payables to filter them. */
    TagReadSchema: {
      /**
       * Format: uuid
       * @description A unique ID of this tag.
       * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
       */
      id: string;
      /**
       * Format: date-time
       * @description Date and time when the tag was created. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       * @example 2022-09-07T16:35:18.484507+00:00
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Date and time when the tag was last updated. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
       * @example 2022-09-07T16:35:18.484507+00:00
       */
      updated_at: string;
      /**
       * Format: uuid
       * @description ID of the user who created the tag
       * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
       */
      created_by_entity_user_id?: string;
      /**
       * @description The tag name.
       * @example Marketing
       */
      name: string;
    };
    /** @description A paginated list of tags. */
    TagsPaginationResponse: {
      data: components['schemas']['TagReadSchema'][];
      /**
       * @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page).
       * @example eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9
       */
      next_pagination_token?: string;
      /**
       * @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page).
       * @example eyJvcmRlciI6ImFzYyIsImxpbWl0IjoyLCJwYWdpbmF0aW9uX2ZpbHRlcnMiOnsiZW50aXR5X2lkIjoiOWQyYjRjOGYtMjA4Ny00NzM4LWJhOTEtNzM1OTY4M2M0OWE0In0sInBhZ2luYXRpb25fdG9rZW5fdHlwZSI6Im5leHQiLCJjdXJzb3JfZmllbGQiOm51bGwsImN1cnNvcl9maWVsZF92YWx1ZSI6bnVsbCwiY3VycmVudF9vaWQiOjR9
       */
      prev_pagination_token?: string;
    };
    /** @enum {string} */
    TaxIDTypeEnum:
      | 'ae_trn'
      | 'au_abn'
      | 'au_arn'
      | 'bg_uic'
      | 'br_cnpj'
      | 'br_cpf'
      | 'ca_bn'
      | 'ca_gst_hst'
      | 'ca_pst_bc'
      | 'ca_pst_mb'
      | 'ca_pst_sk'
      | 'ca_qst'
      | 'ch_vat'
      | 'cl_tin'
      | 'es_cif'
      | 'eu_oss_vat'
      | 'eu_vat'
      | 'gb_vat'
      | 'ge_vat'
      | 'hk_br'
      | 'hu_tin'
      | 'id_npwp'
      | 'il_vat'
      | 'in_gst'
      | 'is_vat'
      | 'jp_cn'
      | 'jp_rn'
      | 'kr_brn'
      | 'li_uid'
      | 'mx_rfc'
      | 'my_frp'
      | 'my_itn'
      | 'my_sst'
      | 'no_vat'
      | 'nz_gst'
      | 'ru_inn'
      | 'ru_kpp'
      | 'sa_vat'
      | 'sg_gst'
      | 'sg_uen'
      | 'si_tin'
      | 'th_vat'
      | 'tw_vat'
      | 'ua_vat'
      | 'us_ein'
      | 'za_vat'
      | 'unknown';
    TemplateDataSchema: {
      /** @description Jinja2 compatible email body template */
      body_template: string;
      /** @description Lowercase ISO code of language */
      language: string;
      /** @description Jinja2 compatible email subject template */
      subject_template: string;
    };
    TemplateListResponse: {
      data?: components['schemas']['TemplateReceivableResponse'][];
    };
    TemplateReceivableResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      blocks?: string[];
      document_type: components['schemas']['DocumentTypeEnum'];
      is_default: boolean;
      language: string;
      name: string;
      preview?: components['schemas']['FileSchema'];
      template: string;
      /** @default source_object */
      template_type?: components['schemas']['TemplateTypeEnum'];
    };
    /** @enum {string} */
    TemplateTypeEnum: 'block' | 'source_object';
    TermFinalWithDate: {
      /** Format: date */
      end_date?: string;
      /** @description The amount of days after the invoice issue date. */
      number_of_days: number;
    };
    TextTemplateResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      document_type: components['schemas']['DocumentTypeEnum'];
      is_default: boolean;
      name: string;
      template: string;
      type: components['schemas']['TextTemplateType'];
    };
    TextTemplateResponseList: {
      data: components['schemas']['TextTemplateResponse'][];
      next_pagination_token?: string;
      prev_pagination_token?: string;
    };
    /** @enum {string} */
    TextTemplateType: 'email_header' | 'email_body' | 'memo';
    TotalVatAmountItem: {
      /** Format: uuid */
      id?: string;
      /** @description The total VAT of all line items, in [minor units](https://docs.monite.com/docs/currencies#minor-units). */
      amount: number;
      /** @description Percent minor units. Example: 12.5% is 1250. */
      value: number;
    };
    Unit: {
      /** @example kg */
      designation: string;
      /** @example Kilogram */
      name: string;
    };
    UnitListResponse: {
      data: components['schemas']['UnitResponse'][];
    };
    UnitRequest: {
      description?: string;
      name: string;
    };
    UnitResponse: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      description?: string;
      name: string;
    };
    UnitUpdate: {
      description?: string;
      name?: string;
    };
    UpdateCounterpartBankAccount: {
      /**
       * @description The IBAN of the bank account.
       * @example DE74500700100100000900
       */
      iban?: string;
      /**
       * @description The BIC/SWIFT code of the bank.
       * @example DEUTDEFFXXX
       */
      bic?: string;
      name?: string;
      /**
       * @description The name of the person or business that owns this bank account. Required for US bank accounts to accept ACH payments.
       * @example Bob Jones
       */
      account_holder_name?: string;
      /**
       * @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits.
       * @example 12345678
       */
      account_number?: string;
      /**
       * @description The bank's sort code.
       * @example 123456
       */
      sort_code?: string;
      /** @description The bank's routing transit number (RTN). Required for US bank accounts to accept ACH payments. US routing numbers consist of 9 digits. */
      routing_number?: string;
      currency?: components['schemas']['CurrencyEnum'];
      country?: components['schemas']['AllowedCountries'];
      /** @description Metadata for partner needs. */
      partner_metadata?: Record<string, never>;
    };
    /** @description The contact person for an organization. */
    UpdateCounterpartContactPayload: {
      /**
       * @description The first name of a contact person.
       * @example Mary
       */
      first_name?: string;
      /**
       * @description The last name of a contact person.
       * @example O'Brien
       */
      last_name?: string;
      /**
       * Format: email
       * @description The email address of a contact person.
       * @example contact@example.org
       */
      email?: string;
      /**
       * @description The phone number of a contact person
       * @example 5551235476
       */
      phone?: string;
      /**
       * @description The title or honorific of a contact person. Examples: Mr., Ms., Dr., Prof.
       * @example Ms.
       */
      title?: string;
      /** @description The address of a contact person. */
      address?: components['schemas']['CounterpartAddress'];
    };
    UpdateCreditNote: {
      counterpart_address?: components['schemas']['CounterpartAddress'];
      /** @description Additional information about counterpart contacts. */
      counterpart_contact?: components['schemas']['ReceivableCounterpartContact'];
      line_items?: components['schemas']['UpdateLineItemForCreditNote'];
      /** @description A note with additional information for a receivable */
      memo?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
    };
    /**
     * @description Helper class that provides a standard way to create an ABC using
     * inheritance.
     */
    UpdateCreditNotePayload: {
      credit_note: components['schemas']['UpdateCreditNote'];
    };
    UpdateCustomTemplateSchemaRequest: {
      /** @description Jinja2 compatible string with email body */
      body_template?: string;
      /** @description Lowercase ISO code of language */
      language?: components['schemas']['LanguageCodeEnum'];
      /** @description Custom template name */
      name?: string;
      /** @description Jinja2 compatible string with email subject */
      subject_template?: string;
    };
    UpdateEntityAddressSchema: {
      /** @description A city (a full name) where the entity is registered */
      city?: string;
      /**
       * @description A country name (as ISO code) where the entity is registered
       * @example DE
       */
      country?: components['schemas']['AllowedCountries'];
      /** @description A street where the entity is registered */
      line1?: string;
      /** @description An alternative street used by the entity */
      line2?: string;
      /** @description A postal code of the address where the entity is registered */
      postal_code?: string;
      /** @description A state in a country where the entity is registered */
      state?: string;
    };
    /** @description Data that can be updated in existing bank accounts of an entity. */
    UpdateEntityBankAccountRequest: {
      /**
       * @description The name of the person or business that owns this bank account. If the account currency is GBP or USD, the holder name cannot be changed to an empty string.
       * @example Cayla Lloyd
       */
      account_holder_name?: string;
      /**
       * @description User-defined name of this bank account, such as 'Primary account' or 'Savings account'.
       * @example Primary account
       */
      display_name?: string;
    };
    /** @description A schema for a request to update an entity */
    UpdateEntityRequest: {
      /** @description An address description of the entity */
      address?: components['schemas']['UpdateEntityAddressSchema'];
      /**
       * Format: email
       * @description An official email address of the entity
       */
      email?: string;
      /** @description A set of meta data describing the individual */
      individual?: components['schemas']['OptionalIndividualSchema'];
      /** @description A set of meta data describing the organization */
      organization?: components['schemas']['OptionalOrganizationSchema'];
      /** @description A phone number of the entity */
      phone?: string;
      /** @description An identification number of the legal entity */
      tax_id?: string;
      /**
       * Format: uri
       * @description A website of the entity
       */
      website?: string;
    };
    /** @description A scheme for validation an entity user additional info */
    UpdateEntityUserRequest: {
      /**
       * Format: email
       * @description An entity user business email
       */
      email?: string;
      /**
       * @description First name
       * @example Andrey
       */
      first_name?: string;
      /**
       * @description Last name
       * @example Korchak
       */
      last_name?: string;
      /**
       * @description Login
       * @example Meme Lord
       */
      login?: string;
      /** @description An entity user phone number in the international format */
      phone?: string;
      /**
       * Format: uuid
       * @description UUID of the role assigned to this entity user
       */
      role_id?: string;
      /**
       * @description Title
       * @example Boss
       */
      title?: string;
    };
    /** @description Raise if None was explicitly passed to given fields */
    UpdateInvoice: {
      /**
       * Format: uuid
       * @description Unique ID of the counterpart contact.
       */
      contact_id?: string;
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      counterpart_id?: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /**
       * Format: uuid
       * @description Counterpart VAT ID id
       */
      counterpart_vat_id_id?: string;
      currency?: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /**
       * Format: uuid
       * @description Entity bank account ID
       */
      entity_bank_account_id?: string;
      /**
       * Format: uuid
       * @description Entity VAT ID id
       */
      entity_vat_id_id?: string;
      /**
       * Format: date
       * @description The date when the goods are shipped or the service is provided.
       *
       * If omitted, defaults to the invoice issue date,
       * and the value is automatically set when the invoice status changes to `issued`.
       */
      fulfillment_date?: string;
      line_items?: components['schemas']['LineItemUpdate'][];
      /** @description A note with additional information for a receivable */
      memo?: string;
      /** Format: uuid */
      overdue_reminder_id?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /**
       * Format: uri
       * @description Link to your invoice's custom payment rails or external payment link.
       */
      payment_page_url?: string;
      /** Format: uuid */
      payment_reminder_id?: string;
      /** Format: uuid */
      payment_terms_id?: string;
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    /**
     * @description Helper class that provides a standard way to create an ABC using
     * inheritance.
     */
    UpdateInvoicePayload: {
      invoice: components['schemas']['UpdateInvoice'];
    };
    /** @description Raise if None was explicitly passed to given fields */
    UpdateIssuedInvoice: {
      /**
       * Format: uuid
       * @description Unique ID of the counterpart contact.
       */
      contact_id?: string;
      /**
       * Format: uuid
       * @description Id of a new or updated counterpart
       */
      counterpart_id?: string;
      /**
       * Format: uuid
       * @description Counterpart VAT ID id
       */
      counterpart_vat_id_id?: string;
      entity?:
        | components['schemas']['EntityOrganizationRequest']
        | components['schemas']['EntityIndividualRequest'];
      entity_address?: components['schemas']['EntityAddressSchema'];
      /**
       * Format: uuid
       * @description Entity VAT ID id
       */
      entity_vat_id_id?: string;
      /**
       * Format: date
       * @description The date when the goods are shipped or the service is provided.
       *
       * If omitted, defaults to the invoice issue date,
       * and the value is automatically set when the invoice status changes to `issued`.
       */
      fulfillment_date?: string;
      /** @description A note with additional information for a receivable */
      memo?: string;
      /** Format: uuid */
      overdue_reminder_id?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /** Format: uuid */
      payment_reminder_id?: string;
      /** Format: uuid */
      payment_terms_id?: string;
    };
    /**
     * @description Helper class that provides a standard way to create an ABC using
     * inheritance.
     */
    UpdateIssuedInvoicePayload: {
      issued_invoice: components['schemas']['UpdateIssuedInvoice'];
    };
    /**
     * @description Line item with given product id can be changed only once
     * @example {
     *   "6639ac63-0622-4bd9-b340-31c25e2096b8": {
     *     "quantity": 5,
     *     "price_diff": 100,
     *     "old_price": 400
     *   }
     * }
     */
    UpdateLineItemForCreditNote: {
      [key: string]: components['schemas']['UpdateProductForCreditNote'];
    };
    UpdateLineItems: {
      data: components['schemas']['LineItem'][];
    };
    /** @description A scheme for validation an entity user additional info */
    UpdateMeEntityUserRequest: {
      /**
       * Format: email
       * @description An entity user business email
       */
      email?: string;
      /**
       * @description First name
       * @example Andrey
       */
      first_name?: string;
      /**
       * @description Last name
       * @example Korchak
       */
      last_name?: string;
      /** @description An entity user phone number in the international format */
      phone?: string;
      /**
       * @description Title
       * @example Boss
       */
      title?: string;
    };
    UpdatePaymentIntentPayload: {
      amount: number;
    };
    UpdateProductForCreditNote: {
      /** @description The old price of the line item. Used to choose for which line item new price should be applied */
      old_price?: number;
      /** @description The price diff of the line item, i.e. applied discount */
      price_diff?: number;
      /** @description The quantity of each of the goods, materials, or services listed in the receivable. */
      quantity: number;
    };
    /** @description Represents an Accounts Purchase Order document created by entity. */
    UpdatePurchaseOrderPayloadSchema: {
      /**
       * Format: uuid
       * @description Counterpart unique ID.
       */
      counterpart_id?: string;
      /**
       * Format: uuid
       * @description Entity VAT ID identifier that applied to purchase order
       */
      entity_vat_id_id?: string;
      /** @description List of item to purchase */
      items?: components['schemas']['PurchaseOrderItem'][];
      /** @description Msg which will be send to counterpart for who the purchase order is issued. */
      message?: string;
      /** @description Number of days for which purchase order is valid */
      valid_for_days?: number;
    };
    /** @description Raise if None was explicitly passed to given fields */
    UpdateQuote: {
      /**
       * Format: uuid
       * @description Unique ID of the counterpart contact.
       */
      contact_id?: string;
      /** @description Address of invoicing, need to state as a separate fields for some countries if it differs from address of a company. */
      counterpart_billing_address?: components['schemas']['CounterpartAddress'];
      /**
       * Format: uuid
       * @description Unique ID of the counterpart.
       */
      counterpart_id?: string;
      /** @description Address where goods were shipped / where services were provided. */
      counterpart_shipping_address?: components['schemas']['CounterpartAddress'];
      /**
       * Format: uuid
       * @description Counterpart VAT ID id
       */
      counterpart_vat_id_id?: string;
      currency?: components['schemas']['CurrencyEnum'];
      /** @description The amount of tax deducted in minor units */
      deduction_amount?: number;
      /** @description A note with additional information about a tax deduction */
      deduction_memo?: string;
      /** @description The discount for a receivable. */
      discount?: components['schemas']['Discount'];
      /**
       * Format: uuid
       * @description Entity bank account ID
       */
      entity_bank_account_id?: string;
      /**
       * Format: uuid
       * @description Entity VAT ID id
       */
      entity_vat_id_id?: string;
      /**
       * Format: date
       * @description The date (in ISO 8601 format) until which the quote is valid.
       */
      expiry_date?: string;
      line_items?: components['schemas']['LineItemUpdate'][];
      /** @description A note with additional information for a receivable */
      memo?: string;
      /** @description Metadata for partner needs */
      partner_metadata?: Record<string, never>;
      /**
       * Format: uuid
       * @description Unique ID of the payment terms.
       */
      payment_terms_id?: string;
      /**
       * Format: uri
       * @description Link for custom quote accept page
       */
      quote_accept_page_url?: string;
      /** @description Indicates whether the goods, materials, or services listed in the receivable are exempt from VAT or not. */
      vat_exempt?: boolean;
      /** @description The reason for the VAT exemption, if applicable. */
      vat_exemption_rationale?: string;
      /** @description The amount of tax withheld in percent minor units */
      withholding_tax_rate?: number;
    };
    /**
     * @description Helper class that provides a standard way to create an ABC using
     * inheritance.
     */
    UpdateQuotePayload: {
      quote: components['schemas']['UpdateQuote'];
    };
    UpdateRecurrencePayload: {
      day_of_month?: components['schemas']['DayOfMonth'];
      end_month?: number;
      end_year?: number;
    };
    UpdateRoleRequest: {
      /** @description Role name */
      name?: string;
      /** @description Access permissions */
      permissions?: components['schemas']['BizObjectsSchema'];
    };
    UpdateTextTemplatePayload: {
      name?: string;
      template?: string;
    };
    UpdateWebhookSubscriptionRequest: {
      event_types?: string[];
      object_type?: components['schemas']['WebhookObjectType'];
      /** Format: uri */
      url?: string;
    };
    ValidationError: {
      loc: (string | number)[];
      msg: string;
      type: string;
    };
    Variable: {
      description: string;
      name: string;
    };
    VariablesObject: {
      object_subtype: components['schemas']['DocumentTypeEnum'];
      object_type: string;
      variables: components['schemas']['Variable'][];
    };
    VariablesObjectList: {
      data: components['schemas']['VariablesObject'][];
    };
    /** @enum {string} */
    VariablesType:
      | 'quote'
      | 'invoice'
      | 'credit_note'
      | 'discount_reminder'
      | 'final_reminder'
      | 'overdue_reminder';
    /** @enum {string} */
    VatIDTypeEnum:
      | 'ae_trn'
      | 'au_abn'
      | 'au_arn'
      | 'bg_uic'
      | 'br_cnpj'
      | 'br_cpf'
      | 'ca_bn'
      | 'ca_gst_hst'
      | 'ca_pst_bc'
      | 'ca_pst_mb'
      | 'ca_pst_sk'
      | 'ca_qst'
      | 'ch_vat'
      | 'cl_tin'
      | 'es_cif'
      | 'eu_oss_vat'
      | 'eu_vat'
      | 'gb_vat'
      | 'ge_vat'
      | 'hk_br'
      | 'hu_tin'
      | 'id_npwp'
      | 'il_vat'
      | 'in_gst'
      | 'is_vat'
      | 'jp_cn'
      | 'jp_rn'
      | 'kr_brn'
      | 'li_uid'
      | 'mx_rfc'
      | 'my_frp'
      | 'my_itn'
      | 'my_sst'
      | 'no_vat'
      | 'nz_gst'
      | 'ru_inn'
      | 'ru_kpp'
      | 'sa_vat'
      | 'sg_gst'
      | 'sg_uen'
      | 'si_tin'
      | 'th_vat'
      | 'tw_vat'
      | 'ua_vat'
      | 'us_ein'
      | 'za_vat'
      | 'unknown';
    /** @enum {string} */
    VatRateCreator: 'monite' | 'accounting';
    VatRateListResponse: {
      data: components['schemas']['VatRateResponse'][];
    };
    VatRateResponse: {
      /**
       * Format: uuid
       * @description Unique identifier of the vat rate object.
       */
      id: string;
      /**
       * Format: date-time
       * @description Date/time when this rate was recorded in the table.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Date/time when this rate was updated in the table.
       */
      updated_at: string;
      /**
       * @description Two-letter ISO country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
       * @example DE
       */
      country: components['schemas']['AllowedCountries'];
      /** @description By whom this rate was recorded: monite employee | accounting system. */
      created_by?: components['schemas']['VatRateCreator'];
      /** @description Status for this vat rate: active | inactive. */
      status?: components['schemas']['VatRateStatusEnum'];
      /**
       * Format: date
       * @description Date starting from when this rate can be used.
       */
      valid_from?: string;
      /**
       * Format: date
       * @description Date when this rate was depreciated, after this date rate cannot be used.
       */
      valid_until?: string;
      /** @description Percent minor units. Example: 12.5% is 1250. */
      value: number;
    };
    /** @enum {string} */
    VatRateStatusEnum: 'active' | 'inactive';
    VerificationAirwallexPlaidRequest: {
      /** @description The name of your application to be displayed in Plaid Modal */
      client_name: string;
      /** @description The name of the Link customization configured on the Plaid Dashboard. If not specified, the default customization will be applied */
      link_customization_name?: string;
      /**
       * Format: uri
       * @description URL to handle the OAuth verification flow
       */
      redirect_url: string;
    };
    VerificationAirwallexPlaidResponse: {
      /** @description Client name from the request */
      client_name: string;
      /** Format: date-time */
      expires_at: string;
      /** @description Customization name from the request */
      link_customization_name?: string;
      /** @description Link token that should be used to init Plaid SDK */
      link_token: string;
      /**
       * Format: uri
       * @description URL from the request
       */
      redirect_url: string;
    };
    VerificationError: {
      code: string;
      details: string;
    };
    VerificationRequest: {
      airwallex_plaid: components['schemas']['VerificationAirwallexPlaidRequest'];
      type: components['schemas']['BankAccountVerificationType'];
    };
    VerificationResponse: {
      airwallex_plaid: components['schemas']['VerificationAirwallexPlaidResponse'];
      type: components['schemas']['BankAccountVerificationType'];
    };
    /** @enum {string} */
    VerificationStatusEnum: 'enabled' | 'disabled' | 'pending';
    VerifyResponse: {
      /**
       * Format: uuid
       * @description Entry UUID
       */
      id: string;
      domain: string;
      status: string;
    };
    /** @enum {string} */
    WebhookDeliveryCursorFields: 'created_at' | 'updated_at';
    WebhookDeliveryPaginationResource: {
      /** @description A set of webhooks returned per page */
      data: components['schemas']['WebhookDeliveryResource'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    WebhookDeliveryResource: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      event_id: string;
      requests_made_count: number;
      response?: string;
      response_status_code?: number;
      /** Format: uri */
      url: string;
      was_successful?: boolean;
    };
    /** @enum {string} */
    WebhookObjectType:
      | 'account'
      | 'approval'
      | 'approval_request'
      | 'approval_policy'
      | 'batch_payment'
      | 'comment'
      | 'counterpart'
      | 'counterpart_address'
      | 'counterpart_bank_account'
      | 'counterpart_contact_person'
      | 'counterpart_partner_metadata'
      | 'counterpart_tax_id'
      | 'entity'
      | 'entity_bank_account'
      | 'entity_settings'
      | 'entity_user'
      | 'export'
      | 'partner_settings'
      | 'payable'
      | 'payables_purchase_order'
      | 'payable.line_item'
      | 'payment'
      | 'payment_intent'
      | 'payment_link'
      | 'product'
      | 'receivable'
      | 'recurrence'
      | 'role'
      | 'tag'
      | 'todo_task'
      | 'workflow'
      | 'workflow_pipeline'
      | 'overdue_reminder'
      | 'payment_reminder'
      | 'accounting_connection';
    /** @enum {string} */
    WebhookSubscriptionCursorFields: 'created_at' | 'updated_at';
    WebhookSubscriptionPaginationResource: {
      /** @description A set of webhook settings of different types returned per page */
      data: components['schemas']['WebhookSubscriptionResource'][];
      /** @description A token that can be sent in the `pagination_token` query parameter to get the next page of results, or `null` if there is no next page (i.e. you've reached the last page). */
      next_pagination_token?: string;
      /** @description A token that can be sent in the `pagination_token` query parameter to get the previous page of results, or `null` if there is no previous page (i.e. you've reached the first page). */
      prev_pagination_token?: string;
    };
    WebhookSubscriptionResource: {
      /** Format: uuid */
      id: string;
      event_types: string[];
      object_type: components['schemas']['WebhookObjectType'];
      status: components['schemas']['WebhookSubscriptionStatus'];
      /** Format: uri */
      url: string;
    };
    WebhookSubscriptionResourceWithSecret: {
      /** Format: uuid */
      id: string;
      event_types: string[];
      object_type: components['schemas']['WebhookObjectType'];
      secret: string;
      status: components['schemas']['WebhookSubscriptionStatus'];
      /** Format: uri */
      url: string;
    };
    /** @enum {string} */
    WebhookSubscriptionStatus: 'enabled' | 'disabled';
    /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
    entities__unversioned__schemas__file_saver__FileSchema: {
      /**
       * Format: uuid
       * @description A unique ID of this file.
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /**
       * @description The type of the business object associated with this file.
       * @example payables
       */
      file_type: string;
      /**
       * @description The MD5 hash of the file.
       * @example 31d1a2dd1ad3dfc39be849d70a68dac0
       */
      md5: string;
      /**
       * @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
       * @example application/pdf
       */
      mimetype: string;
      /**
       * @description The original file name (if available).
       * @example invoice.pdf
       */
      name: string;
      /**
       * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
       * @default []
       */
      pages?: components['schemas']['entities__unversioned__schemas__file_saver__PageSchema'][];
      /**
       * @description Preview images generated for this file. There can be multiple images with different sizes.
       * @default []
       */
      previews?: components['schemas']['entities__unversioned__schemas__file_saver__PreviewSchema'][];
      /**
       * @description Geographical region of the data center where the file is stored.
       * @example eu-central-1
       */
      region: string;
      /**
       * @description The file size in bytes.
       * @example 24381
       */
      size: number;
      /**
       * @description The URL to download the file.
       * @example https://bucketname.s3.amazonaws.com/12345/67890.pdf
       */
      url: string;
    };
    /**
     * @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
     * and saves them as PNG images. This object contains the image and metadata of a single page.
     */
    entities__unversioned__schemas__file_saver__PageSchema: {
      /**
       * Format: uuid
       * @description A unique ID of the image.
       */
      id: string;
      /**
       * @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
       * @example image/png
       */
      mimetype: string;
      /**
       * @description The page number in the PDF document, from 0.
       * @example 0
       */
      number: number;
      /**
       * @description Image file size, in bytes.
       * @example 21972
       */
      size: number;
      /**
       * @description The URL to download the image.
       * @example https://bucket.s3.amazonaws.com/123/456.png
       */
      url: string;
    };
    /** @description A preview image generated for a file. */
    entities__unversioned__schemas__file_saver__PreviewSchema: {
      /**
       * @description The image height in pixels.
       * @example 400
       */
      height: number;
      /**
       * @description The image URL.
       * @example https://bucketname.s3.amazonaws.com/1/2/3.png
       */
      url: string;
      /**
       * @description The image width in pixels.
       * @example 200
       */
      width: number;
    };
    /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
    monite__schemas__file_saver__FileSchema: {
      /**
       * Format: uuid
       * @description A unique ID of this file.
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /**
       * @description The type of the business object associated with this file.
       * @example payables
       */
      file_type: string;
      /**
       * @description The original file name (if available).
       * @example invoice.pdf
       */
      name: string;
      /**
       * @description Geographical region of the data center where the file is stored.
       * @example eu-central-1
       */
      region: string;
      /**
       * @description The MD5 hash of the file.
       * @example 31d1a2dd1ad3dfc39be849d70a68dac0
       */
      md5: string;
      /**
       * @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
       * @example application/pdf
       */
      mimetype: string;
      /**
       * @description The URL to download the file.
       * @example https://bucketname.s3.amazonaws.com/12345/67890.pdf
       */
      url: string;
      /**
       * @description The file size in bytes.
       * @example 24381
       */
      size: number;
      /**
       * @description Preview images generated for this file. There can be multiple images with different sizes.
       * @default []
       */
      previews?: components['schemas']['monite__schemas__file_saver__PreviewSchema'][];
      /**
       * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
       * @default []
       */
      pages?: components['schemas']['monite__schemas__file_saver__PageSchema'][];
    };
    /**
     * @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
     * and saves them as PNG images. This object contains the image and metadata of a single page.
     */
    monite__schemas__file_saver__PageSchema: {
      /**
       * Format: uuid
       * @description A unique ID of the image.
       */
      id: string;
      /**
       * @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
       * @example image/png
       */
      mimetype: string;
      /**
       * @description Image file size, in bytes.
       * @example 21972
       */
      size: number;
      /**
       * @description The page number in the PDF document, from 0.
       * @example 0
       */
      number: number;
      /**
       * @description The URL to download the image.
       * @example https://bucket.s3.amazonaws.com/123/456.png
       */
      url: string;
    };
    /** @description A preview image generated for a file. */
    monite__schemas__file_saver__PreviewSchema: {
      /**
       * @description The image URL.
       * @example https://bucketname.s3.amazonaws.com/1/2/3.png
       */
      url: string;
      /**
       * @description The image width in pixels.
       * @example 200
       */
      width: number;
      /**
       * @description The image height in pixels.
       * @example 400
       */
      height: number;
    };
    package__entities__head__schemas__entity_onboarding_data__OwnershipDeclaration: {
      /**
       * Format: date-time
       * @description The date and time (in the ISO 8601 format) when the beneficial owner attestation was made.
       */
      date?: string;
      /**
       * @description The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.
       * @example 203.0.113.24
       */
      ip?: string;
    };
    package__entities__head__schemas__entity_onboarding_data__TermsOfServiceAcceptance: {
      /**
       * Format: date-time
       * @description The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement.
       */
      date?: string;
      /**
       * @description The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.
       * @example 203.0.113.24
       */
      ip?: string;
    };
    /** @description Represents a file (such as a PDF invoice) that was uploaded to Monite. */
    package__entities__unversioned__schemas__file_saver__FileSchema: {
      /**
       * Format: uuid
       * @description A unique ID of this file.
       */
      id: string;
      /**
       * Format: date-time
       * @description UTC date and time when this workflow was uploaded to Monite. Timestamps follow the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /**
       * @description The type of the business object associated with this file.
       * @example payables
       */
      file_type: string;
      /**
       * @description The MD5 hash of the file.
       * @example 31d1a2dd1ad3dfc39be849d70a68dac0
       */
      md5: string;
      /**
       * @description The file's [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
       * @example application/pdf
       */
      mimetype: string;
      /**
       * @description The original file name (if available).
       * @example invoice.pdf
       */
      name: string;
      /**
       * @description If the file is a PDF document, this property contains individual pages extracted from the file. Otherwise, an empty array.
       * @default []
       */
      pages?: components['schemas']['package__entities__unversioned__schemas__file_saver__PageSchema'][];
      /**
       * @description Preview images generated for this file. There can be multiple images with different sizes.
       * @default []
       */
      previews?: components['schemas']['package__entities__unversioned__schemas__file_saver__PreviewSchema'][];
      /**
       * @description Geographical region of the data center where the file is stored.
       * @example eu-central-1
       */
      region: string;
      /**
       * @description The file size in bytes.
       * @example 24381
       */
      size: number;
      /**
       * @description The URL to download the file.
       * @example https://bucketname.s3.amazonaws.com/12345/67890.pdf
       */
      url: string;
    };
    /**
     * @description When a PDF document is uploaded to Monite, it extracts individual pages from the document
     * and saves them as PNG images. This object contains the image and metadata of a single page.
     */
    package__entities__unversioned__schemas__file_saver__PageSchema: {
      /**
       * Format: uuid
       * @description A unique ID of the image.
       */
      id: string;
      /**
       * @description The [media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the image.
       * @example image/png
       */
      mimetype: string;
      /**
       * @description The page number in the PDF document, from 0.
       * @example 0
       */
      number: number;
      /**
       * @description Image file size, in bytes.
       * @example 21972
       */
      size: number;
      /**
       * @description The URL to download the image.
       * @example https://bucket.s3.amazonaws.com/123/456.png
       */
      url: string;
    };
    /** @description A preview image generated for a file. */
    package__entities__unversioned__schemas__file_saver__PreviewSchema: {
      /**
       * @description The image height in pixels.
       * @example 400
       */
      height: number;
      /**
       * @description The image URL.
       * @example https://bucketname.s3.amazonaws.com/1/2/3.png
       */
      url: string;
      /**
       * @description The image width in pixels.
       * @example 200
       */
      width: number;
    };
    package__entities__v2023_09_01__schemas__entity_onboarding_data__OwnershipDeclaration: {
      /**
       * Format: date-time
       * @description The date and time (in the ISO 8601 format) when the beneficial owner attestation was made.
       */
      date?: string;
      /**
       * @description The IP address from which the beneficial owner attestation was made. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.
       * @example 203.0.113.24
       */
      ip?: string;
    };
    package__entities__v2023_09_01__schemas__entity_onboarding_data__TermsOfServiceAcceptance: {
      /**
       * Format: date-time
       * @description The date and time (in the ISO 8601 format) when the entity representative accepted the service agreement.
       */
      date?: string;
      /**
       * @description The IP address from which the entity representative accepted the service agreement. If omitted or set to `null` in the request, the IP address is inferred from the request origin or the `X-Forwarded-For` request header.
       * @example 203.0.113.24
       */
      ip?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get accounting connections
   * @description Get all connections
   */
  get_accounting_connections: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccountingConnectionList'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Connect to an accounting system
   * @description Create new connection
   */
  post_accounting_connections: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountingConnectionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['AccountingConnectionResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an accounting connection by ID
   * @description Get connection by id
   */
  get_accounting_connections_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        connection_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccountingConnectionResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Disconnect from an accounting system
   * @description Disconnect
   */
  post_accounting_connections_id_disconnect: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        connection_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccountingConnectionResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get accounting sync rules */
  get_accounting_sync_rules: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccountingSyncRulesBody'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update accounting sync rules */
  patch_accounting_sync_rules: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountingSyncRulesBody'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccountingSyncRulesBody'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get approval policies
   * @description Retrieve a list of all approval policies with pagination.
   */
  get_approval_policies: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['ApprovalPolicyCursorFields'];
        id__in?: string[];
        status?: components['schemas']['ApprovalPolicyStatus'];
        status__in?: components['schemas']['ApprovalPolicyStatus'][];
        name?: string;
        name__contains?: string;
        name__ncontains?: string;
        created_by?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        updated_at__gt?: string;
        updated_at__lt?: string;
        updated_at__gte?: string;
        updated_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalPolicyResourceList'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create an approval policy
   * @description Create a new approval policy.
   */
  post_approval_policies: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApprovalPolicyCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ApprovalPolicyResource'];
        };
      };
      /** @description Possible responses: `Script validation error: {errors}.` */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an approval policy by ID
   * @description Retrieve a specific approval policy.
   */
  get_approval_policies_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalPolicyResource'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete an approval policy
   * @description Delete an existing approval policy.
   */
  delete_approval_policies_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update an approval policy
   * @description Update an existing approval policy.
   */
  patch_approval_policies_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApprovalPolicyUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalPolicyResource'];
        };
      };
      /** @description Possible responses: `Script validation error: {errors}.` */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get approval processes created from a policy
   * @description Retrieve a list of all approval policy processes.
   */
  get_approval_policies_id_processes: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalProcessResourceList'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an approval process by ID
   * @description Retrieve a specific approval policy process.
   */
  get_approval_policies_id_processes_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
        process_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessResource'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.` */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Cancel an approval process
   * @description Cancel an ongoing approval process for a specific approval policy.
   */
  post_approval_policies_id_processes_id_cancel: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
        process_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProcessResource'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.` */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action is not allowed for approval policy process with id {id} because it is not in one of the following statuses: {possible_statuses}` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get the steps of an approval process
   * @description Retrieve a list of approval policy process steps.
   */
  get_approval_policies_id_processes_id_steps: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_policy_id: string;
        process_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalProcessStepResourceList'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Approval policy with ID {id} not found.`, `Approval policy process with ID {id} not found.` */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get approval requests */
  get_approval_requests: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['ApprovalRequestCursorFields'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        updated_at__gt?: string;
        updated_at__lt?: string;
        updated_at__gte?: string;
        updated_at__lte?: string;
        object_id?: string;
        object_id__in?: string[];
        status?: components['schemas']['ApprovalRequestStatus'];
        status__in?: components['schemas']['ApprovalRequestStatus'][];
        user_id?: string;
        role_id?: string;
        object_type?: components['schemas']['ObjectType'];
        object_type__in?: components['schemas']['ObjectType'][];
        created_by?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalRequestResourceList'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create an approval request */
  post_approval_requests: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ApprovalRequestCreateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ApprovalRequestResourceWithMetadata'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get an approval request by ID */
  get_approval_requests_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_request_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalRequestResourceWithMetadata'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Approve an approval request */
  post_approval_requests_id_approve: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_request_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalRequestResourceWithMetadata'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Cancel an approval request */
  post_approval_requests_id_cancel: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_request_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalRequestResourceWithMetadata'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Reject an approval request */
  post_approval_requests_id_reject: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        approval_request_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ApprovalRequestResourceWithMetadata'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get the audit log */
  get_audit_logs: {
    parameters: {
      query?: {
        pagination_token?: string;
        entity_user_id?: string;
        path__contains?: string;
        type?: components['schemas']['LogTypeEnum'];
        method?: components['schemas']['LogMethodEnum'];
        status_code?: number;
        timestamp__gt?: string;
        timestamp__lt?: string;
        timestamp__gte?: string;
        timestamp__lte?: string;
        page_size?: number;
        page_num?: number;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        'x-monite-entity-id'?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LogsResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get an audit log entry */
  get_audit_logs_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        'x-monite-entity-id'?: string;
      };
      path: {
        log_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LogResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Revoke a token
   * @description Revoke an existing token immediately.
   */
  post_auth_revoke: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeTokenPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create a token
   * @description Create a new access token based on client ID and client secret.
   */
  post_auth_token: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ObtainTokenPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccessTokenResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an entity's bank accounts
   * @description Get all bank accounts of this entity.
   */
  get_bank_accounts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityBankAccountPaginationResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create an entity bank account
   * @description Add a new bank account for the specified entity.
   *
   * The minimum required fields are `currency` and `country`. Other required fields depend on the currency:
   *
   * * EUR accounts require `iban`.
   * * GBP accounts require `account_holder_name`, `account_number`, and `sort_code`.
   * * USD accounts require `account_holder_name`, `account_number`, and `routing_number`.
   * * Accounts in other currencies require one of:
   *   * `iban`
   *   * `account_number` and `sort_code`
   *   * `account_number` and `routing_number`
   */
  post_bank_accounts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEntityBankAccountRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['EntityBankAccountResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Complete entity bank account verification */
  post_bank_accounts_complete_verification: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteVerificationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CompleteVerificationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Start entity bank account verification
   * @description Start entity bank account verification. The flow depends on verification type.
   * For airwallex_plaid it generates Plaid Link token to init the Plaid SDK.
   */
  post_bank_accounts_start_verification: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['VerificationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['VerificationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an entity's bank account
   * @description Retrieve a bank account by its ID.
   */
  get_bank_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityBankAccountResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete an entity's bank account
   * @description Delete the bank account specified by its ID.
   */
  delete_bank_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update an entity's bank account
   * @description Change the specified fields with the provided values.
   */
  patch_bank_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEntityBankAccountRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityBankAccountResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Complete verification of the provided entity bank account */
  post_bank_accounts_id_complete_verification: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteRefreshVerificationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CompleteRefreshVerificationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Set an entity's bank account as the default for its currency
   * @description Set a bank account as the default for this entity per currency.
   */
  post_bank_accounts_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityBankAccountResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Refresh verification of the provided entity bank account */
  post_bank_accounts_id_refresh_verification: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['VerificationRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['VerificationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a bank account verifications */
  get_bank_accounts_id_verifications: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['BankAccountVerifications'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a batch payment */
  post_batch_payments: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentsBatchPaymentRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentsBatchPaymentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get batch payment by ID */
  get_batch_payments_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        batch_payment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentsBatchPaymentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get comments
   * @description Get comments
   */
  get_comments: {
    parameters: {
      query: {
        object_type: components['schemas']['ObjectTypeAvailableComment'];
        object_id: string;
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['CommentCursorFields'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CommentResourceList'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create a comment
   * @description Create new comment
   */
  post_comments: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentCreateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['CommentResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Could not notify groups: {not_valid_recipients}. Recipients dont exists`, `groups with ids: {','.join(missed_ids)} dont exists`, `Could not notify groups: {missed_groups}. Only {available_groups} are available`, `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a comment by ID
   * @description Get comment
   */
  get_comments_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        comment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CommentResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete a comment
   * @description Delete comment
   */
  delete_comments_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        comment_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update a comment
   * @description Update comment
   */
  patch_comments_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        comment_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CommentUpdateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CommentResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action {action} for {object_type} not allowed`, `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}``{operation}: status has not changed` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get all counterparts */
  get_counterparts: {
    parameters: {
      query?: {
        /** @description The IBAN of the counterpart's bank account. */
        iban?: string;
        /**
         * @description The bank's sort code.
         * @example 123456
         */
        sort_code?: string;
        /** @description The bank account number. Required for US bank accounts to accept ACH payments. US account numbers contain 9 to 12 digits. UK account numbers typically contain 8 digits. */
        account_number?: string;
        /** @description The tax ID of the counterpart. */
        tax_id?: string;
        /** @description A list of counterpart IDs to search through. */
        id__in?: string[];
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['CounterpartCursorFields'];
        type?: components['schemas']['CounterpartType'];
        counterpart_name?: string;
        counterpart_name__iexact?: string;
        counterpart_name__contains?: string;
        counterpart_name__icontains?: string;
        is_vendor?: boolean;
        is_customer?: boolean;
        email?: string;
        email__contains?: string;
        email__icontains?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        'address.country'?: string;
        'address.city'?: string;
        'address.postal_code'?: string;
        'address.state'?: string;
        'address.line1'?: string;
        'address.line2'?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartPaginationResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a counterpart */
  post_counterparts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CounterpartCreatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['CounterpartResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart */
  get_counterparts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a counterpart */
  delete_counterparts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a counterpart */
  patch_counterparts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CounterpartUpdatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's addresses */
  get_counterparts_id_addresses: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartAddressResourceList'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a counterpart address */
  post_counterparts_id_addresses: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CounterpartAddress'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['CounterpartAddressResponseWithCounterpartID'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's address */
  get_counterparts_id_addresses_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        address_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartAddressResponseWithCounterpartID'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a counterpart's address */
  delete_counterparts_id_addresses_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        address_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a counterpart's address */
  patch_counterparts_id_addresses_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        address_id: string;
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CounterpartUpdateAddress'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartAddressResponseWithCounterpartID'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Set a counterpart's default address */
  post_counterparts_id_addresses_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        address_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartAddressResponseWithCounterpartID'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's bank accounts */
  get_counterparts_id_bank_accounts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartBankAccountResourceList'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a counterpart bank account */
  post_counterparts_id_bank_accounts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCounterpartBankAccount'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartBankAccountResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's bank account */
  get_counterparts_id_bank_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartBankAccountResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a counterpart's bank account */
  delete_counterparts_id_bank_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a counterpart's bank account */
  patch_counterparts_id_bank_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCounterpartBankAccount'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartBankAccountResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Set a counterpart's bank account as default for its currency */
  post_counterparts_id_bank_accounts_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        bank_account_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': unknown;
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's contacts */
  get_counterparts_id_contacts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartContactsResourceList'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a counterpart contact */
  post_counterparts_id_contacts: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCounterpartContactPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartContactResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's contact */
  get_counterparts_id_contacts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        contact_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartContactResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a counterpart's contact */
  delete_counterparts_id_contacts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        contact_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a counterpart's contact */
  patch_counterparts_id_contacts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        contact_id: string;
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCounterpartContactPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartContactResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Set a counterpart's default contact */
  post_counterparts_id_contacts_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        contact_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartContactResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get counterpart metadata */
  get_counterparts_id_partner_metadata: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PartnerMetadataResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Replace counterpart metadata */
  put_counterparts_id_partner_metadata: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartnerMetadata'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PartnerMetadataResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's VAT IDs */
  get_counterparts_id_vat_ids: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartVatIDResourceList'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a counterpart VAT ID */
  post_counterparts_id_vat_ids: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CounterpartVatID'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['CounterpartVatIDResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a counterpart's VAT ID */
  get_counterparts_id_vat_ids_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        vat_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartVatIDResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a counterpart's VAT ID */
  delete_counterparts_id_vat_ids_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        vat_id: string;
        counterpart_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a counterpart's VAT ID */
  patch_counterparts_id_vat_ids_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        vat_id: string;
        counterpart_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CounterpartUpdateVatID'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CounterpartVatIDResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get All */
  get_data_exports: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['DataExportCursorFields'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        created_by_entity_user_id?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AllDocumentExportResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Add Document Export */
  post_data_exports: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExportPayloadSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CreateExportTaskResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Not all statuses are available: {missed_statuses}. Available ones: {object_statuses},`{missed_objects} are not allowed. Available only {objects}` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get All */
  get_data_exports_extra_data: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['ExportSettingCursorFields'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        updated_at__gt?: string;
        updated_at__lt?: string;
        updated_at__gte?: string;
        updated_at__lte?: string;
        object_id?: string;
        field_name?: string;
        field_value?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExtraDataResourceList'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create Extra Data */
  post_data_exports_extra_data: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExtraDataCreateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ExtraDataResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get Extra Data By Id */
  get_data_exports_extra_data_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        extra_data_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExtraDataResource'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete Extra Data */
  delete_data_exports_extra_data_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        extra_data_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExtraDataResource'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update Extra Data */
  patch_data_exports_extra_data_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        extra_data_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ExtraDataUpdateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ExtraDataResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get Supported Export Formats */
  get_data_exports_supported_formats: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SupportedFormatSchema'][];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get Document Export By Id */
  get_data_exports_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        document_export_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DocumentExportResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get PDF templates
   * @description This API call returns all supported templates with language codes.
   */
  get_document_templates: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TemplateListResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get built-in PDF templates
   * @description This API call returns all supported system templates with language codes.
   */
  get_document_templates_system: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TemplateListResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a PDF template by ID */
  get_document_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        document_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TemplateReceivableResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Set the default PDF template */
  post_document_templates_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        document_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TemplateReceivableResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Preview a PDF template
   * @description Returns a sample PDF invoice generated using the specified template.
   */
  get_document_templates_id_preview: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        document_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/pdf': unknown;
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get all entities
   * @description Retrieve a list of all entities.
   */
  get_entities: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['EntityCursorFields'];
        type?: components['schemas']['EntityTypeEnum'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        id__in?: string[];
        id__not_in?: string[];
        email?: string;
        email__in?: string[];
        email__not_in?: string[];
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityPaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create an entity
   * @description Create a new entity from the specified values.
   */
  post_entities: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEntityRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get the current entity
   * @deprecated
   * @description Deprecated. Use `GET /entity_users/my_entity` instead.
   */
  get_entities_me: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update the current entity
   * @deprecated
   * @description Deprecated. Use `PATCH /entity_users/my_entity` instead.
   */
  patch_entities_me: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEntityRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an entity
   * @description Retrieve an entity by its ID.
   */
  get_entities_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        /**
         * @description A unique ID to specify the entity.
         * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
         */
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update an entity
   * @description Change the specified fields with the provided values.
   */
  patch_entities_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        /**
         * @description A unique ID to specify the entity.
         * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
         */
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEntityRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update entity onboarding documents
   * @description Update the onboarding documents of an entity.
   */
  post_entities_id_documents: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['EntityOnboardingDocuments'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Upload an entity logo
   * @description Entity logo can be PNG, JPG, or GIF, up to 10 MB in size. The logo is used, for example, in PDF documents created by this entity.
   */
  put_entities_id_logo: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        /**
         * @description A unique ID to specify the entity.
         * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
         */
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['EntityLogoUploadRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['monite__schemas__file_saver__FileSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete an entity's logo */
  delete_entities_id_logo: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        /**
         * @description A unique ID to specify the entity.
         * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
         */
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get entity onboarding data */
  get_entities_id_onboarding_data: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['InternalEntityOnboardingDataResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update entity onboarding data */
  put_entities_id_onboarding_data: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EntityOnboardingDataRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['InternalEntityOnboardingDataResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Patch entity onboarding data */
  patch_entities_id_onboarding_data: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EntityOnboardingDataRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['InternalEntityOnboardingDataResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get onboarding requirements
   * @description Check the information required to complete the onboarding process.
   */
  get_entities_id_onboarding_requirements: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OnboardingRequirementsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get entity metadata
   * @description Retrieve a metadata object associated with this entity, usually in a JSON format.
   */
  get_entities_id_partner_metadata: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PartnerMetadataResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Replace entity metadata
   * @description Fully replace the current metadata object with the specified instance.
   */
  put_entities_id_partner_metadata: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartnerMetadata'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PartnerMetadataResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get Enabled Payment Methods
   * @description Get all enabled payment methods.
   */
  get_entities_id_payment_methods: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OnboardingPaymentMethodsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Enable Payment Methods
   * @description Set which payment methods should be enabled.
   */
  put_entities_id_payment_methods: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EnabledPaymentMethods'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OnboardingPaymentMethodsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get entity settings
   * @description Retrieve all settings for this entity.
   */
  get_entities_id_settings: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        /**
         * @description A unique ID to specify the entity.
         * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
         */
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MergedSettingsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update entity settings
   * @description Change the specified fields with the provided values.
   */
  patch_entities_id_settings: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        /**
         * @description A unique ID to specify the entity.
         * @example ea837e28-509b-4b6a-a600-d54b6aa0b1f5
         */
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchSettingsPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MergedSettingsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get an entity's VAT IDs */
  get_entities_id_vat_ids: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityVatIDResourceList'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create an entity VAT ID */
  post_entities_id_vat_ids: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EntityVatID'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['EntityVatIDResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get an entity's VAT ID */
  get_entities_id_vat_ids_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        id: string;
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityVatIDResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete an entity's VAT ID */
  delete_entities_id_vat_ids_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        id: string;
        entity_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update an entity's VAT ID */
  patch_entities_id_vat_ids_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        id: string;
        entity_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EntityUpdateVatID'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityVatIDResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get all entity users
   * @description Retrieve a list of all entity users.
   */
  get_entity_users: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['EntityUserCursorFields'];
        id__in?: string[];
        id__not_in?: string[];
        role_id?: string;
        role_id__in?: string[];
        login?: string;
        status?: string;
        first_name?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityUserPaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create an entity user
   * @description Create a new entity user from the specified values.
   */
  post_entity_users: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEntityUserRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityUserResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get current entity user
   * @description Retrieve an entity user by its ID.
   */
  get_entity_users_me: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityUserResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update current entity user
   * @description Change the specified fields with provided values.
   */
  patch_entity_users_me: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMeEntityUserRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityUserResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an entity of this user
   * @description Retrieves information of an entity, which this entity user belongs to.
   */
  get_entity_users_my_entity: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update an entity of this user
   * @description Update information of an entity, which this entity user belongs to.
   */
  patch_entity_users_my_entity: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEntityRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a role of this entity user
   * @description Retrieves information of a role assigned to this entity user.
   */
  get_entity_users_my_role: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoleResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get an entity user
   * @description Retrieve an entity user by its ID.
   */
  get_entity_users_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        entity_user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityUserResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update an entity user
   * @description Change the specified fields with provided values.
   */
  patch_entity_users_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        entity_user_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEntityUserRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EntityUserResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get
   * @description Get events for a given entity.
   */
  get_events: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['EventCursorFields'];
        object_type?: components['schemas']['WebhookObjectType'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EventPaginationResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get By Id
   * @description Get event by ID.
   */
  get_events_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        event_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['EventResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get files */
  get_files: {
    parameters: {
      query: {
        id__in: string[];
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FilesResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Upload a file */
  post_files: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['Body_post_files'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['FileResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a file by ID */
  get_files_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        file_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['FileResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a file */
  delete_files_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        file_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get ledger accounts
   * @description Get all ledger accounts
   */
  get_ledger_accounts: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['LedgerAccountCursorFields'];
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LedgerAccountListResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a ledger account by ID
   * @description Get ledger account by id
   */
  get_ledger_accounts_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        ledger_account_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LedgerAccountResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get All With Filters
   * @description Get all custom templates
   */
  get_mail_templates: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['CustomTemplatesCursorFields'];
        type?: components['schemas']['DocumentObjectTypeRequestEnum'];
        type__in?: components['schemas']['DocumentObjectTypeRequestEnum'][];
        type__not_in?: components['schemas']['DocumentObjectTypeRequestEnum'][];
        is_default?: boolean;
        name?: string;
        name__iexact?: string;
        name__contains?: string;
        name__icontains?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CustomTemplatesPaginationResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create
   * @description Create custom template
   */
  post_mail_templates: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddCustomTemplateSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CustomTemplateDataSchema'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Preview
   * @description Preview rendered template
   */
  post_mail_templates_preview: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PreviewTemplateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PreviewTemplateResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get All System Templates
   * @description Get all system templates
   */
  get_mail_templates_system: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SystemTemplates'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get
   * @description Get custom template by ID
   */
  get_mail_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CustomTemplateDataSchema'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete
   * @description Delete custom template bt ID
   */
  delete_mail_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update
   * @description Update custom template by ID
   */
  patch_mail_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        template_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCustomTemplateSchemaRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CustomTemplateDataSchema'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Make Default
   * @description Make template default
   */
  post_mail_templates_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CustomTemplateDataSchema'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get Domains
   * @description Get all domains owned by partner_id
   */
  get_mailbox_domains: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DomainListResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create Domain
   * @description Create domain for the partner_id
   */
  post_mailbox_domains: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DomainRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['DomainResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete Domain
   * @description Delete domain for the partner_id
   */
  delete_mailbox_domains_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        domain_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Verify Domain
   * @description Verify domain for the partner_id
   */
  post_mailbox_domains_id_verify: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        domain_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['VerifyResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get Mailboxes
   * @description Get all mailboxes owned by Entity
   */
  get_mailboxes: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MailboxDataResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create Mailbox
   * @description Create a new mailbox
   */
  post_mailboxes: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MailboxDomainRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MailboxResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get Mailboxes By Multiple Entity Ids
   * @description Get all mailboxes owned by Entity
   */
  post_mailboxes_search: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MailboxMultipleEntitiesRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MailboxDataResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete Mailbox
   * @description Delete mailbox
   */
  delete_mailboxes_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        mailbox_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get measure units */
  get_measure_units: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UnitListResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a measure unit */
  post_measure_units: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UnitRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['UnitResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a measure unit by ID */
  get_measure_units_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        unit_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UnitResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a measure unit */
  delete_measure_units_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        unit_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a measure unit */
  patch_measure_units_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        unit_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UnitUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UnitResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Provide files for entity onboarding verification
   * @description Provide files for entity onboarding verification
   */
  post_onboarding_documents: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EntityOnboardingDocumentsPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create Onboarding Link */
  post_onboarding_links: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OnboardingLinkRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OnboardingLinkPublicResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get onboarding requirements
   * @description Get onboarding requirements for the entity
   */
  get_onboarding_requirements: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetOnboardingRequirementsResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get overdue reminder configurations */
  get_overdue_reminders: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AllOverdueRemindersResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create an overdue reminder configuration */
  post_overdue_reminders: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OverdueReminderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['OverdueReminderResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get an overdue reminder configuration by ID */
  get_overdue_reminders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        overdue_reminder_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OverdueReminderResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete an overdue reminder configuration */
  delete_overdue_reminders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        overdue_reminder_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update an overdue reminder configuration */
  patch_overdue_reminders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        overdue_reminder_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OverdueReminderRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OverdueReminderResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get purchase orders */
  get_payable_purchase_orders: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['PurchaseOrderCursorFields'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        updated_at__gt?: string;
        updated_at__lt?: string;
        updated_at__gte?: string;
        updated_at__lte?: string;
        issued_at__gt?: string;
        issued_at__lt?: string;
        issued_at__gte?: string;
        issued_at__lte?: string;
        status?: components['schemas']['PurchaseOrderStatusEnum'];
        document_id?: string;
        document_id__in?: string[];
        created_by?: string;
        counterpart_id?: string;
        counterpart_id__in?: string[];
        'counterpart.name'?: string;
        currency?: components['schemas']['CurrencyEnum'];
        currency__in?: components['schemas']['CurrencyEnum'][];
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PurchaseOrderPaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a purchase order */
  post_payable_purchase_orders: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PurchaseOrderPayloadSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PurchaseOrderResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get the available variables for purchase orders
   * @description Get a list of placeholders allowed to insert into an email template for customization
   */
  get_payable_purchase_orders_variables: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['VariablesObjectList'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a purchase order by ID */
  get_payable_purchase_orders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        purchase_order_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PurchaseOrderResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a purchase order */
  delete_payable_purchase_orders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        purchase_order_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a purchase order */
  patch_payable_purchase_orders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        purchase_order_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePurchaseOrderPayloadSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PurchaseOrderResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Preview a purchase order's email message */
  post_payable_purchase_orders_id_preview: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        purchase_order_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PurchaseOrderEmailPreviewRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PurchaseOrderEmailPreviewResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Send a purchase order via email */
  post_payable_purchase_orders_id_send: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        purchase_order_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendPurchaseOrderViaEmailRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PurchaseOrderEmailSentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get payables
   * @description Lists all payables from the connected entity.
   *
   * If you already have the data of the payable (amount in [minor units](
   * https://docs.monite.com/docs/currencies#minor-units), currency, vendor information, and other details)
   * stored somewhere as individual attributes, you can create a payable with these attributes by calling [POST
   * /payables](https://docs.monite.com/reference/post_payables) and providing the [base64-encoded](
   * https://en.wikipedia.org/wiki/Base64) contents of the original invoice file in the field `base64_encoded_file`.
   *
   * A payable is a financial document given by an entity`s supplier itemizing the purchase of a good or a service and
   * demanding payment.
   *
   * The `file_name` field is optional. If omitted, it defaults to “default_file_name”. If the settings are configured
   * to automatically set `suggested_payment_term`, this object can be omitted from the request body.
   *
   * The `id` generated for this payable can be used in other API calls to update the data of this payable or trigger [
   * status transitions](https://docs.monite.com/docs/payable-status-transitions), for example. essential data
   * fields to move from `draft` to `new`
   *
   * Related guide: [Create a payable from data](https://docs.monite.com/docs/collect-payables#create-a-payable-from-data)
   *
   * See also:
   *
   *
   * [Automatic calculation of due date](https://docs.monite.com/docs/collect-payables#automatic-calculation-of-due-date)
   *
   * [Suggested payment date](https://docs.monite.com/docs/collect-payables#suggested-payment-date)
   *
   * [Attach file](https://docs.monite.com/docs/collect-payables#attach-file)
   *
   * [Collect payables by email](https://docs.monite.com/docs/collect-payables#send-payables-by-email)
   *
   * [Manage line items](https://docs.monite.com/docs/manage-line-items)
   */
  get_payables: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['PayableCursorFields'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        status?: components['schemas']['PayableStateEnum'];
        status__in?: components['schemas']['PayableStateEnum'][];
        id__in?: string[];
        total_amount?: number;
        total_amount__gt?: number;
        total_amount__lt?: number;
        total_amount__gte?: number;
        total_amount__lte?: number;
        amount?: number;
        amount__gt?: number;
        amount__lt?: number;
        amount__gte?: number;
        amount__lte?: number;
        currency?: components['schemas']['CurrencyEnum'];
        counterpart_name?: string;
        due_date?: string;
        due_date__gt?: string;
        due_date__lt?: string;
        due_date__gte?: string;
        due_date__lte?: string;
        document_id?: string;
        was_created_by_user_id?: string;
        counterpart_id?: string;
        source_of_payable_data?: components['schemas']['SourceOfPayableDataEnum'];
        ocr_status?: components['schemas']['OcrStatusEnum'];
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayablePaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create a payable
   * @description Add a new payable by providing the amount, currency, vendor name, and other details.
   * You can provide the base64_encoded contents of the original invoice file in the field `base64_encoded_file`.
   *
   * You can use this endpoint to bypass the Monite OCR service and provide the data directly
   * (for example, if you already have the data in place).
   *
   * A newly created payable has the the `draft` [status](https://docs.monite.com/docs/payables-lifecycle).
   */
  post_payables: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PayableUploadWithDataSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Upload a payable from a file
   * @description Upload an incoming invoice (payable) in PDF, PNG, JPEG, or TIFF format and scan its contents. The maximum file size is 10MB.
   */
  post_payables_upload_from_file: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreatePayableFromFileRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get payables validations
   * @description Get payable validations.
   */
  get_payables_validations: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableValidationsResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update payables validations
   * @description Update payable validations.
   */
  put_payables_validations: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PayableValidationsUpdateRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableValidationsResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Reset payables validations
   * @description Reset payable validations to default ones.
   */
  post_payables_validations_reset: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableValidationsResource'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get the available variables for payable email templates
   * @description Get a list of placeholders allowed to insert into an email template for customization
   */
  get_payables_variables: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableTemplatesVariablesObjectList'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a payable by ID
   * @description Retrieves information about a specific payable with the given ID.
   */
  get_payables_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update a payable
   * @description Updates the information about a specific payable.
   */
  patch_payables_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PayableUpdateSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Approve a payable for payment
   * @description Confirms that the payable is ready to be paid.
   */
  post_payables_id_approve_payment_operation: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Attach a file to a payable
   * @description Attach file to payable without existing attachment.
   */
  post_payables_id_attach_file: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['AttachFileToPayableRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Cancel a payable
   * @description Cancels the payable that was not confirmed during the review.
   */
  post_payables_id_cancel: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get the line items of a payable
   * @description Get a list of all line items related to a specific payable.
   * Related guide: [List all payable line items](https://docs.monite.com/docs/manage-line-items#list-all-line-items-of-a-payable)
   *
   * See also:
   *
   * [Manage line items](https://docs.monite.com/docs/manage-line-items)
   *
   * [Collect payables](https://docs.monite.com/docs/collect-payables)
   */
  get_payables_id_line_items: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['LineItemCursorFields'];
        was_created_by_user_id?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LineItemPaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Add a line item to a payable
   * @description Add a new line item to a specific payable.
   *
   * The `subtotal` and `total` fields of line items are automatically calculated based on the `unit_price`,
   *  `quantity`, and `tax` fields, therefore, are read-only and appear only in the response schema. The field
   *   `ledger_account_id` is required **only** for account integration, otherwise, it is optional.
   *
   * Related guide: [Add line items to a payable](https://docs.monite.com/docs/manage-line-items#add-line-items-to-a-payable)
   *
   * See also:
   *
   * [Manage line items](https://docs.monite.com/docs/manage-line-items)
   *
   * [Collect payables](https://docs.monite.com/docs/collect-payables)
   */
  post_payables_id_line_items: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LineItemRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['LineItemResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a single line item of a payable
   * @description Get information about a specific line item with a given ID.
   *
   * Related guide: [Retrieve a line item](https://docs.monite.com/docs/manage-line-items#retrieve-a-line-item)
   *
   * See also:
   *
   * [Manage line items](https://docs.monite.com/docs/manage-line-items)
   *
   * [Collect payables](https://docs.monite.com/docs/collect-payables)
   */
  get_payables_id_line_items_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        line_item_id: string;
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LineItemResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete a line item from a payable
   * @description Delete the line item with the given ID.
   *
   * Related guide: [Remove a line item](https://docs.monite.com/docs/manage-line-items#remove-a-line-item)
   *
   * See also:
   *
   * [Manage line items](https://docs.monite.com/docs/manage-line-items)
   *
   * [Collect payables](https://docs.monite.com/docs/collect-payables)
   */
  delete_payables_id_line_items_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        line_item_id: string;
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update a line item in a payable
   * @description Edits the information of a specific line item.
   *
   * Related guide: [Update a line item](https://docs.monite.com/docs/manage-line-items#update-a-line-item)
   *
   * See also:
   *
   * [Manage line items](https://docs.monite.com/docs/manage-line-items)
   *
   * [Collect payables](https://docs.monite.com/docs/collect-payables)
   */
  patch_payables_id_line_items_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        line_item_id: string;
        payable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LineItemRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LineItemResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Mark a payable as paid
   * @description Mark a payable as paid.
   *
   * Payables can be paid using the payment channels offered by Monite or through external payment channels. In the latter
   *  case, the invoice is not automatically marked as paid in the system and needs to be converted to the paid status
   *  manually.
   *
   * Optionally, it is possible to pass the `comment` field in the request body, to describe how and when the invoice was
   * paid.
   *
   * To use this endpoint with an entity user token, this entity user must have a role that includes the `pay` permission for
   * payables.
   *
   * Related guide: [Mark a payable as paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-paid)
   *
   * See also:
   *
   * [Payables lifecycle](https://docs.monite.com/docs/payables-lifecycle)
   *
   * [Payables status transitions](https://docs.monite.com/docs/collect-payables#suggested-payment-date)
   */
  post_payables_id_mark_as_paid: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['CommentPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Mark a payable as partially paid
   * @description Mark a payable as partially paid.
   *
   * If the payable is partially paid, its status is moved to `partially_paid`. The value of the `amount_paid` field must be
   *   the sum of all payments made, not only the last one.
   *
   * Notes:
   * - This endpoint can be used for payables in the `waiting_to_be_paid` status.
   * - The `amount_paid` must be greater than 0 and less than the total payable amount specified by the `amount` field.
   * - The `amount_paid` can be either increased or decreased to reflect reversed payments and chargebacks.
   * - You can use this endpoint multiple times for the same payable to reflect multiple partial payments, always setting the
   *  sum of all payments made.
   * - To use this endpoint with an entity user token, this entity user must have a role that includes the `pay`
   * permission for payables.
   *
   * Related guide: [Mark a payable as partially paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-partially-paid)
   *
   * See also:
   *
   * [Payables lifecycle](https://docs.monite.com/docs/payables-lifecycle)
   *
   * [Payables status transitions](https://docs.monite.com/docs/collect-payables#suggested-payment-date)
   *
   * [Mark a payable as paid](https://docs.monite.com/docs/payable-status-transitions#mark-as-paid)
   */
  post_payables_id_mark_as_partially_paid: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartiallyPaidPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Reject a payable
   * @description Declines the payable when an approver finds any mismatch or discrepancies.
   */
  post_payables_id_reject: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Reopen a rejected payable
   * @description Reset payable state from rejected to new.
   */
  post_payables_id_reopen: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Submit a payable for approval
   * @description Starts the approval process once the uploaded payable is validated.
   */
  post_payables_id_submit_for_approval: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableResponseSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Validate a payable
   * @description Check the invoice for compliance with the requirements for movement from draft to new status.
   */
  post_payables_id_validate: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PayableValidationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`, `Object type at permissions not found: {object_type}`, `Action {action} for {object_type} not allowed`, `Payable couldn't be updated due to current state`, `The file cannot be attached because another file is already attached. Please note that only one file attachment is allowed.` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get payment intent by ID */
  get_payment_intents_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        payment_intent_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentIntentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update the payment intent amount */
  patch_payment_intents_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        payment_intent_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePaymentIntentPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentIntentResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get the payment intent history */
  get_payment_intents_id_history: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        payment_intent_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentIntentHistoryResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a payment link */
  post_payment_links: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePaymentLinkRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PublicPaymentLinkResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get payment link by ID */
  get_payment_links_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        payment_link_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PublicPaymentLinkResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Expire a payment link */
  post_payment_links_id_expire: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        payment_link_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PublicPaymentLinkResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create an onboarding link */
  post_payment_onboarding_links: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOnboardingLinkRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['OnboardingLinkResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get payment records */
  get_payment_records: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['PaymentRecordCursorFields'];
        is_external?: boolean;
        object_id?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentRecordResponseList'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a payment record */
  post_payment_records: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentRecordRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PaymentRecordResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a payment record */
  get_payment_records_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        payment_record_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentRecordResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get payment reminder configurations */
  get_payment_reminders: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetAllPaymentReminders'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a payment reminder configuration */
  post_payment_reminders: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentReminder'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PaymentReminderResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a payment reminder configuration by ID */
  get_payment_reminders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payment_reminder_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentReminderResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a payment reminder configuration */
  delete_payment_reminders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payment_reminder_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a payment reminder configuration */
  patch_payment_reminders_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payment_reminder_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentReminder'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentReminderResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get payment terms */
  get_payment_terms: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentTermsListResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a payment term */
  post_payment_terms: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentTermsCreatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['PaymentTermsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a payment term by ID */
  get_payment_terms_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payment_terms_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentTermsResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a payment term */
  delete_payment_terms_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payment_terms_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a payment term */
  patch_payment_terms_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        payment_terms_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentTermsUpdatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PaymentTermsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get all persons */
  get_persons: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PersonsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a person */
  post_persons: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PersonResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a person */
  get_persons_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        person_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PersonResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a person */
  delete_persons_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        person_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a person */
  patch_persons_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        person_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OptionalPersonRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PersonResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update person onboarding documents
   * @description Update the onboarding documents of a person.
   */
  post_persons_id_documents: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /**
         * @description The ID of the entity that owns the requested resource.
         * @example 9d2b4c8f-2087-4738-ba91-7359683c49a4
         */
        'x-monite-entity-id': string;
      };
      path: {
        person_id: string;
      };
    };
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['PersonOnboardingDocuments'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Requested Range Not Satisfiable */
      416: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Provide files for person onboarding verification
   * @description Provide files for person onboarding verification
   */
  post_persons_id_onboarding_documents: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        person_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonOnboardingDocumentsPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get products */
  get_products: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['ProductCursorFields'];
        name?: string;
        name__contains?: string;
        name__icontains?: string;
        type?: components['schemas']['ProductServiceTypeEnum'];
        price?: number;
        price__gt?: number;
        price__lt?: number;
        price__gte?: number;
        price__lte?: number;
        currency?: components['schemas']['CurrencyEnum'];
        currency__in?: components['schemas']['CurrencyEnum'][];
        measure_unit_id?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProductServicePaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a product */
  post_products: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductServiceRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ProductServiceResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a product by ID */
  get_products_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        product_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProductServiceResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a product */
  delete_products_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        product_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a product */
  patch_products_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        product_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProductServiceUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ProductServiceResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get receivables */
  get_receivables: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['ReceivableCursorFields'];
        type?: components['schemas']['ReceivableType'];
        document_id?: string;
        document_id__contains?: string;
        document_id__icontains?: string;
        issue_date__gt?: string;
        issue_date__lt?: string;
        issue_date__gte?: string;
        issue_date__lte?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
        counterpart_name?: string;
        counterpart_name__contains?: string;
        counterpart_name__icontains?: string;
        amount?: number;
        amount__gt?: number;
        amount__lt?: number;
        amount__gte?: number;
        amount__lte?: number;
        status?: components['schemas']['ReceivablesStatusEnum'];
        status__in?: components['schemas']['ReceivablesStatusEnum'][];
        entity_user_id?: string;
        entity_user_id__in?: string[];
        based_on?: string;
        due_date__gt?: string;
        due_date__lt?: string;
        due_date__gte?: string;
        due_date__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivablePaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Possible responses: `Action for {object_type} at permissions not found: {action}`,`Object type at permissions not found: {object_type}`,`Action {action} for {object_type} not allowed` */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a receivable */
  post_receivables: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceivableFacadeCreatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get email template variables
   * @description Get a list of placeholders that can be used in email templates for customization.
   */
  get_receivables_variables: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableTemplatesVariablesObjectList'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a receivable by ID */
  get_receivables_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a receivable */
  delete_receivables_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a receivable */
  patch_receivables_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceivableUpdatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Accept a quote */
  post_receivables_id_accept: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SuccessResult'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Cancel an invoice */
  post_receivables_id_cancel: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Clone a receivable */
  post_receivables_id_clone: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Decline a quote */
  post_receivables_id_decline: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ReceivableDeclinePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SuccessResult'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Issue a receivable */
  post_receivables_id_issue: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update the line items of a receivable
   * @description Replace all line items of an existing invoice or quote with a new list of line items.
   */
  put_receivables_id_line_items: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLineItems'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['LineItemsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Mark an invoice as paid */
  post_receivables_id_mark_as_paid: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ReceivablePaidPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Mark an invoice as partially paid
   * @deprecated
   * @description Deprecated. Use `POST /payment_records` to record an invoice payment.
   */
  post_receivables_id_mark_as_partially_paid: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceivablePartiallyPaidPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Mark an invoice as uncollectible */
  post_receivables_id_mark_as_uncollectible: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ReceivableUncollectiblePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a link to the PDF version of a receivable */
  get_receivables_id_pdf_link: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableFileUrl'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Preview a receivable's email message */
  post_receivables_id_preview: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceivablePreviewRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['ReceivablePreviewResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Send a receivable via email */
  post_receivables_id_send: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceivableSendRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivableSendResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Send a test reminder */
  post_receivables_id_send_test_reminder: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceivableSendTestReminderPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceivablesSendResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Verify a receivable */
  post_receivables_id_verify: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        receivable_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MissingFields'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get recurrences */
  get_recurrences: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetAllRecurrences'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Create a recurrence */
  post_recurrences: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRecurrencePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Recurrence'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a recurrence by ID */
  get_recurrences_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        recurrence_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Recurrence'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a recurrence */
  patch_recurrences_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        recurrence_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRecurrencePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['Recurrence'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Cancel a recurrence */
  post_recurrences_id_cancel: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        recurrence_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Business logic error */
      409: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Search roles
   * @description Find all roles that match the search criteria.
   */
  get_roles: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['RoleCursorFields'];
        id__in?: string[];
        name?: string;
        created_at?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RolePaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create a role
   * @description Create a new role from the specified values.
   */
  post_roles: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoleResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a role by ID */
  get_roles_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        role_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoleResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update a role
   * @description Change the specified fields with the provided values.
   */
  patch_roles_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        role_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['RoleResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get partner settings
   * @description Retrieve all settings for this partner.
   */
  get_settings: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PartnerProjectSettingsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update partner settings
   * @description Change the specified fields with the provided values.
   */
  patch_settings: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartnerProjectSettingsPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PartnerProjectSettingsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get tags
   * @description Get a list of all tags that can be assigned to payables.
   *     Tags can be used, for example, as trigger conditions in payable approval policies.
   */
  get_tags: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['TagCursorFields'];
        created_by_entity_user_id?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TagsPaginationResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create a tag
   * @description Create a new tag for use in payables. The tag name must be unique.
   *     Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
   *
   *
   * The response returns an auto-generated ID assigned to this tag.
   * To assign this tag to a payable, send the tag ID in the `tag_ids` list when creating or updating a payable.
   */
  post_tags: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TagCreateOrUpdateSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['TagReadSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a tag by ID
   * @description Get information about a tag with the given ID.
   */
  get_tags_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        tag_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TagReadSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete a tag
   * @description Delete a tag with the given ID. This tag will be automatically deleted from all payables where it's used.
   */
  delete_tags_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        tag_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update a tag
   * @description Change the tag name. The new name must be unique among existing tags.
   *     Tag names are case-sensitive, that is `Marketing` and `marketing` are two different tags.
   */
  patch_tags_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        tag_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TagCreateOrUpdateSchema'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TagReadSchema'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not Acceptable */
      406: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get text templates
   * @description Get text templates
   */
  get_text_templates: {
    parameters: {
      query?: {
        type?: components['schemas']['TextTemplateType'];
        document_type?: components['schemas']['DocumentTypeEnum'];
        is_default?: boolean;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextTemplateResponseList'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Create a text template
   * @description Create a text template
   */
  post_text_templates: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTextTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          'application/json': components['schemas']['TextTemplateResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Get a text template by ID
   * @description Get all custom contents
   */
  get_text_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        text_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextTemplateResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Delete a text template
   * @description Delete custom content by ID
   */
  delete_text_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        /** @description UUID text_template ID */
        text_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Update a text template by ID
   * @description Update custom content by ID
   */
  patch_text_templates_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        /** @description UUID text_template ID */
        text_template_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTextTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextTemplateResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /**
   * Make a text template default
   * @description Make text template default
   */
  post_text_templates_id_make_default: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
      path: {
        /** @description UUID text_template ID */
        text_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TextTemplateResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get VAT rates */
  get_vat_rates: {
    parameters: {
      query?: {
        counterpart_id?: string;
        counterpart_vat_id_id?: string;
        entity_vat_id_id?: string;
        product_type?: components['schemas']['ProductServiceTypeEnum'];
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['VatRateListResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get webhook subscriptions */
  get_webhook_settings: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['WebhookSubscriptionCursorFields'];
        object_type?: components['schemas']['WebhookObjectType'];
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionPaginationResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Subscribe to a webhook */
  post_webhook_settings: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateWebhookSubscriptionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionResourceWithSecret'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get a webhook subscription */
  get_webhook_settings_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        webhook_subscription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Delete a webhook subscription */
  delete_webhook_settings_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        webhook_subscription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageResponse'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Update a webhook subscription */
  patch_webhook_settings_id: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        webhook_subscription_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateWebhookSubscriptionRequest'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Disable a webhook subscription */
  post_webhook_settings_id_disable: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        webhook_subscription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Enable a webhook subscription */
  post_webhook_settings_id_enable: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        webhook_subscription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Regenerate a webhook secret and return the new webhook subscription */
  post_webhook_settings_id_regenerate_secret: {
    parameters: {
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
      };
      path: {
        webhook_subscription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionResourceWithSecret'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
  /** Get aggregated webhook deliveries */
  get_webhooks: {
    parameters: {
      query?: {
        /** @description Order by */
        order?: components['schemas']['OrderEnum'];
        /** @description Max is 100 */
        limit?: number;
        /** @description A token, obtained from previous page. Prior over other filters */
        pagination_token?: string;
        /** @description Allowed sort fields */
        sort?: components['schemas']['WebhookDeliveryCursorFields'];
        event_id?: string;
        object_type?: components['schemas']['WebhookObjectType'];
        event_action?: string;
        created_at__gt?: string;
        created_at__lt?: string;
        created_at__gte?: string;
        created_at__lte?: string;
      };
      header: {
        /** @example 2023-09-01 */
        'x-monite-version': string;
        /** @description The ID of the entity that owns the requested resource. */
        'x-monite-entity-id': string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['WebhookDeliveryPaginationResource'];
        };
      };
      /** @description Method Not Allowed */
      405: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorSchemaResponse'];
        };
      };
    };
  };
}
